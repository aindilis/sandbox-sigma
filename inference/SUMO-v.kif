(contraryAttribute Above Below)

(contraryAttribute Dead Living)

(contraryAttribute Dry Damp)

(contraryAttribute Embryonic Larval)

(contraryAttribute False True)

(contraryAttribute Horizontal Vertical)

(contraryAttribute Likely Unlikely)

(contraryAttribute Male Female)

(contraryAttribute NakedPromise Contract)

(contraryAttribute NonFullyFormed FullyFormed)

(contraryAttribute North South East West)

(contraryAttribute Polychromatic Monochromatic)

(contraryAttribute Right Left)

(contraryAttribute Rigid Pliable)

(contraryAttribute Smooth Rough)

(contraryAttribute Solid Liquid Gas Plasma)

(contraryAttribute Unconscious Awake)

(contraryAttribute Unilluminated Illuminated)

(disjoint Article Book)

(disjoint AstronomicalBody GeographicArea)

(disjoint Attaching Detaching)

(disjoint AutonomicProcess IntentionalProcess)

(disjoint Bird Mammal)

(disjoint Canine Feline)

(disjoint Clothing StationaryArtifact)

(disjoint Collection SelfConnectedObject)

(disjoint ComplexNumber RealNumber)

(disjoint CorpuscularObject Substance)

(disjoint Damaging Repairing)

(disjoint Decoding Encoding)

(disjoint Fabric StationaryArtifact)

(disjoint FactualText FictionalText)

(disjoint GasMixture LiquidMixture)

(disjoint GeologicalProcess IntentionalProcess)

(disjoint Heating Cooling)

(disjoint LeavingAnOrganization JoiningAnOrganization)

(disjoint LinguisticExpression Icon)

(disjoint NonFloweringPlant FloweringPlant)

(disjoint NounPhrase VerbPhrase)

(disjoint ObjectAttitude PropositionalAttitude)

(disjoint OrganOrTissueProcess OrganismProcess)

(disjoint OrganicObject Artifact)

(disjoint ParamilitaryOrganization GovernmentOrganization)

(disjoint PathologicProcess PhysiologicProcess)

(disjoint Room Building)

(disjoint SaltWaterArea FreshWaterArea)

(disjoint Separating Combining)

(disjoint SexualReproduction AsexualReproduction)

(disjoint SolidAngleMeasure PlaneAngleMeasure)

(disjoint StreamWaterArea StaticWaterArea)

(disjoint SubjectiveAssessmentAttribute ObjectiveNorm)

(disjoint Uncovering Covering)

(disjoint WarmBloodedVertebrate ColdBloodedVertebrate)

(disjoint WeatherProcess IntentionalProcess)

(disjointDecomposition Abstract Quantity Attribute SetOrClass Relation Proposition)

(disjointDecomposition Arthropod Arachnid Myriapod Insect Crustacean)

(disjointDecomposition ColdBloodedVertebrate Amphibian Fish Reptile)

(disjointDecomposition Food Meat Beverage)

(disjointDecomposition Invertebrate Worm Mollusk Arthropod)

(disjointDecomposition Language AnimalLanguage HumanLanguage ComputerLanguage)

(disjointDecomposition Mammal AquaticMammal HoofedMammal Marsupial Rodent Primate)

(disjointDecomposition NonFloweringPlant Alga Fern Moss)

(disjointDecomposition Nutrient Protein Carbohydrate Vitamin)

(disjointDecomposition Phrase VerbPhrase NounPhrase PrepositionalPhrase)

(disjointDecomposition Primate Ape Monkey Hominid)

(disjointDecomposition Relation BinaryRelation TernaryRelation QuaternaryRelation QuintaryRelation VariableArityRelation)

(disjointDecomposition Tissue Bone Muscle FatTissue)

(disjointRelation contains part)

(disjointRelation crosses connected)

(disjointRelation decreasesLikelihood independentProbability)

(disjointRelation deprivesNorm confersNorm)

(disjointRelation increasesLikelihood decreasesLikelihood)

(disjointRelation increasesLikelihood independentProbability)

(disjointRelation manner attribute)

(disjointRelation meetsSpatially overlapsSpatially)

(disjointRelation resource instrument)

(disjointRelation resource result)

(disjointRelation result instrument)

(disjointRelation stays home)

(disjointRelation subAttribute successorAttribute)

(disjointRelation subsumedExternalConcept subsumingExternalConcept)

(disjointRelation synonymousExternalConcept subsumedExternalConcept)

(disjointRelation synonymousExternalConcept subsumingExternalConcept)

(documentation AbnormalAnatomicalStructure "Any &%AnatomicalStructure which 
is not normally found in the &%Organism of which it is a part, i.e. it is 
the result of a &%PathologicProcess.  This class covers tumors, birth marks, 
goiters, etc.")

(documentation Above "This is a &%PositionalAttribute derived from the 
up/down schema and not involving contact.  Note that this means directly 
above, i.e., if one object is &%Above another object, then the projections 
of the two objects overlap.")

(documentation AbsoluteValueFn "The value of (&%AbsoluteValueFn ?NUMBER) 
is the absolute value of the &%RealNumber ?NUMBER.")

(documentation Abstract "Properties or qualities as distinguished from any 
particular embodiment of the properties/qualities in a physical medium.  
Instances of Abstract can be said to exist in the same sense as mathematical 
objects such as sets and relations, but they cannot exist at a particular 
place and time without some physical encoding or embodiment.")

(documentation AbstractionFn "A &%UnaryFunction that maps a &%Class into 
the instance of &%Attribute that specifies the condition(s) for membership 
in the &%Class.")

(documentation AdditionFn "If ?NUMBER1 and ?NUMBER2 are &%Numbers, then 
(&%AdditionFn ?NUMBER1 ?NUMBER2) is the arithmetical sum of these 
numbers.")

(documentation Adjacent "Used to assert that an object ?OBJ1 is close 
to, near or abutting ?OBJ2.  This &%PositionalAttribute covers the 
following common sense notions:  adjoins, abuts, is contiguous to, 
is juxtaposed, and is close to.")

(documentation Adjective "One of the parts of speech.  The &%Class of 
&%Words that conventionally denote &%Attributes of &%Objects.")

(documentation Adverb "One of the parts of speech.  The &%Class of &%Words 
that conventionally denote &%Attributes of &%Processes.")

(documentation Advertising "A &%Disseminating whose purpose is to 
promote the sale of an &%Object represented in a &%Text or &%Icon 
(the advertisement).")

(documentation AgeGroup "A &%GroupOfPeople whose &%members all have the 
same &%age.")

(documentation Agent "Something or someone that can act on its own and 
produce changes in the world.")

(documentation Air "&%Air is the gaseous stuff that makes up the 
atmosphere surrounding Earth.")

(documentation AlethicAttribute "A &%Class containing all of the &%Attributes 
relating to the notions of possibility and necessity.")

(documentation Alga "A chiefly aquatic plant that contains chlorophyll, 
but does not form embryos during development and lacks vascular tissue.")

(documentation Ambulating "Any &%BodyMotion which is accomplished by 
means of the legs of an &%Animal for the purpose of moving from one 
point to another.")

(documentation Ampere "SI electric current measure.  Symbol: A. It is 
one of the base units in SI. It is defined as follows: the &%Ampere is 
that constant current which, if maintained in two straight parallel 
conductors of infinite length, of negligible circular cross-section, and 
placed 1 &%Meter apart in a vacuum, would produce between these conductors 
a force equal to 2*10^(-7) &%Newton per &%Meter of length.")

(documentation Amphibian "A cold-blooded, smooth-skinned &%Vertebrate 
which characteristically hatches as an aquatic larva, breathing by 
gills.  When mature, the &%Amphibian breathes with &%Lungs.")

(documentation Amu "Atomic mass unit.  Symbol: u. It is the mass of 
the twelfth part of an atom of the Carbon 12 isotope.")

(documentation AnatomicalStructure "A normal or pathological part 
of the anatomy or structural organization of an &%Organism.  This 
class covers &%BodyParts, as well as structures that are given off 
by &%Organisms, e.g. &%ReproductiveBodies.")

(documentation AngleMeasure "The value of an angle in a plane or in a 
solid.")

(documentation Angstrom "The &%Angstrom is a &%LengthMeasure. 
1 &%Angstrom = 10^(-10) m")

(documentation AngularDegree "A plane angle measure.")

(documentation AnimacyAttribute "&%Attributes that indicate whether an 
&%Organism is alive or not.")

(documentation Animal "An &%Organism with eukaryotic &%Cells, and lacking 
stiff cell walls, plastids, and photosynthetic pigments.")

(documentation AnimalAnatomicalStructure "&%AnatomicalStructures that 
are possessed exclusively by &%Animals.")

(documentation AnimalLanguage "The &%subclass of &%Languages used by 
&%Animals other than &%Humans.")

(documentation AnimalSubstance "&%BodySubstances that are produced 
exclusively by &%Animals.")

(documentation AntisymmetricRelation "&%BinaryRelation ?REL is an 
&%AntisymmetricRelation if for distinct ?INST1 and ?INST2, (?REL ?INST1 
?INST2) implies not (?REL ?INST2 ?INST1).  In other words, for all ?INST1 
and ?INST2, (?REL ?INST1 ?INST2) and (?REL ?INST2 ?INST1) imply that ?INST1 
and ?INST2 are identical.  Note that it is possible for an 
&%AntisymmetricRelation to be a &%ReflexiveRelation.")

(documentation Ape "Various &%Primates with no tails or only short 
tails.")

(documentation April "The &%Class of all &%Months which are April.")

(documentation AquaticMammal "The &%Class of &%Mammals that dwell chiefly 
in the water.  Includes whales, dolphins, manatees, seals, and walruses.")

(documentation Arachnid "A &%Class of &%Arthropods that includes 
ticks and spiders.")

(documentation AreaMeasure "Measures of the amount of space in two 
dimensions.")

(documentation Argument "Any proposition which has the form of a deductive 
or inductive argument, i.e. a set of premises which, it is claimed, imply 
a conclusion.")

(documentation ArtWork "&%Artifacts that are created primarily for 
aesthetic appreciation.  Note that this &%Class does not include 
most examples of architecture, which belong under &%StationaryArtifact.")

(documentation Arthropod "A &%Class of &%Invertebrate that includes 
&%Arachnids and &%Insects.")

(documentation Article "A relatively short &%Text that either is unbound or is 
bound with other &%Articles in a &%Book.")

(documentation Artifact "A &%CorpuscularObject that is the product of a 
&%Making.")

(documentation ArtificialLanguage "The &%subclass of &%Languages that are 
designed by &%Humans.")

(documentation AsexualReproduction "Asexual &%Processes of biological 
reproduction.")

(documentation Asleep "&%Attribute that applies to &%Organisms that are 
sleeping.")

(documentation AssignmentFn "If F is a &%Function with a value for the 
objects denoted by N1,..., NK, then (&%AssignmentFn F N1 ... NK) is the 
value of applying F to the objects denoted by N1,..., NK.  Otherwise, 
the value is undefined.")

(documentation AssociativeFunction "A &%BinaryFunction is associative if 
bracketing has no effect on the value returned by the &%Function.  More 
precisely, a &%Function ?FUNCTION is associative just in case 
(?FUNCTION ?INST1 (?FUNCTION ?INST2 ?INST3)) is equal to 
(?FUNCTION (?FUNCTION ?INST1 ?INST2) ?INST3), for all ?INST1, ?INST2, 
and ?INST3.")

(documentation AstronomicalBody "The &%Class of all astronomical 
objects of significant size.  It includes &%SelfConnectedObjects 
like planets, stars, and asteroids, as well as &%Collections like 
nebulae, galaxies, and constellations.  Note that the planet Earth 
is an &%AstronomicalBody, but every &%Region of Earth is a 
&%GeographicArea.")

(documentation AsymmetricRelation "A &%BinaryRelation is asymmetric if and only 
if it is both an &%AntisymmetricRelation and an &%IrreflexiveRelation.")

(documentation Atom "An extremely small unit of matter that retains its 
identity in Chemical reactions.  It consists of an &%AtomicNucleus and 
&%Electrons surrounding the &%AtomicNucleus.")

(documentation AtomGram "&%MassMeasure that is also known as the gram-atom.  
Defined as the mass in grams of 1 &%Mole of pure substance.  For example, 
1 &%AtomGram of Carbon 12 will be 12 &%Grams of pure Carbon 12.  2 &%AtomGrams 
of the same substance will be 24 &%Grams of it.  This is an unusual unit in 
that it is essentially 1 &%Mole of 'stuff' measured in grams, so that the 
actual value (i.e. mass) depends on the type of substance.")

(documentation AtomicNucleus "The core of the &%Atom.  It is composed of 
&%Protons and &%Neutrons.")

(documentation Attaching "A &%Process where one &%Object becomes attached 
to another &%Object.  Note that this differs from &%Putting in that two 
things which are attached may already be in the same location.  Note that 
&%Combining is different from &%Attaching in that the former applies to 
&%Substances, while the latter applies to &%CorpuscularObjects.  Note too 
that &%Attaching is different from &%Putting in that one or both of the 
two things which are attached may or may not be moved from the location 
where they were combined.")

(documentation AttachingDevice "A &%Device whose purpose is to attach one thing 
to something else, e.g. nails, screws, buttons, etc.")

(documentation Attack "A &%Maneuver in a &%ViolentContest where the 
&%agent attempts to inflict damage on the &%patient.")

(documentation Attribute "Qualities which we cannot or choose not to 
reify into subclasses of &%Object.")

(documentation Audible "A sound level capable of being heard by a &%Human.")

(documentation August "The &%Class of all &%Months which are August.")

(documentation AutonomicProcess "The class of &%PhysiologicProcesses of 
which there is not conscious awareness and control.")

(documentation Awake "&%Attribute that applies to &%Organisms that are 
neither &%Unconscious nor &%Asleep.")

(documentation BackFn "A &%Function that maps an &%Object to the side 
that is opposite the &%FrontFn of the &%Object.  Note that this is a 
partial function, since some &%Objects do not have sides, e.g. apples 
and spheres.  Note too that the &%range of this &%Function is indefinite in 
much the way that &%ImmediateFutureFn and &%ImmediatePastFn are indefinite.  
Although this indefiniteness is undesirable from a theoretical standpoint, 
it does not have significant practical implications, since there is 
widespread intersubjective agreement about the most common cases.")

(documentation Bacterium "A small, typically one-celled, prokaryotic 
&%Microorganism.")

(documentation Battle "A &%ViolentContest between two or more military 
units within the context of a war.  Note that this does not cover the 
metaphorical sense of 'battle', which simply means a struggle of some 
sort.  This sense should be represented with the more general concept of 
&%Contest.")

(documentation Becquerel "SI activity measure.  Symbol: Bq.  It measures 
the amount of radioactivity contained in a given sample of matter. It is 
that quantity of a radioactive element in which there is one atomic 
disintegration per &%SecondDuration.  &%Becquerel = s^(-1).")

(documentation BeginFn "A &%UnaryFunction that maps a &%TimeInterval to 
the &%TimePoint at which the interval begins.")

(documentation BeginNodeFn "A &%UnaryFunction that maps a &%GraphPath 
to the &%GraphNode that is the beginning of the &%GraphPath.  Note that, 
unlike &%InitialNodeFn (which relates a &%GraphArc to a &%GraphNode),  
&%BeginNodeFn is a total function - every &%GraphPath has a beginning.")

(documentation BeliefGroup "A &%GroupOfPeople whose &%members share a belief 
or set of beliefs.")

(documentation Below "This &%PositionalAttribute is derived from the 
up/down schema and may or may not involve contact.  Note that this means 
directly below, i.e., if one object is &%Below another object, then the 
projections of the two objects overlap.")

(documentation Betting "A &%FinancialTransaction where an instance of 
&%CurrencyMeasure is exchanged for the possibility of winning a larger 
instance of &%CurrencyMeasure within the context of some sort of 
&%Game.")

(documentation Beverage "Any &%Food that is ingested by &%Drinking.  
Note that this class is disjoint with the other subclasses of &%Food, 
i.e. &%Meat and &%FruitOrVegetable.")

(documentation BinaryFunction "The &%Class of &%Functions that require 
two arguments.")

(documentation BinaryNumber "Elements from the number system with base 2.  
Every &%BinaryNumber is expressed as a sequence of the digits 1 and 0.")

(documentation BinaryPredicate "A &%Predicate relating two items - its 
valence is two.")

(documentation BinaryRelation "&%BinaryRelations are relations that are 
true only of pairs of things.  &%BinaryRelations are represented as slots 
in frame systems.")

(documentation BiologicalAttribute "&%Attributes that apply specifically 
to instances of &%Organism.")

(documentation BiologicalProcess "A &%Process embodied in an &%Organism.")

(documentation BiologicallyActiveSubstance "A &%Substance that is 
capable of inducing a change in the structure or functioning of an 
&%Organism.  This &%Class includes &%Substances used in the treatment, 
diagnosis, prevention or analysis of normal and abnormal body function.  
This &%Class also includes &%Substances that occur naturally in the body 
and are administered therapeutically.  Finally, &%BiologicallyActiveSubstance 
includes &%Nutrients, most drugs of abuse, and agents that require special 
handling because of their toxicity.")

(documentation Bird "A &%Vertebrate having a constant body temperature 
and characterized by the presence of feathers.")

(documentation Birth "The &%Process of being born.")

(documentation Bit "One &%Bit of information.  A one or a zero.")

(documentation Black "The &%Attribute of being black in color.")

(documentation Blood "A fluid present in &%Animals that transports 
&%Nutrients to and waste products away from various &%BodyParts.")

(documentation Blue "The &%Attribute of being blue in color.")

(documentation BodyCavity "Any &%BodyPart which contains an unfilled space, 
e.g. &%BodyVessels, the atria and ventricles of the heart, the lungs, etc.")

(documentation BodyCovering "Any &%BodyPart which is a covering of another 
&%BodyPart or of an entire &%Organism.  This would include the rinds of 
&%FruitOrVegetables and the skins of &%Animals.")

(documentation BodyJunction "The place where two &%BodyParts 
meet or connect.")

(documentation BodyMotion "Any &%Motion where the &%agent is an &%Organism 
and the &%patient is a &%BodyPart.")

(documentation BodyPart "A collection of &%Cells and &%Tissues which 
are localized to a specific area of an &%Organism and which are not 
pathological. The instances of this &%Class range from gross structures 
to small components of complex &%Organs.")

(documentation BodyPosition "The class of &%Attributes expressing 
configurations of bodies or parts of bodies of animals or humans, 
e.g. standing, sitting, kneeling, lying down, etc.")

(documentation BodySubstance "Extracellular material and mixtures of 
cells and extracellular material that are produced, excreted or accreted 
by an &%Organism.  Included here are &%Substances such as saliva, dental 
enamel, sweat, and gastric acid.")

(documentation BodyVessel "Any tube-like structure which occurs naturally in 
an &%Organism and through which a &%BodySubstance can circulate.")

(documentation Boiling "The &%Class of &%Processes where a &%Substance is 
heated and converted from a &%Liquid to a &%Gas.")

(documentation Bone "Rigid &%Tissue composed largely of calcium that makes up 
the skeleton of &%Vertebrates.  Note that this &%Class also includes teeth.")

(documentation Book "A &%Text that has pages and is bound.")

(documentation Borrowing "The &%subclass of &%Getting &%Processes where 
the &%agent gets something for a limited period of time with the expectation 
that it will be returned later (perhaps with interest).")

(documentation Breathing "The &%Process of respiration, by which oxygen 
is made available to an &%Animal.  This covers processes of inhalation, 
exhalation, and alternations between the two.")

(documentation BritishThermalUnit "An energy measure.")

(documentation Building "The Class of &%StationaryArtifacts which are 
intended to house &%Humans and their activities.")

(documentation Buying "A &%FinancialTransaction in which an instance of 
&%CurrencyMeasure is exchanged for an instance of &%Physical.")

(documentation Byte "One &%Byte of information.  A &%Byte is eight 
&%Bits.")

(documentation Calculating "&%IntentionalPsychologicalProcesses which involve 
the consideration and/or manipulation of instances of &%Quantity.")

(documentation Calorie "A &%Calorie is an energy measure.")

(documentation Candela "SI luminosity intensity measure.  Symbol: cd. 
It is one of the base units in SI, and it is currently defined as 
follows:  the &%Candela is the luminous intensity, in a given direction, 
of a source that emits monochromatic radiation of frequency 540*10^12 
&%Hertz and that has a radiant intensity in that direction of 1/683 
&%Watt per &%Steradian.")

(documentation Canine "The &%Class of &%Carnivores with completely 
separable toes, nonretractable claws, and long muzzles.")

(documentation Carbohydrate "An element of living cells and a source of 
energy for &%Animals.  This class includes both simple &%Carbohydrates, 
i.e. sugars, and complex &%Carbohydrates, i.e. starches.")

(documentation CardinalityFn "(CardinalityFn ?CLASS) returns the 
number of instances in the &%SetOrClass ?CLASS or the number of 
members in the ?CLASS &%Collection.")

(documentation Carnivore "The &%Class of flesh-eating &%Mammals.  Members 
of this &%Class typically have four or five claws on each paw.  Includes 
cats, dogs, bears, racoons, and skunks.")

(documentation Carrying "&%Transfer from one point to another by means of 
an &%Animal or &%Human.")

(documentation CaseRole "The &%Class of &%Predicates relating the 
spatially distinguished parts of a &%Process. &%CaseRoles include, for 
example, the &%agent, &%patient or &%destination of an action, the flammable 
substance in a burning process, or the water that falls in rain.")

(documentation CeilingFn "(&%CeilingFn ?NUMBER) returns the smallest 
&%Integer greater than or equal to the &%RealNumber ?NUMBER.")

(documentation Cell "The fundamental structural and functional unit of 
living &%Organisms.")

(documentation CelsiusDegree "A &%TemperatureMeasure.  The freezing point 
and the boiling point of water are, respectively, 0 &%CelsiusDegrees and 100 
&%CelsiusDegrees.")

(documentation Centimeter "Submultiple of &%Meter.  Symbol: cm. It is 
the 100th part of a &%Meter")

(documentation CentralTimeZone "A &%TimeZone that covers much of the 
midwestern United States.")

(documentation Certificate "A &%Text that confers a right or obligation 
on the holder of the &%Certificate.  Note that the right or obligation 
need not be a legal one, as in the case of an academic diploma that grants 
certain privileges in the professional world.")

(documentation ChangeOfPossession "The &%Class of &%Processes where 
ownership of something is transferred from one &%Agent to another.")

(documentation Character "An element of an alphabet, a set of numerals, etc.  
Note that a &%Character may or may not be part of a &%Language.  &%Character 
is a subclass of &%SymbolicString, because every instance of &%Character is 
an alphanumeric sequence consisting of a single element.")

(documentation ChemicalDecomposition "The &%Class of &%ChemicalProcesses 
in which a &%CompoundSubstance breaks down into simpler products.")

(documentation ChemicalProcess "A &%ChemicalProcess occurs whenever 
chemical compounds (&%CompoundSubstances) are formed or decomposed.  
For example, reactants disappear as chemical change occurs, and products 
appear as chemical change occurs.  In a chemical change a chemical 
reaction takes place.  Catalysts in a &%ChemicalProcess may speed up the 
reaction, but aren't themselves produced or consumed.  Examples: rusting of 
iron and the decomposition of water, induced by an electric current, to 
gaseous hydrogen and gaseous oxygen.")

(documentation ChemicalSynthesis "The &%Class of &%ChemicalProcesses in 
which a &%CompoundSubstance is formed from simpler reactants.")

(documentation City "A &%LandArea of relatively small size, inhabited 
by a community of people, and having some sort of political structure.  
Note that this class includes both large cities and small settlements 
like towns, villages, hamlets, etc.")

(documentation Class "&%Classes differ from &%Sets in three important respects.  
First, &%Classes are not assumed to be extensional.  That is, distinct 
&%Classes might well have exactly the same instances.  Second, &%Classes typically 
have an associated `condition' that determines the instances of the &%Class.  So, 
for example, the condition `human' determines the &%Class of &%Humans.  Note that 
some &%Classes might satisfy their own condition (e.g., the &%Class of &%Abstract 
things is &%Abstract) and hence be instances of themselves.  Third, the instances 
of a class may occur only once within the class, i.e. a class cannot contain 
duplicate instances.")

(documentation Classifying "The &%Class of &%IntentionalPsychologicalProcesses 
which involve attaching a name or category to a thing or set of things.  
Note that &%Classifying is distinguished from &%Learning by the fact 
that the latter covers the acquisition by a &%CognitiveAgent of any 
&%Proposition, while the former involves the assignment of a label 
or category.")

(documentation ClosedTwoDimensionalFigure "Any &%TwoDimensionalFigure which 
has a well defined interior and exterior.")

(documentation Clothing "&%Artifact made out of fabrics and possibly other 
materials that are used to cover the bodies of &%Humans.")

(documentation Cloud "Any &%GasMixture that is visible, e.g. &%Smoke produced 
by a fire or clouds of water vapor in the sky.")

(documentation CognitiveAgent "A &%SentientAgent with responsibilities 
and the ability to reason, deliberate, make plans, etc.  This is 
essentially the legal/ethical notion of a person.  Note that, although 
&%Human is a subclass of &%CognitiveAgent, there may be instances of 
&%CognitiveAgent which are not also instances of &%Human.  For example, 
chimpanzees, gorillas, dolphins, whales, and some extraterrestrials 
(if they exist) may be &%CognitiveAgents.")

(documentation ColdBloodedVertebrate "&%Vertebrates whose body temperature 
is not internally regulated.")

(documentation Collection "Collections have &%members like &%Classes, but, 
unlike &%Classes, they have a position in space-time and &%members can be 
added and subtracted without thereby changing the identity of the 
&%Collection.  Some examples are toolkits, football teams, and flocks 
of sheep.")

(documentation ColorAttribute "The &%Class of &%Attributes relating to the 
color of &%Objects.")

(documentation Coloring "The &%subclass of &%SurfaceChange where a 
&%ColorAttribute of the &%patient is altered.  Note that the change in
color may apply to just part of the object.")

(documentation Combining "A &%Process where two or more &%SelfConnectedObjects 
are incorporated into a single &%SelfConnectedObject.  Note that &%Combining 
is different from &%Attaching in that the former results in one of the objects 
being &%part of the other, while &%Attaching only results in the two objects 
being &%connected with one another.  Note too that &%Combining is different 
from &%Putting in that one or both of the two things which are combined may or 
may not be moved from the location where they were combined.")

(documentation Combustion "The &%Class of &%ChemicalProcesses in which an &%Object 
reacts with oxygen and gives off heat.  This includes all &%Processes in which 
something is burning.")

(documentation CommercialAgent "An &%Agent that provides products and/or 
services for a fee with the aim of making a profit.")

(documentation CommercialService "Any &%FinancialTransaction by a 
&%CommercialAgent where the aim is to produce a profit.")

(documentation Committing "Instances of this &%Class commit the &%agent to some 
future course.  For example, Bob promised Susan that he would be home by 11pm.")

(documentation Communication "A &%SocialInteraction that involves 
the transfer of information between two or more &%CognitiveAgents.  
Note that &%Communication is closely related to, but essentially 
different from, &%ContentDevelopment.  The latter involves the creation 
or modification of a &%ContentBearingObject, while &%Communication is 
the transfer of information for the purpose of conveying a message.")

(documentation CommutativeFunction "A &%BinaryFunction is commutative if 
the ordering of the arguments of the function has no effect on the value 
returned by the function.  More precisely, a function ?FUNCTION is 
commutative just in case (?FUNCTION ?INST1 ?INST2) is equal to (?FUNCTION 
?INST2 ?INST1), for all ?INST1 and ?INST2.")

(documentation Comparing "The &%Class of &%IntentionalPsychologicalProcesses 
which involve comparing, relating, contrasting, etc. the properties of 
two or more &%Entities.")

(documentation ComplementFn "The complement of a given &%SetOrClass C is the 
&%SetOrClass of all things that are not instances of C.  In other words, an 
object is an instance of the complement of a &%SetOrClass C just in case it 
is not an instance of C.")

(documentation ComplexNumber "A &%Number that has the form: x + yi, where x 
and y are &%RealNumbers and i is the square root of -1.")

(documentation CompoundSubstance "The &%Class of &%Substances that contain 
two or more elements (&%ElementalSubstances), in definite proportion by weight. 
The composition of a pure compound will be invariant, regardless of the method 
of preparation. Compounds are composed of more than one kind of atom (element). 
The term molecule is often used for the smallest unit of a compound that still 
retains all of the properties of the compound.  Examples: Table salt (sodium 
chloride, NaCl), sugar (sucrose, C_{12}H_{22}O_{11}), and water (H_2O). ")

(documentation ComputerLanguage "The class of &%Languages designed for 
and interpreted by a computer.")

(documentation ComputerProgram "A set of instructions in a computer 
programming language that can be executed by a computer.")

(documentation ComputerProgramming "The process of developing a 
&%ComputerProgram")

(documentation Condensing "The &%Class of &%Processes where an &%Object is 
cooled and converted from a &%Gas to a &%Liquid.")

(documentation Confining "The &%Class of &%Keeping &%Processes where the 
&%patient is a &%Human or an &%Animal and is kept involuntarily.  This covers 
caging, imprisonment, jailing, etc.")

(documentation ConsciousnessAttribute "&%Attributes that indicate whether 
an &%Organism is conscious or the qualitative degree of consciousness of 
an &%Organism.")

(documentation ConstantQuantity "A &%ConstantQuantity is a 
&%PhysicalQuantity which has a constant value, e.g. 3 meters and 5 hours.  
The magnitude (see &%MagnitudeFn) of every &%ConstantQuantity is a 
&%RealNumber.  &%ConstantQuantities are distinguished from 
&%FunctionQuantities, which map &%ConstantQuantities to other 
&%ConstantQuantities.  All &%ConstantQuantites are expressed with the 
&%BinaryFunction &%MeasureFn, which takes a &%Number and a &%UnitOfMeasure 
as arguments.  For example, 3 &%Meters can be expressed as (&%MeasureFn 3 
&%Meter).  &%ConstantQuantities form a partial order (see 
&%PartialOrderingRelation) with the &%lessThan relation, since &%lessThan 
is a &%RelationExtendedToQuantities and &%lessThan is defined over the 
&%RealNumbers.  The &%lessThan relation is not a total order (see 
&%TotalOrderingRelation) over the class &%ConstantQuantity since elements 
of some subclasses of &%ConstantQuantity (such as length quantities) 
are incomparable to elements of other subclasses of &%ConstantQuantity 
(such as mass quantities).")

(documentation ConstructedLanguage "An &%ConstructedLanguage is a 
&%HumanLanguage that did not evolve spontaneously within a language
community, but rather had its core grammar and vocabulary invented by 
one or more language experts, often with an aim to produce a more 
grammatically regular language than any language that has evolved 
naturally.  This &%Class includes languages like Esperanto that were 
created to facilitate international communication")

(documentation Constructing "The &%subclass of &%Making in which a 
&%StationaryArtifact is built.")

(documentation ContentBearingObject "Any &%SelfConnectedObject that expresses 
content.  This content may be a &%Proposition, e.g. when the &%ContentBearingObject 
is a &%Sentence or &%Text, or it may be a representation of an abstract or 
physical object, as with an &%Icon, a &%Word or a &%Phrase.")

(documentation ContentBearingPhysical "Any &%Object or &%Process that
expresses content.  This covers &%Objects that contain a &%Proposition,
such as a book, as well as &%ManualSignLanguage, which may similarly
contain a &%Proposition.")

(documentation ContentBearingProcess "Any &%Process, for example 
&%ManualHumanLanguage, which may contain a &%Proposition.")

(documentation ContentDevelopment "A &%subclass of &%IntentionalProcess in 
which content is modified, its form is altered or it is created anew.")

(documentation Contest "A &%SocialInteraction where the &%agent and 
&%patient are &%CognitiveAgents who are trying to defeat one another.  
Note that this concept is often applied in a metaphorical sense in natural 
language, when we speak, e.g., of the struggle of plants for space or 
sunlight, or of bacteria for food resources in some environment.")

(documentation ContestAttribute "A &%Class containing &%Attributes that are 
specific to participants in a &%Contest.  In particular, these &%Attributes 
indicate the position of one of the &%agents in the &%Contest with respect 
to other &%agent(s) in the &%Contest.   Some examples of these &%Attributes 
are winning, losing, won, lost, etc.")

(documentation Continent "One of the seven largest land masses on earth, 
viz. Africa, North America, &%SouthAmerica, &%Antarctica, Europe, Asia, and 
Oceania.  Note that this naming scheme is the one used in the CIA World 
Factbook.")

(documentation ContinuousFunction "&%Functions which are continuous.  
This concept is taken as primitive until representations for limits 
are devised.")

(documentation Contract "&%Attribute that applies to &%Propositions where 
something is promised in return, i.e. a reciprocal promise.")

(documentation Cooking "The &%Making of an &%instance of &%Food.  Note 
that this can cover any preparation of &%Food, e.g. making a salad, 
cutting up fruit, etc.  It does not necessarily involve the application 
of heat.")

(documentation Cooling "Any &%Decreasing &%Process where the &%PhysicalQuantity 
decreased is a &%TemperatureMeasure.")

(documentation Cooperation "The &%subclass of &%SocialInteraction where 
the participants involved work together for the achievement of a common 
goal.")

(documentation CoordinatedUniversalTimeZone "A &%TimeZone which functions 
as the standard time zone.  It is also known as Zulu time (in the military), 
Greenwich Mean Time, and the Western European time zone.  Note that whenever 
a &%TimeZone is not specified, the &%TimePosition is understood to be with 
respect to the &%CoordinatedUniversalTimeZone.")

(documentation Corporation "An &%Organization that has a special legal status 
that allows a group of persons to act as a &%CommercialAgent and that insulates 
the owners (shareholders) from many liabilities that might result from the 
corporation's operation.")

(documentation CorpuscularObject "A &%SelfConnectedObject whose parts have 
properties that are not shared by the whole.")

(documentation CosineFn "(&%CosineFn ?DEGREE) returns the cosine of the 
&%PlaneAngleMeasure ?DEGREE.  The cosine of ?DEGREE is the ratio of the 
side next to ?DEGREE to the hypotenuse in a right-angled triangle.")

(documentation Coulomb "SI electric charge measure.  Symbol: C. It is 
the quantity of electric charge transported through a cross section of 
a conductor in an electric circuit during each &%SecondDuration by a 
current of 1 &%Ampere.  Coulomb = s*A.")

(documentation Counting "Enumerating something.  The &%Class of &%Calculating 
&%Processes where the aim is to determine the &%Number corresponding to the 
&%patient.")

(documentation County "A &%GeopoliticalArea that is larger than a city, 
usually encompassing several cities, and smaller than a &%StateOrProvince.  
Aside from City, this is the smallest geopolitical subdivision, and it is 
known by various names in various counties, e.g.  parrish, commune, etc.")

(documentation Covering "The &%Class of &%Putting processes where the &%agent 
covers the &%patient, either completely or only partially, with something 
else.")

(documentation Creation "The &%subclass of &%Process in which 
something is created.  Note that the thing created is specified 
with the &%result &%CaseRole.")

(documentation Crustacean "A &%Class of &%Arthropods that mainly dwells 
in water and has a segmented body and a chitinous exoskeleton.  Includes 
lobsters, crabs, shrimp, and barnacles.")

(documentation Cup "English unit of volume equal to 1/2 of a 
&%Pint.")

(documentation Currency "Any element of the official currrency of some 
&%Nation.  This covers both &%CurrencyBills and &%CurrencyCoins.")

(documentation CurrencyBill "Any instance of &%Currency that is made 
of paper.")

(documentation CurrencyCoin "Any instance of &%Currency that is made 
of &%Metal.")

(documentation CurrencyMeasure "Includes all standard measures of monetary 
value, including &%UnitedStatesDollar, &%UnitedStatesCent, Lire, Yen, etc.")

(documentation CutSetFn "A &%UnaryFunction that assigns a &%Graph the 
&%Class of &%GraphPaths that partition the graph into two separate 
graphs if cut.  There may be more than one cutset for a given graph.")

(documentation Cutting "The &%subclass of &%Poking &%Processes which 
involve a sharp &%instrument.")

(documentation Damaging "The &%Class of &%Processes where the &%agent 
brings about a situation where the &%patient no longer functions normally 
or as intended.")

(documentation Damp "An &%Attribute which indicates that the associated 
&%Object contains some &%Liquid.")

(documentation Dancing "Any &%BodyMotion of &%Humans which is 
deliberately coordinated with music.")

(documentation Day "The &%Class of all calendar &%Days.")

(documentation DayDuration "Time unit. 1 day = 24 hours.")

(documentation DayFn "A &%BinaryFunction that assigns a &%PositiveRealNumber and 
a subclass of &%Months to the &%Days within each &%Month corresponding to that 
&%PositiveRealNumber.  For example, (&%DayFn 16 &%August) is the &%Class of all 
sixteenth days of August.  For another example, (&%DayFn 9 &%Month) would return 
the class of all ninth days of any month.  For still another example, (&%DayFn 18 
(&%MonthFn &%August (&%YearFn 1912))) denotes the 18th day of August 1912.")

(documentation Dead "This &%Attribute applies to &%Organisms that are 
not alive.")

(documentation Death "The &%Process of dying.")

(documentation December "The &%Class of all &%Months which are December.")

(documentation Deciding "The subclass of &%Selecting where the &%agent 
opts for one course of action out of a set of multiple possibilities 
that are open to him/her.")

(documentation Declaring "The &%Class of &%LinguisticCommunications that 
effect an institutional alteration when performed by competent authority.  
Some examples are nominating, marrying, and excommunicating.")

(documentation Decoding "Converting a document or message that has previously 
been encoded (see &%Encoding) into a &%Language that can be understood by a 
relatively large number of speakers.")

(documentation Decreasing "Any &%QuantityChange where the &%PhysicalQuantity 
is decreased.")

(documentation DeductiveArgument "An &%Argument which has the form of a 
deduction, i.e. it is claimed that the set of &%premises &%entails the 
&%conclusion.")

(documentation DefensiveManeuver "A &%Maneuver in a &%ViolentContest 
where the &%agent attempts to avoid being damaged.")

(documentation Demonstrating "Exhibiting something or a range of things 
before the public in a particular location.  This would cover software 
demos, theatrical plays, lectures, dance and music recitals, museum 
exhibitions, etc.")

(documentation DenominatorFn "(&%DenominatorFn ?NUMBER) returns the 
denominator of the canonical reduced form of the &%RealNumber ?NUMBER.")

(documentation DensityFn "&%DensityFn maps an instance of &%MassMeasure 
and an instance of &%VolumeMeasure to the density represented by this 
proportion of mass and volume.  For example, (&%DensityFn (&%MeasureFn 3 &%Gram) 
(&%MeasureFn 1 &%Liter)) represents the density of 3 grams per liter.")

(documentation DeonticAttribute "A &%Class containing all of the &%Attributes 
relating to the notions of permission, obligation, and prohibition.")

(documentation Designing "The spatial analogue of &%Planning.  &%Designing a 
&%Collection of &%Objects involves determining a placement of the &%Objects 
with respect to one another and perhaps other &%Objects as well, in order to 
satisfy a particular purpose.")

(documentation Destruction "The &%subclass of &%Damagings in which 
the &%patient (or an essential element of the &%patient) is destroyed.  
Note that the difference between this concept and its superclass is solely 
one of extent.")

(documentation Detaching "A &%Process where the &%agent detaches one thing 
from something else.  Note that &%Detaching is different from &%Separating 
in that the latter applies to &%Substances, while the former applies to 
&%CorpuscularObjects.  Note too that &%Detaching is different from 
&%Removing in that one or both of the two things which are detached may or 
may not be moved from the location where they were attached.")

(documentation DevelopmentalAttribute "&%Attributes that indicate the 
stage of development of an &%Organism.")

(documentation Device "A &%Device is an &%Artifact whose purpose is to 
serve as an &%instrument in a specific subclass of &%Process.")

(documentation DiagnosticProcess "A &%Process that is carried out for 
the purpose of determining the nature of a &%DiseaseOrSyndrome.")

(documentation Digesting "The &%Process by which &%Food that has been 
ingested is broken down into simpler chemical compounds and absorbed by 
the &%Organism.")

(documentation DirectedGraph "The &%Class of directed graphs.  A 
directed graph is a &%Graph in which all &%GraphArcs
have direction, i.e. every &%GraphArc has an initial node (see 
&%InitialNodeFn) and a terminal node (see &%TerminalNodeFn).")

(documentation Directing "Instances of this &%Class urge some further action 
among the receivers.  A &%Directing can be an &%Ordering, a &%Requesting or 
a &%Questioning.")

(documentation DirectionChange "The act of changing the direction in 
which the &%patient of the act is oriented.")

(documentation DirectionalAttribute "The subclass of &%PositionalAttributes 
that concern compass directions.")

(documentation Disagreeing "A &%Stating in which two &%Agents have
contradictory statements.  This is distinguished from &%Arguing in
that the statement in dispute may be a simple assertion, rather than
a chain of deduction, and that two entities must be disagreeing with
each other, whereas a single entity may craft an argument for a given
point of view, without the need for another agent to disagree with.")

(documentation Discovering "Finding something that was sought.  Note that 
this class is restricted to cases of discovering something &%Physical.  
For cases involving the acquisition of knowledge, the class &%Learning 
should be used.")

(documentation DiseaseOrSyndrome "A &%BiologicalAttribute which qualifies 
something that alters or interferes with a normal process, state or activity 
of an &%Organism.  It is usually characterized by the abnormal functioning of 
one or more of the host's systems, parts, or &%Organs.")

(documentation Disseminating "Any &%Communication that involves a 
single &%agent and many &%destinations.  This covers the release 
of a published book, broadcasting, a theatrical performance, giving 
orders to assembled troops, delivering a public lecture, etc.")

(documentation DivisionFn "If ?NUMBER1 and ?NUMBER2 are &%Numbers, then 
(&%DivisionFn ?NUMBER1 ?NUMBER2) is the result of dividing ?NUMBER1 by 
?NUMBER2.  Note that when ?NUMBER1 = 1 (&%DivisionFn ?NUMBER1 ?NUMBER2) 
is the reciprocal of ?NUMBER2.  Note too that (&%DivisionFn ?NUMBER1 
?NUMBER2) is undefined when ?NUMBER2 = 0.")

(documentation Drinking "The &%Process by which liquid &%Food, i.e. 
&%Beverages, are incorporated into an &%Animal.")

(documentation Driving "Controlling the direction and/or speed of a 
&%Vehicle.  This includes navigating a ship, driving a car or truck, 
operating a train, etc.")

(documentation Dry "An &%Attribute which indicates that the associated 
&%Object contains no &%Liquid.")

(documentation Drying "The &%Class of &%Processes where a &%Liquid is removed 
from an &%Object.")

(documentation DualObjectProcess "Any &%Process that requires two, 
nonidentical &%patients.")

(documentation East "The compass direction of &%East.")

(documentation EasternTimeZone "A &%TimeZone that covers much of the 
eastern United States.")

(documentation Eating "The &%Process by which solid &%Food is 
incorporated into an &%Animal.")

(documentation EditionFn "A &%BinaryFunction that maps a type of text 
(e.g. Agatha Christie's Murder_on_the_Orient_Express) and a number 
to the edition of the text type corresponding to the number.")

(documentation EducationalOrganization "A &%EducationalOrganization is 
an institution of learning. Some examples are public and private K-12 
schools, and colleges and universities.")

(documentation EducationalProcess "Any &%Process which is intended to result 
in &%Learning.")

(documentation Egg "The fertilized or unfertilized female &%ReproductiveBody 
of an &%Animal.  This includes &%Bird and &%Reptile eggs, as well as mammalian 
ova.")

(documentation Election "&%Election is the class of events conducted by an 
organization, in which qualified participants vote for officers, adopt 
resolutions, or settle other issues in that &%Organization.")

(documentation Electron "&%SubatomicParticles that surround the 
&%AtomicNucleus.  They have a negative charge.")

(documentation ElectronVolt "The &%ElectronVolt is an energy measure.  
Symbol: eV.  It is the kinetic energy acquired by an electron in passing 
through a potential difference of 1 &%Volt in a vacuum.")

(documentation ElementalSubstance "The &%Class of &%PureSubstances that 
cannot be separated into two or more &%Substances by ordinary chemical 
(or physical) means. This excludes nuclear reactions. &%ElementalSubstances 
are composed of only one kind of atom. Examples: Iron (Fe), copper (Cu), 
and oxygen (O_2).  &%ElementalSubstances are the simplest 
&%PureSubstances.")

(documentation Embryonic "The stage of an &%Organism or an 
&%AnatomicalStructure that exists only before the &%Organism is born.  
&%Mammals, for example, have this &%Attribute only prior to 
their birth.")

(documentation EmotionalState "The &%Class of &%Attributes that denote emotional 
states of &%Organisms.")

(documentation Encoding "Converting a document or message into a formal 
language or into a code that can be understood only by a relatively small 
body of &%Agents.  Generally speaking, this hinders wide dissemination of 
the content in the original document or message.")

(documentation EndFn "A &%UnaryFunction that maps a &%TimeInterval to 
the &%TimePoint at which the interval ends.")

(documentation EndNodeFn "A &%UnaryFunction that maps a &%GraphPath 
to the &%GraphNode that is the end of the &%GraphPath.  Note that, unlike 
&%TerminalNodeFn (which relates a &%GraphArc to a &%GraphNode),  
&%EndNodeFn is a total function - every &%GraphPath has a end.")

(documentation EngineeringComponent "A fundamental concept that applies 
in many engineering domains.  An &%EngineeringComponent is an element of 
a &%Device that is a physically whole object, such as one might 
see listed as standard parts in a catalog.  The main difference betweeen 
&%EngineeringComponents and arbitrary globs of matter is that 
&%EngineeringComponents are object-like in a modeling sense.  Thus, an 
&%EngineeringComponent is not an arbtrary subregion, but a part of a 
system with a stable identity.")

(documentation EngineeringConnection "An &%EngineeringConnection is an 
&%EngineeringComponent that represents a connection relationship between 
two other &%EngineeringComponents.  It is a reification of the 
&%Predicate &%connectedEngineeringComponents.  That means that whenever 
this &%Predicate holds between two &%EngineeringComponents, there exists an 
&%EngineeringConnection.  The practical reason for reifying a relationship 
is to be able to attach other information about it. For example, one
might want to say that a particular connection is associated with some 
shared parameters, or that it is of a particular type.  
&%EngineeringConnections are &%EngineeringComponents and can therefore be 
an &%engineeringSubcomponent of other &%EngineeringComponents.  However, 
to provide for modular regularity in component systems, 
&%EngineeringConnections cannot be connected.  For each pair of 
&%EngineeringComponents related by &%connectedEngineeringComponents, there 
exists at least one &%EngineeringConnection.  However, that object may not 
be unique, and the same &%EngineeringConnection may be associated with 
several pairs of &%EngineeringComponents.")

(documentation Entity "The universal class of individuals.  This is the root 
node of the ontology.")

(documentation Enzyme "A complex &%Protein that is produced by living 
cells and which catalyzes specific biochemical reactions. There are six 
main types of enzymes:  oxidoreductases, transferases, hydrolases, 
lyases, isomerases, and ligases.")

(documentation EquivalenceRelation "A &%BinaryRelation is an equivalence 
relation if it is a &%ReflexiveRelation, a &%SymmetricRelation, and a 
&%TransitiveRelation.")

(documentation EthnicGroup "A &%GroupOfPeople whose &%members originate 
from the same &%GeographicArea or share the same &%Language and/or cultural 
practices.")

(documentation EuroCent "A currency measure.  1 &%EuroCent is equal to .01 
&%EuroDollars.")

(documentation EuroDollar "A currency measure of most European Union countries.")

(documentation Evaporating "The &%Class of &%Processes where a &%Substance is 
converted from a &%Liquid to a &%Gas at a temperature below its
&%Boiling point.")

(documentation EvenInteger "An &%Integer that is evenly divisible 
by 2.")

(documentation Experimenting "&%Investigating the truth of a &%Proposition 
by constructing and observing a trial.  Note that the trial may be either 
controlled or uncontrolled, blind or not blind.")

(documentation Explanation "An &%Argument where the conclusion is an 
observed fact and the premises are other facts which collectively imply 
the conclusion.  Note that this is the they hypothetico-deductive model 
of explanation.")

(documentation ExponentiationFn "(&%ExponentiationFn ?NUMBER ?INT) returns 
the &%RealNumber ?NUMBER raised to the power of the &%Integer ?INT.")

(documentation Expressing "Instances of this &%Class express a state of the &%agent. 
For example, Jane thanked Barbara for the present she had given her.  The thanking 
in this case expresses the gratitude of Jane towards Barbara.  Note that &%Expressing, 
unlike the other speech act types, is not a subclass of &%LinguisticCommunication.  
This is because emotions, for example, can be expressed without language, e.g. by 
smiling.")

(documentation ExtensionFn "A &%UnaryFunction that maps an &%Attribute 
into the &%Class whose condition for membership is the &%Attribute.")

(documentation Fabric "&%Artifacts that are created by weaving together 
natural or synthetic fibers or by treating the skins of certain sorts of 
&%Animals.  Note that this &%Class includes articles that are created by 
stitching together various types of fabrics, e.g. bedspreads.  On the other 
hand, &%Clothing is not a &%subclass of &%Fabric, because many clothing items 
contain elements that are not fabrics.")

(documentation FactualText "The class of &%Texts that purport to 
reveal facts about the world.  Such texts are often known as information 
or as non-fiction.  Note that something can be an instance of 
&%FactualText, even if it is wholly inaccurate.  Whether something 
is a &%FactualText is determined by the beliefs of the agent creating 
the text.")

(documentation FahrenheitDegree "A &%TemperatureMeasure that is commonly 
used in the United States.  On the Fahrenheit scale, the freezing point 
of water is 32 &%FahrenheitDegrees, and the boiling point of water is 
212 &%FahrenheitDegrees.")

(documentation Falling "&%Falling is the class of events in 
which something moves from a higher location to a lower location 
under the force of gravity.")

(documentation False "The &%TruthValue of being false.")

(documentation FamilyGroup "A &%GroupOfPeople whose &%members bear 
&%familyRelations to one another.")

(documentation Farad "SI capacitance measure.  Symbol: F.  It is the 
capacitance of a capacitator between the plates of which there appears 
a difference of potential of 1 &%Volt when it is charged by a quantity 
of electricity equal to 1 Coulomb.  &%Farad = C/V = 
m^(-2)*kg(-1)*s^4*A^2.")

(documentation FatTissue "Nonrigid &%Tissue that is composed largely of 
fat cells.")

(documentation February "The &%Class of all &%Months which are February.")

(documentation Feline "The &%Class of &%Carnivores with completely
separable toes, slim bodies, and rounded heads.  All felines other than
the cheetah have retractable claws.")

(documentation Female "An &%Attribute indicating that an &%Organism is 
female in nature.")

(documentation Fern "A &%NonFloweringPlant that contains vascular tissue.  
This class includes true ferns, as well as horsetails, club mosses, and 
whisk ferns.")

(documentation FictionalText "The class of &%Texts that purport to 
be largely a product of the author's imagination, i.e. the author 
does not believe that most of the content conveyed by the text is 
an accurate depiction of the real world.  Note that something can 
be an instance of &%FictionalText, even if it is completely true.  
Whether something is a &%FictionalText is determined by the beliefs 
of the agent creating the text.")

(documentation FieldOfStudy "An academic or applied discipline with 
recognized experts and with a core of accepted theory or practice.  Note 
that &%FieldOfStudy is a &%subclass of &%Proposition, because a 
&%FieldOfStudy is understood to be a body of abstract, informational 
content, with varying degrees of certainty attached to each element of 
this content.")

(documentation Fillable "Something is &%Fillable if it can be filled by 
something else.  Note that 'filled' here means perfectly filled.
Something is fillable just in case it is part of a hole, i.e., 
fillability is an exclusive property of holes and their parts.")

(documentation FinancialInstrument "A document having monetary value 
or recording a monetary transaction")

(documentation FinancialTransaction "A &%Transaction where an instance 
of &%Currency is exchanged for something else.")

(documentation FiniteSet "A &%Set containing a finite number of elements.")

(documentation Fish "A cold-blooded aquatic &%Vertebrate characterized by 
fins and breathing by gills. Included here are &%Fish having either a bony 
skeleton, such as a perch, or a cartilaginous skeleton, such as a shark.  
Also included are those &%Fish lacking a jaw, such as a lamprey or 
hagfish.")

(documentation Flammable "The &%Attribute of being flammable at normal temperatures
(i.e. not while a &%Plasma).")

(documentation FloorFn "(&%FloorFn ?NUMBER) returns the largest &%Integer 
less than or equal to the &%RealNumber ?NUMBER.")

(documentation FloweringPlant "A &%Plant that produces seeds and flowers.  
This class includes trees, shrubs, herbs, and flowers.")

(documentation Fluid "&%Fluid is the &%PhysicalState attribute of an 
&%Object that does not have a fixed shape and thus tends to flow or to 
conform to the shape of a container.")

(documentation Food "Any &%SelfConnectedObject containing &%Nutrients, 
such as carbohydrates, proteins, and fats, that can be ingested by a 
living &%Animal and metabolized into energy and body tissue.")

(documentation FootLength "English length unit of feet.")

(documentation Formula "A syntactically well-formed formula in the 
SUO-KIF knowledge representation language.")

(documentation Freezing "The &%Class of &%Processes where an &%Object is 
cooled and converted from a &%Liquid to a &%Solid.")

(documentation FreshWaterArea "A &%WaterArea whose &%Water is not saline, 
e.g. most rivers and lakes.")

(documentation Friday "The &%Class of all calendar Fridays.")

(documentation FrontFn "A &%Function that maps an &%Object to the side 
that generally receives the most attention or that typically faces the 
direction in which the &%Object moves.  Note that this is a partial 
function, since some &%Objects do not have sides, e.g. apples and 
spheres.  Note too that the &%range of this &%Function is indefinite in 
much the way that &%ImmediateFutureFn and &%ImmediatePastFn are indefinite.  
Although this indefiniteness is undesirable from a theoretical standpoint, 
it does not have significant practical implications, since there is 
widespread intersubjective agreement about the most common cases.")

(documentation FruitOrVegetable "Any fruit or vegetable, i.e. a 
ripened &%ReproductiveBody of a &%Plant.  Note that &%FruitOrVegetable 
is not a subclass of &%Food, because some fruits, e.g. poisonous 
berries, are not edible.")

(documentation FullyFormed "The stage of an &%Organism when it has reached 
the end of its growth phase.")

(documentation Function "A &%Function is a term-forming &%Relation that 
maps from a n-tuple of arguments to a range and that associates this 
n-tuple with at most one range element.  Note that the range is a &%SetOrClass, 
and each element of the range is an instance of the &%SetOrClass.")

(documentation FunctionQuantity "A &%FunctionQuantity is a &%PhysicalQuantity 
that is returned by a &%Function that maps from one or more instances of 
&%ConstantQuantity to another instance of &%ConstantQuantity.  For example, 
the velocity of a particle would be represented by a &%FunctionQuantity 
relating values of time (which are &%ConstantQuantities) to values of distance 
(also &%ConstantQuantities).  Note that all elements of the range of the 
&%Function corresponding to a &%FunctionQuantity have the same physical 
dimension as the &%FunctionQuantity itself.")

(documentation Funding "Any instance of &%Giving where the &%patient is an 
instance of &%Currency.  Note that this class covers both financing, e.g. 
where a firm funds a software company with venture capital with the agreement 
that a certain percentage of the profits on the investment will be returned 
to the firm, and instances of &%UnilateralGiving, e.g. providing a tuition 
waiver and/or a stipend to a student as part of scholarship or fellowship.")

(documentation Fungus "A eukaryotic &%Organism characterized by the 
absence of chlorophyll and the presence of rigid cell walls. Included 
here are both slime molds and true fungi such as yeasts, molds, mildews, 
and mushrooms.")

(documentation FutureFn "A &%UnaryFunction that maps a &%TimePosition 
to the &%TimeInterval which it meets and which ends at 
&%PositiveInfinity.")

(documentation Game "A &%Contest whose purpose is the 
enjoyment/stimulation of the participants or spectators of the &%Game.")

(documentation Gas "An &%Object has the &%Attribute of &%Gas if it has 
neither a fixed volume nor a fixed shape.")

(documentation GasMixture "Any &%Mixture that satisfies two conditions, 
viz. it is made up predominantly of things which are a &%Gas and any 
component other than &%Gas in the &%Mixture is in the form of fine particles 
which are suspended in the &%Gas.")

(documentation GasMotion "Any &%Motion where the &%patient is a 
&%Gas.  This class would cover, in particular, the motion of 
&%Air, e.g. a breeze or wind.")

(documentation GeneralizedIntersectionFn "A &%UnaryFunction that takes a 
&%SetOrClass of &%Classes as its single argument and returns a &%SetOrClass which 
is the intersection of all of the &%Classes in the original &%SetOrClass, i.e. 
the &%SetOrClass containing just those instances which are instances of all 
instances of the original &%SetOrClass.")

(documentation GeneralizedUnionFn "A &%UnaryFunction that takes a &%SetOrClass 
of &%Classes as its single argument and returns a &%SetOrClass which is the 
merge of all of the &%Classes in the original &%SetOrClass, i.e. the &%SetOrClass 
containing just those instances which are instances of an instance of the 
original &%SetOrClass.")

(documentation GeographicArea "A geographic location, generally having 
definite boundaries.  Note that this differs from its immediate superclass 
&%Region in that a &%GeographicArea is a three-dimensional &%Region of the 
earth.  Accordingly, all astronomical objects other than earth and all 
one-dimensional and two-dimensional &%Regions are not classed under 
&%GeographicArea.")

(documentation GeologicalProcess "The class of activities that 
are caused by geological forces and affect geological features, 
and which may affect the biosphere as well.")

(documentation GeometricFigure "The class of all geometric figures, i.e. the 
class of all abstract, spatial representations.  The instances of this class 
are &%GeometricPoints, &%TwoDimensionalFigures or &%ThreeDimensionalFigures.")

(documentation GeometricPoint "The class of zero-dimensional 
&%GeometricFigures, i.e. the class of &%GeometricFigures that have position 
but lack extension in any dimension.")

(documentation GeopoliticalArea "Any &%GeographicArea which is associated 
with some sort of political structure.  This class includes &%Lands, 
&%Cities, districts of cities, counties, etc.  Note that the identity 
of a &%GeopoliticalArea may remain constant after a change in borders.")

(documentation Gesture "Any &%BodyMotion, e.g. a hand wave, a nod of the 
head, a smile, which is also an instance of &%Communication.")

(documentation Getting "The &%subclass of &%ChangeOfPossession where the
&%agent gets something.  Note that the source from which something is 
obtained is specified with the &%origin &%CaseRole.")

(documentation GigaFn "A &%UnaryFunction that maps a &%UnitOfMeasure into 
a &%UnitOfMeasure that is equal to 1,000,000,000 units of the original 
&%UnitOfMeasure.  For example, (&%GigaFn &%Hertz) is 1,000,000,000 &%Hertz.")

(documentation Giving "The &%subclass of &%ChangeOfPossession where the 
&%agent gives the &%destination something.")

(documentation GivingBack "Any instance of &%Giving where the &%agent gives 
something to the &%destination which was previously given to the &%agent by 
the &%destination, e.g. returing a book that was borrowed from someone.")

(documentation Gland "An &%Organ that removes &%Substances from the &%Blood, 
alters them in some way, and then releases them.")

(documentation Government "The ruling body of a &%GeopoliticalArea.")

(documentation GovernmentFn "(&%GovernmentFn ?AREA) denotes the 
&%Government of the &%GeopoliticalArea ?AREA.  For example, 
(&%GovernmentFn &%UnitedStates) denotes the Federal-level government of 
the United States, (&%GovernmentFn &%PuertoRico) denotes the government of 
the Commonwealth of Puerto Rico.")

(documentation GovernmentOrganization "&%GovernmentOrganization is the 
class of official &%Organizations that are concerned with the government 
of a &%GeopoliticalArea at some level.  They may be a &%subOrganization 
of a government.")

(documentation Grabbing "Any instance of &%Touching which results in 
a situation where the &%agent &%grasps the &%patient of the &%Touching.")

(documentation Graduation "The &%OrganizationalProcess of graduating 
from an &%EducationalOrganization.")

(documentation Gram "Submultiple of kilogram.  Symbol: g. 
1 kilogram = 1000 &%Grams.")

(documentation Graph "The &%Class of graphs, where a graph is understood 
to be a set of &%GraphNodes connected by &%GraphArcs.  Note that this 
&%Class includes only connected graphs, i.e. graphs in which there is a 
&%GraphPath between any two &%GraphNodes.  Note too that every &%Graph 
is assumed to contain at least two &%GraphArcs and three &%GraphNodes.")

(documentation GraphArc "&%Graphs are comprised of &%GraphNodes 
and &%GraphArcs.  Every &%GraphArc links two &%GraphNodes.")

(documentation GraphCircuit "A &%GraphPath that begins (see 
&%BeginNodeFn) and ends (see &%EndNodeFn) at the same 
&%GraphNode.")

(documentation GraphElement "Noncompositional parts of &%Graphs.  
These parts are restricted to &%GraphNodes and &%GraphArcs.")

(documentation GraphLoop "A &%GraphArc in which a &%GraphNode is 
linked to itself.")

(documentation GraphNode "&%Graphs are comprised of &%GraphNodes 
and &%GraphArcs.  Every &%GraphNode is linked by a &%GraphArc.")

(documentation GraphPath "Informally, a single, directed route between 
two &%GraphNodes in a &%Graph.  Formally, a &%DirectedGraph that is a 
&%subGraph of the original &%Graph and such that no two &%GraphArcs in 
the &%DirectedGraph have the same intial node (see &%InitialNodeFn) or 
the same terminal node (see &%TerminalNodeFn).")

(documentation GraphPathFn "A &%BinaryFunction that maps two &%GraphNodes 
to the &%Class of &%GraphPaths between those two nodes.  Note that the two 
&%GraphNodes must belong to the same &%Graph.")

(documentation Gray "SI absorbed dose measure.  Symbol: Gy.  It measures 
the dose of radiation absorbed in living tissue. It is equal approximately 
to the absorbed dose delivered when the energy per unit mass imparted to
matter by ionizing radiation is 1 &%Joule per kilogram.  &%Gray = J/kg 
= m^2*s^(-2).")

(documentation GreatestCommonDivisorFn "(&%GreatestCommonDivisorFn 
?NUMBER1 ?NUMBER2 ... ?NUMBER) returns the greatest common divisor of 
?NUMBER1 through ?NUMBER.")

(documentation Group "A &%Collection of &%Agents, e.g. a flock 
of sheep, a herd of goats, or the local Boy Scout troop.")

(documentation GroupOfPeople "Any &%Group whose &%members are 
exclusively &%Humans.")

(documentation Growth "The &%Process of biological development in which 
an &%Organism or part of an &%Organism changes its form or its size.")

(documentation Guiding "Any &%IntentionalProcess where the &%agent tries to 
direct the behavior of another &%Object, whether an &%Agent or not.")

(documentation Hearing "The &%subclass of &%Perception in which the 
sensing is done by an auditory &%Organ.")

(documentation Heating "Any &%Increasing &%Process where the &%PhysicalQuantity 
increased is a &%TemperatureMeasure.")

(documentation Henry "SI inductance measure.  Symbol: H.  One &%Henry 
is equivalent to one &%Volt divided by one &%Ampere per &%SecondDuration. 
If a current changing at the rate of one &%Ampere per &%SecondDuration 
induces an electromotive force of one &%Volt, the circuit has an 
inductance of one &%Henry.  &%Henry = Wb/A = m^2*kg*s^(-2)*A^(-2).")

(documentation Hertz "SI frequency measure.  Symbol: Hz. It is the 
number of cycles per second.  &%Hertz = s^(-1).  Note that &%Hertz 
does not have a conversion function.")

(documentation Hiring "&%OrganizationalProcesses where someone is made an 
employee of an &%Organization.")

(documentation Hole "A hole is an immaterial body located at the surface 
of an &%Object.  Since every &%Hole is ontologically dependent on its host 
(i.e., the object in which it is a hole), being a &%Hole is defined as 
being a &%hole in something.  Note that two &%Holes may occupy the same 
region, or part of the same region, without sharing any parts.  Any two 
hosts of a hole have a common proper part that entirely hosts the hole.  A 
common host of two holes hosts all parts of the sum of those holes.  Any 
object that includes the host of a hole is a host of that hole, unless its 
parts also include parts of that very hole.  Overlapping holes have 
overlapping hosts.  No hole is atomic.  Holes are connected with their 
hosts.  No hole can have a proper part that is externally connected with 
exactly the same things as the hole itself.")

(documentation HoleHostFn "A &%UnaryFunction that maps a &%Hole to 
the &%Object which is its principal host.  The principle host of a &%Hole 
is its maximally connected host (a notion taken here to be defined only 
when the argument is a hole).")

(documentation HoleSkinFn "A &%UnaryFunction that maps a &%Hole to the skin 
of the &%Hole.  The skin of a &%Hole is the fusion of those superficial 
parts (see &%superficialPart) of the &%Hole's principal host (see 
&%HoleHostFn) with which the &%Hole is externally connected.")

(documentation Hominid "Includes &%Humans and relatively recent 
ancestors of &%Humans.")

(documentation HoofedMammal "The &%Class of quadruped &%Mammals with hooves.  
Includes horses, cows, sheep, pigs, antelope, etc.")

(documentation Horizontal "Attribute used to indicate that an &%Object 
is positioned width-wise with respect to another &%Object.")

(documentation Hormone "In &%Animals, a chemical secreted by an 
endocrine gland whose products are released into the circulating fluid.  
&%Plant hormones or synthetic hormones which are used only to alter or 
control various physiologic processes, e.g., reproductive control agents, 
are assigned to the &%Class &%BiologicallyActiveSubstance. &%Hormones act as 
chemical messengers and regulate various physiologic processes such as 
growth, reproduction, metabolism, etc.  They usually fall into two broad 
categories, viz. steroid hormones and peptide hormones.")

(documentation Hotel "A &%ResidentialBuilding which provides temporary 
accommodations to guests in exchange for money.")

(documentation Hour "The &%Class of all clock &%Hours.")

(documentation HourDuration "Time unit. 1 hour = 60 minutes.")

(documentation HourFn "A &%BinaryFunction that assigns a &%PositiveRealNumber and 
a subclass of &%Days to the &%Hours within each &%Day corresponding to that 
&%PositiveRealNumber.  For example, (&%HourFn 12 &%Thursday) is the &%Class of all 
instances of noon Thursday.  For another example, (&%HourFn 24 &%Day) would return 
the class of all instances of midnight.  For still another example, (&%HourFn 14 
(&%DayFn 18 (&%MonthFn &%August (&%YearFn 1912)))) denotes 2 PM on the 18th day of 
August 1912.")

(documentation Human "Modern man, the only remaining species of the Homo 
genus.")

(documentation HumanLanguage "The &%subclass of &%Languages used by 
&%Humans.")

(documentation Icon "This is the subclass of &%ContentBearingPhysical 
which are not part of a &%Language and which have some sort of similarity 
with the &%Objects that they represent.  This &%Class would include symbolic 
roadway signs, representational art works, photographs, etc.")

(documentation Illuminated "The &%Attribute of &%Regions that are 
illuminated to some degree, i.e. in which some shapes are visually 
discernable.")

(documentation ImaginaryNumber "Any &%Number that is the result of 
multiplying a &%RealNumber by the square root of -1.")

(documentation ImaginaryPartFn "(&%ImaginaryPartFn ?NUMBER) returns 
the part of ?NUMBER that has the square root of -1 as its factor.")

(documentation ImmediateFamilyFn "(&%ImmediateFamilyFn ?PERSON) denotes the 
immediate family of ?PERSON, i.e. the &%Group consisting of the &%parents of 
?PERSON and anyone of whom ?PERSON is a &%parent.")

(documentation ImmediateFutureFn "A &%UnaryFunction that maps a 
&%TimePosition to a short, indeterminate &%TimeInterval that 
immediately follows the &%TimePosition.")

(documentation ImmediatePastFn "A &%UnaryFunction that maps a 
&%TimePosition to a short, indeterminate &%TimeInterval that 
immediately precedes the &%TimePosition.")

(documentation Impacting "Any &%Touching where something comes into 
sudden, forceful, physical contact with something else.  Some examples 
would be striking, knocking, whipping etc.")

(documentation Impelling "The &%subclass of &%Transfer where the &%patient 
travels through space by means of a sudden, forceful event.  Some examples 
would be shooting, throwing, tossing, etc.")

(documentation Inch "English length unit of inches.")

(documentation Increasing "Any &%QuantityChange where the &%PhysicalQuantity 
is increased.")

(documentation InductiveArgument "An &%Argument which is inductive, i.e. it is 
claimed that a set of specific cases makes the &%conclusion, which generalizes 
these cases, more likely to be true.")

(documentation InformationMeasure "Measures of the amount of information.  
Includes &%Bit, &%Byte, and multiples of these, e.g. &%KiloByte and 
&%MegaByte.")

(documentation Ingesting "The &%Process by which &%Food is 
taken into an &%Animal.")

(documentation InheritableRelation "This is a &%Class of &%Classes.  Each 
&%instance of &%InheritableRelation is a &%subclass of &%Relation whose 
properties can be inherited downward in the class hierarchy via the 
&%subrelation &%Predicate.")

(documentation InitialNodeFn "A &%UnaryFunction that maps a 
&%GraphArc to the initial node of the &%GraphArc.  Note
that this is a partial function.  In particular, the function is 
undefined for &%GraphArcs that are not part of a &%DirectedGraph.")

(documentation Injecting "&%Inserting a &%BiologicallyActiveSubstance into an 
&%Animal or a &%Human with a syringe.")

(documentation Injuring "The process of creating a traumatic wound or 
injury.  Since &%Injuring is not possible without some biologic function 
of the organism being injured, it is a subclass of &%BiologicalProcess.")

(documentation Insect "A &%Class of small &%Arthropods that are 
air-breathing and that are distinguished by appearance.")

(documentation Inserting "&%Putting one thing inside of another thing.")

(documentation Integer "A negative or nonnegative whole number.")

(documentation IntegerSquareRootFn "(&%IntegerSquareRootFn ?NUMBER) 
returns the integer square root of ?NUMBER.")

(documentation IntentionalProcess "A &%Process that has a specific 
purpose for the &%CognitiveAgent who performs it.")

(documentation IntentionalPsychologicalProcess "An &%IntentionalProcess that 
can be realized entirely within the mind or brain of an &%Organism.  Thus, 
for example, &%Reasoning is a subclass of &%IntentionalPsychologicalProcess, 
because one can reason simply by exercising one's mind/brain.  On the other 
hand, &%RecreationOrExercise is not a subclass of &%IntentionalPsychologicalProcess,
because many instances of &%RecreationOrExercise necessarily have &%subProcesses 
of &%BodyMotion.")

(documentation IntentionalRelation "The &%Class of &%Relations between 
an &%Agent and one or more &%Entities, where the &%Relation requires that 
the &%Agent have awareness of the &%Entity.")

(documentation InternalAttribute "Any &%Attribute of an &%Entity that is an 
internal property of the &%Entity, e.g. its shape, its color, its fragility, 
etc.")

(documentation InternalChange "&%Processes which involve altering an internal 
property of an &%Object, e.g. the shape of the &%Object, its coloring, its 
structure, etc.  &%Processes that are not instances of this class include 
changes that only affect the relationship to other objects, e.g. changes in 
spatial or temporal location.")

(documentation Interpreting "Any &%Process of assigning a &%Proposition to 
a &%Text, i.e. understanding the &%Text.")

(documentation IntersectionFn "A &%BinaryFunction that maps two 
&%SetOrClasses to the intersection of these &%SetOrClasses.  An object is 
an instance of the intersection of two &%SetOrClasses just in case it is 
an instance of both of those &%SetOrClasses.")

(documentation IntervalFn "A &%BinaryFunction that maps two &%ConstantQuantities 
to the &%Class of &%ConstantQuantities that comprise the interval from the first 
&%ConstantQuantity to the second &%ConstantQuantity.  For example, (&%IntervalFn 
(&%MeasureFn 8 &%Meter) (&%MeasureFn 14 &%Meter)) would return the &%Class of 
&%ConstantQuantities between 8 and 14 meters in length.")

(documentation IntransitiveRelation "A &%BinaryRelation ?REL is 
intransitive only if (?REL ?INST1 ?INST2) and (?REL ?INST2 ?INST3) imply not 
(?REL ?INST1 ?INST3), for all ?INST1, ?INST2, and ?INST3.")

(documentation InvalidDeductiveArgument "&%DeductiveArguments that are not 
&%ValidDeductiveArguments, i.e. it is not the case that the set of &%premises 
in fact &%entails the &%conclusion.")

(documentation Invertebrate "An &%Animal which has no spinal column.")

(documentation Investigating "The class of &%IntentionalPsychologicalProcesses 
where the &%agent attempts to obtaina information (i.e. a &%Proposition denoted 
by a &%Formula).")

(documentation IrrationalNumber "Any &%RealNumber that is not also a 
&%RationalNumber.")

(documentation IrreflexiveRelation "&%Relation ?REL is irreflexive 
iff (?REL ?INST ?INST) holds for no value of ?INST.")

(documentation Island "A &%LandArea that is completely surrounded by a &%WaterArea.")

(documentation January "The &%Class of all &%Months which are January.")

(documentation JoiningAnOrganization "The &%OrganizationalProcess of 
becoming a &%member of an &%Organization.")

(documentation Joule "SI energy measure.  Symbol: J.  It is the work 
done when the point of application of 1 &%Newton is displaced a distance 
of 1 &%Meter in the direction of the force.  &%Joule = N*m = 
m^2*kg*s^(-2).")

(documentation Judging "The subclass of &%Selecting where the &%agent opts 
for one belief out of a set of multiple possibilities that are available to 
him/her.")

(documentation JudicialOrganization "&%JudicialOrganization is the class 
of &%Organizations whose primary purpose is to render judgments according 
to the statutes or regulations of a government or other organization.  
Judicial bodies are not necessarily government organizations, for example, 
those associated with sporting associations.")

(documentation JudicialProcess "Any legal proceeding which is conducted 
by a &%JudicialOrganization.  Note that there is an important difference 
between the concepts &%LegalAction and &%JudicialProcess.  The former 
refers to legal claims that are brought by a plaintiff, e.g. law suits, 
while the second refers to trials and other sorts of judicial hearings 
where the merits of a &%LegalAction are decided.")

(documentation July "The &%Class of all &%Months which are July.")

(documentation June "The &%Class of all &%Months which are June.")

(documentation KappaFn "A class-forming operator that takes two 
arguments:  a variable and a formula containing at least one unbound 
occurrence of the variable.  The result of applying &%KappaFn to a 
variable and a formula is the &%SetOrClass of things that satisfy the formula.  
For example, we can denote the &%SetOrClass of prime numbers that are less 
than 100 with the following expression:  (KappaFn ?NUMBER 
(and (instance ?NUMBER PrimeNumber) (lessThan ?NUMBER 100))).  Note that 
the use of this function is discouraged, since there is currently no 
axiomatic support for it.")

(documentation Keeping "The &%Class of &%Processes where the &%agent 
keeps something in a particular location for an extended period of time.")

(documentation KelvinDegree "SI &%TemperatureMeasure.  Symbol: K. 
It is one of the base units in SI (it is also a unit in the ITS system). 
Kelvin differs from the Celsius scale in that the triple point of water 
is defined to be 273.16 &%KelvinDegrees while it is 0 &%CelsiusDegrees.  
The magnitudes of intervals in the two scales are the same.  By definition 
the conversion constant is 273.15.")

(documentation Killing "The &%subclass of &%Destruction in which the 
death of an &%Organism is caused by an &%Organism.  Note that in cases 
of suicide the &%Organism would be the same in both cases.")

(documentation KiloByte "One &%KiloByte (KB) of information.  One 
&%KiloByte is 1024 &%Bytes.  Note that this sense of 'kilo' is 
different from the one accepted in the SI system.")

(documentation KiloFn "A &%UnaryFunction that maps a &%UnitOfMeasure into 
a &%UnitOfMeasure that is equal to 1,000 units of the original &%UnitOfMeasure.  
For example, (&%KiloFn &%Gram) is 1,000 &%Grams.")

(documentation Kilogram "Supermultiple of &%Gramm. Symbol: kg. 1 &%Kilogram
= 1000 Grams.")

(documentation Kilometer "Supermultiple of &%Meter. Symbol: km. A
&%Meter is the 1000th part of a &%Kilometer")

(documentation LandArea "An area which is predominantly solid ground, 
e.g. a &%Nation, a mountain, a desert, etc.  Note that a &%LandArea may 
contain some relatively small &%WaterAreas.  For example, Australia is 
a &%LandArea even though it contains various rivers and lakes.")

(documentation LandTransitway "&%LandTransitway is the subclass of 
&%Transitway that represents areas intended for motion over the ground.")

(documentation Language "A system of signs for expressing thought.  The 
system can be either natural or artificial, i.e. something that emerges 
gradually as a cultural artifact or something that is intentionally created 
by a person or group of people.")

(documentation Larval "Form of most &%Invertebrates, &%Amphibians, and 
&%Fish immediately after they hatch.  This form is fundamentally unlike 
the adult form, and metamorphosis is required to reach the latter form.")

(documentation Law "&%Attribute that applies to &%Propositions that are 
required by a government or a branch of the government and that are enforced 
with penalties for noncompliance.  These &%Propositions may be codified as 
legislation or they may be more informal, as in the case of government policy.")

(documentation LeapYear "The &%Class of all leap years.  These are years 
which are either (i.) evenly divisible by 4 and not by 100 or (ii.) evenly 
divisible by 400 (this latter case is known as a leap century).")

(documentation Learning "The &%Class of &%Processes which relate to the 
acquisition of information.")

(documentation LeastCommonMultipleFn "(&%LeastCommonMultipleFn 
?NUMBER1 ?NUMBER2 ... ?NUMBER) returns the least common multiple of 
?NUMBER1 through ?NUMBER.")

(documentation LeavingAnOrganization "The &%OrganizationalProcess of 
leaving an &%Organization, whether voluntarily or involuntarily.")

(documentation Left "This &%PositionalAttribute is derived from the 
left/right schema.  Note that this means directly to the left, so that, 
if one object is to the left of another, then the projections of the 
two objects overlap.")

(documentation LegalAction "Any &%Process where a &%CognitiveAgent seeks 
to obtain something through a court of law.")

(documentation LegalDecision "A decision issued by a court with respect to 
a &%LegalAction.  Note that a &%LegalDecision is the act of &%Declaring a 
decision of a court, it is not the act of judge or jury &%Deciding the merits 
of a particular &%LegalAction.")

(documentation Lending "The &%subclass of &%Giving &%Processes where 
the &%agent gives the &%destination something for a limited period of 
time with the expectation that it will be returned later (perhaps with 
interest).")

(documentation LengthMeasure "The &%Class of &%ConstantQuantities relating 
to length.")

(documentation Likely "The &%ProbabilityAttribute of being probable, i.e. more 
likely than not to be &%True.")

(documentation LinguisticCommunication "A &%Communication that involves 
the transfer of information via a &%LinguisticExpression.")

(documentation LinguisticExpression "This is the subclass of 
&%ContentBearingPhysical which are language-related.  Note that this &%Class 
encompasses both &%Language and the the elements of &%Languages, 
e.g. &%Words.")

(documentation Liquid "An &%Object has the &%Attribute of &%Liquid if 
it has a fixed volume but not a fixed shape.")

(documentation LiquidMixture "Any &%Mixture that satisfies two conditions, 
viz. it is made up predominantly of things which are a &%Liquid and any 
component other than &%Liquid in the &%Mixture is in the form of fine particles 
which are suspended in the &%Liquid.")

(documentation LiquidMotion "Any &%Motion where the &%patient is a 
&%Liquid.  This class would cover, in particular, the flow of 
&%Water.")

(documentation List "Every &%List is a particular ordered n-tuple of 
items.  Generally speaking, &%Lists are created by means of the &%ListFn 
&%Function, which takes any number of items as arguments and returns a 
&%List with the items in the same order.  Anything, including other 
&%Lists, may be an item in a &%List.  Note too that &%Lists are 
extensional - two lists that have the same items in the same order are 
identical.  Note too that a &%List may contain no items.  In that case, 
the &%List is the &%NullList.")

(documentation ListConcatenateFn "A &%Function that returns the concatenation 
of the two &%Lists that are given as arguments.  For example, the value of 
(&%ListConcatenateFn (&%ListFn &%Monday &%Tuesday) (&%ListFn &%Wednesday 
&%Thursday)) would be (&%ListFn &%Monday &%Tuesday &%Wednesday &%Thursday).")

(documentation ListFn "A &%Function that takes any number of arguments and 
returns the &%List containing those arguments in exactly the same order.")

(documentation ListLengthFn "A &%Function that takes a &%List as its sole 
argument and returns the number of items in the &%List.  For example, 
(&%ListLengthFn (&%ListFn &%Monday &%Tuesday &%Wednesday)) would return the 
value 3.")

(documentation ListOrderFn "(&%ListOrderFn ?LIST ?NUMBER) denotes the item 
that is in the ?NUMBER position in the &%List ?LIST.  For example, 
(&%ListOrderFn (&%ListFn &%Monday &%Tuesday &%Wednesday) 2) would return the 
value &%Tuesday.")

(documentation Listening "Any instance of &%Hearing which is intentional.")

(documentation Liter "Unit of volume in the metric system.  It is currently 
defined to be equal to one cubic decimeter (0.001 cubic meter).  Symbol: l.")

(documentation Living "This &%Attribute applies to &%Organisms that are 
alive.")

(documentation LogFn "(LogFn ?NUMBER ?INT) returns the logarithm of the 
&%RealNumber ?NUMBER in the base denoted by the &%Integer ?INT.")

(documentation LogicalOperator "This &%Class comprises all 
of the logical operators (viz. 'and', 'or', 'not', '=>', and '<=>').")

(documentation Looking "Any instance of &%Seeing which is intentional.")

(documentation Lumen "SI luminous flux measure.  Symbol: lm.  It is the 
amount streaming outward through one solid angle of 1 &%Steradian from a 
uniform point source having an intensity of one &%Candela.  &%Lumen = 
cd*sr = cd * 1.")

(documentation Lux "SI illuminance measure.  Symbol: lx.  It is the 
amount of illumination provided when one &%Lumen is evenly distributed 
over an area of 1 square &%Meter. This is also equivalent to the 
illumination that would exist on a surface all points of which are one 
&%Meter from a point source of one &%Candela.  &%Lux = lm/m^2 = 
m^(-2)*cd.")

(documentation Machine "&%Machines are &%Devices that that have a 
well-defined &%resource and &%result and that automatically convert 
the &%resource into the &%result.")

(documentation MagnitudeFn "The magnitude of a &%ConstantQuantity is the 
numeric value for the quantity.  In other words, &%MagnitudeFn converts 
a &%ConstantQuantity with an associated &%UnitOfMeasure into an ordinary 
&%RealNumber.  For example, the magnitude of the &%ConstantQuantity 2 
&%Kilometers is the &%RealNumber 2.   Note that the magnitude of a 
quantity in a given unit times that unit is equal to the original 
quantity.")

(documentation Maintaining "The &%Class of &%Processes where the &%agent 
cares for or maintains the &%Object.")

(documentation Making "The &%subclass of &%Creation in which an individual 
&%Artifact or a type of &%Artifact is made.")

(documentation Male "An &%Attribute indicating that an &%Organism is 
male in nature.")

(documentation Mammal "A &%Vertebrate having a constant body temperature 
and characterized by the presence of hair, mammary glands, and sweat 
glands.")

(documentation Man "The class of &%Male &%Humans.")

(documentation Managing "&%OrganizationalProcesses that involve overseeing 
the activities of others.  Note the key differences between &%RegulatoryProcess 
and its sibling &%Managing.  The latter implies a long-term relationship between 
the manager and the managed, while the former implies a normative standard to which 
the activities of the regulated are referred.")

(documentation Maneuver "An intentional move or play within a &%Contest.  
In many cases, a &%Maneuver is a realization of part of a strategy for 
winning the &%Contest, but it also may be just an arbitrary or semi-arbitrary 
division of the overarching &%Contest, e.g. innings in a baseball game.")

(documentation ManualHumanLanguage "A &%ManualHumanLanguage is a
&%HumanLanguage which has as its medium gestures and movement, such 
as the shape, position, and movement of the hands.")

(documentation Manufacture "The &%Making of &%Artifacts on a mass 
scale.")

(documentation Manufacturer "Any &%Corporation which manufactures &%Products.")

(documentation March "The &%Class of all &%Months which are March.")

(documentation Marsupial "The &%Class of &%Mammals which have a pouch for 
their young.")

(documentation MassMeasure "The &%Class of &%ConstantQuantities relating 
to the amount of matter in an &%Object.")

(documentation Matriculation "The &%OrganizationalProcess of joining an 
&%EducationalOrganization as a student.")

(documentation MaxFn "(&%MaxFn ?NUMBER1 ?NUMBER2) is the largest of 
?NUMBER1 and ?NUMBER2.  In cases where ?NUMBER1 is equal to ?NUMBER2, 
&%MaxFn returns one of its arguments.")

(documentation MaximalWeightedPathFn "This &%BinaryFunction assigns two 
&%GraphNodes to the &%GraphPath with the largest sum of weighted arcs 
between the two &%GraphNodes.")

(documentation May "The &%Class of all &%Months which are May.")

(documentation MeasureFn "This &%BinaryFunction maps a &%RealNumber and 
a &%UnitOfMeasure to that &%Number of units.  It is used for expressing 
&%ConstantQuantities.  For example, the concept of three meters is 
represented as (&%MeasureFn 3 &%Meter).")

(documentation Measuring "The &%Class of &%Calculating &%Processes where 
the aim is to determine the &%PhysicalQuantity of some aspect of the &%patient.")

(documentation MeasuringDevice "Any &%Device whose purpose is to measure a 
&%PhysicalQuantity.")

(documentation Meat "Any &%Food which was originally part of an 
&%Animal and is not ingested by drinking, including eggs and animal 
blood that is eaten as food.  Note that this class covers both raw 
meat and meat that has been prepared in some way, e.g. by cooking.  
Note too that preparations involving &%Meat and &%FruitOrVegetable 
are classed directly under &%Food.")

(documentation Meeting "The coming together of two or more 
&%CognitiveAgents for the purpose of &%Communication.  This covers informal 
meetings, e.g. visits with family members, and formal meetings, e.g. a board 
of directors meeting.")

(documentation MegaByte "One &%MegaByte (MB) of information.  One 
&%MegaByte is 1024 &%KiloBytes.  Note that this sense of 'mega' is 
different from the one accepted in the SI system.")

(documentation MegaFn "A &%UnaryFunction that maps a &%UnitOfMeasure into 
a &%UnitOfMeasure that is equal to 1,000,000 units of the original 
&%UnitOfMeasure.  For example, (&%MegaFn &%Hertz) is 1,000,000 &%Hertz.")

(documentation Melting "The &%Class of &%Processes where an &%Object is 
heated and converted from a &%Solid to a &%Liquid.")

(documentation MercantileOrganization "Any &%Corporation which sells 
goods or services to customers for a profit.")

(documentation MereologicalDifferenceFn "(&%MereologicalDifferenceFn ?OBJ1 
?OBJ2) denotes the &%Object consisting of the parts which belong to ?OBJ1 
and not to ?OBJ2.")

(documentation MereologicalProductFn "(&%MereologicalProductFn ?OBJ1 ?OBJ2) 
denotes the &%Object consisting of the parts which belong to both ?OBJ1 
and ?OBJ2.")

(documentation MereologicalSumFn "(&%MereologicalSumFn ?OBJ1 ?OBJ2) 
denotes the &%Object consisting of the parts which belong to either 
?OBJ1 or ?OBJ2.")

(documentation Metal "A &%Metal is an &%ElementalSubstance that conducts heat 
and electricity, is shiny and reflects many colors of light, and can be hammered 
into sheets or drawn into wire.  About 80% of the known chemical elements 
(&%ElementalSubstances) are metals.")

(documentation Meter "SI &%LengthMeasure.  Symbol:  m. It is one of the
base units in SI, and it is currently defined as follows: the &%Meter 
is the length of the path traveled by light in a vacuum during a time 
interval of 1/299792458 of a &%SecondDuration.")

(documentation MicroFn "A &%UnaryFunction that maps a &%UnitOfMeasure into 
a &%UnitOfMeasure that is equal to .000001 units of the original &%UnitOfMeasure.  
For example, (&%MicroFn &%Meter) is .000001 &%Meters.")

(documentation Microorganism "An &%Organism that can be seen only with 
the aid of a microscope.")

(documentation Mile "English length unit of miles.")

(documentation MilitaryForce "&%MilitaryForce is the subclass of 
&%Organizations that are organized along military lines and for the 
purpose of either defensive or offensive combat, whether or not 
the force is an official &%GovernmentOrganization.")

(documentation MilitaryOrganization "Any heavily armed &%Organization 
that is part of a &%Government and that is charged with representing the 
&%Government in international conflicts.")

(documentation MilitaryProcess "Any &%Process that is carried out by a 
military organization.  Note that this class covers &%Processes, e.g. 
military operations, that are the result of careful planning, as well as 
those which are unscripted.")

(documentation MilliFn "A &%UnaryFunction that maps a &%UnitOfMeasure into 
a &%UnitOfMeasure that is equal to .001 units of the original &%UnitOfMeasure.  
For example, (&%MilliFn &%Gram) is .001 &%Grams.")

(documentation Millimeter "Submultiple of Meter. Symbol: mm. A millimeter
is the 1000th part of a meter")

(documentation MinFn "(&%MinFn ?NUMBER1 ?NUMBER2) is the smallest of 
?NUMBER1 and ?NUMBER2.  In cases where ?NUMBER1 is equal to ?NUMBER2, 
&%MinFn returns one of its arguments.")

(documentation Mineral "Any of various naturally occurring homogeneous 
substances (such as stone, coal, salt, sulfur, sand, petroleum), or 
synthetic substances having the chemical composition and crystalline form 
and properties of a naturally occurring mineral.")

(documentation MinimalCutSetFn "A &%UnaryFunction that assigns a &%Graph 
the &%Class of &%GraphPaths which comprise cutsets for the &%Graph and 
which have the least number of &%GraphArcs.")

(documentation MinimalWeightedPathFn "This &%BinaryFunction assigns two 
&%GraphNodes to the &%GraphPath with the smallest sum of weighted arcs 
between the two &%GraphNodes.")

(documentation Minute "The &%Class of all clock &%Minutes.")

(documentation MinuteDuration "Time unit. 1 minute = 60 seconds. ")

(documentation MinuteFn "A &%BinaryFunction that assigns a &%PositiveRealNumber and 
a subclass of &%Hours to the &%Minutes within each &%Hour corresponding to that 
&%PositiveRealNumber.  For example, (&%MinuteFn 30 (&%HourFn 17 &%Day)) is the &%Class 
of all 5:30's in the afternoon.  For another example, (&%MinuteFn 15 &%Hour) would return 
the class of all instances of quarter past the hour.  For still another example, 
(&%MinuteFn 15 (&%HourFn 14 (&%DayFn 18 (&%MonthFn &%August (&%YearFn 1912))))) denotes 
15 minutes after 2 PM on the 18th day of August 1912.")

(documentation Mixture "A &%Mixture is two or more &%PureSubstances, 
combined in varying proportions - each retaining its own specific properties. 
The components of a &%Mixture can be separated by physical means, i.e. without 
the making and breaking of chemical bonds. Examples: Air, table salt thoroughly 
dissolved in water, milk, wood, and concrete. ")

(documentation Mole "SI amount of substance unit. symbol: mol. It is one 
of the base units in SI. It is defined as follows:  the &%Mole is the 
amount of substance of a system which contains as many elementary entities 
as there are atoms in 0.012 &%Kilograms of carbon 12.  Note that, when this 
&%UnitOfMeasure is used, the elementary entities must be specified - they 
may be atoms, molecules, ions, electrons, etc. or groups of such 
particles.")

(documentation Molecule "A molecule is the smallest unit of matter of a 
&%CompoundSubstance that retains all the physical and chemical properties 
of that substance, e.g., Ne, H2, H2O.  A molecule is two or more &%Atoms 
linked by a chemical bond.")

(documentation Mollusk "Soft-bodied &%Invertebrate that is usually 
contained in a shell.  Includes oysters, clams, mussels, snails, slugs, 
octopi, and squid.")

(documentation Monday "The &%Class of all calendar Mondays.")

(documentation Monkey "Various &%Primates with relatively long 
tails.")

(documentation Monochromatic "An &%Object with this &%Attribute has 
the same color on every part of its surface.")

(documentation Month "The &%Class of all calendar &%Months.")

(documentation MonthDuration "Time unit.  A month's duration is at least
28 days, and no more than 31 days.  Note that this unit is a range, rather
than an exact amount, unlike most other units.")

(documentation MonthFn "A &%BinaryFunction that maps a subclass of &%Month and a 
subclass of &%Year to the class containing the &%Months corresponding to thos &%Years. 
For example (&%MonthFn &%January (&%YearFn 1912)) is the class containing the eighth 
&%Month, i.e. August, of the &%Year 1912.  For another example, (&%MonthFn &%August 
&%Year) is equal to &%August, the class of all months of August.  Note that this function 
returns a &%Class as a value.  The reason for this is that the related functions, viz. 
DayFn, HourFn, MinuteFn, and SecondFn, are used to generate both specific &%TimeIntervals 
and recurrent intervals, and the only way to do this is to make the domains and ranges of 
these functions classes rather than individuals.")

(documentation Morpheme "Part of a &%Word which cannot be subdivided 
and which expresses a meaning.")

(documentation Moss "A &%NonFloweringPlant without true roots and little 
if any vascular tissue.")

(documentation Motion "Any &%Process of movement.")

(documentation MotionPicture "A &%ContentBearingObject which depicts motion 
(and which may have an audio or text component as well).  This &%Class covers 
films, videos, etc.")

(documentation MountainTimeZone "A &%TimeZone that covers much of the 
Rocky Mountain region of the United States.")

(documentation MultiGraph "The &%Class of multigraphs.  A multigraph 
is a &%Graph containing at least one pair of &%GraphNodes that are 
connected by more than one &%GraphArc.")

(documentation MultiplicationFn "If ?NUMBER1 and ?NUMBER2 are &%Numbers, 
then (&%MultiplicationFn ?NUMBER1 ?NUMBER2) is the arithmetical product 
of these numbers.")

(documentation Muscle "Nonrigid &%Tissue appearing only in &%Animals and 
composed largely of contractile cells.")

(documentation Music "The &%subclass of &%RadiatingSound where the 
sound is intended to be melodic and is produced deliberately.")

(documentation MusicalInstrument "A &%Device which is manipulated by a &%Human 
and whose purpose is to produce &%Music.")

(documentation MutuallyDisjointClass "A &%SetOrClass is a &%MutuallyDisjointClass 
just in case there exists nothing which is an instance of all of the instances of 
the original &%SetOrClass.")

(documentation Myriapod "A &%Class of &%Arthropods that includes 
centipedes and millipedes.")

(documentation NakedPromise "A &%Promise where nothing is promised in return, 
i.e. a nudum pactum.")

(documentation Naming "The &%Process of assigning a name to someone or something.")

(documentation NanoFn "A &%UnaryFunction that maps a &%UnitOfMeasure into 
a &%UnitOfMeasure that is equal to .000000001 units of the original 
&%UnitOfMeasure.  For example, (&%MicroFn &%SecondDuration) is .000000001 
&%SecondDurations.")

(documentation Nation "The broadest &%GeopoliticalArea, i.e. &%Nations are 
&%GeopoliticalAreas that are not part of any other overarching and 
comprehensive governance structure (excepting commonwealths and other sorts 
of loose international organizations).")

(documentation NaturalLanguage "The &%subclass of &%HumanLanguages which 
are not designed and which evolve from generation to generation.  This 
&%Class includes all of the national languages, e.g. English, Spanish, 
Japanese, etc.  Note that this class includes dialects of natural 
languages.")

(documentation NaturalSubstance "Any &%Substance that is not the result of 
an &%IntentionalProcess, i.e. any substance that occurs naturally.")

(documentation Near "The relation of common sense adjacency.  Note that, if 
an object is &%Near another object, then the objects are not &%connected.")

(documentation Necessity "Attribute that applies to &%Propositions that are 
necessary, i.e. true in every possible world.")

(documentation NegativeInfinity "The &%TimePoint that is before 
all other &%TimePoints.")

(documentation NegativeInteger "An &%Integer that is less than zero.")

(documentation NegativeRealNumber "A &%RealNumber that is less than 
zero.")

(documentation Neutron "Components of the &%AtomicNucleus.  They have no 
charge.")

(documentation Newton "SI force measure.  Symbol: N. It is that force 
which gives to a mass of 1 kilogram an acceleration of 1 &%Meter per 
&%SecondDuration.  &%Newton = m*kg*s^(-2).")

(documentation NonFloweringPlant "A &%Plant that reproduces with spores and 
does not produce flowers.")

(documentation NonFullyFormed "The stage of an &%Organism before it is 
&%FullyFormed.")

(documentation NonNullSet "Any &%SetOrClass that contains at least one 
instance.")

(documentation NonnegativeInteger "An &%Integer that is greater than 
or equal to zero.")

(documentation NonnegativeRealNumber "A &%RealNumber that is greater than 
or equal to zero.")

(documentation NormativeAttribute "A &%Class containing all of the 
&%Attributes that are specific to morality, legality, aesthetics, 
etiquette, etc.  Many of these attributes express a judgement that 
something ought or ought not to be the case.")

(documentation North "The compass direction of &%North.")

(documentation Noun "One of the parts of speech.  The &%Class of &%Words 
that conventionally denote &%Objects.")

(documentation NounPhrase "A &%Phrase that has the same function as a 
&%Noun.")

(documentation November "The &%Class of all &%Months which are November.")

(documentation NullList "The &%List that has no items.  The uniqueness of 
&%NullList follows from the extensionality of &%Lists, i.e. the fact that 
two &%Lists with the same items in the same order are identical.")

(documentation NullSet "Any &%SetOrClass that contains no instances.")

(documentation Number "A measure of how many things there are, or how
much there is, of a certain kind.  &%Numbers are subclassed into 
&%RealNumber, &%ComplexNumber, and &%ImaginaryNumber.")

(documentation NumberE "&%NumberE is the &%RealNumber that is the base for 
natural logarithms.  It is approximately equal to 2.718282.")

(documentation NumeratorFn "(&%NumeratorFn ?NUMBER) returns the numerator 
of the canonical reduced form ?NUMBER.")

(documentation Nutrient "A &%BiologicallyActiveSubstance required by an &%Organism.  
It is generally ingested as &%Food, and it is of primary interest because of its role 
in the biologic functioning of the &%Organism.")

(documentation Object "Corresponds roughly to the class of ordinary 
objects.  Examples include normal physical objects, geographical regions, 
and locations of &%Processes, the complement of &%Objects in the &%Physical 
class.  In a 4D ontology, an &%Object is something whose spatiotemporal 
extent is thought of as dividing into spatial parts roughly parallel to the 
time-axis.")

(documentation ObjectAttitude "The &%Class of &%IntentionalRelations 
where the &%Agent has awareness of an instance of &%Physical.")

(documentation ObjectiveNorm "The &%Class of &%NormativeAttributes that are 
associated with an objective criterion for their attribution, i.e. there is 
broad consensus about the cases where these attributes are applicable.")

(documentation Obligation "&%Attribute that applies to &%Propositions that an 
&%Agent is required, by some authority, to make true.")

(documentation October "The &%Class of all &%Months which are October.")

(documentation OddInteger "An &%Integer that is not evenly divisible 
by 2.")

(documentation Offering "The subclass of &%Committing in which a 
&%CognitiveAgent offers something &%Physical to another agent.  Offerings 
may be unconditional (in which case they are a promise to effect a 
&%UnilateralGiving) or conditional (in which case they are a promise to 
effect a &%Transaction of some sort).")

(documentation Ohm "SI electric resistance measure. It is the electric
resistance between two points of a conductor when a constant difference 
of potential of 1 &%Volt, applied between these two points,
produces in this conductor a current of 1 &%Ampere, this conductor not
being the force of any electromotive force.  &%Ohm = V/A = 
m^2*kg*s^(-3)*A^(-2).")

(documentation OlfactoryAttribute "The &%Class of properties that are 
detectable by smell.")

(documentation On "This is used to assert that an object is on top of 
another object, and it is derived from the up/down schema and involves 
contact.")

(documentation OneDimensionalFigure "The class of &%GeometricFigures that 
have position and an extension along a single dimension, viz. straight lines.")

(documentation OneToOneFunction "The &%Class of &%UnaryFunctions which 
are one to one.  A function F is one to one just in case for all X, Y in the 
domain of F, if X is not identical to Y, then F(X) is not identical to F(Y).")

(documentation OpenTwoDimensionalFigure "The class of &%TwoDimensionalFigures that 
are not &%ClosedTwoDimensionalFigures.")

(documentation Ordering "A &%Directing in which the receiver is 
commanded to realize the content of a &%ContentBearingObject.  Orders 
are injunctions, the disobedience of which involves sanctions, or 
which express an obligation upon the part of the orderee.")

(documentation Organ "A somewhat independent &%BodyPart that performs a 
specialized function.  Note that this functional definition covers bodily 
systems, e.g. the digestive system or the central nervous system.")

(documentation OrganOrTissueProcess "A &%PhysiologicProcess of a 
particular &%Organ or &%Tissue.")

(documentation OrganicObject "This class encompasses &%Organisms, 
&%CorpuscularObjects that are parts of &%Organisms, i.e. &%BodyParts, 
and &%CorpuscularObjects that are nonintentionally produced by 
&%Organisms, e.g. &%ReproductiveBodies.")

(documentation Organism "Generally, a living individual, including all 
&%Plants and &%Animals.")

(documentation OrganismProcess "A physiologic function of the 
&%Organism as a whole, of multiple organ systems or of multiple 
&%Organs or &%Tissues.")

(documentation Organization "An &%Organization is a corporate or similar 
institution. The &%members of an &%Organization typically have a common 
purpose or function. Note that this class also covers divisions, departments, 
etc. of organizations.  For example, both the Shell Corporation and the 
accounting department at Shell would both be instances of &%Organization.  
Note too that the existence of an &%Organization is dependent on the existence 
of at least one &%member (since &%Organization is a subclass of &%Collection).  
Accordingly, in cases of purely legal organizations, a fictitious &%member 
should be assumed.")

(documentation OrganizationalProcess "An &%IntentionalProcess that 
involves an &%Organization.")

(documentation Ounce "English unit of volume equal to 1/8 of a 
&%Cup.")

(documentation PacificTimeZone "A &%TimeZone that covers much of the 
western part of the United States.")

(documentation PairwiseDisjointClass "A &%SetOrClass is a &%PairwiseDisjointClass 
just in case every instance of the &%SetOrClass is either &%equal to or &%disjoint 
from every other instance of the &%SetOrClass.")

(documentation ParamilitaryOrganization "An &%Organization which is much like 
a &%MilitaryOrganization, e.g. it is made up of armed fighters, except that it 
is not associated with a &%Government.")

(documentation PartialOrderingRelation "A &%BinaryRelation is a partial 
ordering if it is a &%ReflexiveRelation, an &%AntisymmetricRelation, and 
a &%TransitiveRelation.")

(documentation PartialValuedRelation "A &%Relation is a &%PartialValuedRelation 
just in case it is not a &%TotalValuedRelation, i.e. just in case assigning values 
to every argument position except the last one does not necessarily mean that there 
is a value assignment for the last argument position.  Note that, if a &%Relation 
is both a &%PartialValuedRelation and a &%SingleValuedRelation, then it is a partial 
function.")

(documentation ParticleWord "An umbrella &%Class for any &%Word that does not 
fit into the other subclasses of &%Word.  A &%ParticleWord is generally a small 
term that serves a grammatical or logical function, e.g. 'and', 'of', 
'since', etc.  At some point, this class might be broken up into the 
subclasses 'Connective', 'Preposition', etc.  Note that the class &%ParticleWord 
includes both personal and possessive pronouns, e.g. 'she', 'hers', 'it', 'its', 
etc.")

(documentation Pascal "SI pressure measure.  Symbol:Pa. It is the 
pressure of one &%Newton per square &%Meter.  &%Pascal = N/m^2 
= m^(-1)*kg*s^(-2).")

(documentation PastFn "A &%UnaryFunction that maps a &%TimePosition 
to the &%TimeInterval that meets it and that begins at 
&%NegativeInfinity.")

(documentation Patent "A &%Certificate that expresses the content of an 
invention that has been accorded legal protection by a governemental 
entity.")

(documentation PathWeightFn "A &%UnaryFunction that maps a 
&%GraphPath to the sum of the &%arcWeights on the &%GraphArcs in 
the &%GraphPath.")

(documentation PathologicProcess "A disordered process, activity, or 
state of the &%Organism as a whole, of a body system or systems, or of 
multiple &%Organs or &%Tissues. Included here are normal responses to a 
negative stimulus as well as patholologic conditions or states that are 
less specific than a disease. Pathologic functions frequently have 
systemic effects.")

(documentation PerFn "&%PerFn maps two instances of &%ConstantQuantity to 
the &%FunctionQuantity composed of these two instances.  For example, 
(&%PerFn (&%MeasureFn 2 (&%MicroFn &%Gram)) (&%MeasureFn 1 (&%KiloFn 
&%Gram))) denotes the &%FunctionQuantity of 2 micrograms per kiogram.  
This function is useful, because it allows the knowledge engineer to 
dynamically generate instances of &%FunctionQuantity.")

(documentation Perception "Sensing some aspect of the material world.  
Note that the &%agent of this sensing is assumed to be an &%Animal.")

(documentation PerceptualAttribute "Any &%Attribute whose presence is detected 
by an act of &%Perception.")

(documentation Periodical "A &%Series whose elements are published separately 
and on a periodic basis.")

(documentation PeriodicalIssueFn "A &%BinaryFunction that maps a subclass of 
&%Periodical and a number to all of the issues of the &%Periodical corresponding 
to the number.")

(documentation PermanentResidence "A &%Residence where people live, i.e. 
where people have a &%home.")

(documentation Permission "&%Attribute that applies to &%Propositions that an 
&%Agent is permitted, by some authority, to make true.")

(documentation Phrase "A set of &%Words in a &%Language which form a unit, 
i.e. express a meaning in the &%Language.")

(documentation Physical "An entity that has a location in space-time.  
Note that locations are themselves understood to have a location in 
space-time.")

(documentation PhysicalQuantity "A &%PhysicalQuantity is a measure of 
some quantifiable aspect of the modeled world, such as 'the earth's 
diameter' (a constant length) and 'the stress in a loaded deformable 
solid' (a measure of stress, which is a function of three spatial 
coordinates).  All &%PhysicalQuantity(ies) are either &%ConstantQuantities 
or &%FunctionQuantity(ies).  Instances of &%ConstantQuantity are dependent 
on a &%UnitOfMeasure, while instances of &%FunctionQuantity are 
&%Functions that map instances of &%ConstantQuantity to other instances 
of &%ConstantQuantity (e.g., &%TimeDependentQuantity(ies) are 
&%FunctionQuantity(ies)).  Although the name and definition of 
&%PhysicalQuantity is borrowed from physics, &%PhysicalQuantity(ies) need 
not be material.  Aside from the dimensions of length, time, velocity, 
etc., nonphysical dimensions such as currency are also possible.  
Accordingly, amounts of money would be instances of &%PhysicalQuantity.  
&%PhysicalQuantity(ies) are distinguished from &%Numbers by the fact that 
the former are associated with a dimension of measurement.")

(documentation PhysicalState "The physical state of an &%Object.  There 
are three reified instances of this &%Class:  &%Solid, &%Liquid, and &%Gas.  
Physical changes are not characterized by the transformation of one 
substance into another, but rather by the change of the form (physical 
states) of a given substance.  For example, melting an iron nail yields a 
substance still called iron.")

(documentation PhysiologicProcess "A normal process of an &%Organism 
or part of an &%Organism.")

(documentation Pi "&%Pi is the &%RealNumber that 
is the ratio of the perimeter of a circle to its diameter.  It is 
approximately equal to 3.141592653589793.")

(documentation PicoFn "A &%UnaryFunction that maps a &%UnitOfMeasure into 
a &%UnitOfMeasure that is equal to .000000000001 units of the original 
&%UnitOfMeasure.  For example, (&%PicoFn &%SecondDuration) is .000000000001 
&%SecondDurations.")

(documentation Pint "English unit of volume equal to 1/2 of a 
&%Quart.")

(documentation Plan "A specification of a sequence of &%Processes which 
is intended to satisfy a specified purpose at some future time.")

(documentation PlaneAngleMeasure "The value of an angle in a plane.")

(documentation Planning "Specifying a set of actions in order to meet a 
set of goals or objectives.")

(documentation Plant "An &%Organism having cellulose cell walls, growing 
by synthesis of &%Substances, generally distinguished by the presence of 
chlorophyll, and lacking the power of locomotion.")

(documentation PlantAnatomicalStructure "&%AnatomicalStructures that 
are possessed exclusively by &%Plants.")

(documentation PlantSubstance "&%BodySubstances that are produced 
exclusively by &%Plants.")

(documentation Plasma "An extremely energetic &%PhysicalState that consists 
of atomic nuclei stripped of electrons.  That is, a plasma is composed of 
positive ions and free electrons.  &%Plasma behaves differently enough from 
&%Gas that it is referred to as the fourth state of matter.")

(documentation Pliable "The shape of an &%Object with this &%Attribute 
can easily be altered.")

(documentation Poisoning "A &%Poisoning is caused by an external 
substance.  Since &%Poisoning is not possible without some biologic 
function which affects the &%Organism being injured, it is a subclass 
of &%BiologicalProcess.")

(documentation Poking "The &%Class of &%Processes where the &%agent
pierces the surface of the &%Object with an &%instrument.")

(documentation PoliceOrganization "Any &%GovernmentOrganization  
that is charged with domestic enforcement of the laws of the &%Government.")

(documentation PoliticalOrganization "An &%Organization that is attempting to bring about some sort 
of political change.")

(documentation PoliticalProcess "An &%OrganizationalProcess carried 
out by, for or against officially constituted governments.  Some examples 
would be voting on proposed legislation, electing a government representative, 
or even overthrowing a government in a revolution.")

(documentation Pollen "A powder produced by &%FloweringPlants that contains male 
gametes and is capable of fertilizing the seeds of &%FloweringPlants of the same 
species.")

(documentation Polychromatic "An &%Object with this &%Attribute has 
different colors on different parts of its surface.")

(documentation Position "A formal position of reponsibility within an 
&%Organization. Examples of &%Positions include president, laboratory 
director, senior researcher, sales representative, etc.")

(documentation PositionalAttribute "&%Attributes characterizing the 
orientation of an &%Object, e.g. &%Vertical versus &%Horizontal, &%Left 
versus &%Right etc.")

(documentation PositiveInfinity "The &%TimePoint that is after 
all other &%TimePoints.")

(documentation PositiveInteger "An &%Integer that is greater than zero.")

(documentation PositiveRealNumber "A &%RealNumber that is greater than 
zero.")

(documentation Possibility "Attribute that applies to &%Propositions that are 
possible, i.e. true in at least one possible world.")

(documentation PoundForce "English pound of force. The conversion
factor depends on the local value of the acceleration of free fall. A
mean value is used in the conversion axiom associated with this 
constant.")

(documentation PoundMass "English mass unit of pounds.")

(documentation PowerSetFn "(&%PowerSetFn ?CLASS) maps the &%SetOrClass 
?CLASS to the &%SetOrClass of all &%subclasses of ?CLASS.")

(documentation Precipitation "&%Precipitation is the process of 
water molecules falling from the air to the ground, in either a 
liquid or frozen state.")

(documentation PredecessorFn "A &%UnaryFunction that maps an &%Integer to 
its predecessor, e.g. the predecessor of 5 is 4.")

(documentation Predicate "A &%Predicate is a sentence-forming &%Relation.  
Each tuple in the &%Relation is a finite, ordered sequence of objects.  
The fact that a particular tuple is an element of a &%Predicate is denoted 
by '(*predicate* arg_1 arg_2 .. arg_n)', where the arg_i are the 
objects so related.  In the case of &%BinaryPredicates, the fact can
be read as `arg_1 is *predicate* arg_2' or `a *predicate* of
arg_1 is arg_2'.")

(documentation Predicting "The &%Class of &%IntentionalPsychologicalProcesses 
which involve the formulation of a &%Proposition about a state of affairs 
which might be realized in the future.")

(documentation PremisesFn "(&%PremisesFn ?ARGUMENT) returns the complete 
set of &%premises of the &%Argument ?ARGUMENT.")

(documentation PrepositionalPhrase "A &%Phrase that begins with a 
preposition and that functions as an &%Adjective or an &%Adverb.")

(documentation Pretending "Any &%SocialInteraction where a 
&%CognitiveAgent or &%Group of &%CognitiveAgents attempts to make 
another &%CognitiveAgent or &%Group of &%CognitiveAgents believe 
something that is false.  This covers deceit, affectation, 
impersonation, and entertainment productions, to give just a few 
examples.")

(documentation PrimaryColor "Colors which can be blended to form any 
color and which cannot be derived from any other colors.")

(documentation Primate "The &%Class of &%Mammals which are 
&%Primates.")

(documentation PrimeNumber "An &%Integer that is evenly divisible only 
by itself and 1.")

(documentation ProbabilityAttribute "A class containing all of the &%Attributes 
relating to objective, qualitative assessments of probability, e.g. &%Likely and 
&%Unlikely.")

(documentation ProbabilityFn "One of the basic &%ProbabilityRelations, 
&%ProbabilityFn is used to state the a priori probability of a state of 
affairs.  (&%ProbabilityFn ?FORMULA) denotes the a priori probability 
of ?FORMULA.")

(documentation ProbabilityRelation "The &%Class of &%Relations that 
permit assessment of the probability of an event or situation.")

(documentation Procedure "A sequence-dependent specification.  Some 
examples are &%ComputerPrograms, finite-state machines, cooking recipes, 
musical scores, conference schedules, driving directions, and the scripts 
of plays and movies.")

(documentation Process "Intuitively, the class of things that happen 
and have temporal parts or stages.  Examples include extended events 
like a football match or a race, actions like &%Pursuing and &%Reading, 
and biological processes. The formal definition is: anything that lasts 
for a time but is not an &%Object.  Note that a &%Process may have 
participants 'inside' it which are &%Objects, such as the players 
in a football match.  In a 4D ontology, a &%Process is something whose 
spatiotemporal extent is thought of as dividing into temporal stages 
roughly perpendicular to the time-axis.")

(documentation Product "An &%Artifact that is produced by &%Manufacture.")

(documentation Prohibition "&%Prohibition is the &%DeonticAttribute that 
applies to &%Formulas that an &%Agent is forbidden, by some authority, 
to make true.")

(documentation Promise "&%Attribute that applies to &%Propositions that 
an &%Agent promises to make true.  &%Promises may be implicit or explicit.  
They may be expressed in a written or verbal or gestural manner.")

(documentation PropertyFn "A &%UnaryFunction that maps an &%Agent to the 
&%Set of &%Objects owned by the &%Agent.")

(documentation Proposition "&%Propositions are &%Abstract entities that 
express a complete thought or a set of such thoughts.  As an example, 
the formula '(instance Yojo Cat)' expresses the &%Proposition that the 
entity named Yojo is an element of the &%Class of Cats.  Note that 
propositions are not restricted to the content expressed by individual 
sentences of a &%Language.  They may encompass the content expressed by 
theories, books, and even whole libraries.  It is important to distinguish 
&%Propositions from the &%ContentBearingObjects that express them.  A 
&%Proposition is a piece of information, e.g. that the cat is on the mat, 
but a &%ContentBearingObject is an &%Object that represents this information.  
A &%Proposition is an abstraction that may have multiple representations: 
strings, sounds, icons, etc.  For example, the &%Proposition that the cat is 
on the mat is represented here as a string of graphical characters displayed 
on a monitor and/or printed on paper, but it can be represented by a sequence 
of sounds or by some non-latin alphabet or by some cryptographic form")

(documentation PropositionalAttitude "The &%Class of 
&%IntentionalRelations where the &%Agent has awareness of a 
&%Proposition.")

(documentation Prostrate "The &%BodyPosition of lying down, being in a 
horizontal position.")

(documentation Protein "A &%Nutrient made up of amino acids joined by 
peptide bonds.")

(documentation Proton "Components of the &%AtomicNucleus.  They have a 
positive charge.")

(documentation PseudoGraph "The &%Class of pseudographs.  A pseudograph 
is a &%Graph containing at least one &%GraphLoop.")

(documentation PsychologicalAttribute "&%Attributes that characterize the mental 
or behavioral life of an &%Organism.")

(documentation PsychologicalDysfunction "A clinically significant 
dysfunction whose major manifestation is behavioral or psychological.  
These dysfunctions may have identified or presumed biological etiologies 
or manifestations.")

(documentation PsychologicalProcess "A &%BiologicalProcess which takes place in 
the mind or brain of an &%Organism and which may be manifested in the behavior 
of the &%Organism.")

(documentation Publication "The &%Manufacture of &%Texts.  Note that 
there is no implication that the &%Texts are distributed.  Such 
distribution, when it occurs, is an instance of &%Dissemination.")

(documentation PurchaseContract "A &%Contract between two &%Agents in 
which one &%Agent agrees to render the other some good or service in 
exchange for currency.")

(documentation PureSubstance "The &%Class of &%Substances with constant 
composition.  A &%PureSubstance can be either an element (&%ElementalSubstance) 
or a compound of elements (&%CompoundSubstance).  Examples: Table salt 
(sodium chloride, NaCl), sugar (sucrose, C_{12}H_{22}O_{11}), water (H_2O), 
iron (Fe), copper (Cu), and oxygen (O_2).")

(documentation Pursuing "The class of &%IntentionalProcesses where something is 
sought.  Some examples would be hunting, shopping, trawling, and stalking.")

(documentation Putting "The &%Class of &%Processes where something is put 
in a location.  Note that the location is specified with the &%CaseRole 
&%destination.")

(documentation Quantity "Any specification of how many or how much of 
something there is.  Accordingly, there are two subclasses of &%Quantity:  
&%Number (how many) and &%PhysicalQuantity (how much).")

(documentation QuantityChange "Any &%InternalChange where a &%PhysicalQuantity 
associated with the &%patient is altered.")

(documentation Quart "English unit of volume equal to 1/4 of a 
&%UnitedStatesGallon.")

(documentation QuaternaryFunction "The &%Class of &%Functions that require 
exactly four arguments.")

(documentation QuaternaryPredicate "The &%Class of &%Predicates that 
require four arguments.")

(documentation QuaternaryRelation "&%QuaternaryRelations relate four 
items.  The two &%subclasses of &%QuaternaryRelation are 
&%QuaternaryPredicate and &%TernaryFunction.")

(documentation Questioning "A request for information.  For example, John asked 
Bill if the President had said anything about taxes in his State of the Union 
address.")

(documentation QuintaryPredicate "The &%Class of &%Predicates that 
require five arguments.")

(documentation QuintaryRelation "&%QuintaryRelations relate five items.  
The two &%subclasses of &%QuintaryRelation are &%QuintaryPredicate and 
&%QuaternaryFunction.")

(documentation Radian "SI plane angle measure.  Symbol: rad.  It is the 
angle of a circle subtended by an arc equal in length to the circle's 
radius. Another definition is:  the plane angle between two radii of a 
circle which cut off on the circumference an arc equal in length to the 
radius.  &%Radian = m/m = 1.")

(documentation Radiating "Processes in which some form of electromagnetic 
radiation, e.g. radio waves, light waves, electrical energy, etc., is given 
off or absorbed by something else.")

(documentation RadiatingElectromagnetic "&%RadiatingElectromagnetic 
is the subclass of &%Radiating processes in which electromagnetic 
radiation is transmitted or absorbed.")

(documentation RadiatingLight "The &%subclass of &%Radiating in which 
light is given off or absorbed.  Some examples include blinking, flashing, 
and glittering.")

(documentation RadiatingNuclear "Releasing atomic energy, i.e. energy from 
a nuclear reaction.")

(documentation RadiatingSound "The &%subclass of &%Radiating in which 
sound waves are given off or absorbed.  Some examples include creaking, 
roaring, and whistling.")

(documentation RankineDegree "A &%TemperatureMeasure.  Note 
that 0 &%RankineDegrees is the same as the absolute zero (i.e. 0 
&%KelvinDegrees).")

(documentation RationalNumber "Any &%RealNumber that is the product of 
dividing two &%Integers.")

(documentation RationalNumberFn "(&%RationalNumberFn ?NUMBER) returns 
the rational representation of ?NUMBER.")

(documentation Reading "A &%subclass of &%ContentDevelopment in which 
content is converted from a written form into a spoken representation.  
Note that the class &%Interpreting should be used in cases where a 
&%Text is read silently.")

(documentation RealNumber "Any &%Number that can be expressed as a 
(possibly infinite) decimal, i.e. any &%Number that has a position 
on the number line.")

(documentation RealNumberFn "(RealNumberFn ?NUMBER) returns the part of 
?NUMBER that is a &%RealNumber.")

(documentation Reasoning "The &%Class of &%IntentionalPsychologicalProcesses 
which involve concluding, on the basis of either deductive or inductive 
evidence, that a particular &%Proposition or &%Sentence is true.")

(documentation ReciprocalFn "(ReciprocalFn ?NUMBER) is the reciprocal 
element of ?NUMBER with respect to the multiplication operator 
(&%MultiplicationFn), i.e. 1/?NUMBER.  Not all numbers have a reciprocal 
element.  For example the number 0 does not.  If a number ?NUMBER has a 
reciprocal ?RECIP, then the product of ?NUMBER and ?RECIP will be 
1, e.g. 3*1/3 = 1.  The reciprocal of an element is &%equal to 
applying the &%ExponentiationFn function to the element to the power 
-1.")

(documentation RecreationOrExercise "A &%Process that is carried out for 
the purpose of recreation or exercise.  Since &%RecreationOrExercise is a 
subclass of &%IntentionalProcess, the intent of a process determines whether 
or not it is an instance of the class.  Hence, if John and Bill watch the same 
program on television, and John watches it to relax while Bill watches it solely 
to satisfy an educational requirement, then John's watching the movie is an 
instance of &%RecreationOrExercise, while Bill's is not (both cases of 
watching the television program would however be in the class of &%Seeing, since 
being an instance of this latter class is not determined by intention).")

(documentation RecurrentTimeIntervalFn "A function that is useful for generating 
recurring time intervals.  For example, (&%RecurrentTimeIntervalFn (&%HourFn 6 &%Day)  
(&%HourFn 12 &%Day)) returns the &%Class of &%TimeIntervals beginning at 6 in the 
morning and ending at 12 noon.  For another example, (&%RecurrentTimeInterval 
&%Saturday &%Sunday) returns the &%Class of all weekends.  For still another example, 
(&%RecurrentTimeInterval &%June &%August) returns the &%Class containing the academic 
summer period.")

(documentation Red "The &%Attribute of redness.")

(documentation ReflexiveRelation "&%Relation ?REL is reflexive iff 
(?REL ?INST ?INST) for all ?INST.")

(documentation Region "A topographic location.  &%Regions encompass 
surfaces of &%Objects, imaginary places, and &%GeographicAreas.  Note 
that a &%Region is the only kind of &%Object which can be located at 
itself.  Note too that &%Region is not a subclass of &%SelfConnectedObject, 
because some &%Regions, e.g. archipelagos, have &%parts which are not 
&%connected with one another.")

(documentation RegulatoryProcess "an &%Guiding whose aim is the enforcement 
of rules or regulations.  Note the key differences between &%RegulatoryProcess 
and the related concept &%Managing.  The latter implies a long-term relationship 
between a single manager and limited number of agents who are managed, while the 
former implies a normative standard to which the activities of the regulated are 
referred.")

(documentation Relation "The &%Class of relations.  There are three kinds 
of &%Relation:  &%Predicate, &%Function, and &%List.  &%Predicates and 
&%Functions both denote sets of ordered n-tuples.  The difference between 
these two &%Classes is that &%Predicates cover formula-forming operators, while 
&%Functions cover term-forming operators.  A &%List, on the other hand, is a 
particular ordered n-tuple.")

(documentation RelationExtendedToQuantities "A 
&%RelationExtendedToQuantities is a &%Relation that, when it is true on 
a sequence of arguments that are &%RealNumbers, it is also true on a 
sequence of &%ConstantQuantites with those magnitudes in some unit of 
measure.  For example, the &%lessThan relation is extended to quantities.  
This means that for all pairs of quantities ?QUANTITY1 and ?QUANTITY2, 
(lessThan ?QUANTITY1 ?QUANTITY2) if and only if, for some ?NUMBER1, 
?NUMBER2, and ?UNIT, ?QUANTITY1 = (MeasureFn ?NUMBER1 ?UNIT), 
?QUANTITY2 = (MeasureFn ?NUMBER2 ?UNIT), and (lessThan ?NUMBER1 ?NUMBER2), 
for all units ?UNIT on which ?QUANTITY1 and ?QUANTITY2 can be measured.  
Note that, when a &%RelationExtendedToQuantities is extended from 
&%RealNumbers to &%ConstantQuantities, the &%ConstantQuantities must be 
measured along the same physical dimension.")

(documentation RelationalAttribute "Any &%Attribute that an &%Entity has by 
virtue of a relationship that it bears to another &%Entity or set of &%Entities, 
e.g. &%SocialRoles and &%PositionalAttributes.")

(documentation RelativeComplementFn "A &%BinaryFunction that maps two 
&%SetOrClasses to the difference between these &%SetOrClasses.  More 
precisely, (&%RelativeComplementFn ?CLASS1 ?CLASS2) denotes the instances 
of ?CLASS1 that are not also instances of ?CLASS2.")

(documentation RelativeTimeFn "A means of converting &%TimePositions 
between different &%TimeZones.  (&%RelativeTimeFn ?TIME ?ZONE) 
denotes the &%TimePosition in &%CoordinatedUniversalTime that is 
contemporaneous with the &%TimePosition ?TIME in &%TimeZone ?ZONE.
For example, (&%RelativeTimeFn (&%MeasureFn 14 &%Hour) &%EasternTimeZone) 
would return the value (&%MeasureFn 19 &%Hour).")

(documentation Releasing "Any instance of &%Transfer which results in 
a situation where it is not the case that the &%agent &%grasps something 
which he/she &%grasps previously.")

(documentation ReligiousOrganization "An &%Organization whose members 
share a set of religious beliefs.")

(documentation ReligiousProcess "An &%OrganizationalProcess that is 
carried out within or by a &%ReligiousOrganization.")

(documentation RemainderFn "(RemainderFn ?NUMBER ?DIVISOR) is the 
remainder of the number ?NUMBER divided by the number ?DIVISOR.  
The result has the same sign as ?DIVISOR.")

(documentation Remembering "The &%Class of &%PsychologicalProcesses which 
involve the recollection of prior experiences and/or of knowledge 
which was previously acquired.")

(documentation Removing "The &%Class of &%Processes where something is 
taken away from a location.  Note that the thing removed and the location 
are specified with the &%CaseRoles &%patient and &%origin, respectively.")

(documentation Repairing "The &%Class of &%Processes where the &%agent 
makes a modification or series of modifications to an &%Object that is not 
functioning as intended so that it works properly.")

(documentation Replication "The &%Process of biological reproduction.  
This can be either a sexual or an asexual process.")

(documentation RepresentationalArtWork "Any &%ArtWork that represents 
something &%Physical.")

(documentation ReproductiveBody "Reproductive structure of &%Organisms.  
Consists of an &%Embryonic &%Object and a nutritive/protective envelope.  
Note that this class includes seeds, spores, and &%FruitOrVegetables, as 
well as the eggs produced by &%Animals.")

(documentation Reptile "A &%ColdBloodedVertebrate having an external 
covering of scales or horny plates.  &%Reptiles breathe by means of 
&%Lungs and generally lay eggs.")

(documentation Requesting "A request expresses a desire that some future 
action be performed.  For example, the 5th Battalion requested air support 
from the 3rd Bomber Group.  Note that this class covers proposals, 
recommendations, suggestions, etc.")

(documentation Residence "A &%Building or part of a &%Building which provides 
some accomodation for sleeping.")

(documentation ResidentialBuilding "A &%Building which provides some 
accomodation for sleeping.  Note that this class does not cover just 
permanent residences, e.g. &%Houses and condominium and apartment buildings, 
but also temporary residences, e.g. hotels and dormitories.  
&%ResidentialBuildings are also distinguished from &%CommercialBuildings, 
which are intended to serve an organizational rather than a residential 
function.")

(documentation Right "This &%PositionalAttribute is derived from the 
left/right schema.  Note that this means directly to the right, so that, 
if one object is to the right of another, then the projections of the 
two objects overlap.")

(documentation Rigid "The shape of an &%Object with this &%Attribute 
cannot be altered without breaking.")

(documentation Roadway "&%Roadway is the subclass of &%LandTransitways 
that are areas intended for surface travel by self-powered, wheeled 
vehicles, excluding those that travel on tracks.  &%Roadways have been 
at least minimally improved to enable the passage of vehicles.  
&%Roadways include dirt and gravelled roads, paved streets, and 
expressways.")

(documentation Rodent "The &%Class of &%Mammals with one or two pairs 
of incisors for gnawing.  Includes rats, mice, guinea pigs, and 
rabbits.")

(documentation Room "A &%properPart of a &%Building which is separated from 
the exterior of the &%Building and/or other &%Rooms of the &%Building by walls. 
Some &%Rooms may have a specific purpose, e.g. sleeping, bathing, cooking, 
entertainment, etc.")

(documentation Rough "An &%Object with this &%Attribute has a rough 
surface.")

(documentation RoundFn "(&%RoundFn ?NUMBER) is the &%Integer closest 
to ?NUMBER on the number line.  If ?NUMBER is halfway between two 
&%Integers (for example 3.5), it denotes the larger &%Integer.")

(documentation Running "&%Ambulating relatively quickly, i.e. moving in such a 
way that, with each step, neither foot is in contact with the ground for a 
period of time.")

(documentation SaltWaterArea "A &%WaterArea whose &%Water is saline, e.g. 
oceans and seas.")

(documentation SaturationAttribute "A &%Class of &%Attributes that specify, in 
a qualitative manner, the extent of the presence of one kind of &%Object in 
another kind of &%Object.")

(documentation Saturday "The &%Class of all calendar Saturdays.")

(documentation Second "The &%Class of all clock &%Seconds.")

(documentation SecondDuration "SI &%TimeDuration.  Symbol: s. 
It is one of the base units in SI, and it is currently defined as 
follows: the &%SecondDuration is the duration of 9192631770 periods of 
the radiation corresponding to the transition between the two hyperfine 
levels of the ground state of the cesium 133 atom.")

(documentation SecondFn "A &%BinaryFunction that assigns a &%PositiveRealNumber and a 
subclass of &%Minutes to the &%Seconds within each &%Minute corresponding to that 
&%PositiveRealNumber.  For example, (&%SecondFn 4 (&%MinuteFn 5 &%Hour)) is the &%Class 
of all fourth &%Seconds of every fifth &%Minute of every hour.  For another example, 
(&%SecondFn 8 &%Minute) would return the eighth second of every minute.  For still 
another example, (&%SecondFn 9 (&%MinuteFn 15 (&%HourFn 14 (&%DayFn 18 (&%MonthFn 
&%August (&%YearFn 1912)))))) denotes 9 seconds and 15 minutes after 2 PM on the 18th 
day of August 1912.")

(documentation Seed "The fertilized or unfertilized female &%ReproductiveBody 
of a &%FloweringPlant.")

(documentation Seeing "The &%subclass of &%Perception in which the 
sensing is done by an ocular &%Organ.")

(documentation Selecting "The &%Class of &%IntentionalPsychologicalProcesses 
which involve opting for one or more &%Entity out of a larger set of &%Entities.  
Note that this covers all cases of judging or evaluating.")

(documentation SelfConnectedObject "A &%SelfConnectedObject is any 
&%Object that does not consist of two or more disconnected parts.")

(documentation Selling "A &%FinancialTransaction in which an instance of 
&%Physical is exchanged for an instance of &%CurrencyMeasure.")

(documentation Sentence "A syntactically well-formed formula of a 
&%Language.  It includes, at minimum, a predicate and a subject (which 
may be explicit or implicit), and it expresses a &%Proposition.")

(documentation SentientAgent "An &%Agent that has rights but may or may 
not have responsibilities and the ability to reason.  If the latter are 
present, then the &%Agent is also an instance of &%CognitiveAgent.  
Domesticated animals are an example of &%SentientAgents that are not 
also &%CognitiveAgents.")

(documentation Separating "A &%Process where a &%SelfConnectedObject is 
separated into (some of) its &%parts.  Note that &%Separating is different 
from &%Detaching in that the latter only results in the two objects not 
being &%connected.  Note too that &%Separating is different from 
&%Removing in that one or both of the two things which are separated 
may or may not be moved from the location where they were separated.")

(documentation September "The &%Class of all &%Months which are September.")

(documentation SequenceFunction "The &%Class of &%OneToOneFunctions whose range 
is a subclass of the &%PositiveIntegers.")

(documentation Series "A &%Text consisting of multiple self-contained units.  
Some examples are an encyclopedia containing a couple dozen volumes, a television 
series made up of many episodes, a film serial, etc.")

(documentation SeriesVolumeFn "A &%BinaryFunction that maps a type of &%Series 
(e.g. the Encyclopedia_Britannica or the Popular_Mechanics periodical) and a 
number to the volumes of the text type designated by the number.")

(documentation ServiceContract "A &%Contract where an &%Agent agrees to 
perform a service for another &%Agent (usually for a price).")

(documentation Set "A &%SetOrClass that satisfies extensionality as well as
other constraints specified by some choice of set theory.  &%Sets differ 
from &%Classes in two important respects.  First, &%Sets are extensional - 
two &%Sets with the same &%elements are identical.  Second, a &%Set can be 
an arbitrary stock of objects.  That is, there is no requirement that &%Sets 
have an associated condition that determines their membership.  Note that &%Sets 
are not assumed to be unique sets, i.e. &%elements of a &%Set may occur more 
than once in the &%Set.")

(documentation SetOrClass "The &%SetOrClass of &%Sets and &%Classes, i.e. any instance 
of &%Abstract that has &%elements or &%instances.")

(documentation SexAttribute "&%Attributes that indicate the sex of an 
&%Organism.")

(documentation SexualReproduction "Sexual &%Processes of biological 
reproduction.")

(documentation ShapeAttribute "Any &%Attribute that relates to the 
shape of an &%Object.")

(documentation ShapeChange "The &%Process of changing the shape of an &%Object.")

(documentation Shooting "The &%subclass of &%Impelling where the &%patient 
is a projectile that is fired through the air by means of some sort of 
&%Device.")

(documentation ShoreArea "A &%ShoreArea is a &%LandArea approximately 
1-3 km wide bordering a body of water, such as an ocean, bay, river, 
or lake.  A &%ShoreArea may comprise a variety of &%LandForms, such as dunes, 
sloughs, and marshes.")

(documentation Siemens "SI electric conductance measure.  Symbol:  S.  
In the case of direct current, the conductance in &%Siemens is the 
reciprocal of the resistance in &%Ohms, in the case of alternating current, 
it is the reciprocal of the impedance in ohms.  siemens = A/V = 
m^(-2)*kg(-1)*s^(3)*A^2.")

(documentation Sievert "SI dose equivalent measure.  Symbol: Sv.  It is 
a unit of biologic dose of ionizing radiation.  The &%Sievert makes it 
possible to normalize doses of different types of radiation. It takes 
into account the relative biologic effectiveness of ionizing radiation, 
since each form of such radiation--e.g., X rays, gamma rays, neutrons--
has a slightly different effect on living tissue for a given absorbed 
dose. The dose equivalent of a given type of radiation (in &%Sievert) is 
the dose of the radiation in &%Gray multiplied by a quality factor that 
is based on the relative biologic effectiveness of the radiation. 
Accordingly, one &%Sievert is generally defined as the amount of radiation 
roughly equivalent in biologic effectiveness to one &%Gray of gamma 
radiation.  &%Sievert = J/kg = m^2*s^(-2)")

(documentation SignumFn "(SignumFn ?NUMBER) denotes the sign of ?NUMBER.  
This is one of the following values:  -1, 1, or 0.")

(documentation SineFn "(&%SineFn ?DEGREE) is the sine of the 
&%PlaneAngleMeasure ?DEGREE.  The sine of ?DEGREE is the ratio of the side 
opposite ?DEGREE to the hypotenuse in a right-angled triangle.")

(documentation Singing "&%Speaking that is also &%Music.")

(documentation SingleFamilyResidence "A &%PermanentResidence which is 
intended to be the &%home of a single &%SocialUnit.  This class covers 
&%Houses, &%ApartmentUnits, and &%CondominiumUnits.")

(documentation SingleValuedRelation "A &%Relation is a &%SingleValuedRelation 
just in case an assignment of values to every argument position except the last 
one determines at most one assignment for the last argument position.  Note 
that not all &%SingleValuedRelations are &%TotalValuedRelations.")

(documentation Sitting "The &%BodyPosition of being recumbent, i.e. 
knees bent and back side supported.")

(documentation Slug "English mass unit of slugs.")

(documentation Smelling "The &%subclass of &%Perception in which the 
sensing is done by an olefactory &%Organ.")

(documentation Smoke "A mixture of fine particles suspended in a gas that is 
produced by &%Combustion.")

(documentation Smooth "An &%Object with this &%Attribute has a smooth 
surface.")

(documentation SocialInteraction "The &%subclass of 
&%IntentionalProcess that involves interactions between 
&%CognitiveAgents.")

(documentation SocialRole "The &%Class of all &%Attributes that 
specify the position or status of a &%CognitiveAgent within an 
&%Organization or other &%Group.")

(documentation SocialUnit "A &%GroupOfPeople who all have the same &%home.")

(documentation Solid "An &%Object has the &%Attribute of &%Solid if it 
has a fixed shape and a fixed volume.")

(documentation SolidAngleMeasure "The value of an angle in a solid.")

(documentation Solution "A liquid mixture. The most abundant component in 
a solution is called the solvent. Other components are called solutes. 
A solution, though homogeneous, may nonetheless have variable composition. 
Any amount of salt, up to a maximum limit, can be dissolved in a given 
amount of water.")

(documentation SoundAttribute "The volume of sound relative to a listener.")

(documentation South "The compass direction of &%South.")

(documentation SpatialRelation "The &%Class of &%Relations that are 
spatial in a wide sense.  This &%Class includes mereological relations 
and topological relations.")

(documentation Speaking "Any &%LinguisticGeneration which is also a 
&%Vocalizing, i.e. any &%LinguisticCommunication by a &%Human which 
involves his/her vocal cords.")

(documentation SpeedFn "Maps an instance of &%LengthMeasure and an instance of 
&%TimeDuration to the speed represented by this proportion of distance and time.  
For example, (&%SpeedFn (&%MeasureFn 55 &%Mile)(&%MeasureFn 1 &%HourDuration)) 
represents the velocity of 55 miles per hour.")

(documentation SpokenHumanLanguage "A &%SpokenHumanLanguage is a
&%HumanLanguage which has as its medium the human voice. It can also 
berepresented visually through writing, although not all 
&%SpokenHumanLanguages have a codified written form.")

(documentation Spore "Any &%ReproductiveBody of a &%NonFloweringPlant.")

(documentation Sport "A &%Game which requires some degree of physical 
exercion from the participants of the game.")

(documentation SquareRootFn "(SquareRootFn ?NUMBER) is the principal 
square root of ?NUMBER.")

(documentation Standing "The &%BodyPosition of being upright, i.e. being 
fully extended and supported by nothing other than one's own feet.")

(documentation StateChange "Any &%Process where the &%PhysicalState 
of &%part of the &%patient of the &%Process changes.")

(documentation StateOfMind "The class &%StateOfMind is distinguished from 
its complement &%TraitAttribute by the fact that instances of the former are 
transient while instances of the latter are persistent features of a creature's behavioral/psychological make-up.")

(documentation StateOrProvince "Administrative subdivisions of a 
&%Nation that are broader than any other political subdivisions that 
may exist.  This &%Class includes the states of the United States, as 
well as the provinces of Canada and European countries.")

(documentation StaticWaterArea "A &%WaterArea in which water does not flow 
constantly or in the same direction, e.g. most lakes and ponds.")

(documentation Stating "Instances of this &%Class commit the &%agent to some truth. 
For example, John claimed that the moon is made of green cheese.")

(documentation StationaryArtifact "A &%StationaryArtifact is an &%Artifact 
that has a fixed spatial location.  Most instances of this &%Class are 
architectural works, e.g. the Eiffel Tower, the Great Pyramids, office towers, 
single-family houses, etc.")

(documentation Steradian "SI solid angle measure.  Symbol: sr.  It is 
the solid angle of a sphere subtended by a portion of the surface whose 
area is equal to the square of the sphere's radius.  Another definition 
is: the solid angle which, having its vertex in the center of the sphere, 
cuts off an area of the surface of the sphere equal to that of a square 
with sides of length equal to the radius of the sphere.  &%Steradian = 
m^2/m^2 = 1.")

(documentation StreamWaterArea "A relatively narrow &%WaterArea where the 
water flows constantly and in the same direction, e.g. a river, a stream, 
etc.")

(documentation SubatomicParticle "The class of &%ElementalSubstances that 
are smaller than &%Atoms and compose &%Atoms.")

(documentation SubjectiveAssessmentAttribute "The &%Class of &%NormativeAttributes
which lack an objective criterion for their attribution, i.e. the attribution of 
these &%Attributes varies from subject to subject and even with respect to the 
same subject over time.  This &%Class is, generally speaking, only used when 
mapping external knowledge sources to the SUMO.  If a term from such a knowledge 
source seems to lack objective criteria for its attribution, it is assigned to 
this &%Class.")

(documentation Substance "An &%Object in which every part is similar to 
every other in every relevant respect.  More precisely, something is a 
&%Substance when it has only arbitrary pieces as parts - any parts have 
properties which are similar to those of the whole.  Note that a &%Substance 
may nonetheless have physical properties that vary.  For example, the 
temperature, chemical constitution, density, etc. may change from one part 
to another.  An example would be a body of water.")

(documentation Substituting "The &%Class of &%Transfers where one thing is 
replaced with something else.")

(documentation SubtractionFn "If ?NUMBER1 and ?NUMBER2 are &%Numbers, 
then (&%SubtractionFn ?NUMBER1 ?NUMBER2) is the arithmetical difference 
between ?NUMBER1 and ?NUMBER2, i.e. ?NUMBER1 minus ?NUMBER2.  An 
exception occurs when ?NUMBER1 is equal to 0, in which case 
(&%SubtractionFn ?NUMBER1 ?NUMBER2) is the negation of ?NUMBER2.")

(documentation SuccessorFn "A &%UnaryFunction that maps an &%Integer to 
its successor, e.g. the successor of 5 is 6.")

(documentation Summary "A short &%Text that is a summary of another, 
longer &%Text.")

(documentation Sunday "The &%Class of all calendar Sundays.")

(documentation Supposing "Instances of this &%Class suppose, for the sake of 
argument, that a proposition is true.  For example, John considered what he 
would do if he won the lottery.")

(documentation SurfaceChange "&%Processes which involve altering 
the properties that apply to the surface of an &%Object.")

(documentation Surgery "Any &%TherapeuticProcess that involves making an 
incision in the &%Animal that is the &%patient of the &%TherapeuticProcess.")

(documentation Suspension "A &%LiquidMixture where at least one of the 
components of the &%Mixture is equally distributed throughout the &%Mixture 
but is not dissolved in it.")

(documentation Swimming "Any deliberate and controlled &%BodyMotion 
through water that is accomplished by an &%Organism.")

(documentation SymbolicString "The &%Class of alphanumeric sequences.")

(documentation SymmetricRelation "A &%BinaryRelation ?REL is
symmetric just iff (?REL ?INST1 ?INST2) imples (?REL 
?INST2 ?INST1), for all ?INST1 and ?INST2.")

(documentation SyntheticSubstance "Any &%Substance that is the result of an 
&%IntentionalProcess, i.e. any substance that is created by &%Humans.")

(documentation SystemeInternationalUnit "The &%Class of Systeme 
International (SI) units.")

(documentation TactilePerception "The &%subclass of &%Perception in which 
the sensing is done by &%Touching.  Note that &%Touching need not involve 
&%TactilePerception.  For example, a person who has lost all sensation in 
both of his legs would have no &%TactilePerception of anything his legs 
were &%Touching.")

(documentation TangentFn "(&%TangentFn ?DEGREE) is the tangent of the 
&%PlaneAngleMeasure ?DEGREE.  The tangent of ?DEGREE is the ratio of 
the side opposite ?DEGREE to the side next to ?DEGREE in a right-angled 
triangle.")

(documentation TasteAttribute "The &%Class of &%Attributes relating to 
the taste of &%Objects.")

(documentation Tasting "The &%subclass of &%Perception in which the 
sensing is done by of an &%Organ which can discriminate various tastes.")

(documentation TemperatureMeasure "Measures of temperature.  
In scientific circles, the temperature of something is understood as the 
average velocity of the atoms or molecules that make up the thing.")

(documentation TemporalCompositionFn "The basic &%Function for expressing 
the composition of larger &%TimeIntervals out of smaller &%TimeIntervals.  
For example, if &%ThisSeptember is an &%instance of &%September, 
(&%TemporalCompositionFn &%ThisSeptember &%Day) denotes the &%Class of 
consecutive days that make up &%ThisSeptember.  Note that one can obtain 
the number of instances of this &%Class by using the function &%CardinalityFn.")

(documentation TemporalRelation "The &%Class of temporal &%Relations.  
This &%Class includes notions of (temporal) topology of intervals, 
(temporal) schemata, and (temporal) extension.")

(documentation TemporaryResidence "A &%Residence which is strictly temporary, 
i.e. where no one makes his/her &%home.")

(documentation TeraFn "A &%UnaryFunction that maps a &%UnitOfMeasure 
into a &%UnitOfMeasure that is equal to 1,000,000,000,000 units of the original 
&%UnitOfMeasure.  For example, (&%TeraFn &%Hertz) is 1,000,000,000,000 &%Hertz.")

(documentation TerminalNodeFn "A &%UnaryFunction that maps a 
&%GraphArc to the terminal node of the &%GraphArc.  Note that this 
is a partial function.  In particular, the function is undefined 
for &%GraphArcs that are not part of a &%DirectedGraph.")

(documentation TerminatingEmployment "&%OrganizationalProcesses where someone 
ceases to be an employee of an &%Organization.  Note that this covers being 
laid off, being fired, and voluntarily leaving a job.")

(documentation TernaryFunction "The &%Class of &%Functions that require 
exactly three arguments.")

(documentation TernaryPredicate "The &%Class of &%Predicates that require 
exactly three arguments.")

(documentation TernaryRelation "&%TernaryRelations relate three items.  
The two &%subclasses of &%TernaryRelation are &%TernaryPredicate and 
&%BinaryFunction.")

(documentation Tesla "SI magnetic flux density measure.  Symbol:  T.
One &%Tesla equals one &%Weber per square &%Meter.  &%Tesla = Wb/m^2 = 
kg*s^(-2)*A^(-1).")

(documentation Text "A &%LinguisticExpression or set of 
&%LinguisticExpressions that perform a specific function related 
to &%Communication, e.g. express a discourse about a particular 
topic, and that are inscribed in a &%CorpuscularObject by &%Humans.")

(documentation TextureAttribute "Any &%Attribute that characterizes the 
texture of an &%Object.")

(documentation TherapeuticProcess "A &%Process that is carried out 
for the purpose of curing, improving or reducing the pain associated 
with a &%DiseaseOrSyndrome.")

(documentation ThreeDimensionalFigure "The class of &%GeometricFigures that 
have position and an extension along three dimensions, viz. geometric solids 
like polyhedrons and cylinders.")

(documentation Thursday "The &%Class of all calendar Thursdays.")

(documentation TimeDependentQuantity "A &%UnaryConstantFunctionQuantity of 
continuous time.  All instances of this &%Class are returned by &%Functions 
that map a time quantity into another &%ConstantQuantity such as temperature.  
For example, 'the temperature at the top of the Empire State Building' is a 
&%TimeDependentQuantity since its value depends on the time.")

(documentation TimeDuration "Any measure of length of time, 
with or without respect to the universal timeline.")

(documentation TimeInterval "An interval of time.  Note that a 
&%TimeInterval has both an extent and a location on the universal 
timeline.  Note too that a &%TimeInterval has no gaps, i.e. this 
class contains only convex time intervals.")

(documentation TimeIntervalFn "A &%BinaryFunction that takes two &%TimePoints 
as arguments and returns the &%TimeInterval defined by these two &%TimePoints.  
Note that the first &%TimePoint must occur earlier than the second &%TimePoint.")

(documentation TimeMeasure "The class of temporal durations (instances 
of &%TimeDuration) and positions of &%TimePoints and &%TimeIntervals along 
the universal timeline (instances of &%TimePosition).")

(documentation TimePoint "An extensionless point on the universal timeline. 
The &%TimePoints at which &%Processes occur can be known with various 
degrees of precision and approximation, but conceptually &%TimePoints are 
point-like and not interval-like.  That is, it doesn't make sense to talk 
about how long a &%TimePoint lasts.")

(documentation TimePosition "Any &%TimePoint or &%TimeInterval 
along the universal timeline from &%NegativeInfinity to 
&%PositiveInfinity.")

(documentation TimeZone "An &%Attribute which is used to specify coordinates 
in which time measures are uniform, i.e. all time devices are synchronized to 
the same &%TimePositions.")

(documentation Tissue "An aggregation of similarly specialized &%Cells 
and the associated intercellular substance. &%Tissues are relatively 
non-localized in comparison to &%BodyParts, &%Organs or &%Organ components.  
The main features of &%Tissues are self-connectivity (see 
&%SelfConnectedObject) and being a homogeneous mass (all parts in the 
same granularity are instances of &%Tissue as well).")

(documentation TotalOrderingRelation "A &%BinaryRelation is a 
&%TotalOrderingRelation if it is a &%PartialOrderingRelation 
and a &%TrichotomizingRelation.")

(documentation TotalValuedRelation "A &%Relation is a &%TotalValuedRelation 
just in case there exists an assignment for the last argument position of the 
&%Relation given any assignment of values to every argument position except 
the last one.  Note that declaring a &%Relation to be both a &%TotalValuedRelation 
and a &%SingleValuedRelation means that it is a total function.")

(documentation Touching "Any &%Transfer where two &%Objects are 
brought into immediate physical contact with one another.")

(documentation TraitAttribute "&%Attributes that indicate the the 
behavior/personality traits of an &%Organism.")

(documentation Transaction "The &%subclass of &%ChangeOfPossession where 
something is exchanged for something else.")

(documentation Transfer "Any &%instance of &%Translocation where the &%agent 
and the &%patient are not the same thing.")

(documentation TransitiveRelation "A &%BinaryRelation ?REL is transitive 
if (?REL ?INST1 ?INST2) and (?REL ?INST2 ?INST3) imply (?REL ?INST1 ?INST3), 
for all ?INST1, ?INST2, and ?INST3.")

(documentation Transitway "&%Transitway is the broadest class 
of regions which may be passed through as a &%path in instances 
of &%Translocation.  &%Transitway includes land, air, and sea 
regions, and it includes both natural and artificial transitways.")

(documentation Translating "Converting content from one &%Language into another.  
This covers oral translation (i.e. interpreting) as well as written translation.")

(documentation Translocation "&%Translocation is that class of &%Motions 
in which an object moves from one place to another.  In the case of round 
trips, the &%origin and &%destination are the same, but the intervening 
motion passes through other locations.  &%Translocation represents linear 
motion, in contrast to rotation or other movement in place.  A vehicle is 
not necessary, &%Ambulating is a kind of &%Translocation.")

(documentation Transportation "&%Motion from one point to another by means 
of a &%TransportationDevice.")

(documentation TransportationDevice "A &%TransportationDevice is a &%Device 
which serves as the &%instrument in a &%Transportation &%Process which carries 
the &%patient of the &%Process from one point to another.")

(documentation Tree "A Tree is a &%DirectedGraph that has no 
&%GraphLoops.")

(documentation TrichotomizingRelation "A &%BinaryRelation ?REL is a 
&%TrichotomizingRelation just in case all ordered pairs consisting of 
distinct individuals are elements of ?REL.")

(documentation True "The &%TruthValue of being true.")

(documentation TruthValue "The &%Class of truth values, e.g. &%True and 
&%False.  These are &%Attributes of &%Sentences and &%Propositions.")

(documentation Tuesday "The &%Class of all calendar Tuesdays.")

(documentation TwoDimensionalAngle "Any two &%OneDimensionalFigures (i.e. 
straight lines) meeting at a single &%GeometricPoint.")

(documentation TwoDimensionalFigure "The class of &%GeometricFigures that 
have position and an extension along two dimensions, viz. plane figures 
like circles and polygons.")

(documentation UnaryConstantFunctionQuantity "The class of &%FunctionQuantities 
that are returned by &%UnaryFunctions that map from the &%Class &%ConstantQuantity 
to the &%Class &%ConstantQuantity.")

(documentation UnaryFunction "The &%Class of &%Functions that require a 
single argument.")

(documentation Unconscious "&%Attribute that applies to &%Organisms that 
are unconscious.  An &%Organism may be &%Unconscious because it is &%Dead 
or because of a blow to the head, a drug, etc.")

(documentation Uncovering "The &%Class of &%Removing processes where the &%agent 
uncovers the &%patient, either completely or only partially.")

(documentation Unemployed "The &%Attribute of a &%CognitiveAgent when 
he/she is unemployed.")

(documentation Ungrasping "Any instance of &%Detaching which results in 
a situation where it is not the case that the &%agent &%grasps something 
which he/she &%grasps previously.")

(documentation UnilateralGetting "Any instance of &%Getting that is not part 
of a &%Transaction.  In other words, any instance of &%Getting where nothing 
is given in return.  Some examples of &%UnilateralGetting are:  appropriating, 
commandeering, stealing, etc.")

(documentation UnilateralGiving "Any instance of &%Giving that is not part 
of a &%Transaction.  In other words, any instance of &%Giving where nothing 
is received in return.  Some examples of &%UnilateralGiving are:  honorary 
awards, gifts, and financial grants.")

(documentation Unilluminated "The &%Attribute of &%Regions that are 
unilluminated, i.e in which no shapes are visually discernable.")

(documentation UnionFn "A &%BinaryFunction that maps two &%SetOrClasses to 
the union of these &%SetOrClasses.  An object is an &%element of the union 
of two &%SetOrClasses just in case it is an &%instance of either &%SetOrClass.")

(documentation UniqueList "A &%List in which no item appears more than once, 
i.e. a &%List for which there are no distinct numbers ?NUMBER1 and ?NUMBER2 
such that (&%ListOrderFn ?LIST ?NUMBER1) and (&%ListOrderFn ?LIST ?NUMBER2) 
return the same value.")

(documentation UnitOfMeasure "A standard of measurement for some dimension. 
For example, the &%Meter is a &%UnitOfMeasure for the dimension of length, 
as is the &%Inch.  There is no intrinsic property of a &%UnitOfMeasure that 
makes it primitive or fundamental, rather, a system of units (e.g. 
&%SystemeInternationalUnit) defines a set of orthogonal dimensions and 
assigns units for each.")

(documentation UnitedKingdomGallon "Unit of volume commonly used in the 
United Kingdom.")

(documentation UnitedStatesCent "A currency measure.  1 &%UnitedStatesCent is 
equal to .01 &%UnitedStatesDollars.")

(documentation UnitedStatesDollar "A currency measure.")

(documentation UnitedStatesGallon "Unit of volume commonly used in the 
United States.")

(documentation Unlikely "The &%ProbabilityAttribute of being improbable, i.e. more 
likely than not to be &%False.")

(documentation ValidDeductiveArgument "A &%DeductiveArgument which is 
valid, i.e. the set of &%premises in fact &%entails the &%conclusion.")

(documentation VariableArityRelation "The &%Class of &%Relations that 
do not have a fixed number of arguments.")

(documentation Vehicle "&%Vehicle is the subclass of 
&%TransportationDevices that transport passengers or goods 
from one place to another by moving from one place to the other 
with them, e.g., cars, trucks, ferries, and airplanes.  Contrast 
with devices such as pipelines, escalators, or supermarket 
checkout belts, which carry items from one place to another by means 
of a moving part, without the device removing from the origin to 
the destination.")

(documentation VelocityFn "Specifies the velocity of an object, i.e. the speed 
and the direction of the speed.  For example (&%VelocityFn (&%MeasureFn 55 &%Mile) 
(&%MeasureFn 2 &%HourDuration) ?REFERENCE &%North) denotes the velocity of 55 miles 
per hour North of the given reference point ?REFERENCE.")

(documentation Verb "One of the parts of speech.  The &%Class of &%Words 
that conventionally denote &%Processes.")

(documentation VerbPhrase "A &%Phrase that has the same function as a 
&%Verb.")

(documentation Vertebrate "An &%Animal which has a spinal column.")

(documentation Vertical "Attribute used to indicate that an &%Object 
is positioned height-wise with respect to another &%Object.")

(documentation ViolentContest "A &%Contest where one participant attempts to 
physically injure another participant.")

(documentation Virus "An &%Organism consisting of a core of a single 
nucleic acid enclosed in a protective coat of protein. A virus may replicate 
only inside a host living cell. A virus exhibits some but not all of the 
usual characteristics of living things.")

(documentation VisualAttribute "The &%Class of visually discernible 
properties.")

(documentation Vitamin "A &%Nutrient present in natural products or made 
synthetically, which is essential in the diet of &%Humans and other higher 
&%Animals.  Included here are &%Vitamin precursors and provitamins.")

(documentation Vocalizing "Any instance of &%RadiatingSound where the 
&%instrument is the &%Human vocal cords.  This covers grunts, screams, 
roars, as well as &%Speaking.")

(documentation Volt "SI electric potential measure.  Symbol: V.  It is 
the difference of electric potential between two points of a conducting 
wire carrying a constant current of 1 &%Ampere, when the power dissipated 
between these points is equal to 1 &%Watt.  &%Volt = W/A = 
m^2*kg*s^(-3)*A^(-1).")

(documentation VolumeMeasure "Measures of the amount of space in three 
dimensions.")

(documentation Voting "&%Voting is the activity of voting in an 
&%Election.  Voting is typically done by individuals, while &%Elections 
are conducted by &%Organizations.  The voting process by an individual 
voter is part of an &%Election process.")

(documentation Walking "&%Ambulating relatively slowly, i.e. moving in such a 
way that at least one foot is always in contact with the ground.")

(documentation War "A military confrontation between two or more 
&%GeopoliticalAreas or &%Organizations whose members are &%GeopoliticalAreas.  
As the corresponding axiom specifies, a &%War is made up of &%Battles.")

(documentation WarmBloodedVertebrate "&%Vertebrates whose body temperature 
is internally regulated.")

(documentation Warranty "A &%Contract that states the cirumstances 
under which defects in the product will be corrected for no charge.  
A &%Warranty is usually limited to a length of time that is specified 
in the &%Warranty itself.  A &%Warranty also includes information about 
what is not covered and actions that invalidate the &%Warranty.")

(documentation Water "The &%Class of samples of the compound H20.  Note 
that this &%Class covers both pure and impure &%Water.")

(documentation WaterArea "A body which is made up predominantly of water, 
e.g. rivers, lakes, oceans, etc.")

(documentation WaterCloud "Any &%Cloud that is composed primarily of water vapor.")

(documentation WaterMotion "Any &%LiquidMotion where the &%Liquid is &%Water.")

(documentation Watt "SI power measure.  Symbol: W.  A &%UnitOfMeasure 
that measures power, i.e. energy produced or expended divided by 
&%TimeDuration. It is the power which gives rise to the production 
of energy (or work) at the rate of one &%Joule per &%SecondDuration.  
&%Watt = J/s = m^2*kg*s^(-3).")

(documentation WealthFn "A &%UnaryFunction that maps an &%Agent to a 
&%CurrencyMeasure specifying the value of the property owned by the &%Agent.  
Note that this &%Function is generally used in conjunction with the 
&%Function &%PropertyFn, e.g. (&%WealthFn (&%PropertyFn BillGates)) would 
return the monetary value of the sum of Bill Gates' holdings.")

(documentation Weapon "The &%Class of &%Devices that are designed 
primarily to damage or destroy &%Humans/&%Animals, &%StationaryArtifacts or 
the places inhabited by &%Humans/&%Animals.")

(documentation WearableItem "&%WearableItem is the subclass of 
&%Artifacts that are made to be worn on the body.")

(documentation WeatherProcess "&%WeatherProcess is the broadest class of 
processes that involve weather, including weather seasons (not to be confused 
with instances of &%SeasonOfYear), weather systems, and short-term weather 
events.")

(documentation Weber "SI magnetic flux measure.  Symbol: Wb. It is the 
magnetic flux which, linking a circuit of one turn, produces in it an
electromotive force of 1 &%Volt as it is reduced to zero at a uniform
rate in 1 &%SecondDuration.  &%Weber = V*s = m^2*kg*s^(-2)*A^(-1).")

(documentation Wedding "Any &%Declaring that leads to one person being 
the &%spouse of another.")

(documentation Wednesday "The &%Class of all calendar Wednesdays.")

(documentation Week "The &%Class of all calendar weeks.")

(documentation WeekDuration "Time unit.  A week's duration is seven days.")

(documentation West "The compass direction of &%West.")

(documentation Wet "An &%Attribute which indicates that the 
associated &%Object is fully saturated with a &%Liquid, i.e. 
every part of the &%Object has a subpart which is a &%Liquid.")

(documentation Wetting "The &%Class of &%Processes where a &%Liquid is 
added to an &%Object.")

(documentation WhenFn "A &%UnaryFunction that maps an &%Object or 
&%Process to the exact &%TimeInterval during which it exists.  Note 
that, for every &%TimePoint ?TIME outside of the &%TimeInterval 
(WhenFn ?THING), (time ?THING ?TIME) does not hold.")

(documentation WhereFn "Maps an &%Object and a &%TimePoint at which the 
&%Object exists to the &%Region where the &%Object existed at that 
&%TimePoint.")

(documentation White "The &%Attribute of being white in color.")

(documentation Wind "Any &%Motion of &%Air.")

(documentation Woman "The class of &%Female &%Humans.")

(documentation Word "A term of a &%Language that represents a concept.")

(documentation Worm "Long, narrow, soft-bodied &%Invertebrates.")

(documentation Writing "A &%subclass of &%ContentDevelopment in which 
content is converted from one form (e.g. uttered, written or represented 
mentally) into a written form.  Note that this class covers both 
transcription and original creation of written &%Texts.")

(documentation Year "The &%Class of all calendar &%Years.")

(documentation YearDuration "Time unit. one calendar year. 1 year =
365 days = 31536000 seconds.")

(documentation YearFn "A &%UnaryFunction that maps a number to the corresponding calendar 
&%Year.  For example, (&%YearFn 1912) returns the &%Class containing just one instance, 
the year of 1912.  As might be expected, positive integers return years in the Common Era, 
while negative integers return years in B.C.E.  Note that this function returns a &%Class 
as a value.  The reason for this is that the related functions, viz. &%MonthFn, &%DayFn, 
&%HourFn, &%MinuteFn, and &%SecondFn, are used to generate both specific &%TimeIntervals 
and recurrent intervals, and the only way to do this is to make the domains and ranges of 
these functions classes rather than individuals.")

(documentation Yellow "The &%Attribute of being yellow in color.")

(documentation age "Simply relates an &%Object to a &%ConstantQuantity 
specifying the age of the &%Object.")

(documentation agent "(&%agent ?PROCESS ?AGENT) means that ?AGENT is 
an active determinant, either animate or inanimate, of the &%Process 
?PROCESS, with or without voluntary intention.  For example, Eve is an 
&%agent in the following proposition: Eve bit an apple.")

(documentation altitude "A &%TernaryPredicate that is used to state the &%distance
between the &%top of an &%Object and another point that is below the &%top of the 
&%Object (often this other point will be sea level).  Note that this &%Predicate can 
be used to specify, for example, the height of geographic features, e.g. mountains, 
the altitude of aircraft, and the orbit of satellites around the Earth.")

(documentation ancestor "The transitive closure of the &%parent predicate.  
(&%ancestor ?DESCENDANT ?ANCESTOR) means that ?ANCESTOR is either the 
&%parent of ?DESCENDANT or the &%parent of the &%parent of &%DESCENDANT or 
etc.")

(documentation angleOfFigure "(&%angleOfFigure ?ANGLE ?FIGURE) means that 
the &%TwoDimensionalAngle ?ANGLE is part of the &%GeometricFigure ?FIGURE.")

(documentation angularMeasure "(&%angularMeasure ?ANGLE ?MEASURE) means that 
the two-dimensional geometric angle ?ANGLE has the &%PlaneAngleMeasure of 
?MEASURE.")

(documentation arcWeight "This predicate indicates the value of a 
&%GraphArc in a &%Graph.  This could map to the length of a road in 
a road network or the flow rate of a pipe in a plumbing system.")

(documentation attends "(&%attends ?DEMO ?PERSON) means that ?PERSON attends, 
i.e. is a member of the audience, of the performance event ?DEMO.")

(documentation attribute "(&%attribute ?OBJECT ?PROPERTY) means that 
?PROPERTY is a &%Attribute of ?OBJECT.  For example, 
(&%attribute &%MyLittleRedWagon &%Red).")

(documentation authors "(&%authors ?AGENT ?TEXT) means that ?AGENT is 
creatively responsible for ?TEXT.  For example, Agatha Christie is 
author of Murder_on_the_Orient_Express.")

(documentation average "A partial function that relates a &%List to a 
&%RealNumber, provided that the &%List only has list elements that are 
&%RealNumbers. The &%RealNumber associated with the &%List is equal to the 
mathematical average of the &%RealNumbers in the &%List divided by the total
number of list elements.")

(documentation before "(&%before ?POINT1 ?POINT2) means that ?POINT1 
precedes ?POINT2 on the universal timeline.")

(documentation beforeOrEqual "(&%beforeOrEqual ?POINT1 ?POINT2) means that ?POINT1 
is identical with ?POINT2 or occurs before it on the universal timeline.")

(documentation believes "The epistemic predicate of belief.  
(&%believes ?AGENT ?FORMULA) means that ?AGENT believes the proposition 
expressed by ?FORMULA.")

(documentation between "(between ?OBJ1 ?OBJ2 ?OBJ3) means that ?OBJ2 is 
spatially located between ?OBJ1 and ?OBJ3.  Note that this implies that 
?OBJ2 is directly between ?OBJ1 and ?OBJ3, i.e. the projections of ?OBJ1 
and ?OBJ3 overlap with ?OBJ2.")

(documentation bottom "(&%bottom ?BOTTOM ?OBJECT) holds if ?BOTTOM is the 
lowest or deepest maximal superficial part of ?OBJECT.")

(documentation brother "The general relationship of being a brother.  
(&%brother ?MAN ?PERSON) means that ?MAN is the brother of ?PERSON.")

(documentation capability "(&%capability ?PROCESS ?ROLE ?OBJ) means 
that ?OBJ has the ability to play the role of ?ROLE in &%Processes of 
type ?PROCESS.")

(documentation causes "The causation relation between instances of &%Process.  
(&%causes ?PROCESS1 ?PROCESS2) means that the instance of &%Process ?PROCESS1 
brings about the instance of &%Process ?PROCESS2.")

(documentation causesProposition "(&%causesProposition ?FORMULA1
?FORMULA2) means that the state of affairs described by ?FORMULA1
causes, or mechanistically brings about, the state of affairs
described by ?FORMULA2.  Note that unlike &%entails, the time
during which ?FORMULA2 holds cannot precede the time during which
?FORMULA1 holds, although ?FORMULA1 and ?FORMULA2 can hold
simultaneously.  Note, also, that &%causesProposition is a
predicate, not a truth function.  The following rule
(contraposition) does not hold: (=> (causesProp ?FORMULA1
?FORMULA2) (causesProp (not ?FORMULA2) (not ?FORMULA1))).")

(documentation causesSubclass "The causation relation between subclasses of &%Process.  
(&%causesSubclass ?PROCESS1 ?PROCESS2) means that the subclass of &%Process ?PROCESS1 
brings about the subclass of &%Process ?PROCESS2, e.g. (&%causesSubclass &%Killing 
&%Death).")

(documentation citizen "(&%citizen ?PERSON ?NATION) means that the 
&%Human ?PERSON is a citizen of &%Nation ?NATION.")

(documentation closedOn "A &%BinaryFunction is closed on a &%SetOrClass 
if it is defined for all instances of the &%SetOrClass and its value is 
always an instance of the &%SetOrClass.")

(documentation completelyFills "(&%completelyFills ?OBJ ?HOLE) 
means that some &%part of the &%Object ?OBJ fills the &%Hole ?HOLE.  
Note that if (&%completelyFills ?OBJ1 ?HOLE) and (&%part 
?OBJ1 ?OBJ2), then (&%completelyFills ?OBJ2 ?HOLE). 
A complete filler of (a part of) a hole is connected with everything 
with which (that part of) the hole itself is connected. 
A perfect filler of (a part of) a hole completely fills every proper 
part of (that part of) that hole.")

(documentation component "A specialized common sense notion of part 
for heterogeneous parts of complexes. (&%component ?COMPONENT ?WHOLE) 
means that ?COMPONENT is a component of ?WHOLE. Examples of component 
include the doors and walls of a house, the states or provinces of a 
country, or the limbs and organs of an animal.  Compare &%piece, which 
is also a subrelation of &%part.")

(documentation conclusion "(&%conclusion ?ARGUMENT ?PROPOSITION) means that
the &%Proposition ?PROPOSITION is the conclusion explicitly drawn from the 
&%Argument ?ARGUMENT.  Note that it may or may not be the case that ?ARGUMENT 
&%entails ?PROPOSITION.")

(documentation conditionalProbability "One of the basic &%ProbabilityRelations.  
&%conditionalProbability is used to state the numeric value of a conditional 
probability.  (&%conditionalProbability ?FORMULA1 ?FORMULA2 ?NUMBER) means 
that the probability of ?FORMULA2 being true given that ?FORMULA1 is true is 
?NUMBER.")

(documentation confersNorm "Expresses the relationship between a &%Formula, 
an &%Entity, and an &%ObjectiveNorm when the &%Entity brings it about that 
the &%Formula has the &%ObjectiveNorm.")

(documentation confersObligation "Expresses the relationship between a 
a &%Formula, an &%Entity, and a &%CognitiveAgent when the &%Entity 
obligates the &%CognitiveAgent to bring it about that the &%Formula is 
true.")

(documentation confersRight "Expresses the relationship between a &%Formula, 
an &%Entity, and a &%CognitiveAgent when the &%Entity authorizes the 
&%CognitiveAgent to bring it about that the &%Formula is true.")

(documentation connected "(connected ?OBJ1 ?OBJ2) means that ?OBJ1 
&%meetsSpatially ?OBJ2 or that ?OBJ1 &%overlapsSpatially ?OBJ2.")

(documentation connectedEngineeringComponents "This is the most general 
connection relation between &%EngineeringComponents.  If 
(&%connectedEngineeringComponents ?COMP1 ?COMP2), then neither ?COMP1 nor 
?COMP2 can be an &%engineeringSubcomponent of the other.  The relation 
&%connectedEngineeringComponents is a &%SymmetricRelation, there is no 
information in the direction of connection between two components.  It is 
also an &%IrreflexiveRelation, no &%EngineeringComponent bears this relation 
to itself.  Note that this relation does not associate a name or type 
with the connection.")

(documentation connects "The relationship between three things, when one of 
the three things connects the other two.  More formally, (&%connects ?OBJ1 
?OBJ2 ?OBJ3) means that (&%connected ?OBJ1 ?OBJ2) and (&%connected ?OBJ1 ?OBJ3) 
and not (&%connected ?OBJ2 ?OBJ3).")

(documentation connectsEngineeringComponents "&%connectsEngineeringComponents 
is a &%TernaryPredicate that maps from an &%EngineeringConnection to the 
&%EngineeringComponents it connects.  Since &%EngineeringComponents cannot 
be connected to themselves and there cannot be an &%EngineeringConnection 
without a &%connectedEngineeringComponents &%Predicate, the second and third 
arguments of any &%connectsEngineeringComponents relationship will always be 
distinct for any given first argument.")

(documentation considers "(&%considers ?AGENT ?FORMULA) means that ?AGENT 
considers or wonders about the truth of the proposition expressed by 
?FORMULA.")

(documentation consistent "(&%consistent ?PROP1 ?PROP2) means that the two 
&%Propositions ?PROP1 and ?PROP2 are consistent with one another, i.e. it 
is possible for both of them to be true at the same time.")

(documentation contains "The relation of spatial containment for two 
separable objects.  When the two objects are not separable (e.g. an 
automobile and one of its seats), the relation of &%part should be used.  
(&%contains ?OBJ1 ?OBJ2) means that the &%SelfConnectedObject ?OBJ1 has 
a space (i.e. a &%Hole) which is at least partially filled by ?OBJ2.")

(documentation containsInformation "A subrelation of &%represents.  This 
predicate relates a &%ContentBearingPhysical to the &%Proposition that is 
expressed by the &%ContentBearingPhysical. Examples include the relationships 
between a physical novel and its story and between a printed score and its 
musical content.")

(documentation contraryAttribute "A &%contraryAttribute is a set of &%Attributes 
such that something can not simultaneously have more than one of these &%Attributes.  
For example, (&%contraryAttribute &%Pliable &%Rigid) means that nothing can be both 
&%Pliable and &%Rigid.")

(documentation cooccur "(&%cooccur ?THING1 ?THING2) means that the 
&%Object or &%Process ?THING1 occurs at the same time as, together with, 
or jointly with the &%Object or &%Process ?THING2.  This covers the 
following temporal relations:  is co-incident with, is concurrent with, 
is contemporaneous with, and is concomitant with.")

(documentation copy "relates an &%Object to an exact copy of the 
&%Object, where an exact copy is indistinguishable from the original 
with regard to every property except (possibly) spatial and/or temporal 
location.")

(documentation crosses "(crosses ?OBJ1 ?OBJ2) means that 
&%Object ?OBJ1 &%traverses Object ?OBJ2, without being &%connected 
to it.")

(documentation date "A &%BinaryPredicate that specifies a 
&%TimePosition in absolute calendar time, at the resolution 
of one day, for a particular &%Object or &%Process.")

(documentation daughter "The general relationship of daughterhood.  
(&%daughter ?CHILD ?PARENT) means that ?CHILD is the biological daughter
of ?PARENT.")

(documentation decreasesLikelihood "One of the basic &%ProbabilityRelations.  
(&%decreasesLikelihood ?FORMULA1 ?FORMULA2) means that ?FORMULA2 is less 
likely to be true if ?FORMULA1 is true.")

(documentation deprivesNorm "Expresses the relationship between an 
&%Entity, a &%Formula, and an &%ObjectiveNorm when the &%Entity 
brings it about that the &%Formula does not have the &%ObjectiveNorm.")

(documentation depth "A &%TernaryPredicate that is used to state the &%distance
between the &%top of an &%Object and another point that is above the &%top of the 
&%Object (often this other point will be sea level).  Note that this &%Predicate can 
be used to specify, for example, the depth of marine life or submarines, for example.")

(documentation desires "(&%desires ?AGENT ?FORMULA) means that ?AGENT wants 
to bring about the state of affairs expressed by ?FORMULA.  Note that there 
is no implication that what is desired by the agent is not already true.  
Note too that &%desires is distinguished from &%wants only in that the former 
is a &%PropositionalAttitude, while &%wants is an &%ObjectAttitude.")

(documentation destination "(destination ?PROCESS ?GOAL) means that 
?GOAL is the target or goal of the Process ?PROCESS.  For example, 
Danbury would be the destination in the following proposition:  Bob went 
to Danbury.  Note that this is a very general &%CaseRole and, in 
particular, that it covers the concepts of 'recipient' and 'beneficiary'.  
Thus, John would be the &%destination in the following proposition:  
Tom gave a book to John.")

(documentation developmentalForm "(&%developmentalForm ?OBJECT ?FORM) 
means that ?FORM is an earlier stage in the individual maturation of 
?OBJECT.  For example, tadpole and caterpillar are &%developmentalForms 
of frogs and butterflies, respectively.")

(documentation diameter "&%BinaryPredicate that is used to state the 
measure of a circular &%Object from side to side.")

(documentation direction "(&%direction ?PROC ?ATTR) means that the 
&%Process ?PROC is moving in the direction ?ATTR.  For example, one 
would use this &%Predicate to represent the fact that Max is moving 
&%North.")

(documentation disjoint "&%Classes are &%disjoint only if they share no 
instances, i.e. just in case the result of applying &%IntersectionFn to
them is empty.")

(documentation disjointDecomposition "A &%disjointDecomposition of a &%Class 
C is a set of subclasses of C that are mutually &%disjoint.")

(documentation disjointRelation "This predicate relates two &%Relations.  
(&%disjointRelation ?REL1 ?REL2) means that the two relations have no tuples in 
common.")

(documentation distance "(&%distance ?OBJ1 ?OBJ2 ?QUANT) means that the 
shortest distance between the two objects ?OBJ1 and ?OBJ2 is ?QUANT.  Note 
that the difference between the predicates &%length and &%distance is that 
the &%length is used to state the &%LengthMeasure of one of the dimensions of 
a single object, while &%distance is used to state the &%LengthMeasure that 
separates two distinct objects.")

(documentation distributes "A &%BinaryFunction ?FUNCTION1 is 
distributive over another &%BinaryFunction ?FUNCTION2 just in case 
(?FUNCTION1 ?INST1 (?FUNCTION2 ?INST2 ?INST3)) is equal to 
(?FUNCTION2 (?FUNCTION1 ?INST1 ?INST2) (?FUNCTION1 ?INST1 ?INST3)), 
for all ?INST1, ?INST2, and ?INST3.")

(documentation documentation "A relation between objects in the domain 
of discourse and strings of natural language text.  The domain of 
&%documentation is not constants (names), but the objects themselves.  
This means that one does not quote the names when associating them with 
their documentation.")

(documentation domain "Provides a computationally and heuristically
convenient mechanism for declaring the argument types of a given relation.  
The formula (&%domain ?REL ?INT ?CLASS) means that the ?INT'th element of each 
tuple in the relation ?REL must be an instance of ?CLASS.  Specifying argument
types is very helpful in maintaining ontologies.  Representation systems can 
use these specifications to classify terms and check integrity constraints.  
If the restriction on the argument type of a &%Relation is not captured by a 
&%SetOrClass already defined in the ontology, one can specify a &%SetOrClass 
compositionally with the functions &%UnionFn, &%IntersectionFn, etc.")

(documentation domainSubclass "&%Predicate used to specify argument 
type restrictions of &%Predicates.  The formula (&%domainSubclass 
?REL ?INT ?CLASS) means that the ?INT'th element of each tuple in the 
relation ?REL must be a subclass of ?CLASS.")

(documentation duration "(&%duration ?POS ?TIME) means that the 
duration of the &%TimePosition ?POS is ?TIME.  Note that this 
&%Predicate can be used in conjunction with the &%Function &%WhenFn 
to specify the duration of any instance of &%Physical.")

(documentation during "(&%during ?INTERVAL1 ?INTERVAL2) means that 
?INTERVAL1 starts after and ends before ?INTERVAL2.")

(documentation earlier "(&%earlier ?INTERVAL1 ?INTERVAL2) means that 
the &%TimeInterval ?INTERVAL1 ends before the &%TimeInterval ?INTERVAL2 
begins.")

(documentation editor "(&%editor ?AGENT ?TEXT) means that ?AGENT is 
an editor of ?TEXT.")

(documentation element "(element ?ENTITY ?SET) is true just in case 
?ENTITY is contained in the &%Set ?SET.  An &%Entity can be an &%element 
of another &%Entity only if the latter is a &%Set.")

(documentation employs "(&%employs ?ORG ?PERSON) means that ?ORG has 
hired ?PERSON and currently retains ?PERSON, on a salaried, hourly 
or contractual basis, to provide services in exchange for monetary 
compensation.")

(documentation engineeringSubcomponent "(&%engineeringSubcomponent ?SUB 
?SUPER) means that the &%EngineeringComponent ?SUB is structurally a 
&%properPart of ?SUPER.  This relation is an &%AsymmetricRelation, since 
two &%EngineeringComponents cannot be subcomponents of each other.")

(documentation entails "The operator of logical entailment.  (&%entails 
?FORMULA1 ?FORMULA2) means that ?FORMULA2 can be derived from ?FORMULA1 
by means of the proof theory of SUO-KIF.")

(documentation equal "(equal ?ENTITY1 ?ENTITY2) is true just in case 
?ENTITY1 is identical with ?ENTITY2.")

(documentation equivalenceRelationOn "A &%BinaryRelation is an 
&%equivalenceRelationOn a &%SetOrClass only if the relation is &%reflexiveOn 
the &%SetOrClass and it is both a &%TransitiveRelation and a 
&%SymmetricRelation.")

(documentation equivalentContentClass "A &%BinaryPredicate that relates two 
subclasses of &%ContentBearingObject.  (&%equivalentContentClass ?CLASS1 
?CLASS2) means that the content expressed by each instance of ?CLASS1 is 
also expressed by each instance of ?CLASS2, and vice versa.  An example 
would be the relationship between English and Russian editions of Agatha 
Christie's 'Murder on the Orient Express'.  Note that 
(&%equivalentContentClass ?CLASS1 ?CLASS2) implies (&%subsumesContentClass 
?CLASS1 ?CLASS2) and (&%subsumesContentClass ?CLASS2 ?CLASS1).")

(documentation equivalentContentInstance "A &%BinaryPredicate relating two 
instances of &%ContentBearingObject.  (&%equivalentContentInstance 
?OBJ1 ?OBJ2) means that the content expressed by ?OBJ1 is identical to 
the content expressed by ?OBJ2.  An example would be the relationship 
between a handwritten draft of a letter to one's lawyer and a typed 
copy of the same letter.  Note that (&%equivalentContentInstance ?OBJ1 
?OBJ2) implies (&%subsumesContentInstance ?OBJ1 ?OBJ2) and 
(&%subsumesContentInstance ?OBJ2 ?OBJ2).")

(documentation exactlyLocated "The actual, minimal location of an 
Object.  This is a subrelation of the more general &%Predicate 
&%located.")

(documentation exhaustiveAttribute "This predicate relates a &%Class to a 
set of &%Attributes, and it means that the elements of this set exhaust the 
instances of the &%Class.  For example, (&%exhaustiveAttribute &%PhysicalState 
&%Solid &%Fluid &%Liquid &%Gas &%Plasma) means that there are only five instances of 
the class &%PhysicalState, viz. &%Solid, &%Fluid, &%Liquid, &%Gas and &%Plasma.")

(documentation exhaustiveDecomposition "An &%exhaustiveDecomposition of a 
&%Class C is a set of subclasses of C such that every instance of C is an 
instance of one of the subclasses in the set.  Note:  this does not necessarily 
mean that the elements of the set are disjoint (see &%partition - a &%partition 
is a disjoint exhaustive decomposition).")

(documentation experiencer "(&%experiencer ?PROCESS ?AGENT) means 
that ?AGENT experiences the &%Process ?PROCESS.  For example, Yojo 
is the &%experiencer of seeing in the following proposition:  Yojo 
sees the fish.  Note that &%experiencer, unlike &%agent, does 
not entail a causal relation between its arguments.")

(documentation exploits "(&%exploits ?OBJ ?AGENT) means that ?OBJ is used 
by ?AGENT as a &%resource in an unspecified instance of &%Process.  This 
&%Predicate, as its corresponding axiom indicates, is a composition of the 
relations &%agent and &%resource.")

(documentation expressedInLanguage "(&%expressedInLanguage ?EXPRESS ?LANG) 
means that the &%LinguisticExpression ?EXPRESS is part of the &%Language 
?LANG.")

(documentation faces "(&%faces ?OBJ ?DIRECTION) means that the front of 
?OBJ (see &%FrontFn) is positioned towards the compass direction ?DIRECTION.  
More precisely, it means that if a line were extended from the center of 
?DIRECTION, the line would intersect with the front of ?OBJ before it 
intersected with its back (see &%BackFn).")

(documentation familyRelation "A very general &%Predicate for biological 
relationships. (&%familyRelation ?ORGANISM1 ?ORGANISM2) means that 
?ORGANISM1 and ?ORGANISM2 are biologically derived from a common ancestor.")

(documentation father "The general relationship of fatherhood.  
(&%father ?CHILD ?FATHER) means that ?FATHER is the biological father
of ?CHILD.")

(documentation fills "Holes can be filled.  (&%fills ?OBJ ?HOLE) 
means that the &%Object ?OBJ fills the &%Hole ?HOLE.  Note that 
&%fills here means perfectly filled. Perfect fillers and fillable entities have no parts in common (rather, 
they may occupy the same spatial region).")

(documentation finishes "(&%finishes ?INTERVAL1 ?INTERVAL2) means that 
?INTERVAL1 and ?INTERVAL2 are both &%TimeIntervals that have the same 
ending &%TimePoint and that ?INTERVAL2 begins before ?INTERVAL1.")

(documentation frequency "(&%frequency ?PROC ?TIME) means that the 
&%Process type of ?PROC recurs after every interval of ?TIME.")

(documentation geographicSubregion "(&%geographicSubregion ?PART ?WHOLE) 
means that the &%GeographicArea ?PART is part of the &%GeographicArea 
?WHOLE.")

(documentation geometricDistance "(&%geometricDistance ?POINT1 ?POINT2 
?LENGTH) means that ?LENGTH is the distance between the two 
&%GeometricPoints ?POINT1 and ?POINT2.")

(documentation geometricPart "(&%geometricPart ?PART ?WHOLE) means that the 
&%GeometricFigure ?PART is part of the &%GeometricFigure ?WHOLE.")

(documentation geopoliticalSubdivision "(&%geopoliticalSubdivision 
?AREA1 ?AREA2) means that ?AREA1 is any geopolitical part of ?AREA2, 
that is, ?AREA1 is an integral &%geographicSubregion of ?AREA2 (not a 
&%DependencyOrSpecialSovereigntyArea), having its own associated 
&%GovernmentOrganization which is subordinated to or constrained by 
the government of ?AREA2.  Cf. &%dependentGeopoliticalArea.")

(documentation graphPart "A basic relation for &%Graphs and their 
parts.  (&%graphPart ?PART ?GRAPH) means that ?PART is a &%GraphArc 
or &%GraphNode of the &%Graph ?GRAPH.")

(documentation grasps "The state of grasping an &%Object.  (&%grasps 
?ANIMAL ?OBJ) means that the &%Animal ?ANIMAL is intentionally holding 
on to the &%Object ?OBJ.")

(documentation greaterThan "(&%greaterThan ?NUMBER1 ?NUMBER2) is true 
just in case the &%Quantity ?NUMBER1 is greater than the &%Quantity 
?NUMBER2.")

(documentation greaterThanOrEqualTo "(&%greaterThanOrEqualTo ?NUMBER1 
?NUMBER2) is true just in case the &%Quantity ?NUMBER1 is greater 
than the &%Quantity ?NUMBER2.")

(documentation hasPurpose "This &%Predicate expresses the concept of a 
conventional goal, i.e. a goal with a neutralized agent's intention.  
Accordingly, (&%hasPurpose ?THING ?FORMULA) means that the instance of 
&%Physical ?THING has, as its purpose, the &%Proposition expressed by 
?FORMULA.  Note that there is an important difference in meaning between 
the &%Predicates &%hasPurpose and &%result.  Although the second argument 
of the latter can satisfy the second argument of the former, 
a conventional goal is an expected and desired outcome, while a result 
may be neither expected nor desired.  For example, a machine process may 
have outcomes but no goals, aimless wandering may have an outcome but no 
goal, a learning process may have goals with no outcomes, and so on.")

(documentation hasPurposeForAgent "Expresses a cognitive attitude of an 
agent with respect to a particular instance of Physical.  More precisely, 
(&%hasPurposeForAgent ?THING ?FORMULA ?AGENT) means that the purpose of 
?THING for ?AGENT is the proposition expressed by ?FORMULA.  Very complex 
issues are involved here.  In particular, the rules of inference of the 
first order predicate calculus are not truth-preserving for the second 
argument position of this &%Predicate.")

(documentation hasSkill "Similar to the &%capability &%Predicate 
with the additional restriction that the ability be practised/
demonstrated to some measurable degree.")

(documentation height "The height of an &%Object is the distance between 
its &%top and its &%bottom.")

(documentation holdsDuring "(&%holdsDuring ?TIME ?FORMULA) means that the 
proposition denoted by ?FORMULA is true in the time frame ?TIME.  Note 
that this implies that ?FORMULA is true at every &%TimePoint which is a 
&%temporalPart of ?TIME.")

(documentation holdsObligation "Expresses a relationship between a 
&%Formula and a &%CognitiveAgent whereby the &%CognitiveAgent has 
the obligation to bring it about that the &%Formula is true.")

(documentation holdsRight "Expresses a relationship between a &%Formula 
and a &%CognitiveAgent whereby the &%CognitiveAgent has the right to 
bring it about that the &%Formula is true.")

(documentation hole "(&%hole ?HOLE ?OBJ) means that ?HOLE is a 
&%Hole in ?OBJ.  A &%Hole is a fillable body located at the 
&%surface an &%Object.")

(documentation home "The relation between a &%Human and a &%PermanentResidence 
of the &%Human.")

(documentation husband "(&%husband ?MAN ?WOMAN) means that ?MAN is the 
husband of ?WOMAN.")

(documentation identicalListItems "(&%identicalListItems ?LIST1 ?LIST2) 
means that ?LIST1 and ?LIST2 have exactly the same items in their 
respective lists.  Although ?LIST1 and ?LIST2 are required to share 
exactly the same items, they may order these items differently.")

(documentation identityElement "An object ?ID is the identity element 
for BinaryFunction ?FUNCTION just in case, for every instance ?INST, 
applying ?FUNCTION to ?INST and ?ID results in ?INST.")

(documentation immediateInstance "An object is an &%immediateInstance of 
a &%SetOrClass if it is an instance of the &%SetOrClass and it is not an 
instance of a proper subclass of &%SetOrClass.")

(documentation immediateSubclass "A &%SetOrClass ?CLASS1 is an &%immediateSubclass 
of another &%SetOrClass ?CLASS2 just in case ?CLASS1 is a subclass of ?CLASS2 and 
there is no other subclass of ?CLASS2 such that ?CLASS1 is also a subclass of it.")

(documentation inList "The analog of &%element and &%instance for &%Lists.  
(&%inList ?OBJ ?LIST) means that ?OBJ is in the &%List ?LIST.  For example, 
(&%inList &%Tuesday (&%ListFn &%Monday &%Tuesday &%Wednesday)) would be true.")

(documentation inScopeOfInterest "A very general &%Predicate.  
(&%inScopeOfInterest ?AGENT ?ENTITY) means that ?ENTITY is within the 
scope of interest of ?AGENT.  Note that the interest indicated can be 
either positive or negative, i.e. the ?AGENT can have an interest in 
avoiding or promoting ?ENTITY.")

(documentation increasesLikelihood "One of the basic &%ProbabilityRelations.  
(&%increasesLikelihood ?FORMULA1 ?FORMULA2) means that ?FORMULA2 is more 
likely to be true if ?FORMULA1 is true.")

(documentation independentProbability "One of the basic &%ProbabilityRelations.  
(&%independentProbability ?FORMULA1 ?FORMULA2) means that the probabilities of 
?FORMULA1 and ?FORMULA2 being true are independent.")

(documentation inhabits "A very basic notion of living within something 
else.  (&%inhabits ?ORGANISM ?OBJECT) means that ?OBJECT is the residence 
(either permanent or temporary), nest, etc. of ?ORGANISM.")

(documentation inhibits "A very general &%Predicate.  (&%inhibits 
?PROC1 ?PROC2) means that the &%Process ?PROC1 inhibits or hinders 
the occurrence of the &%Process ?PROC2.  For example, obstructing an 
object inhibits moving it.  Note that this is a relation between types 
of &%Processes, not between instances.")

(documentation initialList "(&%initialList ?LIST1 ?LIST2) means that ?LIST1 
is a &%subList of ?LIST2 and (&%ListOrderFn ?LIST1 ?NUMBER) returns the same 
value as (&%ListOrderFn ?LIST2 ?NUMBER) for all of the values of ?NUMBER over 
which (&%ListOrderFn ?LIST1 ?NUMBER) is defined.")

(documentation instance "An object is an &%instance of a &%SetOrClass if 
it is included in that &%SetOrClass.  An individual may be an instance of many 
classes, some of which may be subclasses of others.  Thus, there is no 
assumption in the meaning of &%instance about specificity or uniqueness.")

(documentation instrument "(instrument ?EVENT ?TOOL) means that ?TOOL 
is used by an agent in bringing about ?EVENT and that ?TOOL is not 
changed by ?EVENT.  For example, the key is an &%instrument in the 
following proposition: The key opened the door.  Note that &%instrument 
and &%resource cannot be satisfied by the same ordered pair.")

(documentation interiorPart "(&%interiorPart ?OBJ1 ?OBJ2) means 
that ?OBJ1 is part ?OBJ2 and there is no overlap between ?OBJ1 and 
any &%superficialPart ?OBJ2.")

(documentation inverse "The inverse of a &%BinaryRelation is a relation 
in which all the tuples of the original relation are reversed.  In 
other words, one &%BinaryRelation is the inverse of another if they are 
equivalent when their arguments are swapped.")

(documentation irreflexiveOn "A &%BinaryRelation is irreflexive on a 
&%SetOrClass only if no instance of the &%SetOrClass bears the relation to 
itself.")

(documentation knows "The epistemic predicate of knowing.  (&%knows 
?AGENT ?FORMULA) means that ?AGENT knows the proposition expressed by 
?FORMULA.  Note that &%knows entails conscious awareness, so this 
&%Predicate cannot be used to express tacit or subconscious or 
unconscious knowledge.")

(documentation larger "(&%larger ?OBJ1 ?OBJ2) means that ?OBJ1 is 
larger, with respect to all &%LengthMeasures, than ?OBJ2.")

(documentation leader "(&%leader ?INSTITUTION ?PERSON)
means that the leader of ?INSTITUTION is ?PERSON.")

(documentation legalRelation "(&%legalRelation ?AGENT1 ?AGENT2) means 
that ?AGENT1 and ?AGENT2 are relatives by virtue of a legal relationship.  
Some examples include marriage, adoption, etc.")

(documentation length "&%BinaryPredicate that is used to state the measure 
of an &%Object from one point to another point along its surface.  Note 
that the difference between the predicates &%length and &%distance is that 
the &%length is used to state the &%LengthMeasure of one of the dimensions of 
a single object, while &%distance is used to state the &%LengthMeasure that 
separates two distinct objects")

(documentation lessThan "(&%lessThan ?NUMBER1 ?NUMBER2) is true just 
in case the &%Quantity ?NUMBER1 is less than the &%Quantity ?NUMBER2.")

(documentation lessThanOrEqualTo "(&%lessThanOrEqualTo ?NUMBER1 ?NUMBER2) 
is true just in case the &%Quantity ?NUMBER1 is less than or equal to 
the &%Quantity ?NUMBER2.")

(documentation lineMeasure "(&%lineMeasure ?LINE ?MEASURE) means that the 
straight line ?LINE has the &%LengthMeasure of ?MEASURE.")

(documentation links "a &%TernaryPredicate that specifies the 
&%GraphArc connecting two &%GraphNodes.")

(documentation located "(&%located ?PHYS ?OBJ) means that ?PHYS is &%partlyLocated 
at ?OBJ, and there is no &%part or &%subProcess of ?PHYS that is not &%located at 
?OBJ.")

(documentation manner "(&%manner ?PROCESS ?MANNER) means that the 
&%Process ?PROCESS is qualified by the &%Attribute ?MANNER.  The &%Attributes 
of &%Processes are usually denoted by adverbs and include things like the 
speed of the wind, the style of a dance, or the intensity of a sports 
competition.")

(documentation material "(&%material ?SUBSTANCE ?OBJECT) means that 
?OBJECT is structurally made up in part of ?SUBSTANCE. This relation 
encompasses the concepts of 'composed of', 'made of', and 'formed of'.  
For example, plastic is a &%material of my computer monitor.  Compare 
&%part and its subrelations, viz &%component and &%piece.")

(documentation measure "A very general &%Predicate for asserting that a 
particular &%Object is measured by a particular &%ConstantQuantity.  
In general, the second argument of this &%Predicate will be an instance 
of the &%Function &%MeasureFn.")

(documentation meetsSpatially "(&%meetsSpatially ?OBJ1 ?OBJ2) means that 
?OBJ1 and ?OBJ2 are &%connected but that neither ?OBJ1 nor ?OBJ2 
&%overlapsSpatially the other.")

(documentation meetsTemporally "(&%meetsTemporally ?INTERVAL1 ?INTERVAL2) 
means that the terminal point of the &%TimeInterval ?INTERVAL1 is the 
initial point of the &%TimeInterval ?INTERVAL2.")

(documentation member "A specialized common sense notion of part for 
uniform parts of &%Collections.  For example, each sheep in a flock of 
sheep would have the relationship of member to the flock.")

(documentation modalAttribute "A &%BinaryRelation that is used to state the 
normative force of a &%Proposition.  (&%modalAttribute ?FORMULA ?PROP) means 
that the &%Proposition expressed by ?FORMULA has the &%NormativeAttribute 
?PROP.  For example, (&%modalAttribute (&%exists (?ACT ?OBJ) (&%and 
(&%instance ?ACT &%Giving) (&%agent ?ACT John) (&%patient ?ACT ?OBJ) 
(&%destination ?ACT Tom))) &%Obligation) means that John is obligated to give 
Tom something.")

(documentation monetaryValue "A &%BinaryPredicate that associates an 
&%Object or &%Process with its value expressed as an instance of 
&%CurrencyMeasure.")

(documentation mother "The general relationship of motherhood.  
(&%mother ?CHILD ?MOTHER) means that ?MOTHER is the biological mother 
of ?CHILD.")

(documentation names "(&%names ?STRING ?ENTITY) means that the thing ?ENTITY 
has the &%SymbolicString ?STRING as its name.  Note that &%names and &%represents 
are the two immediate &%subrelations of &%refers.  The predicate &%names is used 
when the referring item is merely a tag without connotative content, while the 
predicate &%represents is used for referring items that have such content.")

(documentation needs "(&%needs ?AGENT ?OBJECT) means that ?OBJECT is 
physically required for the continued existence of ?AGENT.")

(documentation occupiesPosition "(&%occupiesPosition ?PERSON ?POSITION ?ORG) 
means that ?PERSON holds the &%Position ?POSITION at &%Organization ?ORG. 
For example, (&%occupiesPosition &%TomSmith &%ResearchDirector 
&%AcmeLaboratory) means that &%TomSmith is a research director at Acme Labs.")

(documentation orientation "A general &%Predicate for indicating how two 
&%Objects are oriented with respect to one another.  For example, 
(orientation ?OBJ1 ?OBJ2 North) means that ?OBJ1 is north of ?OBJ2, and 
(orientation ?OBJ1 ?OBJ2 Vertical) means that ?OBJ1 is positioned 
vertically with respect to ?OBJ2.")

(documentation origin "(&%origin ?PROCESS ?SOURCE) means that ?SOURCE 
indicates where the ?Process began.  Note that this relation implies 
that ?SOURCE is present at the beginning of the process, but need not 
participate throughout the process.  For example, the submarine is the 
&%origin in the following proposition: the missile was launched from a 
submarine.")

(documentation overlapsPartially "(&%overlapsPartially ?OBJ1 ?OBJ2) means 
that ?OBJ1 and ?OBJ2 have part(s) in common, but neither ?OBJ1 nor ?OBJ2 
is a &%part of the other.")

(documentation overlapsSpatially "(&%overlapsSpatially ?OBJ1 ?OBJ2) means 
that the &%Objects ?OBJ1 and ?OBJ2 have some parts in common.  This is a 
reflexive and symmetric (but not transitive) relation.")

(documentation overlapsTemporally "(&%overlapsTemporally ?INTERVAL1 
?INTERVAL2) means that the &%TimeIntervals ?INTERVAL1 and ?INTERVAL2 
have a &%TimeInterval as a common part.")

(documentation parallel "(&%parallel ?LINE1 ?LINE2) means that the 
&%OneDimensionalFigures ?LINE1 and ?LINE2 are parallel to one another, 
i.e. they are equidistant from one another at every point.")

(documentation parent "The general relationship of parenthood.  
(&%parent ?CHILD ?PARENT) means that ?PARENT is a biological parent 
of ?CHILD.")

(documentation part "The basic mereological relation.  All other 
mereological relations are defined in terms of this one.  
(&%part ?PART ?WHOLE) simply means that the &%Object ?PART is part
of the &%Object ?WHOLE.  Note that, since &%part is a 
&%ReflexiveRelation, every &%Object is a part of itself.")

(documentation partialOrderingOn "A &%BinaryRelation is a partial 
ordering on a &%SetOrClass only if the relation is &%reflexiveOn the 
&%SetOrClass, and it is both an &%AntisymmetricRelation, and a 
&%TransitiveRelation.")

(documentation partiallyFills "(&%partiallyFills ?OBJ ?HOLE) means that 
?OBJ &%completelyFills some part of ?HOLE. Note that if (&%partiallyFills 
?OBJ1 ?HOLE) and (&%part ?OBJ1 ?OBJ2), then (&%partiallyFills ?OBJ2 ?HOLE). 
Note too that a partial filler need not be wholly inside a hole (it may 
stick out), which means that every complete filler also qualifies as 
(is a limit case of) a partial one.")

(documentation partition "A &%partition of a class C is a set of 
mutually &%disjoint classes (a subclass partition) which covers C.  
Every instance of C is an instance of exactly one of the subclasses 
in the partition.")

(documentation partlyLocated "(&%partlyLocated ?THING ?OBJ) means that the 
instance of &%Physical ?THING is at least partially located at ?OBJ.  For 
example, Istanbul is partly located in &%Asia and partly located in &%Europe.  
Note that &%partlyLocated is the most basic localization relation:  &%located 
is an immediate &%subrelation of &%partlyLocated and &%exactlyLocated is 
an immediate &%subrelation of &%located.")

(documentation path "(&%path ?MOTION ?PATH) means that ?PATH is a route 
along which ?MOTION occurs.  For example, Highway 101 is the path in the 
following proposition:  the car drove up Highway 101.")

(documentation pathLength "A &%BinaryPredicate that specifies the 
length (in number of &%GraphNodes) of a &%GraphPath.
(&%pathLength ?PATH ?NUMBER) means that there are ?NUMBER nodes in 
the &%GraphPath ?PATH.")

(documentation patient "(&%patient ?PROCESS ?ENTITY) means that ?ENTITY 
is a participant in ?PROCESS that may be moved, said, experienced, etc.  
For example, the direct objects in the sentences 'The cat swallowed the 
canary' and 'Billy likes the beer' would be examples of &%patients.  Note 
that the &%patient of a &%Process may or may not undergo structural 
change as a result of the &%Process.  The &%CaseRole of &%patient is used 
when one wants to specify as broadly as possible the object of a 
&%Process.")

(documentation penetrates "(penetrates ?OBJ1 ?OBJ2) means that 
?OBJ1 is &%connected to ?OBJ2 along at least one whole dimension (length, 
width or depth).")

(documentation piece "A specialized common sense notion of part for 
arbitrary parts of &%Substances.  Quasi-synonyms are: chunk, hunk, bit, 
etc.  Compare &%component, another subrelation of &%part.")

(documentation pointOfFigure "(&%pointOfFigure ?POINT ?FIGURE) means that 
the &%GeometricPoint ?POINT is part of the &%GeometricFigure ?FIGURE.")

(documentation pointOfIntersection "(&%pointOfIntersection ?FIGURE1 ?FIGURE2 
?POINT) means that the two straight lines ?FIGURE1 and ?FIGURE2 meet at the 
point ?POINT.")

(documentation possesses "&%Relation that holds between an &%Agent and 
an &%Object when the &%Agent has ownership of the &%Object.")

(documentation precondition "A very general &%Predicate.  (&%precondition 
?PROC1 ?PROC2) means that an instance of ?PROC2 can exist only if an 
instance of ?PROC1 also exists.")

(documentation prefers "(&%prefers ?AGENT ?FORMULA1 ?FORMULA2) means that 
&%CognitiveAgent ?AGENT prefers the state of affairs expressed by ?FORMULA1
over the state of affairs expressed by ?FORMULA2 all things being equal.")

(documentation premise "(&%premise ?ARGUMENT ?PROPOSITION) means that the 
&%Proposition ?PROPOSITION is an explicit assumption of the &%Argument 
?ARGUMENT.")

(documentation prevents "A very general &%Predicate.  (&%prevents ?PROC1 
?PROC2) means that ?PROC1 prevents the occurrence of ?PROC2.  In other 
words, if ?PROC1 is occurring in a particular time and place, ?PROC2 
cannot occur at the same time and place.  For example, innoculating 
prevents contracting disease.  Note that this is a relation between types 
of &%Processes, not between instances.")

(documentation properPart "(&%properPart ?OBJ1 ?OBJ2) means that 
?OBJ1 is a part of ?OBJ2 other than ?OBJ2 itself. This is a 
&%TransitiveRelation and &%AsymmetricRelation (hence an 
&%IrreflexiveRelation).")

(documentation properlyFills "(&%properlyFills ?OBJ ?HOLE) 
means that ?HOLE is properly (though perhaps incompletely) filled by 
?OBJ, i.e. some part of ?HOLE is perfectly filled by ?OBJ.  Note that 
&%properlyFills is the dual of &%completelyFills, and is so 
related to &%partiallyFills that ?OBJ &%properlyFills ?HOLE just in 
case ?OBJ &%partiallyFills every part of ?HOLE.  (Thus, every perfect 
filler is both complete and proper in this sense). 
Every hole is connected with everything with which a proper filler 
of the hole is connected. Every proper part of a perfect filler of (a part of) a hole properly 
fills (that part of) that hole.")

(documentation property "This &%Predicate holds between an instance of 
&%Entity and an instance of &%Attribute.  (&%property ?ENTITY ?ATTR) 
means that ?ENTITY has the &%Attribute ?ATTR.")

(documentation publishes "(&%publishes ?ORG ?TEXT) means that ?ORG 
publishes ?TEXT.  For example, Bantam Books publishes Agatha Christie's 
Murder_on_the_Orient_Express.")

(documentation range "Gives the range of a function.  In other words, 
(&%range ?FUNCTION ?CLASS) means that all of the values assigned by 
?FUNCTION are &%instances of ?CLASS.")

(documentation rangeSubclass "(&%rangeSubclass ?FUNCTION ?CLASS) means that 
all of the values assigned by ?FUNCTION are &%subclasses of ?CLASS.")

(documentation realization "A subrelation of &%represents.  
(&%realization ?PROCESS ?PROP) means that ?PROCESS is a Process which 
expresses the content of ?PROP. Examples include a particular musical 
performance, which realizes the content of a musical score, or the 
reading of a poem.")

(documentation refers "(&%refers ?OBJ1 ?OBJ2) means that ?OBJ1 
mentions or includes a reference to ?OBJ2. Note that &%refers is 
more general in meaning than &%represents, because presumably something 
can represent something else only if it refers to this other thing.  
For example, an article whose topic is a recent change in the price of 
oil may refer to many other things, e.g. the general state of the economy, 
the weather in California, the prospect of global warming, the options 
for alternative energy sources, the stock prices of various oil companies, 
etc.")

(documentation reflexiveOn "A &%BinaryRelation is reflexive on a 
&%SetOrClass only if every instance of the &%SetOrClass bears the relation 
to itself.")

(documentation relatedExternalConcept "Used to signify a three-place 
relation between a concept in an external knowledge source, a concept 
in the SUMO, and the name of the other knowledge source.")

(documentation relatedInternalConcept "Means that the two arguments are 
related concepts within the SUMO, i.e. there is a significant similarity 
of meaning between them.  To indicate a meaning relation between a SUMO 
concept and a concept from another source, use the Predicate 
&%relatedExternalConcept.")

(documentation represents "A very general semiotics &%Predicate.  
(&%represents ?THING ?ENTITY) means that ?THING in some way indicates, 
expresses, connotes, pictures, describes, etc. ?ENTITY.  The &%Predicates 
&%containsInformation and &%realization are subrelations of &%represents.  
Note that &%represents is a subrelation of &%refers, since something can 
represent something else only if it refers to this other thing.  See the 
documentation string for &%names.")

(documentation representsForAgent "A very general predicate.  
(&%representsForAgent ?ENTITY1 ?ENTITY2 ?AGENT) means that the ?AGENT 
chooses to use ?ENTITY1 to 'stand for' ?ENTITY2.")

(documentation representsInLanguage "A very general predicate.  
(&%representsInLanguage ?THING ?ENTITY ?LANGUAGE) means that the 
&%LinguisticExpression ?THING stands for ?ENTITY in the &%Language 
?LANGUAGE.")

(documentation resource "(&%resource ?PROCESS ?RESOURCE) means that 
?RESOURCE is present at the beginning of ?PROCESS, is used by ?PROCESS, 
and as a consequence is changed by ?PROCESS.  For example, soap is a 
&%resource in the following proposition:  the gun was carved out of soap.  
Note that &%resource differs from &%instrument, another subrelation of 
&%patient, in that its internal or physical properties are altered in 
some way by the &%Process.")

(documentation result "(result ?ACTION ?OUTPUT) means that ?OUTPUT is 
a product of ?ACTION.  For example, house is a &%result in the 
following proposition: Eric built a house.")

(documentation sibling "The relationship between two &%Organisms that 
have the same &%mother and &%father.  Note that this relationship does 
not hold between half-brothers, half-sisters, etc.")

(documentation side "(&%side ?SIDE ?OBJECT) means that ?SIDE is a side of the object, 
as opposed to the &%top or &%bottom.")

(documentation sister "The general relationship of being a sister.  
(&%sister ?WOMAN ?PERSON) means that ?WOMAN is the sister of ?PERSON.")

(documentation smaller "(&%smaller ?OBJ1 ?OBJ2) means that ?OBJ1 
is smaller, with respect to all &%LengthMeasures, than ?OBJ2.")

(documentation son "The general relationship of being a son.  
(&%son ?CHILD ?PARENT) means that ?CHILD is the biological 
son of ?PARENT.")

(documentation spouse "The relationship of marriage between two &%Humans.")

(documentation starts "(&%starts ?INTERVAL1 ?INTERVAL2) means that 
?INTERVAL1 and ?INTERVAL2 are both &%TimeIntervals that have the same 
initial &%TimePoint and that ?INTERVAL1 ends before ?INTERVAL2.")

(documentation stays "The relation between a &%Human and a &%TemporaryResidence 
of the &%Human.")

(documentation subAttribute "Means that the second argument can be 
ascribed to everything which has the first argument ascribed to it.")

(documentation subCollection "(&%subCollection ?COLL1 ?COLL2) means that 
the &%Collection ?COLL1 is a proper part of the &%Collection ?COLL2.")

(documentation subGraph "The relation between two &%Graphs when one 
&%Graph is a part of the other.  (&%subGraph ?GRAPH1 ?GRAPH2) means 
that ?GRAPH1 is a part of ?GRAPH2.")

(documentation subList "(&%subList ?LIST1 ?LIST2) means that ?LIST1 is a 
sublist of ?LIST2, i.e. every element of ?LIST1 is an element of ?LIST2 and 
the elements that are common to both &%Lists have the same order in both 
&%Lists.  Elements that are common to both Lists and are consecutive in one 
list must also be consecutive in the other list. (Therefore - the list of 
prime numbers smaller than 10 [1 2 3 5 7] is not a subList of the 
natural numbers smaller than 10 [1 2 3 4 5 6 7 8 9]).")

(documentation subOrganization "(&%subOrganization ?ORG1 ?ORG2) means 
that ?ORG1 is an &%Organization which is a part of the &%Organization 
?ORG2.  Note that &%subOrganization is a &%ReflexiveRelation, so every 
&%Organization is a &%subOrganization of itself.")

(documentation subPlan "(&%subPlan ?PLAN1 ?PLAN2) means that ?PLAN1 
is a &%Plan which is a proper part of ?PLAN2.  This relation is generally 
used to relate a supporting &%Plan to the overall &%Plan in a particular 
context.")

(documentation subProcess "(&%subProcess ?SUBPROC ?PROC) means that ?SUBPROC 
is a subprocess of ?PROC.  A subprocess is here understood as a temporally 
distinguished part (proper or not) of a &%Process.")

(documentation subProposition "(&%subProposition ?PROP1 ?PROP2) means that 
?PROP1 is a &%Proposition which is a proper part of the &%Proposition ?PROP2.  
In other words, &%subProposition is the analogue of &%properPart for chunks 
of abstract content.")

(documentation subclass "(&%subclass ?CLASS1 ?CLASS2) means that ?CLASS1 is 
a subclass of ?CLASS2, i.e. every instance of ?CLASS1 is also an instance of 
?CLASS2.  A class may have multiple superclasses and subclasses.")

(documentation subrelation "(&%subrelation ?REL1 ?REL2) means that 
every tuple of ?REL1 is also a tuple of ?REL2.  In other words, if 
the &%Relation ?REL1 holds for some arguments arg_1, arg_2, ... arg_n, 
then the &%Relation ?REL2 holds for the same arguments.  A consequence 
of this is that a &%Relation and its subrelations must have the same 
&%valence.")

(documentation subset "(subset ?SET1 ?SET2) is true just in case the 
&%elements of the &%Set ?SET1 are also &%elements of the &%Set ?SET2.")

(documentation subsumedExternalConcept "(&%subsumedExternalConcept 
?STRING ?THING ?LANGUAGE) means that the SUMO concept ?THING is subsumed 
by the meaning of ?STRING in ?LANGUAGE, i.e. the concept ?THING is narrower 
in meaning than ?STRING.")

(documentation subsumesContentClass "A &%BinaryPredicate that relates two 
subclasses of &%ContentBearingObject.  (&%subsumesContentClass ?CLASS1 
?CLASS2) means that the content expressed by each instance of ?CLASS2 is 
also expressed by each instance of ?CLASS1.  Examples include the 
relationship between a poem and one of its stanzas or between a book and 
one of its chapters.  Note that this is a relation between subclasses of 
&%ContentBearingObject, rather than instances.  If one wants to relate 
instances, the &%Predicate &%subsumesContentInstance can be used.  Note 
that &%subsumesContentClass is needed in many cases.  Consider, for 
example, the relation between the King James edition of the Bible and its 
Book of Genesis.  This relation holds for every copy of this edition and 
not just for a single instance.")

(documentation subsumesContentInstance "A &%BinaryPredicate relating two 
instances of &%ContentBearingObject.  (&%subsumesContentInstance ?OBJ1 ?OBJ2) 
means that the content expressed by ?OBJ2 is part of the content expressed 
by ?OBJ1.  An example is the relationship between a handwritten poem and 
one of its stanzas.  Note that this is a relation between instances, 
rather than &%Classes.  If one wants to assert a content relationship 
between &%Classes, e.g. between the version of an intellectual work and a 
part of that work, the relation &%subsumesContentClass should be used.")

(documentation subsumingExternalConcept "(&%subsumingExternalConcept 
?STRING ?THING ?LANGUAGE) means that the SUMO concept ?THING subsumes 
the meaning of ?STRING in ?LANGUAGE, i.e. the concept ?THING is broader 
in meaning than ?STRING.")

(documentation successorAttribute "(&%successorAttribute ?ATTR1 ?ATTR2) 
means that ?ATTR2 is the &%Attribute that comes immediately after ?ATTR1 
on the scale that they share.")

(documentation successorAttributeClosure "The transitive closure of 
&%successorAttribute.  (&%successorAttributeClosure ?ATTR1 ?ATTR2) means 
that there is a chain of &%successorAttribute assertions connecting 
?ATTR1 and ?ATTR2.")

(documentation superficialPart "(&%superficialPart ?OBJ1 ?OBJ2) 
means that ?OBJ1 is a part of ?OBJ2 that has no interior parts of its own 
(or, intuitively, that only overlaps those parts of ?OBJ2 that are 
externally connected with the mereological complement of ?OBJ2). This too 
is a transitive relation closed under &%MereologicalSumFn and 
&%MereologicalProductFn.")

(documentation surface "(&%surface ?OBJ1 ?OBJ2) means that ?OBJ1 
is a maximally connected &%superficialPart of ?OBJ2.  Note that some 
&%SelfConnectedObjects have more than one surface, e.g. a hollow 
object like a tennis ball has both an inner and an outer surface.")

(documentation synonymousExternalConcept "(&%synonymousExternalConcept 
?STRING ?THING ?LANGUAGE) means that the SUMO concept ?THING has the 
same meaning as ?STRING in ?LANGUAGE.")

(documentation temporalPart "The temporal analogue of the spatial &%part 
predicate.  (&%temporalPart ?POS1 ?POS2) means that &%TimePosition ?POS1 
is part of &%TimePosition ?POS2.  Note that since &%temporalPart is a 
&%ReflexiveRelation every &%TimePostion is a &%temporalPart of itself.")

(documentation temporallyBetween "(&%temporallyBetween ?POINT1 ?POINT2 
?POINT3) means that the &%TimePoint ?POINT2 is between the &%TimePoints 
?POINT1 and ?POINT3, i.e. ?POINT1 is before ?POINT2 and ?POINT2 is before 
?POINT3.")

(documentation temporallyBetweenOrEqual "(&%temporallyBetweenOrEqual ?POINT1 ?POINT2 
?POINT3) means that the &%TimePoint ?POINT1 is before or equal to the 
&%TimePoint ?POINT2 and ?POINT2 is before or equal to the &%TimePoint 
?POINT3.")

(documentation time "This relation holds between an instance of 
&%Physical and an instance of &%TimePosition just in case the temporal 
lifespan of the former includes the latter.  In other words, (&%time
?THING ?TIME) means that ?THING existed or occurred at ?TIME.  Note 
that &%time does for instances of &%Physical what &%holdsDuring does 
for instances of &%Formula.  The constants &%located and &%time are 
the basic spatial and temporal predicates, respectively.")

(documentation top "(&%top ?TOP ?OBJECT) means that ?TOP is the highest maximal 
superficial part of ?OBJECT.")

(documentation totalOrderingOn "A &%BinaryRelation ?REL is a total 
ordering on a &%SetOrClass only if it is a partial ordering for which either 
(?REL ?INST1 ?INST2) or (?REL ?INST2 ?INST1) for every ?INST1 and ?INST2 
in the &%SetOrClass.")

(documentation transactionAmount "(&%transactionAmount ?TRANSACTION 
?AMOUNT) means that ?AMOUNT is an instance of &%CurrencyMeasure being 
exhanged in the &%FinancialTransaction ?TRANSACTION.")

(documentation traverses "(&%traverses ?OBJ1 ?OBJ2) means that ?OBJ1 
crosses or extends across ?OBJ2.  Note that &%crosses and 
&%penetrates are subrelations of &%traverses.")

(documentation trichotomizingOn "A &%BinaryRelation ?REL is 
trichotomizing on a &%SetOrClass only if, for all instances ?INST1 and ?INST2 
of the &%SetOrClass, at least one of the following holds:  (?REL ?INST1 ?INST2),
(?REL ?INST2 ?INST1) or (equal ?INST1 ?INST2).")

(documentation truth "The &%BinaryPredicate that relates a &%Sentence 
to its &%TruthValue.")

(documentation uniqueIdentifier "The class of &%names that uniquely identify 
an instance of &%Entity.  Some examples of &%uniqueIdentifiers are the keys 
of tables in database applications and the ISBN (International Standard Book 
Number).")

(documentation uses "(&%uses ?OBJECT AGENT) means that ?OBJECT is used by 
?AGENT as an instrument in an unspecified &%Process.  This &%Predicate, 
as its corresponding axiom indicates, is a composition of the &%CaseRoles 
&%agent and &%instrument.")

(documentation valence "Specifies the number of arguments that a 
relation can take.  If a relation does not have a fixed number of 
arguments, it does not have a valence and it is an instance of 
&%VariableArityRelation.  ")

(documentation version "Some &%Artifacts have a life cycle with discrete 
stages or versions.  (&%version ARTIFACT1 ARTIFACT2) means that ARTIFACT1 
is a version of ARTIFACT2.  Note that this &%Predicate relates subclasses of 
&%Artifact and not instances.")

(documentation wants "(&%wants ?AGENT ?OBJECT) means that ?OBJECT is desired by ?AGENT, 
i.e. ?AGENT believes that ?OBJECT will satisfy one of its goals.  Note that there is 
no implication that what is wanted by an agent is not already possessed by the agent.")

(documentation wears "(&%wears ?AGENT ?CLOTHING) means that ?AGENT is wearing 
the item of &%Clothing ?CLOTHING.")

(documentation weight "(&%weight ?O ?MM) means that on planet earth
the &%SelfConnectedObject ?O has the weight ?MM.")

(documentation width "&%BinaryPredicate that is used to state the measure 
of an &%Object from side to side at its widest span.")

(documentation wife "(&%wife ?WOMAN ?MAN) means that ?WOMAN is the wife of 
?MAN.")

(domain AbsoluteValueFn 1 RealNumber)

(domain AbstractionFn 1 Class)

(domain AdditionFn 1 Quantity)

(domain AdditionFn 2 Quantity)

(domain AssignmentFn 1 Function)

(domain BackFn 1 SelfConnectedObject)

(domain BeginFn 1 TimeInterval)

(domain BeginNodeFn 1 GraphPath)

(domain CardinalityFn 1 (UnionFn SetOrClass Collection))

(domain CeilingFn 1 RealNumber)

(domain ComplementFn 1 SetOrClass)

(domain CosineFn 1 PlaneAngleMeasure)

(domain CutSetFn 1 Graph)

(domain DayFn 1 PositiveRealNumber)

(domain DenominatorFn 1 RealNumber)

(domain DensityFn 1 MassMeasure)

(domain DensityFn 2 VolumeMeasure)

(domain DivisionFn 1 Quantity)

(domain DivisionFn 2 Quantity)

(domain EditionFn 2 PositiveInteger)

(domain EndFn 1 TimeInterval)

(domain EndNodeFn 1 GraphPath)

(domain ExponentiationFn 1 Quantity)

(domain ExponentiationFn 2 Integer)

(domain ExtensionFn 1 Attribute)

(domain FloorFn 1 RealNumber)

(domain FrontFn 1 SelfConnectedObject)

(domain FutureFn 1 TimePosition)

(domain GigaFn 1 UnitOfMeasure)

(domain GovernmentFn 1 GeopoliticalArea)

(domain GraphPathFn 1 GraphNode)

(domain GraphPathFn 2 GraphNode)

(domain HoleHostFn 1 Hole)

(domain HoleSkinFn 1 Hole)

(domain HourFn 1 PositiveRealNumber)

(domain ImaginaryPartFn 1 ComplexNumber)

(domain ImmediateFamilyFn 1 Human)

(domain ImmediateFutureFn 1 TimePosition)

(domain ImmediatePastFn 1 TimePosition)

(domain InitialNodeFn 1 GraphArc)

(domain IntegerSquareRootFn 1 RealNumber)

(domain IntersectionFn 1 SetOrClass)

(domain IntersectionFn 2 SetOrClass)

(domain IntervalFn 1 ConstantQuantity)

(domain IntervalFn 2 ConstantQuantity)

(domain KappaFn 1 SymbolicString)

(domain KappaFn 2 Formula)

(domain KiloFn 1 UnitOfMeasure)

(domain ListConcatenateFn 1 List)

(domain ListConcatenateFn 2 List)

(domain ListLengthFn 1 List)

(domain ListOrderFn 1 List)

(domain ListOrderFn 2 PositiveInteger)

(domain LogFn 1 RealNumber)

(domain LogFn 2 PositiveInteger)

(domain MagnitudeFn 1 ConstantQuantity)

(domain MaxFn 1 Quantity)

(domain MaxFn 2 Quantity)

(domain MaximalWeightedPathFn 1 GraphNode)

(domain MaximalWeightedPathFn 2 GraphNode)

(domain MeasureFn 1 RealNumber)

(domain MeasureFn 2 UnitOfMeasure)

(domain MegaFn 1 UnitOfMeasure)

(domain MereologicalDifferenceFn 1 Object)

(domain MereologicalDifferenceFn 2 Object)

(domain MereologicalProductFn 1 Object)

(domain MereologicalProductFn 2 Object)

(domain MereologicalSumFn 1 Object)

(domain MereologicalSumFn 2 Object)

(domain MicroFn 1 UnitOfMeasure)

(domain MilliFn 1 UnitOfMeasure)

(domain MinFn 1 Quantity)

(domain MinFn 2 Quantity)

(domain MinimalCutSetFn 1 Graph)

(domain MinimalWeightedPathFn 1 GraphNode)

(domain MinimalWeightedPathFn 2 GraphNode)

(domain MinuteFn 1 PositiveRealNumber)

(domain MultiplicationFn 1 Quantity)

(domain MultiplicationFn 2 Quantity)

(domain NanoFn 1 UnitOfMeasure)

(domain NumeratorFn 1 RealNumber)

(domain PastFn 1 TimePosition)

(domain PathWeightFn 1 GraphPath)

(domain PerFn 1 ConstantQuantity)

(domain PerFn 2 ConstantQuantity)

(domain PeriodicalIssueFn 2 PositiveInteger)

(domain PicoFn 1 UnitOfMeasure)

(domain PowerSetFn 1 SetOrClass)

(domain PredecessorFn 1 Integer)

(domain PremisesFn 1 Argument)

(domain ProbabilityFn 1 Formula)

(domain PropertyFn 1 Agent)

(domain RationalNumberFn 1 Number)

(domain RealNumberFn 1 Number)

(domain ReciprocalFn 1 Quantity)

(domain RelativeComplementFn 1 SetOrClass)

(domain RelativeComplementFn 2 SetOrClass)

(domain RelativeTimeFn 1 TimePosition)

(domain RelativeTimeFn 2 TimeZone)

(domain RemainderFn 1 Quantity)

(domain RemainderFn 2 Quantity)

(domain RoundFn 1 Quantity)

(domain SecondFn 1 PositiveRealNumber)

(domain SeriesVolumeFn 2 PositiveInteger)

(domain SignumFn 1 RealNumber)

(domain SineFn 1 PlaneAngleMeasure)

(domain SpeedFn 1 LengthMeasure)

(domain SpeedFn 2 TimeDuration)

(domain SquareRootFn 1 RealNumber)

(domain SubtractionFn 1 Quantity)

(domain SubtractionFn 2 Quantity)

(domain SuccessorFn 1 Integer)

(domain TangentFn 1 PlaneAngleMeasure)

(domain TemporalCompositionFn 1 TimeInterval)

(domain TeraFn 1 UnitOfMeasure)

(domain TerminalNodeFn 1 GraphArc)

(domain TimeIntervalFn 1 TimePoint)

(domain TimeIntervalFn 2 TimePoint)

(domain UnionFn 1 SetOrClass)

(domain UnionFn 2 SetOrClass)

(domain VelocityFn 1 LengthMeasure)

(domain VelocityFn 2 TimeDuration)

(domain VelocityFn 3 Region)

(domain VelocityFn 4 DirectionalAttribute)

(domain WealthFn 1 Agent)

(domain WhenFn 1 Physical)

(domain WhereFn 1 Physical)

(domain WhereFn 2 TimePoint)

(domain YearFn 1 Integer)

(domain age 2 TimeDuration)

(domain agent 1 Process)

(domain agent 2 Agent)

(domain ancestor 1 Organism)

(domain ancestor 2 Organism)

(domain angleOfFigure 1 TwoDimensionalAngle)

(domain angleOfFigure 2 GeometricFigure)

(domain angularMeasure 1 TwoDimensionalAngle)

(domain angularMeasure 2 PlaneAngleMeasure)

(domain arcWeight 1 GraphArc)

(domain arcWeight 2 RealNumber)

(domain attends 1 Demonstrating)

(domain attends 2 Human)

(domain attribute 1 Object)

(domain authors 1 Agent)

(domain average 1 List)

(domain average 2 RealNumber)

(domain before 1 TimePoint)

(domain before 2 TimePoint)

(domain beforeOrEqual 1 TimePoint)

(domain beforeOrEqual 2 TimePoint)

(domain believes 1 CognitiveAgent)

(domain believes 2 Formula)

(domain between 1 Object)

(domain between 2 Object)

(domain between 3 Object)

(domain bottom 1 SelfConnectedObject)

(domain bottom 2 SelfConnectedObject)

(domain brother 1 Man)

(domain brother 2 Human)

(domain capability 2 CaseRole)

(domain capability 3 Object)

(domain causes 1 Process)

(domain causes 2 Process)

(domain causesProposition 1 Formula)

(domain causesProposition 2 Formula)

(domain citizen 1 Human)

(domain citizen 2 Nation)

(domain closedOn 1 Function)

(domain closedOn 2 SetOrClass)

(domain component 1 CorpuscularObject)

(domain component 2 CorpuscularObject)

(domain conclusion 1 Argument)

(domain conclusion 2 Proposition)

(domain conditionalProbability 1 Formula)

(domain conditionalProbability 2 Formula)

(domain conditionalProbability 3 RealNumber)

(domain confersNorm 1 Entity)

(domain confersNorm 2 Formula)

(domain confersNorm 3 ObjectiveNorm)

(domain confersObligation 1 Formula)

(domain confersObligation 2 Entity)

(domain confersObligation 3 CognitiveAgent)

(domain confersRight 1 Formula)

(domain confersRight 2 Entity)

(domain confersRight 3 CognitiveAgent)

(domain connected 1 Object)

(domain connected 2 Object)

(domain connectedEngineeringComponents 1 EngineeringComponent)

(domain connectedEngineeringComponents 2 EngineeringComponent)

(domain connects 1 SelfConnectedObject)

(domain connects 2 SelfConnectedObject)

(domain connects 3 SelfConnectedObject)

(domain connectsEngineeringComponents 1 EngineeringConnection)

(domain connectsEngineeringComponents 2 EngineeringComponent)

(domain connectsEngineeringComponents 3 EngineeringComponent)

(domain considers 1 CognitiveAgent)

(domain considers 2 Formula)

(domain consistent 1 Proposition)

(domain consistent 2 Proposition)

(domain contains 1 SelfConnectedObject)

(domain contains 2 Object)

(domain containsInformation 1 ContentBearingPhysical)

(domain containsInformation 2 Proposition)

(domain cooccur 1 Physical)

(domain cooccur 2 Physical)

(domain copy 1 Object)

(domain copy 2 Object)

(domain date 1 Physical)

(domain date 2 Day)

(domain daughter 1 Woman)

(domain daughter 2 Human)

(domain decreasesLikelihood 1 Formula)

(domain decreasesLikelihood 2 Formula)

(domain deprivesNorm 1 Entity)

(domain deprivesNorm 2 Formula)

(domain deprivesNorm 3 ObjectiveNorm)

(domain desires 1 CognitiveAgent)

(domain desires 2 Formula)

(domain destination 1 Process)

(domain destination 2 Entity)

(domain developmentalForm 1 OrganicObject)

(domain developmentalForm 2 DevelopmentalAttribute)

(domain direction 1 Process)

(domain direction 2 DirectionalAttribute)

(domain disjoint 1 SetOrClass)

(domain disjoint 2 SetOrClass)

(domain disjointDecomposition 1 Class)

(domain disjointRelation 1 Relation)

(domain disjointRelation 2 Relation)

(domain distance 1 Physical)

(domain distance 2 Physical)

(domain distance 3 LengthMeasure)

(domain distributes 1 BinaryFunction)

(domain distributes 2 BinaryFunction)

(domain documentation 1 Entity)

(domain documentation 2 SymbolicString)

(domain domain 1 Relation)

(domain domain 2 PositiveInteger)

(domain domain 3 SetOrClass)

(domain domainSubclass 1 Relation)

(domain domainSubclass 2 PositiveInteger)

(domain domainSubclass 3 SetOrClass)

(domain duration 1 TimeInterval)

(domain duration 2 TimeDuration)

(domain during 1 TimeInterval)

(domain during 2 TimeInterval)

(domain earlier 1 TimeInterval)

(domain earlier 2 TimeInterval)

(domain editor 1 Agent)

(domain element 1 Entity)

(domain element 2 Set)

(domain employs 1 Organization)

(domain employs 2 CognitiveAgent)

(domain engineeringSubcomponent 1 EngineeringComponent)

(domain engineeringSubcomponent 2 EngineeringComponent)

(domain entails 1 Formula)

(domain entails 2 Formula)

(domain equal 1 Entity)

(domain equal 2 Entity)

(domain equivalenceRelationOn 1 BinaryRelation)

(domain equivalenceRelationOn 2 SetOrClass)

(domain equivalentContentInstance 1 ContentBearingObject)

(domain equivalentContentInstance 2 ContentBearingObject)

(domain exhaustiveDecomposition 1 Class)

(domain experiencer 1 Process)

(domain experiencer 2 Agent)

(domain exploits 1 Object)

(domain exploits 2 Agent)

(domain expressedInLanguage 1 LinguisticExpression)

(domain expressedInLanguage 2 Language)

(domain faces 1 Object)

(domain faces 2 DirectionalAttribute)

(domain familyRelation 1 Organism)

(domain familyRelation 2 Organism)

(domain father 1 Organism)

(domain father 2 Organism)

(domain fills 1 Object)

(domain fills 2 Hole)

(domain finishes 1 TimeInterval)

(domain finishes 2 TimeInterval)

(domain frequency 2 TimeDuration)

(domain geographicSubregion 1 GeographicArea)

(domain geographicSubregion 2 GeographicArea)

(domain geometricDistance 1 GeometricPoint)

(domain geometricDistance 2 GeometricPoint)

(domain geometricDistance 3 LengthMeasure)

(domain geometricPart 1 GeometricFigure)

(domain geometricPart 2 GeometricFigure)

(domain geopoliticalSubdivision 1 GeopoliticalArea)

(domain geopoliticalSubdivision 2 GeopoliticalArea)

(domain graphPart 1 GraphElement)

(domain graphPart 2 Graph)

(domain grasps 1 Animal)

(domain grasps 2 Object)

(domain greaterThan 1 Quantity)

(domain greaterThan 2 Quantity)

(domain greaterThanOrEqualTo 1 Quantity)

(domain greaterThanOrEqualTo 2 Quantity)

(domain hasPurpose 1 Physical)

(domain hasPurpose 2 Formula)

(domain hasPurposeForAgent 1 Physical)

(domain hasPurposeForAgent 2 Formula)

(domain hasPurposeForAgent 3 CognitiveAgent)

(domain hasSkill 2 Agent)

(domain height 1 SelfConnectedObject)

(domain height 2 LengthMeasure)

(domain holdsDuring 1 TimePosition)

(domain holdsDuring 2 Formula)

(domain holdsObligation 1 Formula)

(domain holdsObligation 2 CognitiveAgent)

(domain holdsRight 1 Formula)

(domain holdsRight 2 CognitiveAgent)

(domain hole 1 Hole)

(domain hole 2 SelfConnectedObject)

(domain home 1 Human)

(domain home 2 PermanentResidence)

(domain husband 1 Man)

(domain husband 2 Woman)

(domain identicalListItems 1 List)

(domain identicalListItems 2 List)

(domain identityElement 1 BinaryFunction)

(domain identityElement 2 Entity)

(domain inList 1 Entity)

(domain inList 2 List)

(domain inScopeOfInterest 1 CognitiveAgent)

(domain inScopeOfInterest 2 Entity)

(domain increasesLikelihood 1 Formula)

(domain increasesLikelihood 2 Formula)

(domain independentProbability 1 Formula)

(domain independentProbability 2 Formula)

(domain inhabits 1 Organism)

(domain inhabits 2 Object)

(domain instance 1 Entity)

(domain instance 2 SetOrClass)

(domain instrument 1 Process)

(domain instrument 2 Object)

(domain inverse 1 BinaryRelation)

(domain inverse 2 BinaryRelation)

(domain irreflexiveOn 1 BinaryRelation)

(domain irreflexiveOn 2 SetOrClass)

(domain knows 1 CognitiveAgent)

(domain knows 2 Formula)

(domain larger 1 Object)

(domain larger 2 Object)

(domain leader 1 Agent)

(domain leader 2 Human)

(domain legalRelation 1 Human)

(domain legalRelation 2 Human)

(domain length 2 LengthMeasure)

(domain lessThan 1 Quantity)

(domain lessThan 2 Quantity)

(domain lessThanOrEqualTo 1 Quantity)

(domain lessThanOrEqualTo 2 Quantity)

(domain lineMeasure 1 OneDimensionalFigure)

(domain lineMeasure 2 LengthMeasure)

(domain links 1 GraphNode)

(domain links 2 GraphNode)

(domain links 3 GraphArc)

(domain manner 1 Process)

(domain material 2 CorpuscularObject)

(domain measure 1 Object)

(domain measure 2 PhysicalQuantity)

(domain meetsTemporally 1 TimeInterval)

(domain meetsTemporally 2 TimeInterval)

(domain member 1 SelfConnectedObject)

(domain member 2 Collection)

(domain modalAttribute 1 Formula)

(domain modalAttribute 2 NormativeAttribute)

(domain monetaryValue 1 Physical)

(domain monetaryValue 2 CurrencyMeasure)

(domain mother 1 Organism)

(domain mother 2 Organism)

(domain names 1 SymbolicString)

(domain needs 1 CognitiveAgent)

(domain needs 2 Physical)

(domain occupiesPosition 1 Human)

(domain occupiesPosition 2 Position)

(domain occupiesPosition 3 Organization)

(domain orientation 1 Object)

(domain orientation 2 Object)

(domain orientation 3 PositionalAttribute)

(domain origin 1 Process)

(domain origin 2 Object)

(domain overlapsTemporally 1 TimeInterval)

(domain overlapsTemporally 2 TimeInterval)

(domain parallel 1 OneDimensionalFigure)

(domain parallel 2 OneDimensionalFigure)

(domain parent 1 Organism)

(domain parent 2 Organism)

(domain part 1 Object)

(domain part 2 Object)

(domain partialOrderingOn 1 BinaryRelation)

(domain partialOrderingOn 2 SetOrClass)

(domain partiallyFills 1 Object)

(domain partiallyFills 2 Hole)

(domain partition 1 Class)

(domain partlyLocated 1 Physical)

(domain partlyLocated 2 Object)

(domain path 1 Motion)

(domain path 2 Object)

(domain pathLength 1 GraphPath)

(domain pathLength 2 PositiveInteger)

(domain patient 1 Process)

(domain patient 2 Entity)

(domain piece 1 Substance)

(domain piece 2 Substance)

(domain pointOfFigure 1 GeometricPoint)

(domain pointOfFigure 2 GeometricFigure)

(domain pointOfIntersection 1 OneDimensionalFigure)

(domain pointOfIntersection 2 OneDimensionalFigure)

(domain pointOfIntersection 3 GeometricPoint)

(domain possesses 1 Agent)

(domain possesses 2 Object)

(domain prefers 1 CognitiveAgent)

(domain prefers 2 Formula)

(domain prefers 3 Formula)

(domain premise 1 Argument)

(domain premise 2 Proposition)

(domain properlyFills 1 Object)

(domain properlyFills 2 Hole)

(domain property 1 Entity)

(domain property 2 Attribute)

(domain publishes 1 Organization)

(domain range 1 Function)

(domain range 2 SetOrClass)

(domain rangeSubclass 1 Function)

(domain realization 1 Process)

(domain realization 2 Proposition)

(domain refers 1 Entity)

(domain refers 2 Entity)

(domain reflexiveOn 1 BinaryRelation)

(domain reflexiveOn 2 SetOrClass)

(domain relatedExternalConcept 1 SymbolicString)

(domain relatedExternalConcept 2 Entity)

(domain relatedExternalConcept 3 Language)

(domain relatedInternalConcept 1 Entity)

(domain relatedInternalConcept 2 Entity)

(domain representsForAgent 1 Entity)

(domain representsForAgent 2 Entity)

(domain representsForAgent 3 Agent)

(domain representsInLanguage 1 LinguisticExpression)

(domain representsInLanguage 2 Entity)

(domain representsInLanguage 3 Language)

(domain resource 1 Process)

(domain resource 2 Object)

(domain result 1 Process)

(domain result 2 Entity)

(domain sibling 1 Organism)

(domain sibling 2 Organism)

(domain side 1 SelfConnectedObject)

(domain side 2 SelfConnectedObject)

(domain sister 1 Woman)

(domain sister 2 Human)

(domain smaller 1 Object)

(domain smaller 2 Object)

(domain son 1 Man)

(domain son 2 Human)

(domain spouse 1 Human)

(domain spouse 2 Human)

(domain starts 1 TimeInterval)

(domain starts 2 TimeInterval)

(domain stays 1 Human)

(domain stays 2 TemporaryResidence)

(domain subAttribute 1 Attribute)

(domain subAttribute 2 Attribute)

(domain subCollection 1 Collection)

(domain subCollection 2 Collection)

(domain subGraph 1 Graph)

(domain subGraph 2 Graph)

(domain subList 1 List)

(domain subList 2 List)

(domain subOrganization 1 Organization)

(domain subOrganization 2 Organization)

(domain subPlan 1 Plan)

(domain subPlan 2 Plan)

(domain subProcess 1 Process)

(domain subProcess 2 Process)

(domain subProposition 1 Proposition)

(domain subProposition 2 Proposition)

(domain subclass 1 SetOrClass)

(domain subclass 2 SetOrClass)

(domain subrelation 1 Relation)

(domain subrelation 2 Relation)

(domain subset 1 Set)

(domain subset 2 Set)

(domain subsumesContentInstance 1 ContentBearingObject)

(domain subsumesContentInstance 2 ContentBearingObject)

(domain successorAttribute 1 Attribute)

(domain successorAttribute 2 Attribute)

(domain successorAttributeClosure 1 Attribute)

(domain successorAttributeClosure 2 Attribute)

(domain surface 1 SelfConnectedObject)

(domain surface 2 SelfConnectedObject)

(domain temporalPart 1 TimePosition)

(domain temporalPart 2 TimePosition)

(domain temporallyBetween 1 TimePoint)

(domain temporallyBetween 2 TimePoint)

(domain temporallyBetween 3 TimePoint)

(domain temporallyBetweenOrEqual 1 TimePoint)

(domain temporallyBetweenOrEqual 2 TimePoint)

(domain temporallyBetweenOrEqual 3 TimePoint)

(domain time 1 Physical)

(domain time 2 TimePosition)

(domain top 1 SelfConnectedObject)

(domain top 2 SelfConnectedObject)

(domain totalOrderingOn 1 BinaryRelation)

(domain totalOrderingOn 2 SetOrClass)

(domain transactionAmount 1 FinancialTransaction)

(domain transactionAmount 2 CurrencyMeasure)

(domain traverses 1 Object)

(domain traverses 2 Object)

(domain trichotomizingOn 1 BinaryRelation)

(domain trichotomizingOn 2 SetOrClass)

(domain truth 1 Sentence)

(domain truth 2 TruthValue)

(domain uses 1 Object)

(domain uses 2 Agent)

(domain valence 1 Relation)

(domain valence 2 PositiveInteger)

(domain wants 1 CognitiveAgent)

(domain wants 2 Physical)

(domain wears 1 Animal)

(domain wears 2 Clothing)

(domain weight 1 SelfConnectedObject)

(domain weight 2 MassMeasure)

(domain wife 1 Woman)

(domain wife 2 Man)

(domainSubclass DayFn 2 Month)

(domainSubclass EditionFn 1 ContentBearingObject)

(domainSubclass GeneralizedIntersectionFn 1 SetOrClass)

(domainSubclass GeneralizedUnionFn 1 SetOrClass)

(domainSubclass HourFn 2 Day)

(domainSubclass MinuteFn 2 Hour)

(domainSubclass MonthFn 1 Month)

(domainSubclass MonthFn 2 Year)

(domainSubclass PeriodicalIssueFn 1 Periodical)

(domainSubclass RecurrentTimeIntervalFn 1 TimeInterval)

(domainSubclass RecurrentTimeIntervalFn 2 TimeInterval)

(domainSubclass SecondFn 2 Minute)

(domainSubclass SeriesVolumeFn 1 Series)

(domainSubclass TemporalCompositionFn 2 TimeInterval)

(domainSubclass authors 2 Text)

(domainSubclass capability 1 Process)

(domainSubclass causesSubclass 1 Process)

(domainSubclass causesSubclass 2 Process)

(domainSubclass editor 2 Text)

(domainSubclass equivalentContentClass 1 ContentBearingObject)

(domainSubclass equivalentContentClass 2 ContentBearingObject)

(domainSubclass exhaustiveAttribute 1 Attribute)

(domainSubclass frequency 1 Process)

(domainSubclass hasSkill 1 Process)

(domainSubclass inhibits 1 Process)

(domainSubclass inhibits 2 Process)

(domainSubclass material 1 Substance)

(domainSubclass precondition 1 Process)

(domainSubclass precondition 2 Process)

(domainSubclass prevents 1 Process)

(domainSubclass prevents 2 Process)

(domainSubclass publishes 2 Text)

(domainSubclass rangeSubclass 2 SetOrClass)

(domainSubclass subsumesContentClass 1 ContentBearingObject)

(domainSubclass subsumesContentClass 2 ContentBearingObject)

(domainSubclass version 1 Artifact)

(domainSubclass version 2 Artifact)

(equal (CardinalityFn Continent) 7)

(equal (MeasureFn 0 AngularDegree) (MeasureFn 360 AngularDegree))

(exhaustiveAttribute AnimacyAttribute Living Dead)

(exhaustiveAttribute DevelopmentalAttribute FullyFormed NonFullyFormed)

(exhaustiveAttribute PhysicalState Solid Fluid Liquid Gas Plasma)

(exhaustiveAttribute SexAttribute Female Male)

(exists (?THING) (instance ?THING Entity))

(forall (?A ?C ?P) (=> (and (instance ?A Animal) (instance ?C Clothing) (instance ?P Clothing)) (=> (and (wears ?A ?C) (part ?P ?C)) (wears ?A ?P))))

(forall (?ABS) (=> (instance ?ABS Physical) (<=> (instance ?ABS Abstract) (not (exists (?POINT) (and (instance ?POINT Object) (instance ?POINT TimePosition) (or (located ?ABS ?POINT) (time ?ABS ?POINT))))))))

(forall (?ACT ?AGENT) (=> (and (instance ?ACT Process) (instance ?AGENT Agent) (instance ?AGENT SelfConnectedObject)) (=> (and (instance ?ACT OrganizationalProcess) (agent ?ACT ?AGENT)) (or (instance ?AGENT Organization) (exists (?ORG) (and (instance ?ORG Collection) (instance ?ORG Organization) (member ?AGENT ?ORG)))))))

(forall (?ACT ?AGENT) (=> (and (instance ?ACT Process) (instance ?AGENT Agent) (instance ?AGENT SelfConnectedObject)) (=> (and (instance ?ACT ReligiousProcess) (agent ?ACT ?AGENT)) (or (instance ?AGENT ReligiousOrganization) (exists (?ORG) (and (instance ?ORG Collection) (member ?AGENT ?ORG) (instance ?ORG ReligiousOrganization)))))))

(forall (?ACT ?ANIMAL) (=> (instance ?ACT Process) (=> (and (instance ?ACT Surgery) (patient ?ACT ?ANIMAL)) (exists (?SUBACT) (and (instance ?SUBACT Process) (instance ?SUBACT Cutting) (instance ?ANIMAL Animal) (patient ?SUBACT ?ANIMAL) (subProcess ?SUBACT ?ACT))))))

(forall (?ACT ?FOOD) (=> (and (instance ?ACT Process) (instance ?FOOD Object)) (=> (and (instance ?ACT Eating) (resource ?ACT ?FOOD)) (attribute ?FOOD Solid))))

(forall (?ACT ?FOOD) (=> (and (instance ?ACT Process) (instance ?FOOD Object)) (=> (and (instance ?ACT Ingesting) (resource ?ACT ?FOOD)) (instance ?FOOD Food))))

(forall (?ACTION) (=> (instance ?ACTION Process) (=> (instance ?ACTION Creation) (exists (?RESULT) (result ?ACTION ?RESULT)))))

(forall (?ADVERT) (=> (instance ?ADVERT Physical) (=> (instance ?ADVERT Advertising) (exists (?OBJ) (and (refers ?ADVERT ?OBJ) (hasPurpose ?ADVERT `(exists (?SALE) (and (instance ?SALE Process) (instance ?SALE Selling) (patient ?SALE ?OBJ)))))))))

(forall (?AGENT ?CLOTHING) (=> (and (instance ?AGENT Animal) (instance ?CLOTHING Clothing)) (=> (wears ?AGENT ?CLOTHING) (located ?CLOTHING ?AGENT))))

(forall (?AGENT ?FORMULA) (=> (and (instance ?AGENT CognitiveAgent) (instance ?FORMULA Formula)) (=> (believes ?AGENT ?FORMULA) (exists (?TIME) (and (instance ?TIME TimePosition) (holdsDuring ?TIME `(considers ?AGENT ?FORMULA)))))))

(forall (?AGENT ?FORMULA) (=> (and (instance ?AGENT CognitiveAgent) (instance ?FORMULA Formula)) (=> (knows ?AGENT ?FORMULA) (believes ?AGENT ?FORMULA))))

(forall (?AGENT ?FORMULA) (=> (and (instance ?AGENT CognitiveAgent) (instance ?FORMULA Formula)) (=> (knows ?AGENT ?FORMULA) (truth ?FORMULA True))))

(forall (?AGENT ?FORMULA) (=> (instance ?AGENT CognitiveAgent) (=> (believes ?AGENT ?FORMULA) (instance ?FORMULA Formula))))

(forall (?AGENT ?FORMULA) (=> (instance ?AGENT CognitiveAgent) (=> (considers ?AGENT ?FORMULA) (instance ?FORMULA Formula))))

(forall (?AGENT ?FORMULA) (=> (instance ?AGENT CognitiveAgent) (=> (desires ?AGENT ?FORMULA) (instance ?FORMULA Formula))))

(forall (?AGENT ?FORMULA) (=> (instance ?AGENT CognitiveAgent) (=> (knows ?AGENT ?FORMULA) (instance ?FORMULA Formula))))

(forall (?AGENT ?FORMULA1 ?FORMULA2) (=> (and (instance ?AGENT CognitiveAgent) (instance ?FORMULA1 Formula) (instance ?FORMULA2 Formula)) (=> (prefers ?AGENT ?FORMULA1 ?FORMULA2) (not (and (truth ?FORMULA1 True) (truth ?FORMULA2 True))))))

(forall (?AGENT ?OBJ) (=> (and (instance ?AGENT CognitiveAgent) (instance ?OBJ Object)) (=> (wants ?AGENT ?OBJ) (desires ?AGENT `(possesses ?AGENT ?OBJ)))))

(forall (?AGENT ?OBJ) (=> (and (instance ?AGENT CognitiveAgent) (instance ?OBJ Physical)) (=> (wants ?AGENT ?OBJ) (exists (?PURP) (and (instance ?PURP Formula) (hasPurposeForAgent ?OBJ ?PURP ?AGENT))))))

(forall (?AGENT ?OBJECT) (=> (and (instance ?AGENT CognitiveAgent) (instance ?OBJECT Physical)) (=> (needs ?AGENT ?OBJECT) (wants ?AGENT ?OBJECT))))

(forall (?AGENT ?OBJECT) (=> (instance ?AGENT CognitiveAgent) (<=> (exists (?PROCESS) (and (instance ?PROCESS Process) (instance ?PROCESS IntentionalProcess) (agent ?PROCESS ?AGENT) (patient ?PROCESS ?OBJECT))) (inScopeOfInterest ?AGENT ?OBJECT))))

(forall (?AGENT ?POSITION ?ORG) (=> (and (instance ?AGENT Human) (instance ?POSITION Position) (instance ?ORG Organization)) (=> (occupiesPosition ?AGENT ?POSITION ?ORG) (attribute ?AGENT ?POSITION))))

(forall (?AGENT ?ROW1 ?OBJ) (=> (and (instance ?AGENT CognitiveAgent) (instance ?ROW1 Formula)) (=> (and (believes ?AGENT ?ROW1) (inList ?OBJ (ListFn ?ROW1))) (inScopeOfInterest ?AGENT ?OBJ))))

(forall (?AGENT ?ROW1 ?OBJ) (=> (and (instance ?AGENT CognitiveAgent) (instance ?ROW1 Formula)) (=> (and (considers ?AGENT ?ROW1) (inList ?OBJ (ListFn ?ROW1))) (inScopeOfInterest ?AGENT ?OBJ))))

(forall (?AGENT ?ROW1 ?OBJ) (=> (and (instance ?AGENT CognitiveAgent) (instance ?ROW1 Formula)) (=> (and (desires ?AGENT ?ROW1) (inList ?OBJ (ListFn ?ROW1))) (inScopeOfInterest ?AGENT ?OBJ))))

(forall (?AGENT ?ROW1 ?OBJ) (=> (and (instance ?AGENT CognitiveAgent) (instance ?ROW1 Formula)) (=> (and (knows ?AGENT ?ROW1) (inList ?OBJ (ListFn ?ROW1))) (inScopeOfInterest ?AGENT ?OBJ))))

(forall (?AGENT ?ROW1 ?OBJ) (=> (and (instance ?AGENT CognitiveAgent) (instance ?ROW1 Physical)) (=> (and (needs ?AGENT ?ROW1) (inList ?OBJ (ListFn ?ROW1))) (inScopeOfInterest ?AGENT ?OBJ))))

(forall (?AGENT ?ROW1 ?OBJ) (=> (and (instance ?AGENT CognitiveAgent) (instance ?ROW1 Physical)) (=> (and (wants ?AGENT ?ROW1) (inList ?OBJ (ListFn ?ROW1))) (inScopeOfInterest ?AGENT ?OBJ))))

(forall (?AGENT ?ROW1 ?OBJ) (=> (instance ?AGENT CognitiveAgent) (=> (and (inScopeOfInterest ?AGENT ?ROW1) (inList ?OBJ (ListFn ?ROW1))) (inScopeOfInterest ?AGENT ?OBJ))))

(forall (?AGENT ?ROW1 ?ROW2 ?OBJ) (=> (and (instance ?AGENT CognitiveAgent) (instance ?ROW1 Formula) (instance ?ROW2 Formula)) (=> (and (prefers ?AGENT ?ROW1 ?ROW2) (inList ?OBJ (ListFn ?ROW1 ?ROW2))) (inScopeOfInterest ?AGENT ?OBJ))))

(forall (?AGENT ?TEXT) (=> (and (instance ?AGENT Agent) (instance ?TEXT SetOrClass) (subclass ?TEXT Text)) (=> (authors ?AGENT ?TEXT) (exists (?PROCESS ?INSTANCE) (and (instance ?PROCESS Process) (agent ?PROCESS ?AGENT) (instance ?INSTANCE ?TEXT) (result ?PROCESS ?TEXT))))))

(forall (?AGENT ?THING) (=> (instance ?AGENT CognitiveAgent) (=> (needs ?AGENT ?THING) (instance ?THING Physical))))

(forall (?AGENT ?THING) (=> (instance ?AGENT CognitiveAgent) (=> (wants ?AGENT ?THING) (instance ?THING Physical))))

(forall (?AGENT) (<=> (instance ?AGENT Agent) (exists (?PROC) (and (instance ?PROC Process) (agent ?PROC ?AGENT)))))

(forall (?AGENT) (=> (instance ?AGENT Object) (<=> (and (instance ?AGENT SentientAgent) (attribute ?AGENT Living)) (exists (?ATTR) (and (instance ?ATTR Attribute) (instance ?ATTR ConsciousnessAttribute) (attribute ?AGENT ?ATTR))))))

(forall (?AGENT) (=> (instance ?AGENT Object) (=> (instance ?AGENT CognitiveAgent) (capability Reasoning agent ?AGENT))))

(forall (?AGENT) (=> (instance ?AGENT Object) (=> (instance ?AGENT SentientAgent) (capability Perception experiencer ?AGENT))))

(forall (?AGENT) (=> (instance ?AGENT Object) (=> (or (attribute ?AGENT Asleep) (attribute ?AGENT Awake)) (attribute ?AGENT Living))))

(forall (?AGENT1 ?AGENT2 ?OBJECT) (=> (and (instance ?AGENT1 Agent) (instance ?AGENT2 Agent)) (<=> (exists (?BORROW) (and (instance ?BORROW Process) (instance ?BORROW Borrowing) (agent ?BORROW ?AGENT1) (origin ?BORROW ?AGENT2) (patient ?BORROW ?OBJECT))) (exists (?LEND) (and (instance ?LEND Process) (instance ?LEND Lending) (agent ?LEND ?AGENT2) (destination ?LEND ?AGENT1) (patient ?LEND ?OBJECT))))))

(forall (?AGENT1 ?AGENT2 ?OBJECT) (=> (and (instance ?AGENT1 Agent) (instance ?AGENT2 Agent)) (<=> (exists (?BUY) (and (instance ?BUY Process) (instance ?BUY Buying) (agent ?BUY ?AGENT1) (origin ?BUY ?AGENT2) (patient ?BUY ?OBJECT))) (exists (?SELL) (and (instance ?SELL Process) (instance ?SELL Selling) (agent ?SELL ?AGENT2) (destination ?SELL ?AGENT1) (patient ?SELL ?OBJECT))))))

(forall (?AGENT1 ?AGENT2) (=> (and (instance ?AGENT1 Human) (instance ?AGENT2 Human)) (=> (legalRelation ?AGENT1 ?AGENT2) (exists (?DECLARE ?OBLIGATION) (and (instance ?OBLIGATION Formula) (instance ?DECLARE Declaring) (confersObligation ?OBLIGATION ?DECLARE ?AGENT1) (confersObligation ?OBLIGATION ?DECLARE ?AGENT2))))))

(forall (?ALGA) (=> (instance ?ALGA Organism) (=> (instance ?ALGA Alga) (exists (?WATER) (and (instance ?WATER Object) (inhabits ?ALGA ?WATER) (instance ?WATER Water))))))

(forall (?ALT ?OBJ) (=> (and (instance ?ALT Process) (instance ?OBJ Object)) (=> (and (instance ?ALT ShapeChange) (patient ?ALT ?OBJ)) (exists (?PROPERTY) (and (instance ?PROPERTY Attribute) (instance ?PROPERTY ShapeAttribute) (or (and (holdsDuring (BeginFn (WhenFn ?ALT)) `(attribute ?OBJ ?PROPERTY)) (holdsDuring (EndFn (WhenFn ?ALT)) `(not (attribute ?OBJ ?PROPERTY)))) (and (holdsDuring (BeginFn (WhenFn ?ALT)) `(not (attribute ?OBJ ?PROPERTY))) (holdsDuring (EndFn (WhenFn ?ALT)) `(attribute ?OBJ ?PROPERTY)))))))))

(forall (?ALT ?OBJ) (=> (and (instance ?ALT Process) (instance ?OBJ Object)) (=> (and (instance ?ALT SurfaceChange) (patient ?ALT ?OBJ)) (exists (?PART ?PROPERTY) (and (instance ?PART Object) (instance ?PROPERTY Attribute) (superficialPart ?PART ?OBJ) (or (and (holdsDuring (BeginFn (WhenFn ?ALT)) `(attribute ?PART ?PROPERTY)) (holdsDuring (EndFn (WhenFn ?ALT)) `(not (attribute ?PART ?PROPERTY)))) (and (holdsDuring (BeginFn (WhenFn ?ALT)) `(not (attribute ?PART ?PROPERTY))) (holdsDuring (EndFn (WhenFn ?ALT)) `(attribute ?PART ?PROPERTY)))))))))

(forall (?AMBULATE ?AGENT) (=> (and (instance ?AMBULATE Process) (instance ?AGENT Agent)) (=> (and (instance ?AMBULATE Ambulating) (agent ?AMBULATE ?AGENT)) (attribute ?AGENT Standing))))

(forall (?ANAT) (=> (instance ?ANAT Object) (=> (instance ?ANAT AnatomicalStructure) (exists (?ORGANISM ?TIME) (and (instance ?ORGANISM Object) (instance ?TIME TimePosition) (instance ?ORGANISM Organism) (temporalPart ?TIME (WhenFn ?ORGANISM)) (holdsDuring ?TIME `(part ?ANAT ?ORGANISM)))))))

(forall (?ANGLE ?NUMBER) (=> (and (instance ?ANGLE Object) (instance ?NUMBER RealNumber)) (=> (measure ?ANGLE (MeasureFn ?NUMBER AngularDegree)) (and (greaterThanOrEqualTo ?NUMBER 0) (lessThanOrEqualTo ?NUMBER 360)))))

(forall (?ANIMAL) (=> (instance ?ANIMAL Agent) (=> (instance ?ANIMAL Animal) (or (exists (?MOTION) (and (instance ?MOTION Process) (instance ?MOTION BodyMotion) (agent ?MOTION ?ANIMAL))) (exists (?ATTR) (and (instance ?ATTR Attribute) (instance ?ATTR BodyPosition) (attribute ?ANIMAL ?ATTR)))))))

(forall (?ANIMAL) (=> (instance ?ANIMAL Object) (=> (instance ?ANIMAL Animal) (exists (?ATTR) (and (instance ?ATTR Attribute) (instance ?ATTR SexAttribute) (attribute ?ANIMAL ?ATTR))))))

(forall (?ANIMAL1 ?ANIMAL2) (=> (and (instance ?ANIMAL1 Organism) (instance ?ANIMAL2 Organism)) (<=> (sibling ?ANIMAL1 ?ANIMAL2) (and (not (equal ?ANIMAL1 ?ANIMAL2)) (exists (?FATHER ?MOTHER) (and (instance ?FATHER Organism) (instance ?MOTHER Organism) (father ?ANIMAL1 ?FATHER) (father ?ANIMAL2 ?FATHER) (mother ?ANIMAL1 ?MOTHER) (mother ?ANIMAL2 ?MOTHER)))))))

(forall (?ARC ?NODE) (=> (and (instance ?ARC GraphArc) (instance ?NODE GraphNode)) (=> (and (equal (InitialNodeFn ?ARC) ?NODE) (equal (TerminalNodeFn ?ARC) ?NODE)) (instance ?ARC GraphLoop))))

(forall (?ARC) (=> (instance ?ARC GraphArc) (exists (?NODE1 ?NODE2) (and (instance ?NODE1 GraphNode) (instance ?NODE2 GraphNode) (links ?NODE1 ?NODE2 ?ARC)))))

(forall (?AREA ?PERSON) (=> (instance ?PERSON Human) (=> (and (instance ?AREA GeopoliticalArea) (leader (GovernmentFn ?AREA) ?PERSON)) (leader ?AREA ?PERSON))))

(forall (?AREA ?PERSON) (=> (instance ?PERSON Human) (=> (and (instance ?AREA GeopoliticalArea) (leader ?AREA ?PERSON)) (leader (GovernmentFn ?AREA) ?PERSON))))

(forall (?AREA) (=> (instance ?AREA Object) (=> (instance ?AREA WaterArea) (exists (?BED ?HOLE ?WATER) (and (instance ?BED Object) (instance ?HOLE Hole) (instance ?WATER Object) (equal (HoleHostFn ?HOLE) ?BED) (instance ?WATER Water) (properlyFills ?WATER ?HOLE) (equal (MereologicalSumFn ?BED ?WATER) ?AREA))))))

(forall (?ARG1 ?ARG2 ?PROC) (=> (and (instance ?ARG1 Motion) (instance ?ARG2 Object) (instance ?PROC SetOrClass)) (=> (and (path ?ARG1 ?ARG2) (instance ?ARG1 ?PROC) (subclass ?PROC Process)) (capability ?PROC path ?ARG2))))

(forall (?ARG1 ?ARG2 ?PROC) (=> (and (instance ?ARG1 Process) (instance ?ARG2 Agent) (instance ?PROC SetOrClass)) (=> (and (agent ?ARG1 ?ARG2) (instance ?ARG1 ?PROC) (subclass ?PROC Process)) (capability ?PROC agent ?ARG2))))

(forall (?ARG1 ?ARG2 ?PROC) (=> (and (instance ?ARG1 Process) (instance ?ARG2 Agent) (instance ?PROC SetOrClass)) (=> (and (experiencer ?ARG1 ?ARG2) (instance ?ARG1 ?PROC) (subclass ?PROC Process)) (capability ?PROC experiencer ?ARG2))))

(forall (?ARG1 ?ARG2 ?PROC) (=> (and (instance ?ARG1 Process) (instance ?ARG2 DirectionalAttribute) (instance ?ARG2 Object) (instance ?PROC SetOrClass)) (=> (and (direction ?ARG1 ?ARG2) (instance ?ARG1 ?PROC) (subclass ?PROC Process)) (capability ?PROC direction ?ARG2))))

(forall (?ARG1 ?ARG2 ?PROC) (=> (and (instance ?ARG1 Process) (instance ?ARG2 Object) (instance ?PROC SetOrClass)) (=> (and (destination ?ARG1 ?ARG2) (instance ?ARG1 ?PROC) (subclass ?PROC Process)) (capability ?PROC destination ?ARG2))))

(forall (?ARG1 ?ARG2 ?PROC) (=> (and (instance ?ARG1 Process) (instance ?ARG2 Object) (instance ?PROC SetOrClass)) (=> (and (origin ?ARG1 ?ARG2) (instance ?ARG1 ?PROC) (subclass ?PROC Process)) (capability ?PROC origin ?ARG2))))

(forall (?ARG1 ?ARG2 ?PROC) (=> (and (instance ?ARG1 Process) (instance ?ARG2 Object) (instance ?PROC SetOrClass)) (=> (and (patient ?ARG1 ?ARG2) (instance ?ARG1 ?PROC) (subclass ?PROC Process)) (capability ?PROC patient ?ARG2))))

(forall (?ARGUMENT ?PREMISES ?CONCLUSION) (=> (and (instance ?ARGUMENT Argument) (instance ?PREMISES Proposition) (instance ?PREMISES Formula) (instance ?CONCLUSION Argument) (instance ?CONCLUSION Formula)) (=> (and (instance ?ARGUMENT ValidDeductiveArgument) (equal ?PREMISES (PremisesFn ?ARGUMENT)) (conclusion ?CONCLUSION ?ARGUMENT)) (exists (?FORMULA1 ?FORMULA2) (and (instance ?FORMULA1 ContentBearingPhysical) (instance ?FORMULA2 ContentBearingPhysical) (containsInformation ?FORMULA1 ?PREMISES) (containsInformation ?FORMULA2 ?CONCLUSION) (entails ?PREMISES ?CONCLUSION))))))

(forall (?ARGUMENT ?PREMISES ?PROPOSITION) (=> (and (instance ?PREMISES Proposition) (instance ?PROPOSITION Proposition)) (=> (and (instance ?ARGUMENT Argument) (equal ?PREMISES (PremisesFn ?ARGUMENT))) (<=> (subProposition ?PROPOSITION ?PREMISES) (premise ?ARGUMENT ?PROPOSITION)))))

(forall (?ARGUMENT) (=> (instance ?ARGUMENT Argument) (exists (?PREMISES ?CONCLUSION) (and (instance ?PREMISES Proposition) (instance ?CONCLUSION Argument) (equal (PremisesFn ?ARGUMENT) ?PREMISES) (conclusion ?CONCLUSION ?ARGUMENT)))))

(forall (?ARTICLE1 ?BOOK) (=> (and (instance ?ARTICLE1 ContentBearingObject) (instance ?BOOK ContentBearingObject)) (=> (and (instance ?ARTICLE1 Article) (instance ?BOOK Book) (subsumesContentInstance ?BOOK ?ARTICLE1)) (exists (?ARTICLE2) (and (instance ?ARTICLE2 ContentBearingObject) (instance ?ARTICLE2 Article) (not (equal ?ARTICLE2 ?ARTICLE1)) (subsumesContentInstance ?BOOK ?ARTICLE2))))))

(forall (?ARTIFACT) (<=> (exists (?BUILD) (and (instance ?BUILD Process) (instance ?BUILD Constructing) (result ?BUILD ?ARTIFACT))) (instance ?ARTIFACT StationaryArtifact)))

(forall (?ARTIFACT) (<=> (instance ?ARTIFACT Artifact) (exists (?MAKING) (and (instance ?MAKING Process) (instance ?MAKING Making) (result ?MAKING ?ARTIFACT)))))

(forall (?ARTIFACT) (=> (instance ?ARTIFACT Physical) (=> (instance ?ARTIFACT StationaryArtifact) (exists (?PLACE) (and (instance ?PLACE Object) (holdsDuring (WhenFn ?ARTIFACT) `(located ?ARTIFACT ?PLACE)))))))

(forall (?ARTIFACT1 ?ARTIFACT2) (=> (and (instance ?ARTIFACT1 SetOrClass) (subclass ?ARTIFACT1 Artifact) (instance ?ARTIFACT2 SetOrClass) (subclass ?ARTIFACT2 Artifact)) (=> (version ?ARTIFACT1 ?ARTIFACT2) (subclass ?ARTIFACT1 ?ARTIFACT2))))

(forall (?ATOM) (=> (instance ?ATOM CorpuscularObject) (=> (instance ?ATOM Atom) (exists (?PROTON ?ELECTRON) (and (instance ?PROTON CorpuscularObject) (instance ?ELECTRON CorpuscularObject) (component ?PROTON ?ATOM) (component ?ELECTRON ?ATOM) (instance ?PROTON Proton) (instance ?ELECTRON Electron))))))

(forall (?ATOM) (=> (instance ?ATOM CorpuscularObject) (=> (instance ?ATOM Atom) (forall (?NUCLEUS1 ?NUCLEUS2) (=> (and (instance ?NUCLEUS1 CorpuscularObject) (instance ?NUCLEUS2 CorpuscularObject)) (=> (and (component ?NUCLEUS1 ?ATOM) (component ?NUCLEUS2 ?ATOM) (instance ?NUCLEUS1 AtomicNucleus) (instance ?NUCLEUS2 AtomicNucleus)) (equal ?NUCLEUS1 ?NUCLEUS2)))))))

(forall (?ATTACH ?OBJ1 ?OBJ2) (=> (and (instance ?ATTACH Process) (instance ?OBJ1 Object) (instance ?OBJ2 Object)) (=> (and (instance ?ATTACH Attaching) (patient ?ATTACH ?OBJ1) (patient ?ATTACH ?OBJ2)) (and (holdsDuring (BeginFn (WhenFn ?ATTACH)) `(not (connected ?OBJ1 ?OBJ2))) (holdsDuring (EndFn (WhenFn ?ATTACH)) `(connected ?OBJ1 ?OBJ2))))))

(forall (?ATTACH) (=> (instance ?ATTACH Process) (=> (instance ?ATTACH Attaching) (exists (?OBJ) (and (instance ?OBJ CorpuscularObject) (patient ?ATTACH ?OBJ))))))

(forall (?ATTACK ?AGENT ?OBJ) (=> (and (instance ?ATTACK Process) (instance ?AGENT CognitiveAgent)) (=> (and (instance ?ATTACK Attack) (agent ?ATTACK ?AGENT) (patient ?ATTACK ?OBJ)) (hasPurposeForAgent ?ATTACK `(exists (?DAMAGE) (and (instance ?DAMAGE Process) (instance ?DAMAGE Damaging) (patient ?DAMAGE ?OBJ))) ?AGENT))))

(forall (?ATTACK) (=> (instance ?ATTACK Process) (=> (instance ?ATTACK Attack) (exists (?CONTEST) (and (instance ?CONTEST Process) (instance ?CONTEST ViolentContest) (subProcess ?ATTACK ?CONTEST))))))

(forall (?ATTR ?AGENT) (=> (and (instance ?ATTR Attribute) (instance ?AGENT Object)) (=> (and (instance ?ATTR PsychologicalAttribute) (attribute ?AGENT ?ATTR)) (instance ?AGENT SentientAgent))))

(forall (?ATTR ?TIME ?ORGANISM) (=> (and (instance ?ATTR Attribute) (instance ?TIME TimePosition) (instance ?ORGANISM Object)) (=> (instance ?ATTR PsychologicalAttribute) (=> (holdsDuring ?TIME `(attribute ?ORGANISM ?ATTR)) (holdsDuring ?TIME `(attribute ?ORGANISM Living))))))

(forall (?ATTR1 ?ATTR2 ?CLASS) (=> (and (instance ?ATTR1 Attribute) (instance ?ATTR2 Attribute) (instance ?CLASS SetOrClass)) (=> (and (subAttribute ?ATTR1 ?ATTR2) (instance ?ATTR2 ?CLASS)) (instance ?ATTR1 ?CLASS))))

(forall (?ATTR1 ?ATTR2 ?TIME1 ?ENTITY) (=> (and (instance ?ATTR1 Attribute) (instance ?ATTR2 Attribute) (instance ?TIME1 TimePosition)) (=> (and (successorAttribute ?ATTR1 ?ATTR2) (holdsDuring ?TIME1 `(property ?ENTITY ?ATTR2))) (exists (?TIME2) (and (instance ?TIME2 TimePosition) (temporalPart ?TIME2 (PastFn ?TIME1)) (holdsDuring ?TIME2 `(property ?ENTITY ?ATTR1)))))))

(forall (?ATTR1 ?ATTR2) (=> (and (instance ?ATTR1 Attribute) (instance ?ATTR2 Attribute)) (=> (equal ?ATTR1 ?ATTR2) (forall (?THING) (<=> (property ?THING ?ATTR1) (property ?THING ?ATTR2))))))

(forall (?ATTR1 ?ATTR2) (=> (and (instance ?ATTR1 Attribute) (instance ?ATTR2 Attribute)) (=> (subAttribute ?ATTR1 ?ATTR2) (forall (?OBJ) (=> (property ?OBJ ?ATTR1) (property ?OBJ ?ATTR2))))))

(forall (?ATTR1 ?ATTR2) (=> (and (instance ?ATTR1 Attribute) (instance ?ATTR2 Attribute)) (=> (successorAttribute ?ATTR1 ?ATTR2) (successorAttributeClosure ?ATTR1 ?ATTR2))))

(forall (?ATTRIBUTE ?CLASS) (=> (and (instance ?ATTRIBUTE Attribute) (instance ?CLASS Class)) (<=> (equal (ExtensionFn ?ATTRIBUTE) ?CLASS) (equal (AbstractionFn ?CLASS) ?ATTRIBUTE))))

(forall (?ATTRIBUTE ?OBJ ?SURFACE) (=> (and (instance ?ATTRIBUTE Attribute) (instance ?OBJ SelfConnectedObject) (instance ?SURFACE SelfConnectedObject)) (=> (and (instance ?ATTRIBUTE ShapeAttribute) (attribute ?OBJ ?ATTRIBUTE) (surface ?SURFACE ?OBJ)) (attribute ?SURFACE ?ATTRIBUTE))))

(forall (?ATTRIBUTE ?OBJ ?SURFACE) (=> (and (instance ?ATTRIBUTE Attribute) (instance ?OBJ SelfConnectedObject) (instance ?SURFACE SelfConnectedObject)) (=> (and (instance ?ATTRIBUTE TextureAttribute) (attribute ?OBJ ?ATTRIBUTE) (surface ?SURFACE ?OBJ)) (attribute ?SURFACE ?ATTRIBUTE))))

(forall (?BACTERIUM ?OBJ) (=> (and (instance ?BACTERIUM Organism) (instance ?OBJ Object)) (=> (and (instance ?BACTERIUM Bacterium) (inhabits ?BACTERIUM ?OBJ)) (instance ?OBJ Organism))))

(forall (?BACTERIUM) (=> (instance ?BACTERIUM CorpuscularObject) (=> (instance ?BACTERIUM Bacterium) (exists (?CELL1) (and (instance ?CELL1 CorpuscularObject) (component ?CELL1 ?BACTERIUM) (instance ?CELL1 Cell) (forall (?CELL2) (=> (instance ?CELL2 CorpuscularObject) (=> (and (component ?CELL2 ?BACTERIUM) (instance ?CELL2 Cell)) (equal ?CELL1 ?CELL2)))))))))

(forall (?BANK) (=> (instance ?BANK Object) (=> (instance ?BANK ShoreArea) (exists (?WATER) (and (instance ?WATER Object) (instance ?WATER WaterArea) (meetsSpatially ?BANK ?WATER))))))

(forall (?BATTLE) (=> (instance ?BATTLE Process) (=> (instance ?BATTLE Battle) (exists (?ATTACK) (and (instance ?ATTACK Process) (instance ?ATTACK ViolentContest) (subProcess ?ATTACK ?BATTLE))))))

(forall (?BATTLE) (=> (instance ?BATTLE Process) (=> (instance ?BATTLE Battle) (exists (?WAR) (and (instance ?WAR Process) (instance ?WAR War) (subProcess ?BATTLE ?WAR))))))

(forall (?BEV) (=> (instance ?BEV Object) (=> (instance ?BEV Beverage) (attribute ?BEV Liquid))))

(forall (?BILL) (=> (instance ?BILL Object) (=> (instance ?BILL CurrencyBill) (exists (?PAPER) (and (instance ?PAPER Object) (instance ?PAPER Paper) (part ?PAPER ?BILL))))))

(forall (?BIRTH ?AGENT) (=> (and (instance ?BIRTH Process) (instance ?AGENT Agent)) (=> (and (instance ?BIRTH Birth) (experiencer ?BIRTH ?AGENT)) (exists (?DEATH) (and (instance ?DEATH Process) (instance ?DEATH Death) (experiencer ?DEATH ?AGENT))))))

(forall (?BODY ?ORG) (=> (and (instance ?BODY Object) (instance ?ORG Object)) (=> (and (instance ?BODY ReproductiveBody) (part ?BODY ?ORG) (instance ?ORG Organism)) (attribute ?ORG Female))))

(forall (?BOIL ?OBJ) (=> (and (instance ?BOIL Process) (instance ?OBJ Object)) (=> (and (instance ?BOIL Boiling) (patient ?BOIL ?OBJ)) (exists (?PART) (and (instance ?PART Object) (part ?PART ?OBJ) (holdsDuring (BeginFn (WhenFn ?BOIL)) `(attribute ?PART Liquid)) (holdsDuring (EndFn (WhenFn ?BOIL)) `(attribute ?PART Gas)))))))

(forall (?BOIL) (=> (instance ?BOIL Process) (=> (instance ?BOIL Boiling) (exists (?HEAT) (and (instance ?HEAT Process) (instance ?HEAT Heating) (subProcess ?HEAT ?BOIL))))))

(forall (?BONE) (=> (instance ?BONE Object) (=> (instance ?BONE Bone) (exists (?VERT) (and (instance ?VERT Object) (instance ?VERT Vertebrate) (part ?BONE ?VERT))))))

(forall (?BOTTOM ?OBJECT ?PART) (=> (and (instance ?BOTTOM SelfConnectedObject) (instance ?OBJECT SelfConnectedObject) (instance ?PART Object)) (=> (and (bottom ?BOTTOM ?OBJECT) (part ?PART ?OBJECT) (not (connected ?PART ?BOTTOM))) (orientation ?PART ?BOTTOM Above))))

(forall (?BUILDING) (=> (instance ?BUILDING Object) (=> (instance ?BUILDING Building) (exists (?HUMAN) (and (instance ?HUMAN Organism) (instance ?HUMAN Human) (or (inhabits ?HUMAN ?BUILDING) (exists (?ACT) (and (instance ?ACT Process) (agent ?ACT ?HUMAN) (located ?ACT ?BUILDING)))))))))

(forall (?BUSINESS) (=> (instance ?BUSINESS Process) (=> (instance ?BUSINESS CommercialService) (exists (?AGENT) (and (instance ?AGENT Agent) (instance ?AGENT CommercialAgent) (agent ?BUSINESS ?AGENT))))))

(forall (?BUY ?AGENT) (=> (and (instance ?BUY Process) (instance ?AGENT Agent)) (=> (and (instance ?BUY Buying) (agent ?BUY ?AGENT)) (destination ?BUY ?AGENT))))

(forall (?CARNIVORE ?EAT ?PREY) (=> (and (instance ?CARNIVORE Agent) (instance ?EAT Process)) (=> (and (instance ?CARNIVORE Carnivore) (instance ?EAT Eating) (agent ?EAT ?CARNIVORE) (patient ?EAT ?PREY)) (instance ?PREY Animal))))

(forall (?CARRY) (=> (instance ?CARRY Process) (=> (instance ?CARRY Carrying) (exists (?ANIMAL) (and (instance ?ANIMAL Object) (instance ?ANIMAL Animal) (instrument ?CARRY ?ANIMAL))))))

(forall (?CHANGE ?AGENT1 ?AGENT2 ?OBJ) (=> (and (instance ?CHANGE Process) (instance ?OBJ Object)) (=> (and (instance ?CHANGE ChangeOfPossession) (origin ?CHANGE ?AGENT1) (destination ?CHANGE ?AGENT2) (instance ?AGENT1 Agent) (instance ?AGENT2 Agent) (patient ?CHANGE ?OBJ)) (and (holdsDuring (BeginFn (WhenFn ?CHANGE)) `(possesses ?AGENT1 ?OBJ)) (holdsDuring (EndFn (WhenFn ?CHANGE)) `(possesses ?AGENT2 ?OBJ))))))

(forall (?CHANGE ?OBJ ?AGENT1 ?AGENT2) (=> (and (instance ?CHANGE Process) (instance ?OBJ Object) (instance ?AGENT1 Agent) (instance ?AGENT2 Agent)) (=> (and (instance ?CHANGE ChangeOfPossession) (patient ?CHANGE ?OBJ) (holdsDuring (BeginFn (WhenFn ?CHANGE)) `(possesses ?AGENT1 ?OBJ)) (holdsDuring (EndFn (WhenFn ?CHANGE)) `(possesses ?AGENT2 ?OBJ))) (not (equal ?AGENT1 ?AGENT2)))))

(forall (?CHANGE ?OBJ) (=> (and (instance ?CHANGE Process) (instance ?OBJ Object)) (=> (and (instance ?CHANGE InternalChange) (patient ?CHANGE ?OBJ)) (exists (?PROPERTY) (and (instance ?PROPERTY Attribute) (or (and (holdsDuring (BeginFn (WhenFn ?CHANGE)) `(attribute ?OBJ ?PROPERTY)) (holdsDuring (EndFn (WhenFn ?CHANGE)) `(not (attribute ?OBJ ?PROPERTY)))) (and (holdsDuring (BeginFn (WhenFn ?CHANGE)) `(not (attribute ?OBJ ?PROPERTY))) (holdsDuring (EndFn (WhenFn ?CHANGE)) `(attribute ?OBJ ?PROPERTY)))))))))

(forall (?CHILD ?FATHER) (=> (and (instance ?CHILD Organism) (instance ?FATHER Organism)) (=> (father ?CHILD ?FATHER) (attribute ?FATHER Male))))

(forall (?CHILD ?MOTHER) (=> (and (instance ?CHILD Organism) (instance ?MOTHER Organism)) (=> (mother ?CHILD ?MOTHER) (attribute ?MOTHER Female))))

(forall (?CHILD ?PARENT ?CLASS) (=> (and (instance ?CHILD Organism) (instance ?PARENT Organism) (instance ?CLASS SetOrClass)) (=> (and (parent ?CHILD ?PARENT) (subclass ?CLASS Organism) (instance ?PARENT ?CLASS)) (instance ?CHILD ?CLASS))))

(forall (?CHILD ?PARENT) (=> (and (instance ?CHILD Organism) (instance ?PARENT Organism)) (=> (parent ?CHILD ?PARENT) (before (BeginFn (WhenFn ?PARENT)) (BeginFn (WhenFn ?CHILD))))))

(forall (?CHILD ?PARENT) (=> (and (instance ?CHILD Organism) (instance ?PARENT Organism)) (=> (parent ?CHILD ?PARENT) (or (mother ?CHILD ?PARENT) (father ?CHILD ?PARENT)))))

(forall (?CLASS ?ATTR) (=> (and (instance ?CLASS Class) (instance ?ATTR Attribute)) (<=> (equal (AbstractionFn ?CLASS) ?ATTR) (forall (?INST) (<=> (instance ?INST ?CLASS) (property ?INST ?ATTR))))))

(forall (?CLASS ?ROW1 ?ATTR) (=> (and (subclass ?CLASS Attribute) (subclass ?ROW1 Attribute)) (=> (exhaustiveAttribute ?CLASS ?ROW1) (=> (inList ?ATTR (ListFn ?ROW1)) (instance ?ATTR Attribute)))))

(forall (?CLASS ?ROW1 ?ROW2 ?ATTR) (=> (and (subclass ?CLASS Attribute) (subclass ?ROW1 Attribute) (subclass ?ROW2 Attribute)) (=> (exhaustiveAttribute ?CLASS ?ROW1 ?ROW2) (=> (inList ?ATTR (ListFn ?ROW1 ?ROW2)) (instance ?ATTR Attribute)))))

(forall (?CLASS ?ROW1 ?ROW2 ?ROW3 ?ATTR) (=> (and (subclass ?CLASS Attribute) (subclass ?ROW1 Attribute) (subclass ?ROW2 Attribute) (subclass ?ROW3 Attribute)) (=> (exhaustiveAttribute ?CLASS ?ROW1 ?ROW2 ?ROW3) (=> (inList ?ATTR (ListFn ?ROW1 ?ROW2 ?ROW3)) (instance ?ATTR Attribute)))))

(forall (?CLASS ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ATTR) (=> (and (subclass ?CLASS Attribute) (subclass ?ROW1 Attribute) (subclass ?ROW2 Attribute) (subclass ?ROW3 Attribute) (subclass ?ROW4 Attribute)) (=> (exhaustiveAttribute ?CLASS ?ROW1 ?ROW2 ?ROW3 ?ROW4) (=> (inList ?ATTR (ListFn ?ROW1 ?ROW2 ?ROW3 ?ROW4)) (instance ?ATTR Attribute)))))

(forall (?CLASS ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5 ?ATTR) (=> (and (subclass ?CLASS Attribute) (subclass ?ROW1 Attribute) (subclass ?ROW2 Attribute) (subclass ?ROW3 Attribute) (subclass ?ROW4 Attribute) (subclass ?ROW5 Attribute)) (=> (exhaustiveAttribute ?CLASS ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5) (=> (inList ?ATTR (ListFn ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5)) (instance ?ATTR Attribute)))))

(forall (?CLASS ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5 ?ROW6 ?ATTR) (=> (and (subclass ?CLASS Attribute) (subclass ?ROW1 Attribute) (subclass ?ROW2 Attribute) (subclass ?ROW3 Attribute) (subclass ?ROW4 Attribute) (subclass ?ROW5 Attribute) (subclass ?ROW6 Attribute)) (=> (exhaustiveAttribute ?CLASS ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5 ?ROW6) (=> (inList ?ATTR (ListFn ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5 ?ROW6)) (instance ?ATTR Attribute)))))

(forall (?CLASS ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5 ?ROW6 ?ROW7 ?ATTR) (=> (and (subclass ?CLASS Attribute) (subclass ?ROW1 Attribute) (subclass ?ROW2 Attribute) (subclass ?ROW3 Attribute) (subclass ?ROW4 Attribute) (subclass ?ROW5 Attribute) (subclass ?ROW6 Attribute) (subclass ?ROW7 Attribute)) (=> (exhaustiveAttribute ?CLASS ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5 ?ROW6 ?ROW7) (=> (inList ?ATTR (ListFn ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5 ?ROW6 ?ROW7)) (instance ?ATTR Attribute)))))

(forall (?CLASS ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5 ?ROW6 ?ROW7) (=> (and (instance ?CLASS Class) (instance ?ROW1 Class) (instance ?ROW2 Class) (instance ?ROW3 Class) (instance ?ROW4 Class) (instance ?ROW5 Class) (instance ?ROW6 Class) (instance ?ROW7 Class)) (=> (disjointDecomposition ?CLASS ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5 ?ROW6 ?ROW7) (forall (?ITEM) (=> (instance ?ITEM SetOrClass) (=> (inList ?ITEM (ListFn ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5 ?ROW6 ?ROW7)) (subclass ?ITEM ?CLASS)))))))

(forall (?CLASS ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5 ?ROW6 ?ROW7) (=> (and (instance ?CLASS Class) (instance ?ROW1 Class) (instance ?ROW2 Class) (instance ?ROW3 Class) (instance ?ROW4 Class) (instance ?ROW5 Class) (instance ?ROW6 Class) (instance ?ROW7 Class)) (=> (disjointDecomposition ?CLASS ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5 ?ROW6 ?ROW7) (forall (?ITEM1 ?ITEM2) (=> (and (instance ?ITEM1 SetOrClass) (instance ?ITEM2 SetOrClass)) (=> (and (inList ?ITEM1 (ListFn ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5 ?ROW6 ?ROW7)) (inList ?ITEM2 (ListFn ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5 ?ROW6 ?ROW7)) (not (equal ?ITEM1 ?ITEM2))) (disjoint ?ITEM1 ?ITEM2)))))))

(forall (?CLASS ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5 ?ROW6 ?ROW7) (=> (and (instance ?CLASS Class) (instance ?ROW1 Class) (instance ?ROW2 Class) (instance ?ROW3 Class) (instance ?ROW4 Class) (instance ?ROW5 Class) (instance ?ROW6 Class) (instance ?ROW7 Class)) (=> (exhaustiveDecomposition ?CLASS ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5 ?ROW6 ?ROW7) (forall (?OBJ) (=> (instance ?OBJ ?CLASS) (exists (?ITEM) (and (instance ?ITEM SetOrClass) (inList ?ITEM (ListFn ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5 ?ROW6 ?ROW7)) (instance ?OBJ ?ITEM))))))))

(forall (?CLASS ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5 ?ROW6 ?ROW7) (=> (and (instance ?CLASS SetOrClass) (subclass ?CLASS Attribute) (subclass ?ROW1 Attribute) (subclass ?ROW2 Attribute) (subclass ?ROW3 Attribute) (subclass ?ROW4 Attribute) (subclass ?ROW5 Attribute) (subclass ?ROW6 Attribute) (subclass ?ROW7 Attribute)) (=> (exhaustiveAttribute ?CLASS ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5 ?ROW6 ?ROW7) (forall (?ATTR1) (=> (instance ?ATTR1 ?CLASS) (exists (?ATTR2) (and (inList ?ATTR2 (ListFn ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5 ?ROW6 ?ROW7)) (equal ?ATTR1 ?ATTR2))))))))

(forall (?CLASS ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5 ?ROW6) (=> (and (instance ?CLASS Class) (instance ?ROW1 Class) (instance ?ROW2 Class) (instance ?ROW3 Class) (instance ?ROW4 Class) (instance ?ROW5 Class) (instance ?ROW6 Class)) (=> (disjointDecomposition ?CLASS ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5 ?ROW6) (forall (?ITEM) (=> (instance ?ITEM SetOrClass) (=> (inList ?ITEM (ListFn ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5 ?ROW6)) (subclass ?ITEM ?CLASS)))))))

(forall (?CLASS ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5 ?ROW6) (=> (and (instance ?CLASS Class) (instance ?ROW1 Class) (instance ?ROW2 Class) (instance ?ROW3 Class) (instance ?ROW4 Class) (instance ?ROW5 Class) (instance ?ROW6 Class)) (=> (disjointDecomposition ?CLASS ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5 ?ROW6) (forall (?ITEM1 ?ITEM2) (=> (and (instance ?ITEM1 SetOrClass) (instance ?ITEM2 SetOrClass)) (=> (and (inList ?ITEM1 (ListFn ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5 ?ROW6)) (inList ?ITEM2 (ListFn ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5 ?ROW6)) (not (equal ?ITEM1 ?ITEM2))) (disjoint ?ITEM1 ?ITEM2)))))))

(forall (?CLASS ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5 ?ROW6) (=> (and (instance ?CLASS Class) (instance ?ROW1 Class) (instance ?ROW2 Class) (instance ?ROW3 Class) (instance ?ROW4 Class) (instance ?ROW5 Class) (instance ?ROW6 Class)) (=> (exhaustiveDecomposition ?CLASS ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5 ?ROW6) (forall (?OBJ) (=> (instance ?OBJ ?CLASS) (exists (?ITEM) (and (instance ?ITEM SetOrClass) (inList ?ITEM (ListFn ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5 ?ROW6)) (instance ?OBJ ?ITEM))))))))

(forall (?CLASS ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5 ?ROW6) (=> (and (instance ?CLASS SetOrClass) (subclass ?CLASS Attribute) (subclass ?ROW1 Attribute) (subclass ?ROW2 Attribute) (subclass ?ROW3 Attribute) (subclass ?ROW4 Attribute) (subclass ?ROW5 Attribute) (subclass ?ROW6 Attribute)) (=> (exhaustiveAttribute ?CLASS ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5 ?ROW6) (forall (?ATTR1) (=> (instance ?ATTR1 ?CLASS) (exists (?ATTR2) (and (inList ?ATTR2 (ListFn ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5 ?ROW6)) (equal ?ATTR1 ?ATTR2))))))))

(forall (?CLASS ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5) (=> (and (instance ?CLASS Class) (instance ?ROW1 Class) (instance ?ROW2 Class) (instance ?ROW3 Class) (instance ?ROW4 Class) (instance ?ROW5 Class)) (=> (disjointDecomposition ?CLASS ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5) (forall (?ITEM) (=> (instance ?ITEM SetOrClass) (=> (inList ?ITEM (ListFn ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5)) (subclass ?ITEM ?CLASS)))))))

(forall (?CLASS ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5) (=> (and (instance ?CLASS Class) (instance ?ROW1 Class) (instance ?ROW2 Class) (instance ?ROW3 Class) (instance ?ROW4 Class) (instance ?ROW5 Class)) (=> (disjointDecomposition ?CLASS ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5) (forall (?ITEM1 ?ITEM2) (=> (and (instance ?ITEM1 SetOrClass) (instance ?ITEM2 SetOrClass)) (=> (and (inList ?ITEM1 (ListFn ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5)) (inList ?ITEM2 (ListFn ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5)) (not (equal ?ITEM1 ?ITEM2))) (disjoint ?ITEM1 ?ITEM2)))))))

(forall (?CLASS ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5) (=> (and (instance ?CLASS Class) (instance ?ROW1 Class) (instance ?ROW2 Class) (instance ?ROW3 Class) (instance ?ROW4 Class) (instance ?ROW5 Class)) (=> (exhaustiveDecomposition ?CLASS ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5) (forall (?OBJ) (=> (instance ?OBJ ?CLASS) (exists (?ITEM) (and (instance ?ITEM SetOrClass) (inList ?ITEM (ListFn ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5)) (instance ?OBJ ?ITEM))))))))

(forall (?CLASS ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5) (=> (and (instance ?CLASS SetOrClass) (subclass ?CLASS Attribute) (subclass ?ROW1 Attribute) (subclass ?ROW2 Attribute) (subclass ?ROW3 Attribute) (subclass ?ROW4 Attribute) (subclass ?ROW5 Attribute)) (=> (exhaustiveAttribute ?CLASS ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5) (forall (?ATTR1) (=> (instance ?ATTR1 ?CLASS) (exists (?ATTR2) (and (inList ?ATTR2 (ListFn ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5)) (equal ?ATTR1 ?ATTR2))))))))

(forall (?CLASS ?ROW1 ?ROW2 ?ROW3 ?ROW4) (=> (and (instance ?CLASS Class) (instance ?ROW1 Class) (instance ?ROW2 Class) (instance ?ROW3 Class) (instance ?ROW4 Class)) (=> (disjointDecomposition ?CLASS ?ROW1 ?ROW2 ?ROW3 ?ROW4) (forall (?ITEM) (=> (instance ?ITEM SetOrClass) (=> (inList ?ITEM (ListFn ?ROW1 ?ROW2 ?ROW3 ?ROW4)) (subclass ?ITEM ?CLASS)))))))

(forall (?CLASS ?ROW1 ?ROW2 ?ROW3 ?ROW4) (=> (and (instance ?CLASS Class) (instance ?ROW1 Class) (instance ?ROW2 Class) (instance ?ROW3 Class) (instance ?ROW4 Class)) (=> (disjointDecomposition ?CLASS ?ROW1 ?ROW2 ?ROW3 ?ROW4) (forall (?ITEM1 ?ITEM2) (=> (and (instance ?ITEM1 SetOrClass) (instance ?ITEM2 SetOrClass)) (=> (and (inList ?ITEM1 (ListFn ?ROW1 ?ROW2 ?ROW3 ?ROW4)) (inList ?ITEM2 (ListFn ?ROW1 ?ROW2 ?ROW3 ?ROW4)) (not (equal ?ITEM1 ?ITEM2))) (disjoint ?ITEM1 ?ITEM2)))))))

(forall (?CLASS ?ROW1 ?ROW2 ?ROW3 ?ROW4) (=> (and (instance ?CLASS Class) (instance ?ROW1 Class) (instance ?ROW2 Class) (instance ?ROW3 Class) (instance ?ROW4 Class)) (=> (exhaustiveDecomposition ?CLASS ?ROW1 ?ROW2 ?ROW3 ?ROW4) (forall (?OBJ) (=> (instance ?OBJ ?CLASS) (exists (?ITEM) (and (instance ?ITEM SetOrClass) (inList ?ITEM (ListFn ?ROW1 ?ROW2 ?ROW3 ?ROW4)) (instance ?OBJ ?ITEM))))))))

(forall (?CLASS ?ROW1 ?ROW2 ?ROW3 ?ROW4) (=> (and (instance ?CLASS SetOrClass) (subclass ?CLASS Attribute) (subclass ?ROW1 Attribute) (subclass ?ROW2 Attribute) (subclass ?ROW3 Attribute) (subclass ?ROW4 Attribute)) (=> (exhaustiveAttribute ?CLASS ?ROW1 ?ROW2 ?ROW3 ?ROW4) (forall (?ATTR1) (=> (instance ?ATTR1 ?CLASS) (exists (?ATTR2) (and (inList ?ATTR2 (ListFn ?ROW1 ?ROW2 ?ROW3 ?ROW4)) (equal ?ATTR1 ?ATTR2))))))))

(forall (?CLASS ?ROW1 ?ROW2 ?ROW3) (=> (and (instance ?CLASS Class) (instance ?ROW1 Class) (instance ?ROW2 Class) (instance ?ROW3 Class)) (=> (disjointDecomposition ?CLASS ?ROW1 ?ROW2 ?ROW3) (forall (?ITEM) (=> (instance ?ITEM SetOrClass) (=> (inList ?ITEM (ListFn ?ROW1 ?ROW2 ?ROW3)) (subclass ?ITEM ?CLASS)))))))

(forall (?CLASS ?ROW1 ?ROW2 ?ROW3) (=> (and (instance ?CLASS Class) (instance ?ROW1 Class) (instance ?ROW2 Class) (instance ?ROW3 Class)) (=> (disjointDecomposition ?CLASS ?ROW1 ?ROW2 ?ROW3) (forall (?ITEM1 ?ITEM2) (=> (and (instance ?ITEM1 SetOrClass) (instance ?ITEM2 SetOrClass)) (=> (and (inList ?ITEM1 (ListFn ?ROW1 ?ROW2 ?ROW3)) (inList ?ITEM2 (ListFn ?ROW1 ?ROW2 ?ROW3)) (not (equal ?ITEM1 ?ITEM2))) (disjoint ?ITEM1 ?ITEM2)))))))

(forall (?CLASS ?ROW1 ?ROW2 ?ROW3) (=> (and (instance ?CLASS Class) (instance ?ROW1 Class) (instance ?ROW2 Class) (instance ?ROW3 Class)) (=> (exhaustiveDecomposition ?CLASS ?ROW1 ?ROW2 ?ROW3) (forall (?OBJ) (=> (instance ?OBJ ?CLASS) (exists (?ITEM) (and (instance ?ITEM SetOrClass) (inList ?ITEM (ListFn ?ROW1 ?ROW2 ?ROW3)) (instance ?OBJ ?ITEM))))))))

(forall (?CLASS ?ROW1 ?ROW2 ?ROW3) (=> (and (instance ?CLASS SetOrClass) (subclass ?CLASS Attribute) (subclass ?ROW1 Attribute) (subclass ?ROW2 Attribute) (subclass ?ROW3 Attribute)) (=> (exhaustiveAttribute ?CLASS ?ROW1 ?ROW2 ?ROW3) (forall (?ATTR1) (=> (instance ?ATTR1 ?CLASS) (exists (?ATTR2) (and (inList ?ATTR2 (ListFn ?ROW1 ?ROW2 ?ROW3)) (equal ?ATTR1 ?ATTR2))))))))

(forall (?CLASS ?ROW1 ?ROW2) (=> (and (instance ?CLASS Class) (instance ?ROW1 Class) (instance ?ROW2 Class)) (=> (disjointDecomposition ?CLASS ?ROW1 ?ROW2) (forall (?ITEM) (=> (instance ?ITEM SetOrClass) (=> (inList ?ITEM (ListFn ?ROW1 ?ROW2)) (subclass ?ITEM ?CLASS)))))))

(forall (?CLASS ?ROW1 ?ROW2) (=> (and (instance ?CLASS Class) (instance ?ROW1 Class) (instance ?ROW2 Class)) (=> (disjointDecomposition ?CLASS ?ROW1 ?ROW2) (forall (?ITEM1 ?ITEM2) (=> (and (instance ?ITEM1 SetOrClass) (instance ?ITEM2 SetOrClass)) (=> (and (inList ?ITEM1 (ListFn ?ROW1 ?ROW2)) (inList ?ITEM2 (ListFn ?ROW1 ?ROW2)) (not (equal ?ITEM1 ?ITEM2))) (disjoint ?ITEM1 ?ITEM2)))))))

(forall (?CLASS ?ROW1 ?ROW2) (=> (and (instance ?CLASS Class) (instance ?ROW1 Class) (instance ?ROW2 Class)) (=> (exhaustiveDecomposition ?CLASS ?ROW1 ?ROW2) (forall (?OBJ) (=> (instance ?OBJ ?CLASS) (exists (?ITEM) (and (instance ?ITEM SetOrClass) (inList ?ITEM (ListFn ?ROW1 ?ROW2)) (instance ?OBJ ?ITEM))))))))

(forall (?CLASS ?ROW1 ?ROW2) (=> (and (instance ?CLASS SetOrClass) (subclass ?CLASS Attribute) (subclass ?ROW1 Attribute) (subclass ?ROW2 Attribute)) (=> (exhaustiveAttribute ?CLASS ?ROW1 ?ROW2) (forall (?ATTR1) (=> (instance ?ATTR1 ?CLASS) (exists (?ATTR2) (and (inList ?ATTR2 (ListFn ?ROW1 ?ROW2)) (equal ?ATTR1 ?ATTR2))))))))

(forall (?CLASS ?ROW1) (=> (and (instance ?CLASS Class) (instance ?ROW1 Class)) (=> (disjointDecomposition ?CLASS ?ROW1) (forall (?ITEM) (=> (instance ?ITEM SetOrClass) (=> (inList ?ITEM (ListFn ?ROW1)) (subclass ?ITEM ?CLASS)))))))

(forall (?CLASS ?ROW1) (=> (and (instance ?CLASS Class) (instance ?ROW1 Class)) (=> (disjointDecomposition ?CLASS ?ROW1) (forall (?ITEM1 ?ITEM2) (=> (and (instance ?ITEM1 SetOrClass) (instance ?ITEM2 SetOrClass)) (=> (and (inList ?ITEM1 (ListFn ?ROW1)) (inList ?ITEM2 (ListFn ?ROW1)) (not (equal ?ITEM1 ?ITEM2))) (disjoint ?ITEM1 ?ITEM2)))))))

(forall (?CLASS ?ROW1) (=> (and (instance ?CLASS Class) (instance ?ROW1 Class)) (=> (exhaustiveDecomposition ?CLASS ?ROW1) (forall (?OBJ) (=> (instance ?OBJ ?CLASS) (exists (?ITEM) (and (instance ?ITEM SetOrClass) (inList ?ITEM (ListFn ?ROW1)) (instance ?OBJ ?ITEM))))))))

(forall (?CLASS ?ROW1) (=> (and (instance ?CLASS SetOrClass) (subclass ?CLASS Attribute) (subclass ?ROW1 Attribute)) (=> (exhaustiveAttribute ?CLASS ?ROW1) (forall (?ATTR1) (=> (instance ?ATTR1 ?CLASS) (exists (?ATTR2) (and (inList ?ATTR2 (ListFn ?ROW1)) (equal ?ATTR1 ?ATTR2))))))))

(forall (?CLASS) (=> (instance ?CLASS SetOrClass) (<=> (instance ?CLASS Class) (subclass ?CLASS Entity))))

(forall (?CLASS) (=> (instance ?CLASS SetOrClass) (=> (instance ?CLASS MutuallyDisjointClass) (forall (?INST1 ?INST2) (=> (instance ?INST1 SetOrClass) (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?INST1)) (exists (?INST3) (and (instance ?INST3 SetOrClass) (instance ?INST3 ?CLASS) (not (instance ?INST2 ?INST3))))))))))

(forall (?CLASS1 ?CLASS2) (=> (and (instance ?CLASS1 SetOrClass) (instance ?CLASS2 SetOrClass)) (=> (disjoint ?CLASS1 ?CLASS2) (not (exists (?INST) (and (instance ?INST ?CLASS1) (instance ?INST ?CLASS2)))))))

(forall (?CLASS1 ?CLASS2) (=> (and (instance ?CLASS1 SetOrClass) (instance ?CLASS2 SetOrClass)) (=> (equal ?CLASS1 ?CLASS2) (forall (?THING) (<=> (instance ?THING ?CLASS1) (instance ?THING ?CLASS2))))))

(forall (?CLASS1 ?CLASS2) (=> (and (instance ?CLASS1 SetOrClass) (instance ?CLASS2 SetOrClass)) (=> (immediateSubclass ?CLASS1 ?CLASS2) (not (exists (?CLASS3) (and (instance ?CLASS3 SetOrClass) (subclass ?CLASS3 ?CLASS2) (subclass ?CLASS1 ?CLASS3) (not (equal ?CLASS2 ?CLASS3)) (not (equal ?CLASS1 ?CLASS3))))))))

(forall (?CLASS1 ?CLASS2) (=> (and (instance ?CLASS1 SetOrClass) (subclass ?CLASS1 ContentBearingObject) (instance ?CLASS2 SetOrClass) (subclass ?CLASS2 ContentBearingObject)) (=> (subsumesContentClass ?CLASS1 ?CLASS2) (forall (?OBJ2 ?INFO) (=> (and (instance ?OBJ2 ContentBearingPhysical) (instance ?INFO Proposition)) (=> (and (instance ?OBJ2 ?CLASS2) (containsInformation ?OBJ2 ?INFO)) (exists (?OBJ1) (and (instance ?OBJ1 ContentBearingPhysical) (instance ?OBJ1 ?CLASS1) (containsInformation ?OBJ1 ?INFO)))))))))

(forall (?CLASS1 ?CLASS2) (=> (and (subclass ?CLASS1 ContentBearingObject) (subclass ?CLASS2 ContentBearingObject)) (<=> (and (subsumesContentClass ?CLASS1 ?CLASS2) (subsumesContentClass ?CLASS2 ?CLASS1)) (equivalentContentClass ?CLASS1 ?CLASS2))))

(forall (?CLOTHING) (=> (instance ?CLOTHING Object) (=> (instance ?CLOTHING Clothing) (exists (?FABRIC) (and (instance ?FABRIC Object) (instance ?FABRIC Fabric) (part ?FABRIC ?CLOTHING))))))

(forall (?CLOUD ?MEASURE1 ?MEASURE2) (=> (and (instance ?CLOUD Object) (instance ?MEASURE1 PhysicalQuantity) (instance ?MEASURE2 PhysicalQuantity)) (=> (instance ?CLOUD WaterCloud) (forall (?PART) (=> (instance ?PART Object) (=> (and (part ?PART ?CLOUD) (not (instance ?PART Water))) (exists (?WATER) (and (instance ?WATER Object) (instance ?WATER Water) (part ?WATER ?CLOUD) (measure ?WATER ?MEASURE1) (measure ?PART ?MEASURE2) (greaterThan ?MEASURE1 ?MEASURE2)))))))))

(forall (?CLOUD) (=> (instance ?CLOUD Object) (=> (instance ?CLOUD Cloud) (capability Seeing patient ?CLOUD))))

(forall (?CLOUD) (=> (instance ?CLOUD Object) (=> (instance ?CLOUD WaterCloud) (exists (?WATER) (and (instance ?WATER Object) (instance ?WATER Water) (part ?WATER ?CLOUD))))))

(forall (?COIN) (=> (instance ?COIN CorpuscularObject) (=> (instance ?COIN CurrencyCoin) (exists (?METAL) (and (instance ?METAL SetOrClass) (subclass ?METAL Substance) (subclass ?METAL Metal) (material ?METAL ?COIN))))))

(forall (?COLL) (=> (instance ?COLL Collection) (exists (?OBJ) (and (instance ?OBJ SelfConnectedObject) (member ?OBJ ?COLL)))))

(forall (?COLL1 ?COLL2) (<=> (subCollection ?COLL1 ?COLL2) (and (instance ?COLL1 Collection) (instance ?COLL2 Collection) (forall (?MEMBER) (=> (instance ?MEMBER SelfConnectedObject) (=> (member ?MEMBER ?COLL1) (member ?MEMBER ?COLL2)))))))

(forall (?COLORING ?OBJ) (=> (and (instance ?COLORING Process) (instance ?OBJ Object)) (=> (and (instance ?COLORING Coloring) (patient ?COLORING ?OBJ)) (exists (?PROPERTY ?PART) (and (instance ?PROPERTY Attribute) (instance ?PART Object) (part ?PART ?OBJ) (instance ?PROPERTY ColorAttribute) (or (and (holdsDuring (BeginFn (WhenFn ?COLORING)) `(attribute ?PART ?PROPERTY)) (holdsDuring (EndFn (WhenFn ?COLORING)) `(not (attribute ?PART ?PROPERTY)))) (and (holdsDuring (BeginFn (WhenFn ?COLORING)) `(not (attribute ?PART ?PROPERTY))) (holdsDuring (EndFn (WhenFn ?COLORING)) `(attribute ?PART ?PROPERTY)))))))))

(forall (?COMBINE ?OBJ1 ?OBJ2) (=> (and (instance ?COMBINE Process) (instance ?OBJ1 Object) (instance ?OBJ2 Object)) (<=> (and (instance ?COMBINE Combining) (resource ?COMBINE ?OBJ1) (result ?COMBINE ?OBJ2)) (and (holdsDuring (BeginFn (WhenFn ?COMBINE)) `(not (part ?OBJ1 ?OBJ2))) (holdsDuring (EndFn (WhenFn ?COMBINE)) `(part ?OBJ1 ?OBJ2))))))

(forall (?COMBINE) (=> (instance ?COMBINE Process) (=> (instance ?COMBINE Combining) (exists (?OBJ) (and (instance ?OBJ SelfConnectedObject) (patient ?COMBINE ?OBJ))))))

(forall (?COMBUSTION) (=> (instance ?COMBUSTION Process) (=> (instance ?COMBUSTION Combustion) (exists (?HEAT ?LIGHT) (and (instance ?HEAT Process) (instance ?LIGHT Process) (instance ?HEAT Heating) (instance ?LIGHT RadiatingLight) (subProcess ?HEAT ?COMBUSTION) (subProcess ?LIGHT ?COMBUSTION))))))

(forall (?COMMIT ?FORMULA) (=> (instance ?COMMIT Process) (=> (and (instance ?COMMIT Committing) (patient ?COMMIT ?FORMULA) (instance ?FORMULA Formula)) (modalAttribute ?FORMULA Promise))))

(forall (?COMMUNICATE) (=> (instance ?COMMUNICATE Process) (=> (instance ?COMMUNICATE Communication) (exists (?PHYS ?ENTITY ?AGENT1 ?AGENT2) (and (instance ?AGENT1 Agent) (refers ?PHYS ?ENTITY) (patient ?COMMUNICATE ?PHYS) (instance ?AGENT1 CognitiveAgent) (agent ?COMMUNICATE ?AGENT1) (instance ?AGENT2 CognitiveAgent) (destination ?COMMUNICATE ?AGENT2))))))

(forall (?COMMUNICATE) (=> (instance ?COMMUNICATE Process) (=> (instance ?COMMUNICATE LinguisticCommunication) (exists (?OBJ) (and (represents ?COMMUNICATE ?OBJ) (instance ?OBJ LinguisticExpression) (patient ?COMMUNICATE ?OBJ))))))

(forall (?COMP) (=> (instance ?COMP CorpuscularObject) (=> (instance ?COMP EngineeringComponent) (exists (?DEVICE) (and (instance ?DEVICE CorpuscularObject) (instance ?DEVICE Device) (component ?COMP ?DEVICE))))))

(forall (?COMP1 ?COMP2) (=> (and (instance ?COMP1 EngineeringComponent) (instance ?COMP2 EngineeringComponent)) (<=> (connectedEngineeringComponents ?COMP1 ?COMP2) (exists (?CONNECTION) (and (instance ?CONNECTION EngineeringConnection) (connectsEngineeringComponents ?CONNECTION ?COMP1 ?COMP2))))))

(forall (?COMP1 ?COMP2) (=> (and (instance ?COMP1 EngineeringComponent) (instance ?COMP2 EngineeringComponent)) (=> (connectedEngineeringComponents ?COMP1 ?COMP2) (and (not (engineeringSubcomponent ?COMP1 ?COMP2)) (not (engineeringSubcomponent ?COMP2 ?COMP1))))))

(forall (?COMP1 ?COMP2) (=> (and (instance ?COMP1 EngineeringComponent) (instance ?COMP2 EngineeringComponent)) (=> (connectedEngineeringComponents ?COMP1 ?COMP2) (not (or (instance ?COMP1 EngineeringConnection) (instance ?COMP2 EngineeringConnection))))))

(forall (?COMPOUND) (<=> (instance ?COMPOUND CompoundSubstance) (exists (?ELEMENT1 ?ELEMENT2 ?PROCESS) (and (instance ?ELEMENT1 Object) (instance ?ELEMENT2 Object) (instance ?PROCESS Process) (instance ?ELEMENT1 ElementalSubstance) (instance ?ELEMENT2 ElementalSubstance) (not (equal ?ELEMENT1 ?ELEMENT2)) (instance ?PROCESS ChemicalSynthesis) (resource ?PROCESS ?ELEMENT1) (resource ?PROCESS ?ELEMENT2) (result ?PROCESS ?COMPOUND)))))

(forall (?COND ?OBJ) (=> (and (instance ?COND Process) (instance ?OBJ Object)) (=> (and (instance ?COND Condensing) (patient ?COND ?OBJ)) (exists (?PART) (and (instance ?PART Object) (part ?PART ?OBJ) (holdsDuring (BeginFn (WhenFn ?COND)) `(attribute ?PART Gas)) (holdsDuring (EndFn (WhenFn ?COND)) `(attribute ?PART Liquid)))))))

(forall (?COND) (=> (instance ?COND Process) (=> (instance ?COND Condensing) (exists (?COOL) (and (instance ?COOL Process) (instance ?COOL Cooling) (subProcess ?COOL ?COND))))))

(forall (?CONFINE ?PERSON) (=> (and (instance ?CONFINE Process) (instance ?PERSON CognitiveAgent)) (=> (and (instance ?CONFINE Confining) (patient ?CONFINE ?PERSON) (instance ?PERSON Human)) (not (desires ?PERSON `(patient ?CONFINE ?PERSON))))))

(forall (?CONFINE) (=> (instance ?CONFINE Process) (=> (instance ?CONFINE Confining) (exists (?AGENT) (and (instance ?AGENT Animal) (patient ?CONFINE ?AGENT))))))

(forall (?CONNECTION) (=> (instance ?CONNECTION EngineeringConnection) (exists (?COMP1 ?COMP2) (and (instance ?COMP1 EngineeringComponent) (instance ?COMP2 EngineeringComponent) (connectsEngineeringComponents ?CONNECTION ?COMP1 ?COMP2)))))

(forall (?CONTEST) (=> (instance ?CONTEST Process) (=> (instance ?CONTEST Contest) (exists (?AGENT1 ?AGENT2 ?PURP1 ?PURP2) (and (instance ?AGENT1 CognitiveAgent) (instance ?AGENT2 CognitiveAgent) (instance ?PURP1 Formula) (instance ?PURP2 Formula) (agent ?CONTEST ?AGENT1) (agent ?CONTEST ?AGENT2) (hasPurposeForAgent ?CONTEST ?PURP1 ?AGENT1) (hasPurposeForAgent ?CONTEST ?PURP2 ?AGENT2) (not (equal ?AGENT1 ?AGENT2)) (not (equal ?PURP1 ?PURP2)))))))

(forall (?COOK) (=> (instance ?COOK Process) (=> (instance ?COOK Cooking) (exists (?FOOD) (and (instance ?FOOD Food) (result ?COOK ?FOOD))))))

(forall (?COOL ?OBJ) (=> (and (instance ?COOL Process) (instance ?OBJ RealNumber)) (=> (and (instance ?COOL Cooling) (patient ?COOL ?OBJ)) (exists (?UNIT ?QUANT1 ?QUANT2) (and (instance ?UNIT UnitOfMeasure) (instance ?QUANT1 ConstantQuantity) (instance ?QUANT2 ConstantQuantity) (instance ?UNIT TemperatureMeasure) (holdsDuring (BeginFn (WhenFn ?COOL)) `(equal (MeasureFn ?OBJ ?UNIT) ?QUANT1)) (holdsDuring (EndFn (WhenFn ?COOL)) `(equal (MeasureFn ?OBJ ?UNIT) ?QUANT2)) (lessThan ?QUANT2 ?QUANT1))))))

(forall (?COOPERATE) (=> (instance ?COOPERATE Process) (=> (instance ?COOPERATE Cooperation) (exists (?PURP) (and (instance ?PURP Formula) (forall (?AGENT) (=> (instance ?AGENT CognitiveAgent) (=> (agent ?COOPERATE ?AGENT) (hasPurposeForAgent ?COOPERATE ?PURP ?AGENT)))))))))

(forall (?COUNT ?AGENT ?ENTITY) (=> (and (instance ?COUNT Process) (instance ?AGENT CognitiveAgent) (instance ?ENTITY (UnionFn SetOrClass Collection))) (=> (and (instance ?COUNT Counting) (agent ?COUNT ?AGENT) (patient ?COUNT ?ENTITY)) (exists (?NUMBER) (and (instance ?NUMBER Number) (knows ?AGENT `(equal (CardinalityFn ?ENTITY) ?NUMBER)))))))

(forall (?COVER) (=> (instance ?COVER Object) (=> (instance ?COVER BodyCovering) (exists (?BODY) (and (instance ?BODY Object) (superficialPart ?COVER ?BODY) (or (instance ?BODY Organism) (instance ?BODY BodyPart)))))))

(forall (?CP) (=> (instance ?CP Process) (=> (instance ?CP ComputerProgramming) (exists (?C) (and (instance ?C ComputerProgram) (result ?CP ?C))))))

(forall (?CURRENCY) (=> (instance ?CURRENCY Physical) (=> (instance ?CURRENCY Currency) (exists (?MEASURE) (and (instance ?MEASURE CurrencyMeasure) (monetaryValue ?CURRENCY ?MEASURE))))))

(forall (?DAY ?NUMBER ?MONTH) (=> (and (instance ?DAY Day) (instance ?NUMBER PositiveRealNumber) (subclass ?MONTH Month)) (=> (instance ?DAY (DayFn ?NUMBER ?MONTH)) (lessThanOrEqualTo ?NUMBER 31))))

(forall (?DAY) (=> (instance ?DAY TimeInterval) (=> (instance ?DAY Day) (duration ?DAY (MeasureFn 1 DayDuration)))))

(forall (?DAY) (=> (instance ?DAY TimeInterval) (=> (instance ?DAY Day) (equal (CardinalityFn (TemporalCompositionFn ?DAY Hour)) 24))))

(forall (?DAY1 ?DAY2 ?WEEK) (=> (and (instance ?DAY1 TimeInterval) (instance ?DAY2 TimeInterval) (instance ?WEEK TimePosition)) (=> (and (instance ?DAY1 Friday) (instance ?DAY2 Saturday) (instance ?WEEK Week) (temporalPart ?DAY1 ?WEEK) (temporalPart ?DAY2 ?WEEK)) (meetsTemporally ?DAY1 ?DAY2))))

(forall (?DAY1 ?DAY2 ?WEEK) (=> (and (instance ?DAY1 TimeInterval) (instance ?DAY2 TimeInterval) (instance ?WEEK TimePosition)) (=> (and (instance ?DAY1 Monday) (instance ?DAY2 Tuesday) (instance ?WEEK Week) (temporalPart ?DAY1 ?WEEK) (temporalPart ?DAY2 ?WEEK)) (meetsTemporally ?DAY1 ?DAY2))))

(forall (?DAY1 ?DAY2 ?WEEK) (=> (and (instance ?DAY1 TimeInterval) (instance ?DAY2 TimeInterval) (instance ?WEEK TimePosition)) (=> (and (instance ?DAY1 Saturday) (instance ?DAY2 Sunday) (instance ?WEEK Week) (temporalPart ?DAY1 ?WEEK) (temporalPart ?DAY2 ?WEEK)) (meetsTemporally ?DAY1 ?DAY2))))

(forall (?DAY1 ?DAY2 ?WEEK) (=> (and (instance ?DAY1 TimeInterval) (instance ?DAY2 TimeInterval) (instance ?WEEK TimePosition)) (=> (and (instance ?DAY1 Thursday) (instance ?DAY2 Friday) (instance ?WEEK Week) (temporalPart ?DAY1 ?WEEK) (temporalPart ?DAY2 ?WEEK)) (meetsTemporally ?DAY1 ?DAY2))))

(forall (?DAY1 ?DAY2 ?WEEK) (=> (and (instance ?DAY1 TimeInterval) (instance ?DAY2 TimeInterval) (instance ?WEEK TimePosition)) (=> (and (instance ?DAY1 Tuesday) (instance ?DAY2 Wednesday) (instance ?WEEK Week) (temporalPart ?DAY1 ?WEEK) (temporalPart ?DAY2 ?WEEK)) (meetsTemporally ?DAY1 ?DAY2))))

(forall (?DAY1 ?DAY2 ?WEEK) (=> (and (instance ?DAY1 TimeInterval) (instance ?DAY2 TimeInterval) (instance ?WEEK TimePosition)) (=> (and (instance ?DAY1 Wednesday) (instance ?DAY2 Thursday) (instance ?WEEK Week) (temporalPart ?DAY1 ?WEEK) (temporalPart ?DAY2 ?WEEK)) (meetsTemporally ?DAY1 ?DAY2))))

(forall (?DAY1 ?DAY2 ?WEEK1 ?WEEK2) (=> (and (instance ?DAY1 TimeInterval) (instance ?DAY2 TimeInterval) (instance ?WEEK1 TimeInterval) (instance ?WEEK2 TimeInterval)) (=> (and (instance ?DAY1 Sunday) (instance ?DAY2 Monday) (instance ?WEEK1 Week) (instance ?WEEK2 Week) (temporalPart ?DAY1 ?WEEK1) (temporalPart ?DAY2 ?WEEK2) (meetsTemporally ?WEEK1 ?WEEK2)) (meetsTemporally ?DAY1 ?DAY2))))

(forall (?DAY1 ?NUMBER1 ?MONTH ?DAY2 ?NUMBER2) (=> (and (instance ?DAY1 Day) (instance ?NUMBER1 PositiveRealNumber) (subclass ?MONTH Month) (instance ?DAY2 Day) (instance ?NUMBER2 PositiveRealNumber)) (=> (and (instance ?DAY1 (DayFn ?NUMBER1 ?MONTH)) (instance ?DAY2 (DayFn ?NUMBER2 ?MONTH)) (equal (SubtractionFn ?NUMBER2 ?NUMBER1) 1)) (meetsTemporally ?DAY1 ?DAY2))))

(forall (?DEATH ?AGENT) (=> (and (instance ?DEATH Process) (instance ?AGENT Agent)) (=> (and (instance ?DEATH Death) (experiencer ?DEATH ?AGENT)) (holdsDuring (FutureFn (WhenFn ?DEATH)) `(attribute ?AGENT Dead)))))

(forall (?DEATH ?BIRTH ?AGENT) (=> (and (instance ?DEATH Process) (instance ?BIRTH Process) (instance ?AGENT Agent)) (=> (and (instance ?DEATH Death) (instance ?BIRTH Birth) (experiencer ?DEATH ?AGENT) (experiencer ?BIRTH ?AGENT)) (exists (?TIME) (and (instance ?TIME TimeInterval) (meetsTemporally (WhenFn ?BIRTH) ?TIME) (meetsTemporally ?TIME (WhenFn ?DEATH)) (holdsDuring ?TIME `(attribute ?AGENT Living)))))))

(forall (?DECIDE ?AGENT ?PROCESS) (=> (and (instance ?DECIDE Process) (instance ?AGENT Agent) (instance ?PROCESS Process)) (=> (and (instance ?DECIDE Deciding) (agent ?DECIDE ?AGENT) (patient ?DECIDE ?PROCESS)) (and (instance ?PROCESS IntentionalProcess) (agent ?PROCESS ?AGENT)))))

(forall (?DECISION) (=> (instance ?DECISION LegalDecision) (exists (?ACTION) (and (instance ?ACTION LegalAction) (refers ?DECISION ?ACTION)))))

(forall (?DECISION) (=> (instance ?DECISION Physical) (=> (instance ?DECISION LegalDecision) (exists (?DECIDE) (and (instance ?DECIDE Physical) (instance ?DECIDE Deciding) (earlier (WhenFn ?DECIDE) (WhenFn ?DECISION)))))))

(forall (?DECLARE) (=> (instance ?DECLARE Declaring) (exists (?PROP ?NORM) (and (instance ?PROP Formula) (instance ?NORM ObjectiveNorm) (or (confersNorm ?DECLARE ?PROP ?NORM) (deprivesNorm ?DECLARE ?PROP ?NORM))))))

(forall (?DECODE ?DOC1 ?PROP) (=> (and (instance ?DECODE Process) (instance ?DOC1 ContentBearingPhysical) (instance ?PROP Proposition)) (=> (and (instance ?DECODE Decoding) (patient ?DECODE ?DOC1)) (exists (?ENCODE ?DOC2 ?TIME) (and (instance ?ENCODE Process) (instance ?DOC2 ContentBearingPhysical) (instance ?TIME TimePosition) (containsInformation ?DOC2 ?PROP) (containsInformation ?DOC1 ?PROP) (temporalPart ?TIME (PastFn (WhenFn ?DECODE))) (holdsDuring ?TIME `(and (instance ?ENCODE Encoding) (patient ?ENCODE ?DOC2))))))))

(forall (?DECREASE ?OBJ) (=> (and (instance ?DECREASE Process) (instance ?OBJ RealNumber)) (=> (and (instance ?DECREASE Decreasing) (patient ?DECREASE ?OBJ)) (exists (?UNIT ?QUANT1 ?QUANT2) (and (instance ?UNIT UnitOfMeasure) (instance ?QUANT1 ConstantQuantity) (instance ?QUANT2 ConstantQuantity) (holdsDuring (BeginFn (WhenFn ?DECREASE)) `(equal (MeasureFn ?OBJ ?UNIT) ?QUANT1)) (holdsDuring (EndFn (WhenFn ?DECREASE)) `(equal (MeasureFn ?OBJ ?UNIT) ?QUANT2)) (lessThan ?QUANT2 ?QUANT1))))))

(forall (?DEFENSE ?AGENT) (=> (and (instance ?DEFENSE Process) (instance ?AGENT CognitiveAgent)) (=> (and (instance ?DEFENSE DefensiveManeuver) (agent ?DEFENSE ?AGENT)) (hasPurposeForAgent ?DEFENSE `(not (exists (?DAMAGE) (and (instance ?DAMAGE Process) (instance ?DAMAGE Damaging) (patient ?DAMAGE ?AGENT)))) ?AGENT))))

(forall (?DEFENSE) (=> (instance ?DEFENSE Process) (=> (instance ?DEFENSE DefensiveManeuver) (exists (?CONTEST) (and (instance ?CONTEST Process) (instance ?CONTEST ViolentContest) (subProcess ?DEFENSE ?CONTEST))))))

(forall (?DEGREE) (=> (instance ?DEGREE PlaneAngleMeasure) (equal (TangentFn ?DEGREE) (DivisionFn (SineFn ?DEGREE) (CosineFn ?DEGREE)))))

(forall (?DEMO) (=> (instance ?DEMO Demonstrating) (exists (?PERSON) (and (instance ?PERSON Human) (attends ?DEMO ?PERSON)))))

(forall (?DETACH ?OBJ1 ?OBJ2) (=> (and (instance ?DETACH Process) (instance ?OBJ1 Object) (instance ?OBJ2 Object)) (=> (and (instance ?DETACH Detaching) (patient ?DETACH ?OBJ1) (patient ?DETACH ?OBJ2)) (and (holdsDuring (BeginFn (WhenFn ?DETACH)) `(connected ?OBJ1 ?OBJ2)) (holdsDuring (EndFn (WhenFn ?DETACH)) `(not (connected ?OBJ1 ?OBJ2)))))))

(forall (?DETACH) (=> (instance ?DETACH Process) (=> (instance ?DETACH Detaching) (exists (?OBJ) (and (instance ?OBJ CorpuscularObject) (patient ?DETACH ?OBJ))))))

(forall (?DEVELOP) (=> (instance ?DEVELOP Process) (=> (instance ?DEVELOP ContentDevelopment) (exists (?OBJ) (and (instance ?OBJ ContentBearingObject) (result ?DEVELOP ?OBJ))))))

(forall (?DEVICE) (=> (instance ?DEVICE Object) (=> (instance ?DEVICE AttachingDevice) (exists (?ATTACH) (and (instance ?ATTACH Process) (instance ?ATTACH Attaching) (instrument ?ATTACH ?DEVICE))))))

(forall (?DEVICE) (=> (instance ?DEVICE Object) (=> (instance ?DEVICE Device) (exists (?PROC) (and (instance ?PROC SetOrClass) (hasPurpose ?DEVICE `(exists (?INST) (and (instance ?INST Process) (instance ?INST ?PROC) (instrument ?INST ?DEVICE)))))))))

(forall (?DEVICE) (=> (instance ?DEVICE Object) (=> (instance ?DEVICE Device) (exists (?PROC) (and (subclass ?PROC Process) (capability ?PROC instrument ?DEVICE))))))

(forall (?DEVICE) (=> (instance ?DEVICE Object) (=> (instance ?DEVICE MeasuringDevice) (hasPurpose ?DEVICE `(exists (?MEASURE) (and (instance ?MEASURE Process) (instance ?MEASURE Measuring) (instrument ?MEASURE ?DEVICE)))))))

(forall (?DEVICE) (=> (instance ?DEVICE Object) (=> (instance ?DEVICE TransportationDevice) (capability Transportation instrument ?DEVICE))))

(forall (?DIGEST ?ORGANISM) (=> (and (instance ?DIGEST Process) (instance ?ORGANISM Agent)) (=> (and (instance ?DIGEST Digesting) (agent ?DIGEST ?ORGANISM)) (exists (?INGEST) (and (instance ?INGEST Process) (instance ?INGEST Ingesting) (agent ?INGEST ?ORGANISM) (overlapsTemporally (WhenFn ?INGEST) (WhenFn ?DIGEST)))))))

(forall (?DIGEST) (=> (instance ?DIGEST Process) (=> (instance ?DIGEST Digesting) (exists (?DECOMP) (and (instance ?DECOMP Process) (instance ?DECOMP ChemicalDecomposition) (subProcess ?DECOMP ?DIGEST))))))

(forall (?DIRECT ?OBJ1 ?OBJ2 ?OBJ3) (=> (and (instance ?DIRECT PositionalAttribute) (instance ?OBJ1 Object) (instance ?OBJ2 Object) (instance ?OBJ3 Object)) (=> (and (instance ?DIRECT DirectionalAttribute) (orientation ?OBJ1 ?OBJ2 ?DIRECT) (orientation ?OBJ2 ?OBJ3 ?DIRECT)) (between ?OBJ1 ?OBJ2 ?OBJ3))))

(forall (?DIS) (=> (instance ?DIS Process) (=> (instance ?DIS Disagreeing) (exists (?A1 ?A2 ?STATE1 ?STATE2 ?STMT1 ?STMT2) (and (instance ?A1 Agent) (instance ?A2 Agent) (instance ?STATE1 Process) (instance ?STATE1 ContentBearingPhysical) (instance ?STATE2 Process) (instance ?STATE2 ContentBearingPhysical) (instance ?STMT1 Proposition) (instance ?STMT2 Proposition) (subProcess ?STATE1 ?DIS) (subProcess ?STATE2 ?DIS) (agent ?STATE1 ?A1) (agent ?STATE2 ?A2) (containsInformation ?STATE1 ?STMT1) (containsInformation ?STATE2 ?STMT2) (not (consistent ?STMT1 ?STMT2)))))))

(forall (?DISCOVER ?OBJ ?PLACE) (=> (and (instance ?DISCOVER Process) (instance ?OBJ Physical) (instance ?PLACE Object)) (=> (and (instance ?DISCOVER Discovering) (patient ?DISCOVER ?OBJ) (holdsDuring (WhenFn ?DISCOVER) `(located ?OBJ ?PLACE))) (exists (?LEARN) (and (instance ?LEARN Process) (instance ?LEARN Learning) (subProcess ?LEARN ?DISCOVER) (patient ?LEARN `(located ?OBJ ?PLACE)))))))

(forall (?DISCOVER ?OBJ) (=> (instance ?DISCOVER Process) (=> (and (instance ?DISCOVER Discovering) (patient ?DISCOVER ?OBJ)) (exists (?PURSUE) (and (instance ?PURSUE Physical) (instance ?PURSUE Pursuing) (meetsTemporally (WhenFn ?PURSUE) (WhenFn ?DISCOVER)))))))

(forall (?DISSEMINATE) (=> (instance ?DISSEMINATE Process) (=> (instance ?DISSEMINATE Disseminating) (exists (?AGENT1 ?AGENT2) (and (destination ?DISSEMINATE ?AGENT1) (instance ?AGENT1 CognitiveAgent) (destination ?DISSEMINATE ?AGENT2) (instance ?AGENT2 CognitiveAgent) (not (equal ?AGENT1 ?AGENT2)))))))

(forall (?DOC) (=> (instance ?DOC Certificate) (exists (?PROP ?NORM) (and (instance ?PROP Formula) (instance ?NORM ObjectiveNorm) (or (confersNorm ?DOC ?PROP ?NORM) (deprivesNorm ?DOC ?PROP ?NORM))))))

(forall (?DRINK ?BEV) (=> (instance ?DRINK Process) (=> (and (instance ?DRINK Drinking) (patient ?DRINK ?BEV)) (instance ?BEV Beverage))))

(forall (?DRIVE) (=> (instance ?DRIVE Process) (=> (instance ?DRIVE Driving) (exists (?VEHICLE) (and (instance ?VEHICLE Vehicle) (patient ?DRIVE ?VEHICLE))))))

(forall (?DROP ?START ?FINISH) (=> (and (instance ?DROP Process) (instance ?START Object) (instance ?FINISH Object)) (=> (and (instance ?DROP Falling) (origin ?DROP ?START) (destination ?DROP ?FINISH)) (orientation ?FINISH ?START Below))))

(forall (?DRY ?OBJ) (=> (and (instance ?DRY Process) (instance ?OBJ Object)) (=> (and (instance ?DRY Drying) (patient ?DRY ?OBJ)) (holdsDuring (EndFn (WhenFn ?DRY)) `(attribute ?OBJ Dry)))))

(forall (?EDUCATION ?PERSON) (=> (instance ?EDUCATION Process) (=> (and (instance ?EDUCATION EducationalProcess) (patient ?EDUCATION ?PERSON)) (hasPurpose ?EDUCATION `(exists (?LEARN) (and (instance ?LEARN Process) (instance ?LEARN Learning) (patient ?LEARN ?PERSON)))))))

(forall (?EMIT ?SOUND) (=> (and (instance ?EMIT Process) (instance ?SOUND Agent)) (=> (and (instance ?EMIT RadiatingSound) (agent ?EMIT ?SOUND)) (exists (?ATTR) (and (instance ?ATTR Attribute) (instance ?ATTR SoundAttribute) (attribute ?SOUND ?ATTR))))))

(forall (?ENTITY ?CLASS) (=> (instance ?CLASS SetOrClass) (=> (immediateInstance ?ENTITY ?CLASS) (not (exists (?SUBCLASS) (and (instance ?SUBCLASS SetOrClass) (subclass ?SUBCLASS ?CLASS) (not (equal ?SUBCLASS ?CLASS)) (instance ?ENTITY ?SUBCLASS)))))))

(forall (?ENTITY) (=> (property ?ENTITY Promise) (or (property ?ENTITY Contract) (property ?ENTITY NakedPromise))))

(forall (?EVAP ?OBJ ?BOILVAL ?MEAS ?VAL) (=> (and (instance ?EVAP Process) (instance ?OBJ Object) (instance ?BOILVAL RealNumber) (instance ?MEAS UnitOfMeasure) (instance ?VAL RealNumber)) (=> (and (instance ?EVAP Evaporating) (boilingPoint ?OBJ (MeasureFn ?BOILVAL ?MEAS)) (measure ?OBJ (MeasureFn ?VAL ?MEAS)) (instance ?MEAS TemperatureMeasure) (patient ?EVAP ?OBJ)) (exists (?PART) (and (instance ?PART Object) (part ?PART ?OBJ) (greaterThan ?BOILVAL ?VAL) (holdsDuring (BeginFn (WhenFn ?EVAP)) `(attribute ?PART Liquid)) (holdsDuring (EndFn (WhenFn ?EVAP)) `(attribute ?PART Gas)))))))

(forall (?EVENT ?AGENT ?AREA) (=> (and (instance ?EVENT Process) (instance ?AGENT Government)) (=> (and (instance ?EVENT Election) (agent ?EVENT ?AGENT) (instance ?AREA GeopoliticalArea) (instance ?AGENT (GovernmentFn ?AREA))) (instance ?EVENT PoliticalProcess))))

(forall (?EVENT ?AGENT) (=> (and (instance ?EVENT Process) (instance ?AGENT Agent)) (=> (and (instance ?EVENT Election) (agent ?EVENT ?AGENT) (instance ?AGENT GeopoliticalArea)) (instance ?EVENT PoliticalProcess))))

(forall (?EVENT ?CBO) (=> (and (instance ?EVENT Process) (instance ?CBO ContentBearingPhysical)) (=> (and (instance ?EVENT Planning) (result ?EVENT ?CBO) (instance ?CBO ContentBearingObject)) (exists (?PLAN) (and (instance ?PLAN Proposition) (instance ?PLAN Plan) (containsInformation ?CBO ?PLAN))))))

(forall (?EXPRESS ?AGENT) (=> (and (instance ?EXPRESS Process) (instance ?AGENT Agent)) (=> (and (instance ?EXPRESS Expressing) (agent ?EXPRESS ?AGENT)) (exists (?STATE) (and (instance ?STATE Attribute) (instance ?STATE StateOfMind) (attribute ?AGENT ?STATE) (represents ?EXPRESS ?STATE))))))

(forall (?EXPRESS ?LANGUAGE) (=> (and (instance ?EXPRESS LinguisticExpression) (instance ?LANGUAGE Language)) (<=> (expressedInLanguage ?EXPRESS ?LANGUAGE) (exists (?PROP) (representsInLanguage ?EXPRESS ?PROP ?LANGUAGE)))))

(forall (?FIGURE1 ?FIGURE2 ?POINT) (=> (and (instance ?FIGURE1 OneDimensionalFigure) (instance ?FIGURE2 OneDimensionalFigure) (instance ?POINT GeometricPoint)) (=> (pointOfIntersection ?FIGURE1 ?FIGURE2 ?POINT) (and (pointOfFigure ?POINT ?FIGURE1) (pointOfFigure ?POINT ?FIGURE2)))))

(forall (?FIRE ?ORG ?PERSON) (=> (and (instance ?FIRE Process) (instance ?PERSON CognitiveAgent)) (=> (and (instance ?FIRE TerminatingEmployment) (instance ?ORG Organization) (agent ?FIRE ?ORG) (patient ?FIRE ?PERSON)) (and (holdsDuring (BeginFn (WhenFn ?FIRE)) `(employs ?ORG ?PERSON)) (holdsDuring (EndFn (WhenFn ?FIRE)) `(not (employs ?ORG ?PERSON)))))))

(forall (?FISH) (=> (instance ?FISH Organism) (=> (instance ?FISH Fish) (exists (?WATER) (and (instance ?WATER Object) (inhabits ?FISH ?WATER) (instance ?WATER Water))))))

(forall (?FOOD) (=> (instance ?FOOD Object) (=> (instance ?FOOD Food) (exists (?NUTRIENT) (and (instance ?NUTRIENT Object) (instance ?NUTRIENT Nutrient) (part ?NUTRIENT ?FOOD))))))

(forall (?FORMULA ?AGENT1 ?AGENT2) (=> (and (instance ?FORMULA Formula) (instance ?AGENT2 CognitiveAgent)) (=> (confersObligation ?FORMULA ?AGENT1 ?AGENT2) (holdsObligation ?FORMULA ?AGENT2))))

(forall (?FORMULA ?AGENT1 ?AGENT2) (=> (and (instance ?FORMULA Formula) (instance ?AGENT2 CognitiveAgent)) (=> (confersRight ?FORMULA ?AGENT1 ?AGENT2) (holdsRight ?FORMULA ?AGENT2))))

(forall (?FORMULA) (=> (instance ?FORMULA Formula) (<=> (modalAttribute ?FORMULA Necessity) (not (modalAttribute `(not ?FORMULA) Possibility)))))

(forall (?FORMULA) (=> (instance ?FORMULA Formula) (<=> (modalAttribute ?FORMULA Obligation) (not (modalAttribute `(not ?FORMULA) Permission)))))

(forall (?FORMULA) (=> (instance ?FORMULA Formula) (<=> (modalAttribute ?FORMULA Prohibition) (not (modalAttribute ?FORMULA Permission)))))

(forall (?FORMULA) (=> (instance ?FORMULA Formula) (=> (modalAttribute ?FORMULA Likely) (greaterThan (ProbabilityFn `(truth ?FORMULA True)) (ProbabilityFn `(truth ?FORMULA False))))))

(forall (?FORMULA) (=> (instance ?FORMULA Formula) (=> (modalAttribute ?FORMULA Necessity) (modalAttribute ?FORMULA Possibility))))

(forall (?FORMULA) (=> (instance ?FORMULA Formula) (=> (modalAttribute ?FORMULA Obligation) (modalAttribute ?FORMULA Permission))))

(forall (?FORMULA) (=> (instance ?FORMULA Formula) (=> (modalAttribute ?FORMULA Permission) (modalAttribute ?FORMULA Possibility))))

(forall (?FORMULA) (=> (instance ?FORMULA Formula) (=> (modalAttribute ?FORMULA Unlikely) (greaterThan (ProbabilityFn `(truth ?FORMULA False)) (ProbabilityFn `(truth ?FORMULA True))))))

(forall (?FORMULA1 ?FORMULA2 ?NUMBER1 ?NUMBER2) (=> (and (instance ?FORMULA1 Formula) (instance ?FORMULA2 Formula) (instance ?NUMBER1 RealNumber) (instance ?NUMBER2 RealNumber)) (=> (and (decreasesLikelihood ?FORMULA1 ?FORMULA2) (equal (ProbabilityFn ?FORMULA2) ?NUMBER1) (conditionalProbability ?FORMULA1 ?FORMULA2 ?NUMBER2)) (lessThan ?NUMBER2 ?NUMBER1))))

(forall (?FORMULA1 ?FORMULA2 ?NUMBER1 ?NUMBER2) (=> (and (instance ?FORMULA1 Formula) (instance ?FORMULA2 Formula) (instance ?NUMBER1 RealNumber) (instance ?NUMBER2 RealNumber)) (=> (and (increasesLikelihood ?FORMULA1 ?FORMULA2) (equal (ProbabilityFn ?FORMULA2) ?NUMBER1) (conditionalProbability ?FORMULA1 ?FORMULA2 ?NUMBER2)) (greaterThan ?NUMBER2 ?NUMBER1))))

(forall (?FORMULA1 ?FORMULA2 ?NUMBER1 ?NUMBER2) (=> (and (instance ?FORMULA1 Formula) (instance ?FORMULA2 Formula) (instance ?NUMBER1 RealNumber) (instance ?NUMBER2 RealNumber)) (=> (and (independentProbability ?FORMULA1 ?FORMULA2) (equal (ProbabilityFn ?FORMULA2) ?NUMBER1) (conditionalProbability ?FORMULA1 ?FORMULA2 ?NUMBER2)) (equal ?NUMBER2 ?NUMBER1))))

(forall (?FORMULA1 ?FORMULA2) (=> (and (instance ?FORMULA1 Formula) (instance ?FORMULA2 Formula)) (or (increasesLikelihood ?FORMULA1 ?FORMULA2) (decreasesLikelihood ?FORMULA1 ?FORMULA2) (independentProbability ?FORMULA1 ?FORMULA2))))

(forall (?FORMULA1 ?PROP ?FORMULA2) (=> (and (instance ?FORMULA1 Formula) (instance ?PROP NormativeAttribute) (instance ?FORMULA2 Formula)) (=> (and (modalAttribute ?FORMULA1 ?PROP) (entails ?FORMULA1 ?FORMULA2)) (modalAttribute ?FORMULA2 ?PROP))))

(forall (?FREEZE ?OBJ) (=> (and (instance ?FREEZE Process) (instance ?OBJ Object)) (=> (and (instance ?FREEZE Freezing) (patient ?FREEZE ?OBJ)) (exists (?PART) (and (instance ?PART Object) (part ?PART ?OBJ) (holdsDuring (BeginFn (WhenFn ?FREEZE)) `(attribute ?PART Liquid)) (holdsDuring (EndFn (WhenFn ?FREEZE)) `(attribute ?PART Solid)))))))

(forall (?FREEZE) (=> (instance ?FREEZE Process) (=> (instance ?FREEZE Freezing) (exists (?COOL) (and (instance ?COOL Process) (instance ?COOL Cooling) (subProcess ?COOL ?FREEZE))))))

(forall (?FUN ?CLASS) (=> (and (instance ?FUN Function) (instance ?CLASS SetOrClass)) (=> (instance ?FUN OneToOneFunction) (forall (?ARG1 ?ARG2) (=> (and (instance ?ARG1 Function) (instance ?ARG2 Function)) (=> (and (domain ?FUN 1 ?CLASS) (instance ?ARG1 ?CLASS) (instance ?ARG2 ?CLASS) (not (equal ?ARG1 ?ARG2))) (not (equal (AssignmentFn ?FUN ?ARG1) (AssignmentFn ?FUN ?ARG2)))))))))

(forall (?FUNCTION ?CLASS ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5 ?ROW6 ?VALUE) (=> (and (instance ?FUNCTION Function) (instance ?CLASS SetOrClass) (instance ?ROW1 Function) (instance ?ROW2 Function) (instance ?ROW3 Function) (instance ?ROW4 Function) (instance ?ROW5 Function) (instance ?ROW6 Function)) (=> (and (range ?FUNCTION ?CLASS) (equal (AssignmentFn ?FUNCTION ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5 ?ROW6) ?VALUE)) (instance ?VALUE ?CLASS))))

(forall (?FUNCTION ?CLASS ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5 ?ROW6 ?VALUE) (=> (and (instance ?FUNCTION Function) (instance ?CLASS SetOrClass) (subclass ?CLASS SetOrClass) (instance ?ROW1 Function) (instance ?ROW2 Function) (instance ?ROW3 Function) (instance ?ROW4 Function) (instance ?ROW5 Function) (instance ?ROW6 Function) (instance ?VALUE SetOrClass)) (=> (and (rangeSubclass ?FUNCTION ?CLASS) (equal (AssignmentFn ?FUNCTION ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5 ?ROW6) ?VALUE)) (subclass ?VALUE ?CLASS))))

(forall (?FUNCTION ?CLASS ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5 ?VALUE) (=> (and (instance ?FUNCTION Function) (instance ?CLASS SetOrClass) (instance ?ROW1 Function) (instance ?ROW2 Function) (instance ?ROW3 Function) (instance ?ROW4 Function) (instance ?ROW5 Function)) (=> (and (range ?FUNCTION ?CLASS) (equal (AssignmentFn ?FUNCTION ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5) ?VALUE)) (instance ?VALUE ?CLASS))))

(forall (?FUNCTION ?CLASS ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5 ?VALUE) (=> (and (instance ?FUNCTION Function) (instance ?CLASS SetOrClass) (subclass ?CLASS SetOrClass) (instance ?ROW1 Function) (instance ?ROW2 Function) (instance ?ROW3 Function) (instance ?ROW4 Function) (instance ?ROW5 Function) (instance ?VALUE SetOrClass)) (=> (and (rangeSubclass ?FUNCTION ?CLASS) (equal (AssignmentFn ?FUNCTION ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5) ?VALUE)) (subclass ?VALUE ?CLASS))))

(forall (?FUNCTION ?CLASS ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?VALUE) (=> (and (instance ?FUNCTION Function) (instance ?CLASS SetOrClass) (instance ?ROW1 Function) (instance ?ROW2 Function) (instance ?ROW3 Function) (instance ?ROW4 Function)) (=> (and (range ?FUNCTION ?CLASS) (equal (AssignmentFn ?FUNCTION ?ROW1 ?ROW2 ?ROW3 ?ROW4) ?VALUE)) (instance ?VALUE ?CLASS))))

(forall (?FUNCTION ?CLASS ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?VALUE) (=> (and (instance ?FUNCTION Function) (instance ?CLASS SetOrClass) (subclass ?CLASS SetOrClass) (instance ?ROW1 Function) (instance ?ROW2 Function) (instance ?ROW3 Function) (instance ?ROW4 Function) (instance ?VALUE SetOrClass)) (=> (and (rangeSubclass ?FUNCTION ?CLASS) (equal (AssignmentFn ?FUNCTION ?ROW1 ?ROW2 ?ROW3 ?ROW4) ?VALUE)) (subclass ?VALUE ?CLASS))))

(forall (?FUNCTION ?CLASS ?ROW1 ?ROW2 ?ROW3 ?VALUE) (=> (and (instance ?FUNCTION Function) (instance ?CLASS SetOrClass) (instance ?ROW1 Function) (instance ?ROW2 Function) (instance ?ROW3 Function)) (=> (and (range ?FUNCTION ?CLASS) (equal (AssignmentFn ?FUNCTION ?ROW1 ?ROW2 ?ROW3) ?VALUE)) (instance ?VALUE ?CLASS))))

(forall (?FUNCTION ?CLASS ?ROW1 ?ROW2 ?ROW3 ?VALUE) (=> (and (instance ?FUNCTION Function) (instance ?CLASS SetOrClass) (subclass ?CLASS SetOrClass) (instance ?ROW1 Function) (instance ?ROW2 Function) (instance ?ROW3 Function) (instance ?VALUE SetOrClass)) (=> (and (rangeSubclass ?FUNCTION ?CLASS) (equal (AssignmentFn ?FUNCTION ?ROW1 ?ROW2 ?ROW3) ?VALUE)) (subclass ?VALUE ?CLASS))))

(forall (?FUNCTION ?CLASS ?ROW1 ?ROW2 ?VALUE) (=> (and (instance ?FUNCTION Function) (instance ?CLASS SetOrClass) (instance ?ROW1 Function) (instance ?ROW2 Function)) (=> (and (range ?FUNCTION ?CLASS) (equal (AssignmentFn ?FUNCTION ?ROW1 ?ROW2) ?VALUE)) (instance ?VALUE ?CLASS))))

(forall (?FUNCTION ?CLASS ?ROW1 ?ROW2 ?VALUE) (=> (and (instance ?FUNCTION Function) (instance ?CLASS SetOrClass) (subclass ?CLASS SetOrClass) (instance ?ROW1 Function) (instance ?ROW2 Function) (instance ?VALUE SetOrClass)) (=> (and (rangeSubclass ?FUNCTION ?CLASS) (equal (AssignmentFn ?FUNCTION ?ROW1 ?ROW2) ?VALUE)) (subclass ?VALUE ?CLASS))))

(forall (?FUNCTION ?CLASS ?ROW1 ?VALUE) (=> (and (instance ?FUNCTION Function) (instance ?CLASS SetOrClass) (instance ?ROW1 Function)) (=> (and (range ?FUNCTION ?CLASS) (equal (AssignmentFn ?FUNCTION ?ROW1) ?VALUE)) (instance ?VALUE ?CLASS))))

(forall (?FUNCTION ?CLASS ?ROW1 ?VALUE) (=> (and (instance ?FUNCTION Function) (instance ?CLASS SetOrClass) (subclass ?CLASS SetOrClass) (instance ?ROW1 Function) (instance ?VALUE SetOrClass)) (=> (and (rangeSubclass ?FUNCTION ?CLASS) (equal (AssignmentFn ?FUNCTION ?ROW1) ?VALUE)) (subclass ?VALUE ?CLASS))))

(forall (?FUNCTION ?CLASS) (=> (and (instance ?FUNCTION Function) (instance ?CLASS SetOrClass)) (=> (and (closedOn ?FUNCTION ?CLASS) (instance ?FUNCTION BinaryFunction)) (forall (?INST1 ?INST2) (=> (and (instance ?INST1 Function) (instance ?INST2 Function)) (=> (and (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS)) (instance (AssignmentFn ?FUNCTION ?INST1 ?INST2) ?CLASS)))))))

(forall (?FUNCTION ?CLASS) (=> (and (instance ?FUNCTION Function) (instance ?CLASS SetOrClass)) (=> (and (closedOn ?FUNCTION ?CLASS) (instance ?FUNCTION UnaryFunction)) (forall (?INST) (=> (instance ?INST Function) (=> (instance ?INST ?CLASS) (instance (AssignmentFn ?FUNCTION ?INST) ?CLASS)))))))

(forall (?FUNCTION ?CLASS) (=> (and (instance ?FUNCTION Function) (instance ?CLASS SetOrClass)) (=> (instance ?FUNCTION AssociativeFunction) (forall (?INST1 ?INST2 ?INST3) (=> (and (instance ?INST1 Function) (instance ?INST2 Function) (instance ?INST3 Function)) (=> (and (domain ?FUNCTION 1 ?CLASS) (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS) (instance ?INST3 ?CLASS)) (equal (AssignmentFn ?FUNCTION ?INST1 (AssignmentFn ?FUNCTION ?INST2 ?INST3)) (AssignmentFn ?FUNCTION (AssignmentFn ?FUNCTION ?INST1 ?INST2) ?INST3))))))))

(forall (?FUNCTION ?CLASS) (=> (and (instance ?FUNCTION Function) (instance ?CLASS SetOrClass)) (=> (instance ?FUNCTION CommutativeFunction) (forall (?INST1 ?INST2) (=> (and (instance ?INST1 Function) (instance ?INST2 Function)) (=> (and (domain ?FUNCTION 1 ?CLASS) (instance ?INST1 ?CLASS) (instance ?INST2 ?CLASS)) (equal (AssignmentFn ?FUNCTION ?INST1 ?INST2) (AssignmentFn ?FUNCTION ?INST2 ?INST1))))))))

(forall (?FUNCTION ?ID ?CLASS) (=> (and (instance ?FUNCTION BinaryFunction) (instance ?ID Function) (instance ?CLASS SetOrClass)) (=> (identityElement ?FUNCTION ?ID) (forall (?INST) (=> (instance ?INST Function) (=> (and (domain ?FUNCTION 1 ?CLASS) (instance ?INST ?CLASS)) (equal (AssignmentFn ?FUNCTION ?ID ?INST) ?INST)))))))

(forall (?FUNCTION) (=> (instance ?FUNCTION Relation) (=> (instance ?FUNCTION BinaryFunction) (valence ?FUNCTION 2))))

(forall (?FUNCTION) (=> (instance ?FUNCTION Relation) (=> (instance ?FUNCTION QuaternaryFunction) (valence ?FUNCTION 4))))

(forall (?FUNCTION) (=> (instance ?FUNCTION Relation) (=> (instance ?FUNCTION TernaryFunction) (valence ?FUNCTION 3))))

(forall (?FUNCTION) (=> (instance ?FUNCTION Relation) (=> (instance ?FUNCTION UnaryFunction) (valence ?FUNCTION 1))))

(forall (?FUNCTION1 ?FUNCTION2 ?CLASS1 ?CLASS2) (=> (and (instance ?FUNCTION1 BinaryFunction) (instance ?FUNCTION2 BinaryFunction) (instance ?CLASS1 SetOrClass) (instance ?CLASS2 SetOrClass)) (=> (distributes ?FUNCTION1 ?FUNCTION2) (forall (?INST1 ?INST2 ?INST3) (=> (and (instance ?INST1 Function) (instance ?INST2 Function) (instance ?INST3 Function)) (=> (and (domain ?FUNCTION1 1 ?CLASS1) (instance ?INST1 ?CLASS1) (instance ?INST2 ?CLASS1) (instance ?INST3 ?CLASS1) (domain ?FUNCTION2 1 ?CLASS2) (instance ?INST1 ?CLASS2) (instance ?INST2 ?CLASS2) (instance ?INST3 ?CLASS2)) (equal (AssignmentFn ?FUNCTION1 ?INST1 (AssignmentFn ?FUNCTION2 ?INST2 ?INST3)) (AssignmentFn ?FUNCTION2 (AssignmentFn ?FUNCTION1 ?INST1 ?INST2) (AssignmentFn ?FUNCTION1 ?INST1 ?INST3)))))))))

(forall (?FUND) (=> (instance ?FUND Process) (=> (instance ?FUND Funding) (exists (?MONEY) (and (instance ?MONEY Currency) (patient ?FUND ?MONEY))))))

(forall (?FUNGUS ?OBJ) (=> (and (instance ?FUNGUS Organism) (instance ?OBJ Object)) (=> (and (instance ?FUNGUS Fungus) (inhabits ?FUNGUS ?OBJ)) (instance ?OBJ Organism))))

(forall (?GET ?AGENT) (=> (and (instance ?GET Process) (instance ?AGENT Agent)) (=> (and (instance ?GET Getting) (agent ?GET ?AGENT)) (destination ?GET ?AGENT))))

(forall (?GET) (=> (instance ?GET Process) (=> (instance ?GET UnilateralGetting) (not (exists (?TRANS) (and (instance ?TRANS Process) (instance ?TRANS Transaction) (subProcess ?GET ?TRANS)))))))

(forall (?GIVE ?AGENT) (=> (and (instance ?GIVE Process) (instance ?AGENT Agent)) (=> (and (instance ?GIVE Giving) (agent ?GIVE ?AGENT)) (origin ?GIVE ?AGENT))))

(forall (?GIVE ?AGENT1 ?AGENT2 ?OBJ) (=> (and (instance ?GIVE Process) (instance ?AGENT1 Agent)) (=> (and (instance ?GIVE Giving) (agent ?GIVE ?AGENT1) (destination ?GIVE ?AGENT2) (instance ?AGENT2 Agent) (patient ?GIVE ?OBJ)) (exists (?GET) (and (instance ?GET Process) (instance ?GET Getting) (agent ?GET ?AGENT2) (origin ?GET ?AGENT1) (patient ?GET ?OBJ))))))

(forall (?GIVE) (=> (instance ?GIVE Process) (=> (instance ?GIVE UnilateralGiving) (not (exists (?TRANS) (and (instance ?TRANS Process) (instance ?TRANS Transaction) (subProcess ?GIVE ?TRANS)))))))

(forall (?GRAB ?AGENT ?THING) (=> (and (instance ?GRAB Process) (instance ?AGENT Animal) (instance ?THING Object)) (=> (and (instance ?GRAB Grabbing) (agent ?GRAB ?AGENT) (patient ?GRAB ?THING)) (and (holdsDuring (BeginFn (WhenFn ?GRAB)) `(not (grasps ?AGENT ?THING))) (holdsDuring (EndFn (WhenFn ?GRAB)) `(grasps ?AGENT ?THING))))))

(forall (?GRAD ?ORG ?PERSON) (=> (and (instance ?GRAD Process) (instance ?ORG Agent)) (=> (and (instance ?GRAD Graduation) (agent ?GRAD ?ORG) (patient ?GRAD ?PERSON)) (instance ?ORG EducationalOrganization))))

(forall (?GRAPH ?ARC ?NODE) (=> (and (instance ?GRAPH Graph) (instance ?NODE GraphNode)) (=> (and (instance ?GRAPH GraphPath) (instance ?ARC GraphArc) (graphPart ?ARC ?GRAPH)) (=> (equal (InitialNodeFn ?ARC) ?NODE) (not (exists (?OTHER) (and (instance ?OTHER GraphArc) (equal (InitialNodeFn ?OTHER) ?NODE) (not (equal ?OTHER ?ARC)))))))))

(forall (?GRAPH ?ARC ?NODE) (=> (and (instance ?GRAPH Graph) (instance ?NODE GraphNode)) (=> (and (instance ?GRAPH GraphPath) (instance ?ARC GraphArc) (graphPart ?ARC ?GRAPH)) (=> (equal (TerminalNodeFn ?ARC) ?NODE) (not (exists (?OTHER) (and (instance ?OTHER GraphArc) (equal (TerminalNodeFn ?OTHER) ?NODE) (not (equal ?OTHER ?ARC)))))))))

(forall (?GRAPH ?ARC) (=> (instance ?GRAPH Graph) (=> (and (instance ?GRAPH DirectedGraph) (instance ?ARC GraphArc) (graphPart ?ARC ?GRAPH)) (exists (?NODE1 ?NODE2) (and (instance ?NODE1 GraphNode) (instance ?NODE2 GraphNode) (equal (InitialNodeFn ?ARC) ?NODE1) (equal (TerminalNodeFn ?ARC) ?NODE2))))))

(forall (?GRAPH ?NODE1 ?NODE2) (=> (and (instance ?GRAPH Graph) (instance ?NODE1 GraphNode) (instance ?NODE2 GraphNode) (graphPart ?NODE1 ?GRAPH) (graphPart ?NODE2 ?GRAPH) (not (equal ?NODE1 ?NODE2))) (exists (?ARC ?PATH) (and (instance ?ARC GraphArc) (or (links ?NODE1 ?NODE2 ?ARC) (and (subGraph ?PATH ?GRAPH) (instance ?PATH GraphPath) (or (and (equal (BeginNodeFn ?PATH) ?NODE1) (equal (EndNodeFn ?PATH) ?NODE2)) (and (equal (BeginNodeFn ?PATH) ?NODE2) (equal (EndNodeFn ?PATH) ?NODE1)))))))))

(forall (?GRAPH ?NUMBER1 ?NUMBER2) (=> (and (instance ?GRAPH Graph) (instance ?NUMBER1 PositiveInteger) (instance ?NUMBER2 PositiveInteger)) (not (exists (?PATH1 ?PATH2) (and (instance ?PATH1 GraphPath) (instance ?PATH2 GraphPath) (instance ?PATH1 (CutSetFn ?GRAPH)) (instance ?PATH2 (MinimalCutSetFn ?GRAPH)) (pathLength ?PATH1 ?NUMBER1) (pathLength ?PATH2 ?NUMBER2) (lessThan ?NUMBER1 ?NUMBER2))))))

(forall (?GRAPH ?PATHCLASS) (=> (and (instance ?GRAPH Graph) (instance ?PATHCLASS SetOrClass) (subclass ?PATHCLASS GraphPath)) (=> (equal (MinimalCutSetFn ?GRAPH) ?PATHCLASS) (exists (?NUMBER) (and (instance ?NUMBER PositiveInteger) (forall (?PATH) (=> (instance ?PATH GraphPath) (=> (instance ?PATH ?PATHCLASS) (pathLength ?PATH ?NUMBER)))))))))

(forall (?GRAPH) (=> (instance ?GRAPH Graph) (<=> (instance ?GRAPH MultiGraph) (exists (?ARC1 ?ARC2 ?NODE1 ?NODE2) (and (instance ?ARC1 GraphArc) (instance ?ARC2 GraphArc) (instance ?NODE1 GraphNode) (instance ?NODE2 GraphNode) (graphPart ?ARC1 ?GRAPH) (graphPart ?ARC2 ?GRAPH) (graphPart ?NODE1 ?GRAPH) (graphPart ?NODE2 ?GRAPH) (links ?NODE1 ?NODE2 ?ARC1) (links ?NODE1 ?NODE2 ?ARC2) (not (equal ?ARC1 ?ARC2)))))))

(forall (?GRAPH) (=> (instance ?GRAPH Graph) (<=> (instance ?GRAPH PseudoGraph) (exists (?LOOP) (and (instance ?LOOP GraphElement) (instance ?LOOP GraphLoop) (graphPart ?LOOP ?GRAPH))))))

(forall (?GRAPH) (=> (instance ?GRAPH Graph) (=> (instance ?GRAPH Tree) (not (exists (?LOOP) (and (instance ?LOOP GraphElement) (instance ?LOOP GraphLoop) (graphPart ?LOOP ?GRAPH)))))))

(forall (?GRAPH) (=> (instance ?GRAPH Graph) (exists (?NODE1 ?NODE2 ?NODE3 ?ARC1 ?ARC2) (and (instance ?NODE1 GraphNode) (instance ?NODE2 GraphNode) (instance ?NODE3 GraphNode) (instance ?ARC1 GraphArc) (instance ?ARC2 GraphArc) (graphPart ?NODE1 ?GRAPH) (graphPart ?NODE2 ?GRAPH) (graphPart ?NODE3 ?GRAPH) (graphPart ?ARC1 ?GRAPH) (graphPart ?ARC2 ?GRAPH) (links ?NODE1 ?NODE2 ?ARC1) (links ?NODE2 ?NODE3 ?ARC2) (not (equal ?NODE1 ?NODE2)) (not (equal ?NODE2 ?NODE3)) (not (equal ?NODE1 ?NODE3)) (not (equal ?ARC1 ?ARC2))))))

(forall (?GRAPH) (=> (instance ?GRAPH Graph) (subclass (MinimalCutSetFn ?GRAPH) (CutSetFn ?GRAPH))))

(forall (?GRAPH) (=> (instance ?GRAPH GraphPath) (<=> (instance ?GRAPH GraphCircuit) (exists (?NODE) (and (instance ?NODE GraphNode) (equal (BeginNodeFn ?GRAPH) ?NODE) (equal (EndNodeFn ?GRAPH) ?NODE))))))

(forall (?GRAPH1 ?GRAPH2 ?ELEMENT) (=> (and (instance ?GRAPH1 Graph) (instance ?GRAPH2 Graph) (instance ?ELEMENT GraphElement)) (=> (and (subGraph ?GRAPH1 ?GRAPH2) (graphPart ?ELEMENT ?GRAPH1)) (graphPart ?ELEMENT ?GRAPH2))))

(forall (?GROUP ?MEMB) (=> (and (instance ?GROUP Collection) (instance ?MEMB SelfConnectedObject)) (=> (and (instance ?GROUP Group) (member ?MEMB ?GROUP)) (instance ?MEMB Agent))))

(forall (?GROUP ?MEMBER) (=> (and (instance ?GROUP Collection) (instance ?MEMBER SelfConnectedObject)) (=> (and (instance ?GROUP GroupOfPeople) (member ?MEMBER ?GROUP)) (instance ?MEMBER Human))))

(forall (?GROUP) (=> (instance ?GROUP Collection) (=> (instance ?GROUP AgeGroup) (forall (?MEMB1 ?MEMB2 ?AGE1 ?AGE2) (=> (and (instance ?MEMB1 SelfConnectedObject) (instance ?MEMB2 SelfConnectedObject) (instance ?AGE1 TimeDuration) (instance ?AGE2 TimeDuration)) (=> (and (member ?MEMB1 ?GROUP) (member ?MEMB2 ?GROUP) (age ?MEMB1 ?AGE1) (age ?MEMB2 ?AGE2)) (equal ?AGE1 ?AGE2)))))))

(forall (?GROUP) (=> (instance ?GROUP Collection) (=> (instance ?GROUP BeliefGroup) (exists (?BELIEF) (and (instance ?BELIEF Formula) (forall (?MEMB) (=> (and (instance ?MEMB SelfConnectedObject) (instance ?MEMB CognitiveAgent)) (=> (member ?MEMB ?GROUP) (believes ?MEMB ?BELIEF)))))))))

(forall (?GROUP) (=> (instance ?GROUP Collection) (=> (instance ?GROUP FamilyGroup) (forall (?MEMB1 ?MEMB2) (=> (and (instance ?MEMB1 Organism) (instance ?MEMB2 Organism)) (=> (and (member ?MEMB1 ?GROUP) (member ?MEMB2 ?GROUP)) (familyRelation ?MEMB1 ?MEMB2)))))))

(forall (?HEAR ?OBJ) (=> (and (instance ?HEAR Process) (instance ?OBJ Object)) (=> (and (instance ?HEAR Hearing) (patient ?HEAR ?OBJ)) (exists (?ATTR) (and (instance ?ATTR Attribute) (instance ?ATTR SoundAttribute) (attribute ?OBJ ?ATTR))))))

(forall (?HEAT ?OBJ) (=> (and (instance ?HEAT Process) (instance ?OBJ RealNumber)) (=> (and (instance ?HEAT Heating) (patient ?HEAT ?OBJ)) (exists (?UNIT ?QUANT1 ?QUANT2) (and (instance ?UNIT UnitOfMeasure) (instance ?QUANT1 ConstantQuantity) (instance ?QUANT2 ConstantQuantity) (instance ?UNIT TemperatureMeasure) (holdsDuring (BeginFn (WhenFn ?HEAT)) `(equal (MeasureFn ?OBJ ?UNIT) ?QUANT1)) (holdsDuring (EndFn (WhenFn ?HEAT)) `(equal (MeasureFn ?OBJ ?UNIT) ?QUANT2)) (greaterThan ?QUANT2 ?QUANT1))))))

(forall (?HIRE ?ORG ?PERSON) (=> (and (instance ?HIRE Process) (instance ?PERSON CognitiveAgent)) (=> (and (instance ?HIRE Hiring) (instance ?ORG Organization) (agent ?HIRE ?ORG) (patient ?HIRE ?PERSON)) (and (holdsDuring (BeginFn (WhenFn ?HIRE)) `(not (employs ?ORG ?PERSON))) (holdsDuring (EndFn (WhenFn ?HIRE)) `(employs ?ORG ?PERSON))))))

(forall (?HOLE ?OBJ) (=> (and (instance ?HOLE Hole) (instance ?OBJ SelfConnectedObject)) (=> (hole ?HOLE ?OBJ) (connected ?HOLE ?OBJ))))

(forall (?HOLE ?OBJ) (=> (and (instance ?HOLE Hole) (instance ?OBJ SelfConnectedObject)) (=> (hole ?HOLE ?OBJ) (not (instance ?OBJ Hole)))))

(forall (?HOLE ?OBJ) (=> (and (instance ?HOLE Hole) (instance ?OBJ SelfConnectedObject)) (=> (hole ?HOLE ?OBJ) (not (overlapsSpatially ?HOLE ?OBJ)))))

(forall (?HOLE ?OBJ1 ?OBJ2) (=> (and (instance ?HOLE Hole) (instance ?OBJ1 SelfConnectedObject) (instance ?OBJ2 SelfConnectedObject)) (=> (and (hole ?HOLE ?OBJ1) (hole ?HOLE ?OBJ2)) (exists (?OBJ3) (and (instance ?OBJ3 SelfConnectedObject) (properPart ?OBJ3 (MereologicalProductFn ?OBJ1 ?OBJ2)) (hole ?HOLE ?OBJ3))))))

(forall (?HOLE ?OBJ1 ?OBJ2) (=> (and (instance ?HOLE Hole) (instance ?OBJ1 SelfConnectedObject) (instance ?OBJ2 SelfConnectedObject)) (=> (and (hole ?HOLE ?OBJ1) (part ?OBJ1 ?OBJ2)) (or (overlapsSpatially ?HOLE ?OBJ2) (hole ?HOLE ?OBJ2)))))

(forall (?HOLE) (<=> (instance ?HOLE Hole) (exists (?OBJ) (and (instance ?OBJ SelfConnectedObject) (hole ?HOLE ?OBJ)))))

(forall (?HOLE1 ?HOLE2) (=> (and (instance ?HOLE1 Object) (instance ?HOLE2 Object)) (=> (and (instance ?HOLE1 Hole) (properPart ?HOLE2 ?HOLE1)) (exists (?OBJ) (and (instance ?OBJ Object) (meetsSpatially ?HOLE1 ?OBJ) (not (meetsSpatially ?HOLE2 ?OBJ)))))))

(forall (?HOLE1 ?OBJ ?HOLE2) (=> (and (instance ?HOLE1 Hole) (instance ?OBJ SelfConnectedObject) (instance ?HOLE2 Hole)) (=> (and (hole ?HOLE1 ?OBJ) (hole ?HOLE2 ?OBJ)) (forall (?HOLE3) (=> (instance ?HOLE3 Hole) (=> (part ?HOLE3 (MereologicalSumFn ?HOLE1 ?HOLE2)) (hole ?HOLE3 ?OBJ)))))))

(forall (?HOLE1 ?OBJ1 ?HOLE2 ?OBJ2) (=> (and (instance ?HOLE1 Hole) (instance ?OBJ1 SelfConnectedObject) (instance ?HOLE2 Hole) (instance ?OBJ2 SelfConnectedObject)) (=> (and (hole ?HOLE1 ?OBJ1) (hole ?HOLE2 ?OBJ2) (overlapsSpatially ?HOLE1 ?HOLE2)) (overlapsSpatially ?OBJ1 ?OBJ2))))

(forall (?HOLE1) (=> (instance ?HOLE1 Object) (<=> (attribute ?HOLE1 Fillable) (exists (?HOLE2) (and (instance ?HOLE2 Object) (instance ?HOLE2 Hole) (part ?HOLE1 ?HOLE2))))))

(forall (?HOLE1) (=> (instance ?HOLE1 Object) (=> (instance ?HOLE1 Hole) (exists (?HOLE2) (and (instance ?HOLE2 Object) (properPart ?HOLE2 ?HOLE1))))))

(forall (?HORMONE) (=> (instance ?HORMONE Hormone) (exists (?PROCESS ?GLAND) (and (instance ?PROCESS Process) (instance ?GLAND Object) (instance ?GLAND Gland) (instrument ?PROCESS ?GLAND) (result ?PROCESS ?HORMONE)))))

(forall (?HOUR ?NUMBER ?DAY) (=> (and (instance ?HOUR Hour) (instance ?NUMBER PositiveRealNumber) (subclass ?DAY Day)) (=> (instance ?HOUR (HourFn ?NUMBER ?DAY)) (lessThan ?NUMBER 24))))

(forall (?HOUR) (=> (instance ?HOUR TimeInterval) (=> (instance ?HOUR Hour) (duration ?HOUR (MeasureFn 1 HourDuration)))))

(forall (?HOUR) (=> (instance ?HOUR TimeInterval) (=> (instance ?HOUR Hour) (equal (CardinalityFn (TemporalCompositionFn ?HOUR Minute)) 60))))

(forall (?HOUR1 ?NUMBER1 ?DAY ?HOUR2 ?NUMBER2) (=> (and (instance ?HOUR1 Hour) (instance ?NUMBER1 PositiveRealNumber) (subclass ?DAY Day) (instance ?HOUR2 Hour) (instance ?NUMBER2 PositiveRealNumber)) (=> (and (instance ?HOUR1 (HourFn ?NUMBER1 ?DAY)) (instance ?HOUR2 (HourFn ?NUMBER2 ?DAY)) (equal (SubtractionFn ?NUMBER2 ?NUMBER1) 1)) (meetsTemporally ?HOUR1 ?HOUR2))))

(forall (?IMPACT ?OBJ) (=> (instance ?IMPACT Process) (=> (and (instance ?IMPACT Impacting) (patient ?IMPACT ?OBJ)) (exists (?IMPEL) (and (instance ?IMPEL Process) (instance ?IMPEL Impelling) (patient ?IMPEL ?OBJ) (earlier (WhenFn ?IMPEL) (WhenFn ?IMPACT)))))))

(forall (?INCREASE ?OBJ) (=> (and (instance ?INCREASE Process) (instance ?OBJ RealNumber)) (=> (and (instance ?INCREASE Increasing) (patient ?INCREASE ?OBJ)) (exists (?UNIT ?QUANT1 ?QUANT2) (and (instance ?UNIT UnitOfMeasure) (instance ?QUANT1 ConstantQuantity) (instance ?QUANT2 ConstantQuantity) (holdsDuring (BeginFn (WhenFn ?INCREASE)) `(equal (MeasureFn ?OBJ ?UNIT) ?QUANT1)) (holdsDuring (EndFn (WhenFn ?INCREASE)) `(equal (MeasureFn ?OBJ ?UNIT) ?QUANT2)) (greaterThan ?QUANT2 ?QUANT1))))))

(forall (?INJ) (=> (instance ?INJ Process) (<=> (instance ?INJ Injuring) (and (instance ?INJ Damaging) (exists (?ORGANISM) (and (instance ?ORGANISM Organism) (patient ?INJ ?ORGANISM)))))))

(forall (?INJ) (=> (instance ?INJ Process) (=> (instance ?INJ Injuring) (exists (?STRUCT) (and (instance ?STRUCT AnatomicalStructure) (patient ?INJ ?STRUCT))))))

(forall (?INJECT) (=> (instance ?INJECT Process) (=> (instance ?INJECT Injecting) (exists (?SUBSTANCE ?ANIMAL) (and (instance ?SUBSTANCE Object) (patient ?INJECT ?SUBSTANCE) (instance ?SUBSTANCE BiologicallyActiveSubstance) (attribute ?SUBSTANCE Liquid) (destination ?INJECT ?ANIMAL) (instance ?ANIMAL Animal))))))

(forall (?INSERT ?OBJ1 ?OBJ2) (=> (and (instance ?INSERT Process) (instance ?OBJ1 Object) (instance ?OBJ2 SelfConnectedObject)) (=> (and (instance ?INSERT Inserting) (patient ?INSERT ?OBJ1) (destination ?INSERT ?OBJ2)) (and (holdsDuring (BeginFn (WhenFn ?INSERT)) `(not (contains ?OBJ2 ?OBJ1))) (holdsDuring (EndFn (WhenFn ?INSERT)) `(contains ?OBJ2 ?OBJ1))))))

(forall (?INST) (=> (and (instance ?INST Agent) (subclass ?INST Process)) (not (hasSkill ?INST ?INST))))

(forall (?INST) (=> (and (instance ?INST Agent) (subclass ?INST Text)) (not (authors ?INST ?INST))))

(forall (?INST) (=> (and (instance ?INST Agent) (subclass ?INST Text)) (not (editor ?INST ?INST))))

(forall (?INST) (=> (and (instance ?INST BinaryRelation) (instance ?INST SetOrClass)) (not (equivalenceRelationOn ?INST ?INST))))

(forall (?INST) (=> (and (instance ?INST BinaryRelation) (instance ?INST SetOrClass)) (not (irreflexiveOn ?INST ?INST))))

(forall (?INST) (=> (and (instance ?INST BinaryRelation) (instance ?INST SetOrClass)) (not (partialOrderingOn ?INST ?INST))))

(forall (?INST) (=> (and (instance ?INST BinaryRelation) (instance ?INST SetOrClass)) (not (reflexiveOn ?INST ?INST))))

(forall (?INST) (=> (and (instance ?INST BinaryRelation) (instance ?INST SetOrClass)) (not (totalOrderingOn ?INST ?INST))))

(forall (?INST) (=> (and (instance ?INST BinaryRelation) (instance ?INST SetOrClass)) (not (trichotomizingOn ?INST ?INST))))

(forall (?INST) (=> (and (instance ?INST CognitiveAgent) (instance ?INST Formula)) (not (believes ?INST ?INST))))

(forall (?INST) (=> (and (instance ?INST CognitiveAgent) (instance ?INST Formula)) (not (considers ?INST ?INST))))

(forall (?INST) (=> (and (instance ?INST CognitiveAgent) (instance ?INST Formula)) (not (desires ?INST ?INST))))

(forall (?INST) (=> (and (instance ?INST CognitiveAgent) (instance ?INST Formula)) (not (knows ?INST ?INST))))

(forall (?INST) (=> (and (instance ?INST ContentBearingPhysical) (instance ?INST Proposition)) (not (containsInformation ?INST ?INST))))

(forall (?INST) (=> (and (instance ?INST Formula) (instance ?INST CognitiveAgent)) (not (holdsObligation ?INST ?INST))))

(forall (?INST) (=> (and (instance ?INST Formula) (instance ?INST CognitiveAgent)) (not (holdsRight ?INST ?INST))))

(forall (?INST) (=> (and (instance ?INST Formula) (instance ?INST NormativeAttribute)) (not (modalAttribute ?INST ?INST))))

(forall (?INST) (=> (and (instance ?INST Function) (instance ?INST SetOrClass)) (not (closedOn ?INST ?INST))))

(forall (?INST) (=> (and (instance ?INST Function) (instance ?INST SetOrClass)) (not (range ?INST ?INST))))

(forall (?INST) (=> (and (instance ?INST Function) (subclass ?INST SetOrClass)) (not (rangeSubclass ?INST ?INST))))

(forall (?INST) (=> (and (instance ?INST GraphElement) (instance ?INST Graph)) (not (graphPart ?INST ?INST))))

(forall (?INST) (=> (and (instance ?INST GraphPath) (instance ?INST PositiveInteger)) (not (pathLength ?INST ?INST))))

(forall (?INST) (=> (and (instance ?INST Hole) (instance ?INST SelfConnectedObject)) (not (hole ?INST ?INST))))

(forall (?INST) (=> (and (instance ?INST Human) (instance ?INST Nation)) (not (citizen ?INST ?INST))))

(forall (?INST) (=> (and (instance ?INST Man) (instance ?INST Woman)) (not (husband ?INST ?INST))))

(forall (?INST) (=> (and (instance ?INST Motion) (instance ?INST Object)) (not (path ?INST ?INST))))

(forall (?INST) (=> (and (instance ?INST Object) (instance ?INST Attribute)) (not (attribute ?INST ?INST))))

(forall (?INST) (=> (and (instance ?INST Object) (instance ?INST PhysicalQuantity)) (not (measure ?INST ?INST))))

(forall (?INST) (=> (and (instance ?INST OrganicObject) (instance ?INST DevelopmentalAttribute)) (not (developmentalForm ?INST ?INST))))

(forall (?INST) (=> (and (instance ?INST Organization) (subclass ?INST Text)) (not (publishes ?INST ?INST))))

(forall (?INST) (=> (and (instance ?INST Physical) (instance ?INST Day)) (not (date ?INST ?INST))))

(forall (?INST) (=> (and (instance ?INST Physical) (instance ?INST TimePosition)) (not (time ?INST ?INST))))

(forall (?INST) (=> (and (instance ?INST Process) (instance ?INST Agent)) (not (agent ?INST ?INST))))

(forall (?INST) (=> (and (instance ?INST Process) (instance ?INST Agent)) (not (experiencer ?INST ?INST))))

(forall (?INST) (=> (and (instance ?INST Process) (instance ?INST Attribute)) (not (manner ?INST ?INST))))

(forall (?INST) (=> (and (instance ?INST Process) (instance ?INST DirectionalAttribute)) (not (direction ?INST ?INST))))

(forall (?INST) (=> (and (instance ?INST Process) (instance ?INST Object)) (not (origin ?INST ?INST))))

(forall (?INST) (=> (and (instance ?INST Process) (instance ?INST Proposition)) (not (realization ?INST ?INST))))

(forall (?INST) (=> (and (instance ?INST Relation) (instance ?INST PositiveInteger)) (not (valence ?INST ?INST))))

(forall (?INST) (=> (and (instance ?INST SelfConnectedObject) (instance ?INST Collection)) (not (member ?INST ?INST))))

(forall (?INST) (=> (and (instance ?INST TimeDuration) (subclass ?INST Process)) (not (frequency ?INST ?INST))))

(forall (?INST) (=> (and (instance ?INST TimeInterval) (instance ?INST TimeDuration)) (not (duration ?INST ?INST))))

(forall (?INST) (=> (and (instance ?INST TimePosition) (instance ?INST Formula)) (not (holdsDuring ?INST ?INST))))

(forall (?INST) (=> (and (instance ?INST Woman) (instance ?INST Man)) (not (wife ?INST ?INST))))

(forall (?INST) (=> (instance ?INST Agent) (not (exploits ?INST ?INST))))

(forall (?INST) (=> (instance ?INST Agent) (not (possesses ?INST ?INST))))

(forall (?INST) (=> (instance ?INST Agent) (not (uses ?INST ?INST))))

(forall (?INST) (=> (instance ?INST Attribute) (not (successorAttribute ?INST ?INST))))

(forall (?INST) (=> (instance ?INST Attribute) (not (successorAttributeClosure ?INST ?INST))))

(forall (?INST) (=> (instance ?INST BinaryFunction) (not (identityElement ?INST ?INST))))

(forall (?INST) (=> (instance ?INST BinaryRelation) (not (inverse ?INST ?INST))))

(forall (?INST) (=> (instance ?INST EngineeringComponent) (not (connectedEngineeringComponents ?INST ?INST))))

(forall (?INST) (=> (instance ?INST Formula) (not (causesProposition ?INST ?INST))))

(forall (?INST) (=> (instance ?INST Formula) (not (decreasesLikelihood ?INST ?INST))))

(forall (?INST) (=> (instance ?INST Formula) (not (hasPurpose ?INST ?INST))))

(forall (?INST) (=> (instance ?INST Formula) (not (increasesLikelihood ?INST ?INST))))

(forall (?INST) (=> (instance ?INST GeographicArea) (not (geographicSubregion ?INST ?INST))))

(forall (?INST) (=> (instance ?INST GeopoliticalArea) (not (geopoliticalSubdivision ?INST ?INST))))

(forall (?INST) (=> (instance ?INST Hole) (not (fills ?INST ?INST))))

(forall (?INST) (=> (instance ?INST Hole) (not (partiallyFills ?INST ?INST))))

(forall (?INST) (=> (instance ?INST Hole) (not (properlyFills ?INST ?INST))))

(forall (?INST) (=> (instance ?INST Human) (not (leader ?INST ?INST))))

(forall (?INST) (=> (instance ?INST Human) (not (spouse ?INST ?INST))))

(forall (?INST) (=> (instance ?INST Language) (not (expressedInLanguage ?INST ?INST))))

(forall (?INST) (=> (instance ?INST List) (not (inList ?INST ?INST))))

(forall (?INST) (=> (instance ?INST Man) (not (brother ?INST ?INST))))

(forall (?INST) (=> (instance ?INST Object) (not (completelyFills ?INST ?INST))))

(forall (?INST) (=> (instance ?INST Object) (not (crosses ?INST ?INST))))

(forall (?INST) (=> (instance ?INST Object) (not (interiorPart ?INST ?INST))))

(forall (?INST) (=> (instance ?INST Object) (not (larger ?INST ?INST))))

(forall (?INST) (=> (instance ?INST Object) (not (meetsSpatially ?INST ?INST))))

(forall (?INST) (=> (instance ?INST Object) (not (overlapsPartially ?INST ?INST))))

(forall (?INST) (=> (instance ?INST Object) (not (penetrates ?INST ?INST))))

(forall (?INST) (=> (instance ?INST Object) (not (properPart ?INST ?INST))))

(forall (?INST) (=> (instance ?INST Object) (not (smaller ?INST ?INST))))

(forall (?INST) (=> (instance ?INST Object) (not (superficialPart ?INST ?INST))))

(forall (?INST) (=> (instance ?INST Organism) (not (ancestor ?INST ?INST))))

(forall (?INST) (=> (instance ?INST Organism) (not (inhabits ?INST ?INST))))

(forall (?INST) (=> (instance ?INST Organism) (not (parent ?INST ?INST))))

(forall (?INST) (=> (instance ?INST Organism) (not (sibling ?INST ?INST))))

(forall (?INST) (=> (instance ?INST Plan) (not (subPlan ?INST ?INST))))

(forall (?INST) (=> (instance ?INST Process) (not (causes ?INST ?INST))))

(forall (?INST) (=> (instance ?INST Process) (not (destination ?INST ?INST))))

(forall (?INST) (=> (instance ?INST Process) (not (patient ?INST ?INST))))

(forall (?INST) (=> (instance ?INST Proposition) (not (subProposition ?INST ?INST))))

(forall (?INST) (=> (instance ?INST Quantity) (not (greaterThan ?INST ?INST))))

(forall (?INST) (=> (instance ?INST Quantity) (not (lessThan ?INST ?INST))))

(forall (?INST) (=> (instance ?INST Relation) (not (disjointRelation ?INST ?INST))))

(forall (?INST) (=> (instance ?INST SelfConnectedObject) (not (contains ?INST ?INST))))

(forall (?INST) (=> (instance ?INST SelfConnectedObject) (not (surface ?INST ?INST))))

(forall (?INST) (=> (instance ?INST Set) (not (element ?INST ?INST))))

(forall (?INST) (=> (instance ?INST SetOrClass) (not (immediateInstance ?INST ?INST))))

(forall (?INST) (=> (instance ?INST SetOrClass) (not (immediateSubclass ?INST ?INST))))

(forall (?INST) (=> (instance ?INST SymbolicString) (not (documentation ?INST ?INST))))

(forall (?INST) (=> (instance ?INST TimeInterval) (not (during ?INST ?INST))))

(forall (?INST) (=> (instance ?INST TimeInterval) (not (earlier ?INST ?INST))))

(forall (?INST) (=> (instance ?INST TimeInterval) (not (finishes ?INST ?INST))))

(forall (?INST) (=> (instance ?INST TimeInterval) (not (meetsTemporally ?INST ?INST))))

(forall (?INST) (=> (instance ?INST TimeInterval) (not (starts ?INST ?INST))))

(forall (?INST) (=> (instance ?INST TimePoint) (not (before ?INST ?INST))))

(forall (?INST) (=> (instance ?INST Woman) (not (sister ?INST ?INST))))

(forall (?INST) (=> (subclass ?INST Artifact) (not (version ?INST ?INST))))

(forall (?INST) (=> (subclass ?INST Process) (not (causesSubclass ?INST ?INST))))

(forall (?INST) (=> (subclass ?INST Process) (not (inhibits ?INST ?INST))))

(forall (?INST) (=> (subclass ?INST Process) (not (precondition ?INST ?INST))))

(forall (?INST) (=> (subclass ?INST Process) (not (prevents ?INST ?INST))))

(forall (?INST1 ?INST2 ?INST3) (=> (and (equal ?INST1 ?INST2) (equal ?INST2 ?INST3)) (equal ?INST1 ?INST3)))

(forall (?INST1 ?INST2 ?INST3) (=> (and (instance ?INST1 Attribute) (instance ?INST2 Attribute) (instance ?INST3 Attribute)) (=> (and (subAttribute ?INST1 ?INST2) (subAttribute ?INST2 ?INST3)) (subAttribute ?INST1 ?INST3))))

(forall (?INST1 ?INST2 ?INST3) (=> (and (instance ?INST1 Attribute) (instance ?INST2 Attribute) (instance ?INST3 Attribute)) (=> (and (successorAttributeClosure ?INST1 ?INST2) (successorAttributeClosure ?INST2 ?INST3)) (successorAttributeClosure ?INST1 ?INST3))))

(forall (?INST1 ?INST2 ?INST3) (=> (and (instance ?INST1 BinaryRelation) (instance ?INST2 BinaryRelation) (instance ?INST3 BinaryRelation)) (=> (and (inverse ?INST1 ?INST2) (inverse ?INST2 ?INST3)) (not (inverse ?INST1 ?INST3)))))

(forall (?INST1 ?INST2 ?INST3) (=> (and (instance ?INST1 Collection) (instance ?INST2 Collection) (instance ?INST3 Collection)) (=> (and (subCollection ?INST1 ?INST2) (subCollection ?INST2 ?INST3)) (subCollection ?INST1 ?INST3))))

(forall (?INST1 ?INST2 ?INST3) (=> (and (instance ?INST1 ContentBearingObject) (instance ?INST2 ContentBearingObject) (instance ?INST3 ContentBearingObject)) (=> (and (equivalentContentInstance ?INST1 ?INST2) (equivalentContentInstance ?INST2 ?INST3)) (equivalentContentInstance ?INST1 ?INST3))))

(forall (?INST1 ?INST2 ?INST3) (=> (and (instance ?INST1 ContentBearingObject) (instance ?INST2 ContentBearingObject) (instance ?INST3 ContentBearingObject)) (=> (and (subsumesContentInstance ?INST1 ?INST2) (subsumesContentInstance ?INST2 ?INST3)) (subsumesContentInstance ?INST1 ?INST3))))

(forall (?INST1 ?INST2 ?INST3) (=> (and (instance ?INST1 GeographicArea) (instance ?INST2 GeographicArea) (instance ?INST3 GeographicArea)) (=> (and (geographicSubregion ?INST1 ?INST2) (geographicSubregion ?INST2 ?INST3)) (geographicSubregion ?INST1 ?INST3))))

(forall (?INST1 ?INST2 ?INST3) (=> (and (instance ?INST1 GeometricFigure) (instance ?INST2 GeometricFigure) (instance ?INST3 GeometricFigure)) (=> (and (geometricPart ?INST1 ?INST2) (geometricPart ?INST2 ?INST3)) (geometricPart ?INST1 ?INST3))))

(forall (?INST1 ?INST2 ?INST3) (=> (and (instance ?INST1 GeopoliticalArea) (instance ?INST2 GeopoliticalArea) (instance ?INST3 GeopoliticalArea)) (=> (and (geopoliticalSubdivision ?INST1 ?INST2) (geopoliticalSubdivision ?INST2 ?INST3)) (geopoliticalSubdivision ?INST1 ?INST3))))

(forall (?INST1 ?INST2 ?INST3) (=> (and (instance ?INST1 Graph) (instance ?INST2 Graph) (instance ?INST3 Graph)) (=> (and (subGraph ?INST1 ?INST2) (subGraph ?INST2 ?INST3)) (subGraph ?INST1 ?INST3))))

(forall (?INST1 ?INST2 ?INST3) (=> (and (instance ?INST1 List) (instance ?INST2 List) (instance ?INST3 List)) (=> (and (identicalListItems ?INST1 ?INST2) (identicalListItems ?INST2 ?INST3)) (identicalListItems ?INST1 ?INST3))))

(forall (?INST1 ?INST2 ?INST3) (=> (and (instance ?INST1 List) (instance ?INST2 List) (instance ?INST3 List)) (=> (and (initialList ?INST1 ?INST2) (initialList ?INST2 ?INST3)) (initialList ?INST1 ?INST3))))

(forall (?INST1 ?INST2 ?INST3) (=> (and (instance ?INST1 List) (instance ?INST2 List) (instance ?INST3 List)) (=> (and (subList ?INST1 ?INST2) (subList ?INST2 ?INST3)) (subList ?INST1 ?INST3))))

(forall (?INST1 ?INST2 ?INST3) (=> (and (instance ?INST1 Man) (instance ?INST2 Man) (instance ?INST3 Human)) (=> (and (brother ?INST1 ?INST2) (brother ?INST2 ?INST3)) (brother ?INST1 ?INST3))))

(forall (?INST1 ?INST2 ?INST3) (=> (and (instance ?INST1 Object) (instance ?INST2 Object) (instance ?INST3 Object)) (=> (and (copy ?INST1 ?INST2) (copy ?INST2 ?INST3)) (copy ?INST1 ?INST3))))

(forall (?INST1 ?INST2 ?INST3) (=> (and (instance ?INST1 Object) (instance ?INST2 Object) (instance ?INST3 Object)) (=> (and (crosses ?INST1 ?INST2) (crosses ?INST2 ?INST3)) (crosses ?INST1 ?INST3))))

(forall (?INST1 ?INST2 ?INST3) (=> (and (instance ?INST1 Object) (instance ?INST2 Object) (instance ?INST3 Object)) (=> (and (interiorPart ?INST1 ?INST2) (interiorPart ?INST2 ?INST3)) (interiorPart ?INST1 ?INST3))))

(forall (?INST1 ?INST2 ?INST3) (=> (and (instance ?INST1 Object) (instance ?INST2 Object) (instance ?INST3 Object)) (=> (and (larger ?INST1 ?INST2) (larger ?INST2 ?INST3)) (larger ?INST1 ?INST3))))

(forall (?INST1 ?INST2 ?INST3) (=> (and (instance ?INST1 Object) (instance ?INST2 Object) (instance ?INST3 Object)) (=> (and (part ?INST1 ?INST2) (part ?INST2 ?INST3)) (part ?INST1 ?INST3))))

(forall (?INST1 ?INST2 ?INST3) (=> (and (instance ?INST1 Object) (instance ?INST2 Object) (instance ?INST3 Object)) (=> (and (penetrates ?INST1 ?INST2) (penetrates ?INST2 ?INST3)) (not (penetrates ?INST1 ?INST3)))))

(forall (?INST1 ?INST2 ?INST3) (=> (and (instance ?INST1 Object) (instance ?INST2 Object) (instance ?INST3 Object)) (=> (and (properPart ?INST1 ?INST2) (properPart ?INST2 ?INST3)) (properPart ?INST1 ?INST3))))

(forall (?INST1 ?INST2 ?INST3) (=> (and (instance ?INST1 Object) (instance ?INST2 Object) (instance ?INST3 Object)) (=> (and (smaller ?INST1 ?INST2) (smaller ?INST2 ?INST3)) (smaller ?INST1 ?INST3))))

(forall (?INST1 ?INST2 ?INST3) (=> (and (instance ?INST1 Object) (instance ?INST2 Object) (instance ?INST3 Object)) (=> (and (superficialPart ?INST1 ?INST2) (superficialPart ?INST2 ?INST3)) (superficialPart ?INST1 ?INST3))))

(forall (?INST1 ?INST2 ?INST3) (=> (and (instance ?INST1 OrganicObject) (instance ?INST2 DevelopmentalAttribute) (instance ?INST2 OrganicObject) (instance ?INST3 DevelopmentalAttribute)) (=> (and (developmentalForm ?INST1 ?INST2) (developmentalForm ?INST2 ?INST3)) (developmentalForm ?INST1 ?INST3))))

(forall (?INST1 ?INST2 ?INST3) (=> (and (instance ?INST1 Organism) (instance ?INST2 Organism) (instance ?INST3 Organism)) (=> (and (ancestor ?INST1 ?INST2) (ancestor ?INST2 ?INST3)) (ancestor ?INST1 ?INST3))))

(forall (?INST1 ?INST2 ?INST3) (=> (and (instance ?INST1 Organism) (instance ?INST2 Organism) (instance ?INST3 Organism)) (=> (and (familyRelation ?INST1 ?INST2) (familyRelation ?INST2 ?INST3)) (familyRelation ?INST1 ?INST3))))

(forall (?INST1 ?INST2 ?INST3) (=> (and (instance ?INST1 Organism) (instance ?INST2 Organism) (instance ?INST3 Organism)) (=> (and (parent ?INST1 ?INST2) (parent ?INST2 ?INST3)) (not (parent ?INST1 ?INST3)))))

(forall (?INST1 ?INST2 ?INST3) (=> (and (instance ?INST1 Organization) (instance ?INST2 Organization) (instance ?INST3 Organization)) (=> (and (subOrganization ?INST1 ?INST2) (subOrganization ?INST2 ?INST3)) (subOrganization ?INST1 ?INST3))))

(forall (?INST1 ?INST2 ?INST3) (=> (and (instance ?INST1 Physical) (instance ?INST2 Object) (instance ?INST3 Object)) (=> (and (located ?INST1 ?INST2) (located ?INST2 ?INST3)) (located ?INST1 ?INST3))))

(forall (?INST1 ?INST2 ?INST3) (=> (and (instance ?INST1 Physical) (instance ?INST2 Physical) (instance ?INST3 Physical)) (=> (and (cooccur ?INST1 ?INST2) (cooccur ?INST2 ?INST3)) (cooccur ?INST1 ?INST3))))

(forall (?INST1 ?INST2 ?INST3) (=> (and (instance ?INST1 Plan) (instance ?INST2 Plan) (instance ?INST3 Plan)) (=> (and (subPlan ?INST1 ?INST2) (subPlan ?INST2 ?INST3)) (subPlan ?INST1 ?INST3))))

(forall (?INST1 ?INST2 ?INST3) (=> (and (instance ?INST1 Process) (instance ?INST2 Process) (instance ?INST3 Process)) (=> (and (subProcess ?INST1 ?INST2) (subProcess ?INST2 ?INST3)) (subProcess ?INST1 ?INST3))))

(forall (?INST1 ?INST2 ?INST3) (=> (and (instance ?INST1 Proposition) (instance ?INST2 Proposition) (instance ?INST3 Proposition)) (=> (and (subProposition ?INST1 ?INST2) (subProposition ?INST2 ?INST3)) (subProposition ?INST1 ?INST3))))

(forall (?INST1 ?INST2 ?INST3) (=> (and (instance ?INST1 Quantity) (instance ?INST2 Quantity) (instance ?INST3 Quantity)) (=> (and (greaterThan ?INST1 ?INST2) (greaterThan ?INST2 ?INST3)) (greaterThan ?INST1 ?INST3))))

(forall (?INST1 ?INST2 ?INST3) (=> (and (instance ?INST1 Quantity) (instance ?INST2 Quantity) (instance ?INST3 Quantity)) (=> (and (greaterThanOrEqualTo ?INST1 ?INST2) (greaterThanOrEqualTo ?INST2 ?INST3)) (greaterThanOrEqualTo ?INST1 ?INST3))))

(forall (?INST1 ?INST2 ?INST3) (=> (and (instance ?INST1 Quantity) (instance ?INST2 Quantity) (instance ?INST3 Quantity)) (=> (and (lessThan ?INST1 ?INST2) (lessThan ?INST2 ?INST3)) (lessThan ?INST1 ?INST3))))

(forall (?INST1 ?INST2 ?INST3) (=> (and (instance ?INST1 Quantity) (instance ?INST2 Quantity) (instance ?INST3 Quantity)) (=> (and (lessThanOrEqualTo ?INST1 ?INST2) (lessThanOrEqualTo ?INST2 ?INST3)) (lessThanOrEqualTo ?INST1 ?INST3))))

(forall (?INST1 ?INST2 ?INST3) (=> (and (instance ?INST1 Relation) (instance ?INST2 Relation) (instance ?INST3 Relation)) (=> (and (subrelation ?INST1 ?INST2) (subrelation ?INST2 ?INST3)) (subrelation ?INST1 ?INST3))))

(forall (?INST1 ?INST2 ?INST3) (=> (and (instance ?INST1 SelfConnectedObject) (instance ?INST2 Collection) (instance ?INST2 SelfConnectedObject) (instance ?INST3 Collection)) (=> (and (member ?INST1 ?INST2) (member ?INST2 ?INST3)) (not (member ?INST1 ?INST3)))))

(forall (?INST1 ?INST2 ?INST3) (=> (and (instance ?INST1 SetOrClass) (instance ?INST2 SetOrClass) (instance ?INST3 SetOrClass)) (=> (and (immediateSubclass ?INST1 ?INST2) (immediateSubclass ?INST2 ?INST3)) (not (immediateSubclass ?INST1 ?INST3)))))

(forall (?INST1 ?INST2 ?INST3) (=> (and (instance ?INST1 SetOrClass) (instance ?INST2 SetOrClass) (instance ?INST3 SetOrClass)) (=> (and (subclass ?INST1 ?INST2) (subclass ?INST2 ?INST3)) (subclass ?INST1 ?INST3))))

(forall (?INST1 ?INST2 ?INST3) (=> (and (instance ?INST1 TimeInterval) (instance ?INST2 TimeInterval) (instance ?INST3 TimeInterval)) (=> (and (during ?INST1 ?INST2) (during ?INST2 ?INST3)) (during ?INST1 ?INST3))))

(forall (?INST1 ?INST2 ?INST3) (=> (and (instance ?INST1 TimeInterval) (instance ?INST2 TimeInterval) (instance ?INST3 TimeInterval)) (=> (and (earlier ?INST1 ?INST2) (earlier ?INST2 ?INST3)) (earlier ?INST1 ?INST3))))

(forall (?INST1 ?INST2 ?INST3) (=> (and (instance ?INST1 TimeInterval) (instance ?INST2 TimeInterval) (instance ?INST3 TimeInterval)) (=> (and (finishes ?INST1 ?INST2) (finishes ?INST2 ?INST3)) (finishes ?INST1 ?INST3))))

(forall (?INST1 ?INST2 ?INST3) (=> (and (instance ?INST1 TimeInterval) (instance ?INST2 TimeInterval) (instance ?INST3 TimeInterval)) (=> (and (meetsTemporally ?INST1 ?INST2) (meetsTemporally ?INST2 ?INST3)) (not (meetsTemporally ?INST1 ?INST3)))))

(forall (?INST1 ?INST2 ?INST3) (=> (and (instance ?INST1 TimeInterval) (instance ?INST2 TimeInterval) (instance ?INST3 TimeInterval)) (=> (and (starts ?INST1 ?INST2) (starts ?INST2 ?INST3)) (starts ?INST1 ?INST3))))

(forall (?INST1 ?INST2 ?INST3) (=> (and (instance ?INST1 TimePoint) (instance ?INST2 TimePoint) (instance ?INST3 TimePoint)) (=> (and (before ?INST1 ?INST2) (before ?INST2 ?INST3)) (before ?INST1 ?INST3))))

(forall (?INST1 ?INST2 ?INST3) (=> (and (instance ?INST1 TimePoint) (instance ?INST2 TimePoint) (instance ?INST3 TimePoint)) (=> (and (beforeOrEqual ?INST1 ?INST2) (beforeOrEqual ?INST2 ?INST3)) (beforeOrEqual ?INST1 ?INST3))))

(forall (?INST1 ?INST2 ?INST3) (=> (and (instance ?INST1 TimePosition) (instance ?INST2 TimePosition) (instance ?INST3 TimePosition)) (=> (and (temporalPart ?INST1 ?INST2) (temporalPart ?INST2 ?INST3)) (temporalPart ?INST1 ?INST3))))

(forall (?INST1 ?INST2 ?INST3) (=> (and (instance ?INST1 Woman) (instance ?INST2 Woman) (instance ?INST3 Human)) (=> (and (sister ?INST1 ?INST2) (sister ?INST2 ?INST3)) (sister ?INST1 ?INST3))))

(forall (?INST1 ?INST2 ?INST3) (=> (and (instance ?INST2 SetOrClass) (instance ?INST3 SetOrClass)) (=> (and (immediateInstance ?INST1 ?INST2) (immediateInstance ?INST2 ?INST3)) (not (immediateInstance ?INST1 ?INST3)))))

(forall (?INST1 ?INST2 ?INST3) (=> (and (relatedInternalConcept ?INST1 ?INST2) (relatedInternalConcept ?INST2 ?INST3)) (relatedInternalConcept ?INST1 ?INST3)))

(forall (?INST1 ?INST2 ?INST3) (=> (and (subclass ?INST1 Artifact) (subclass ?INST2 Artifact) (subclass ?INST3 Artifact)) (=> (and (version ?INST1 ?INST2) (version ?INST2 ?INST3)) (version ?INST1 ?INST3))))

(forall (?INST1 ?INST2 ?INST3) (=> (and (subclass ?INST1 ContentBearingObject) (subclass ?INST2 ContentBearingObject) (subclass ?INST3 ContentBearingObject)) (=> (and (equivalentContentClass ?INST1 ?INST2) (equivalentContentClass ?INST2 ?INST3)) (equivalentContentClass ?INST1 ?INST3))))

(forall (?INST1 ?INST2 ?INST3) (=> (and (subclass ?INST1 ContentBearingObject) (subclass ?INST2 ContentBearingObject) (subclass ?INST3 ContentBearingObject)) (=> (and (subsumesContentClass ?INST1 ?INST2) (subsumesContentClass ?INST2 ?INST3)) (subsumesContentClass ?INST1 ?INST3))))

(forall (?INST1 ?INST2 ?INST3) (=> (and (subclass ?INST1 Process) (subclass ?INST2 Process) (subclass ?INST3 Process)) (=> (and (precondition ?INST1 ?INST2) (precondition ?INST2 ?INST3)) (precondition ?INST1 ?INST3))))

(forall (?INST1 ?INST2) (=> (and (instance ?INST1 Agent) (instance ?INST2 Agent)) (=> (and (exploits ?INST1 ?INST2) (exploits ?INST2 ?INST1)) (equal ?INST1 ?INST2))))

(forall (?INST1 ?INST2) (=> (and (instance ?INST1 Agent) (instance ?INST2 Agent)) (=> (and (possesses ?INST1 ?INST2) (possesses ?INST2 ?INST1)) (equal ?INST1 ?INST2))))

(forall (?INST1 ?INST2) (=> (and (instance ?INST1 Agent) (instance ?INST2 Agent)) (=> (and (uses ?INST1 ?INST2) (uses ?INST2 ?INST1)) (equal ?INST1 ?INST2))))

(forall (?INST1 ?INST2) (=> (and (instance ?INST1 Agent) (subclass ?INST1 Process) (instance ?INST2 Agent) (subclass ?INST2 Process)) (=> (and (hasSkill ?INST1 ?INST2) (hasSkill ?INST2 ?INST1)) (equal ?INST1 ?INST2))))

(forall (?INST1 ?INST2) (=> (and (instance ?INST1 Agent) (subclass ?INST1 Text) (instance ?INST2 Agent) (subclass ?INST2 Text)) (=> (and (authors ?INST1 ?INST2) (authors ?INST2 ?INST1)) (equal ?INST1 ?INST2))))

(forall (?INST1 ?INST2) (=> (and (instance ?INST1 Agent) (subclass ?INST1 Text) (instance ?INST2 Agent) (subclass ?INST2 Text)) (=> (and (editor ?INST1 ?INST2) (editor ?INST2 ?INST1)) (equal ?INST1 ?INST2))))

(forall (?INST1 ?INST2) (=> (and (instance ?INST1 Attribute) (instance ?INST2 Attribute)) (=> (and (subAttribute ?INST1 ?INST2) (subAttribute ?INST2 ?INST1)) (equal ?INST1 ?INST2))))

(forall (?INST1 ?INST2) (=> (and (instance ?INST1 Attribute) (instance ?INST2 Attribute)) (=> (and (successorAttribute ?INST1 ?INST2) (successorAttribute ?INST2 ?INST1)) (equal ?INST1 ?INST2))))

(forall (?INST1 ?INST2) (=> (and (instance ?INST1 Attribute) (instance ?INST2 Attribute)) (=> (subAttribute ?INST1 ?INST2) (subAttribute ?INST1 ?INST1))))

(forall (?INST1 ?INST2) (=> (and (instance ?INST1 BinaryFunction) (instance ?INST2 BinaryFunction)) (=> (and (identityElement ?INST1 ?INST2) (identityElement ?INST2 ?INST1)) (equal ?INST1 ?INST2))))

(forall (?INST1 ?INST2) (=> (and (instance ?INST1 BinaryRelation) (instance ?INST1 SetOrClass) (instance ?INST2 SetOrClass) (instance ?INST2 BinaryRelation)) (=> (and (equivalenceRelationOn ?INST1 ?INST2) (equivalenceRelationOn ?INST2 ?INST1)) (equal ?INST1 ?INST2))))

(forall (?INST1 ?INST2) (=> (and (instance ?INST1 BinaryRelation) (instance ?INST1 SetOrClass) (instance ?INST2 SetOrClass) (instance ?INST2 BinaryRelation)) (=> (and (irreflexiveOn ?INST1 ?INST2) (irreflexiveOn ?INST2 ?INST1)) (equal ?INST1 ?INST2))))

(forall (?INST1 ?INST2) (=> (and (instance ?INST1 BinaryRelation) (instance ?INST1 SetOrClass) (instance ?INST2 SetOrClass) (instance ?INST2 BinaryRelation)) (=> (and (partialOrderingOn ?INST1 ?INST2) (partialOrderingOn ?INST2 ?INST1)) (equal ?INST1 ?INST2))))

(forall (?INST1 ?INST2) (=> (and (instance ?INST1 BinaryRelation) (instance ?INST1 SetOrClass) (instance ?INST2 SetOrClass) (instance ?INST2 BinaryRelation)) (=> (and (reflexiveOn ?INST1 ?INST2) (reflexiveOn ?INST2 ?INST1)) (equal ?INST1 ?INST2))))

(forall (?INST1 ?INST2) (=> (and (instance ?INST1 BinaryRelation) (instance ?INST1 SetOrClass) (instance ?INST2 SetOrClass) (instance ?INST2 BinaryRelation)) (=> (and (totalOrderingOn ?INST1 ?INST2) (totalOrderingOn ?INST2 ?INST1)) (equal ?INST1 ?INST2))))

(forall (?INST1 ?INST2) (=> (and (instance ?INST1 BinaryRelation) (instance ?INST1 SetOrClass) (instance ?INST2 SetOrClass) (instance ?INST2 BinaryRelation)) (=> (and (trichotomizingOn ?INST1 ?INST2) (trichotomizingOn ?INST2 ?INST1)) (equal ?INST1 ?INST2))))

(forall (?INST1 ?INST2) (=> (and (instance ?INST1 BinaryRelation) (instance ?INST2 BinaryRelation)) (=> (inverse ?INST1 ?INST2) (inverse ?INST2 ?INST1))))

(forall (?INST1 ?INST2) (=> (and (instance ?INST1 CognitiveAgent) (instance ?INST1 Formula) (instance ?INST2 Formula) (instance ?INST2 CognitiveAgent)) (=> (and (believes ?INST1 ?INST2) (believes ?INST2 ?INST1)) (equal ?INST1 ?INST2))))

(forall (?INST1 ?INST2) (=> (and (instance ?INST1 CognitiveAgent) (instance ?INST1 Formula) (instance ?INST2 Formula) (instance ?INST2 CognitiveAgent)) (=> (and (considers ?INST1 ?INST2) (considers ?INST2 ?INST1)) (equal ?INST1 ?INST2))))

(forall (?INST1 ?INST2) (=> (and (instance ?INST1 CognitiveAgent) (instance ?INST1 Formula) (instance ?INST2 Formula) (instance ?INST2 CognitiveAgent)) (=> (and (desires ?INST1 ?INST2) (desires ?INST2 ?INST1)) (equal ?INST1 ?INST2))))

(forall (?INST1 ?INST2) (=> (and (instance ?INST1 CognitiveAgent) (instance ?INST1 Formula) (instance ?INST2 Formula) (instance ?INST2 CognitiveAgent)) (=> (and (knows ?INST1 ?INST2) (knows ?INST2 ?INST1)) (equal ?INST1 ?INST2))))

(forall (?INST1 ?INST2) (=> (and (instance ?INST1 Collection) (instance ?INST2 Collection)) (=> (and (subCollection ?INST1 ?INST2) (subCollection ?INST2 ?INST1)) (equal ?INST1 ?INST2))))

(forall (?INST1 ?INST2) (=> (and (instance ?INST1 Collection) (instance ?INST2 Collection)) (=> (subCollection ?INST1 ?INST2) (subCollection ?INST1 ?INST1))))

(forall (?INST1 ?INST2) (=> (and (instance ?INST1 ContentBearingObject) (instance ?INST2 ContentBearingObject)) (=> (and (subsumesContentInstance ?INST1 ?INST2) (subsumesContentInstance ?INST2 ?INST1)) (equal ?INST1 ?INST2))))

(forall (?INST1 ?INST2) (=> (and (instance ?INST1 ContentBearingObject) (instance ?INST2 ContentBearingObject)) (=> (equivalentContentInstance ?INST1 ?INST2) (equivalentContentInstance ?INST1 ?INST1))))

(forall (?INST1 ?INST2) (=> (and (instance ?INST1 ContentBearingObject) (instance ?INST2 ContentBearingObject)) (=> (equivalentContentInstance ?INST1 ?INST2) (equivalentContentInstance ?INST2 ?INST1))))

(forall (?INST1 ?INST2) (=> (and (instance ?INST1 ContentBearingObject) (instance ?INST2 ContentBearingObject)) (=> (subsumesContentInstance ?INST1 ?INST2) (subsumesContentInstance ?INST1 ?INST1))))

(forall (?INST1 ?INST2) (=> (and (instance ?INST1 ContentBearingPhysical) (instance ?INST1 Proposition) (instance ?INST2 Proposition) (instance ?INST2 ContentBearingPhysical)) (=> (and (containsInformation ?INST1 ?INST2) (containsInformation ?INST2 ?INST1)) (equal ?INST1 ?INST2))))

(forall (?INST1 ?INST2) (=> (and (instance ?INST1 EngineeringComponent) (instance ?INST2 EngineeringComponent)) (=> (connectedEngineeringComponents ?INST1 ?INST2) (connectedEngineeringComponents ?INST2 ?INST1))))

(forall (?INST1 ?INST2) (=> (and (instance ?INST1 Formula) (instance ?INST1 CognitiveAgent) (instance ?INST2 CognitiveAgent) (instance ?INST2 Formula)) (=> (and (holdsObligation ?INST1 ?INST2) (holdsObligation ?INST2 ?INST1)) (equal ?INST1 ?INST2))))

(forall (?INST1 ?INST2) (=> (and (instance ?INST1 Formula) (instance ?INST1 CognitiveAgent) (instance ?INST2 CognitiveAgent) (instance ?INST2 Formula)) (=> (and (holdsRight ?INST1 ?INST2) (holdsRight ?INST2 ?INST1)) (equal ?INST1 ?INST2))))

(forall (?INST1 ?INST2) (=> (and (instance ?INST1 Formula) (instance ?INST1 NormativeAttribute) (instance ?INST2 NormativeAttribute) (instance ?INST2 Formula)) (=> (and (modalAttribute ?INST1 ?INST2) (modalAttribute ?INST2 ?INST1)) (equal ?INST1 ?INST2))))

(forall (?INST1 ?INST2) (=> (and (instance ?INST1 Formula) (instance ?INST2 Formula)) (=> (and (causesProposition ?INST1 ?INST2) (causesProposition ?INST2 ?INST1)) (equal ?INST1 ?INST2))))

(forall (?INST1 ?INST2) (=> (and (instance ?INST1 Formula) (instance ?INST2 Formula)) (=> (and (hasPurpose ?INST1 ?INST2) (hasPurpose ?INST2 ?INST1)) (equal ?INST1 ?INST2))))

(forall (?INST1 ?INST2) (=> (and (instance ?INST1 Formula) (instance ?INST2 Formula)) (=> (independentProbability ?INST1 ?INST2) (independentProbability ?INST2 ?INST1))))

(forall (?INST1 ?INST2) (=> (and (instance ?INST1 Function) (instance ?INST1 SetOrClass) (instance ?INST2 SetOrClass) (instance ?INST2 Function)) (=> (and (closedOn ?INST1 ?INST2) (closedOn ?INST2 ?INST1)) (equal ?INST1 ?INST2))))

(forall (?INST1 ?INST2) (=> (and (instance ?INST1 Function) (instance ?INST1 SetOrClass) (instance ?INST2 SetOrClass) (instance ?INST2 Function)) (=> (and (range ?INST1 ?INST2) (range ?INST2 ?INST1)) (equal ?INST1 ?INST2))))

(forall (?INST1 ?INST2) (=> (and (instance ?INST1 Function) (subclass ?INST1 SetOrClass) (instance ?INST2 Function) (subclass ?INST2 SetOrClass)) (=> (and (rangeSubclass ?INST1 ?INST2) (rangeSubclass ?INST2 ?INST1)) (equal ?INST1 ?INST2))))

(forall (?INST1 ?INST2) (=> (and (instance ?INST1 GeographicArea) (instance ?INST2 GeographicArea)) (=> (and (geographicSubregion ?INST1 ?INST2) (geographicSubregion ?INST2 ?INST1)) (equal ?INST1 ?INST2))))

(forall (?INST1 ?INST2) (=> (and (instance ?INST1 GeometricFigure) (instance ?INST2 GeometricFigure)) (=> (and (geometricPart ?INST1 ?INST2) (geometricPart ?INST2 ?INST1)) (equal ?INST1 ?INST2))))

(forall (?INST1 ?INST2) (=> (and (instance ?INST1 GeometricFigure) (instance ?INST2 GeometricFigure)) (=> (geometricPart ?INST1 ?INST2) (geometricPart ?INST1 ?INST1))))

(forall (?INST1 ?INST2) (=> (and (instance ?INST1 GeopoliticalArea) (instance ?INST2 GeopoliticalArea)) (=> (and (geopoliticalSubdivision ?INST1 ?INST2) (geopoliticalSubdivision ?INST2 ?INST1)) (equal ?INST1 ?INST2))))

(forall (?INST1 ?INST2) (=> (and (instance ?INST1 Graph) (instance ?INST2 Graph)) (=> (subGraph ?INST1 ?INST2) (subGraph ?INST1 ?INST1))))

(forall (?INST1 ?INST2) (=> (and (instance ?INST1 GraphElement) (instance ?INST1 Graph) (instance ?INST2 Graph) (instance ?INST2 GraphElement)) (=> (and (graphPart ?INST1 ?INST2) (graphPart ?INST2 ?INST1)) (equal ?INST1 ?INST2))))

(forall (?INST1 ?INST2) (=> (and (instance ?INST1 GraphPath) (instance ?INST1 PositiveInteger) (instance ?INST2 PositiveInteger) (instance ?INST2 GraphPath)) (=> (and (pathLength ?INST1 ?INST2) (pathLength ?INST2 ?INST1)) (equal ?INST1 ?INST2))))

(forall (?INST1 ?INST2) (=> (and (instance ?INST1 Hole) (instance ?INST1 SelfConnectedObject) (instance ?INST2 SelfConnectedObject) (instance ?INST2 Hole)) (=> (and (hole ?INST1 ?INST2) (hole ?INST2 ?INST1)) (equal ?INST1 ?INST2))))

(forall (?INST1 ?INST2) (=> (and (instance ?INST1 Hole) (instance ?INST2 Hole)) (=> (and (fills ?INST1 ?INST2) (fills ?INST2 ?INST1)) (equal ?INST1 ?INST2))))

(forall (?INST1 ?INST2) (=> (and (instance ?INST1 Hole) (instance ?INST2 Hole)) (=> (and (partiallyFills ?INST1 ?INST2) (partiallyFills ?INST2 ?INST1)) (equal ?INST1 ?INST2))))

(forall (?INST1 ?INST2) (=> (and (instance ?INST1 Hole) (instance ?INST2 Hole)) (=> (and (properlyFills ?INST1 ?INST2) (properlyFills ?INST2 ?INST1)) (equal ?INST1 ?INST2))))

(forall (?INST1 ?INST2) (=> (and (instance ?INST1 Human) (instance ?INST1 Nation) (instance ?INST2 Nation) (instance ?INST2 Human)) (=> (and (citizen ?INST1 ?INST2) (citizen ?INST2 ?INST1)) (equal ?INST1 ?INST2))))

(forall (?INST1 ?INST2) (=> (and (instance ?INST1 Human) (instance ?INST2 Human)) (=> (and (leader ?INST1 ?INST2) (leader ?INST2 ?INST1)) (equal ?INST1 ?INST2))))

(forall (?INST1 ?INST2) (=> (and (instance ?INST1 Human) (instance ?INST2 Human)) (=> (legalRelation ?INST1 ?INST2) (legalRelation ?INST2 ?INST1))))

(forall (?INST1 ?INST2) (=> (and (instance ?INST1 Human) (instance ?INST2 Human)) (=> (spouse ?INST1 ?INST2) (spouse ?INST2 ?INST1))))

(forall (?INST1 ?INST2) (=> (and (instance ?INST1 Language) (instance ?INST2 Language)) (=> (and (expressedInLanguage ?INST1 ?INST2) (expressedInLanguage ?INST2 ?INST1)) (equal ?INST1 ?INST2))))

(forall (?INST1 ?INST2) (=> (and (instance ?INST1 List) (instance ?INST2 List)) (=> (and (inList ?INST1 ?INST2) (inList ?INST2 ?INST1)) (equal ?INST1 ?INST2))))

(forall (?INST1 ?INST2) (=> (and (instance ?INST1 List) (instance ?INST2 List)) (=> (and (initialList ?INST1 ?INST2) (initialList ?INST2 ?INST1)) (equal ?INST1 ?INST2))))

(forall (?INST1 ?INST2) (=> (and (instance ?INST1 List) (instance ?INST2 List)) (=> (and (subList ?INST1 ?INST2) (subList ?INST2 ?INST1)) (equal ?INST1 ?INST2))))

(forall (?INST1 ?INST2) (=> (and (instance ?INST1 List) (instance ?INST2 List)) (=> (identicalListItems ?INST1 ?INST2) (identicalListItems ?INST1 ?INST1))))

(forall (?INST1 ?INST2) (=> (and (instance ?INST1 List) (instance ?INST2 List)) (=> (identicalListItems ?INST1 ?INST2) (identicalListItems ?INST2 ?INST1))))

(forall (?INST1 ?INST2) (=> (and (instance ?INST1 List) (instance ?INST2 List)) (=> (initialList ?INST1 ?INST2) (initialList ?INST1 ?INST1))))

(forall (?INST1 ?INST2) (=> (and (instance ?INST1 List) (instance ?INST2 List)) (=> (subList ?INST1 ?INST2) (subList ?INST1 ?INST1))))

(forall (?INST1 ?INST2) (=> (and (instance ?INST1 Man) (instance ?INST1 Woman) (instance ?INST2 Woman) (instance ?INST2 Man)) (=> (and (husband ?INST1 ?INST2) (husband ?INST2 ?INST1)) (equal ?INST1 ?INST2))))

(forall (?INST1 ?INST2) (=> (and (instance ?INST1 Man) (instance ?INST2 Woman)) (<=> (husband ?INST1 ?INST2) (wife ?INST2 ?INST1))))

(forall (?INST1 ?INST2) (=> (and (instance ?INST1 Motion) (instance ?INST1 Object) (instance ?INST2 Object) (instance ?INST2 Motion)) (=> (and (path ?INST1 ?INST2) (path ?INST2 ?INST1)) (equal ?INST1 ?INST2))))

(forall (?INST1 ?INST2) (=> (and (instance ?INST1 Object) (instance ?INST1 Attribute) (instance ?INST2 Attribute) (instance ?INST2 Object)) (=> (and (attribute ?INST1 ?INST2) (attribute ?INST2 ?INST1)) (equal ?INST1 ?INST2))))

(forall (?INST1 ?INST2) (=> (and (instance ?INST1 Object) (instance ?INST1 PhysicalQuantity) (instance ?INST2 PhysicalQuantity) (instance ?INST2 Object)) (=> (and (measure ?INST1 ?INST2) (measure ?INST2 ?INST1)) (equal ?INST1 ?INST2))))

(forall (?INST1 ?INST2) (=> (and (instance ?INST1 Object) (instance ?INST2 Object)) (<=> (smaller ?INST1 ?INST2) (larger ?INST2 ?INST1))))

(forall (?INST1 ?INST2) (=> (and (instance ?INST1 Object) (instance ?INST2 Object)) (=> (and (completelyFills ?INST1 ?INST2) (completelyFills ?INST2 ?INST1)) (equal ?INST1 ?INST2))))

(forall (?INST1 ?INST2) (=> (and (instance ?INST1 Object) (instance ?INST2 Object)) (=> (and (crosses ?INST1 ?INST2) (crosses ?INST2 ?INST1)) (equal ?INST1 ?INST2))))

(forall (?INST1 ?INST2) (=> (and (instance ?INST1 Object) (instance ?INST2 Object)) (=> (and (interiorPart ?INST1 ?INST2) (interiorPart ?INST2 ?INST1)) (equal ?INST1 ?INST2))))

(forall (?INST1 ?INST2) (=> (and (instance ?INST1 Object) (instance ?INST2 Object)) (=> (and (located ?INST1 ?INST2) (located ?INST2 ?INST1)) (equal ?INST1 ?INST2))))

(forall (?INST1 ?INST2) (=> (and (instance ?INST1 Object) (instance ?INST2 Object)) (=> (and (part ?INST1 ?INST2) (part ?INST2 ?INST1)) (equal ?INST1 ?INST2))))

(forall (?INST1 ?INST2) (=> (and (instance ?INST1 Object) (instance ?INST2 Object)) (=> (and (partlyLocated ?INST1 ?INST2) (partlyLocated ?INST2 ?INST1)) (equal ?INST1 ?INST2))))

(forall (?INST1 ?INST2) (=> (and (instance ?INST1 Object) (instance ?INST2 Object)) (=> (and (penetrates ?INST1 ?INST2) (penetrates ?INST2 ?INST1)) (equal ?INST1 ?INST2))))

(forall (?INST1 ?INST2) (=> (and (instance ?INST1 Object) (instance ?INST2 Object)) (=> (and (properPart ?INST1 ?INST2) (properPart ?INST2 ?INST1)) (equal ?INST1 ?INST2))))

(forall (?INST1 ?INST2) (=> (and (instance ?INST1 Object) (instance ?INST2 Object)) (=> (connected ?INST1 ?INST2) (connected ?INST1 ?INST1))))

(forall (?INST1 ?INST2) (=> (and (instance ?INST1 Object) (instance ?INST2 Object)) (=> (connected ?INST1 ?INST2) (connected ?INST2 ?INST1))))

(forall (?INST1 ?INST2) (=> (and (instance ?INST1 Object) (instance ?INST2 Object)) (=> (copy ?INST1 ?INST2) (copy ?INST1 ?INST1))))

(forall (?INST1 ?INST2) (=> (and (instance ?INST1 Object) (instance ?INST2 Object)) (=> (copy ?INST1 ?INST2) (copy ?INST2 ?INST1))))

(forall (?INST1 ?INST2) (=> (and (instance ?INST1 Object) (instance ?INST2 Object)) (=> (meetsSpatially ?INST1 ?INST2) (meetsSpatially ?INST2 ?INST1))))

(forall (?INST1 ?INST2) (=> (and (instance ?INST1 Object) (instance ?INST2 Object)) (=> (overlapsPartially ?INST1 ?INST2) (overlapsPartially ?INST2 ?INST1))))

(forall (?INST1 ?INST2) (=> (and (instance ?INST1 Object) (instance ?INST2 Object)) (=> (overlapsSpatially ?INST1 ?INST2) (overlapsSpatially ?INST1 ?INST1))))

(forall (?INST1 ?INST2) (=> (and (instance ?INST1 Object) (instance ?INST2 Object)) (=> (overlapsSpatially ?INST1 ?INST2) (overlapsSpatially ?INST2 ?INST1))))

(forall (?INST1 ?INST2) (=> (and (instance ?INST1 Object) (instance ?INST2 Object)) (=> (part ?INST1 ?INST2) (part ?INST1 ?INST1))))

(forall (?INST1 ?INST2) (=> (and (instance ?INST1 OrganicObject) (instance ?INST1 DevelopmentalAttribute) (instance ?INST2 DevelopmentalAttribute) (instance ?INST2 OrganicObject)) (=> (and (developmentalForm ?INST1 ?INST2) (developmentalForm ?INST2 ?INST1)) (equal ?INST1 ?INST2))))

(forall (?INST1 ?INST2) (=> (and (instance ?INST1 Organism) (instance ?INST2 Organism)) (=> (and (inhabits ?INST1 ?INST2) (inhabits ?INST2 ?INST1)) (equal ?INST1 ?INST2))))

(forall (?INST1 ?INST2) (=> (and (instance ?INST1 Organism) (instance ?INST2 Organism)) (=> (and (parent ?INST1 ?INST2) (parent ?INST2 ?INST1)) (equal ?INST1 ?INST2))))

(forall (?INST1 ?INST2) (=> (and (instance ?INST1 Organism) (instance ?INST2 Organism)) (=> (familyRelation ?INST1 ?INST2) (familyRelation ?INST1 ?INST1))))

(forall (?INST1 ?INST2) (=> (and (instance ?INST1 Organism) (instance ?INST2 Organism)) (=> (familyRelation ?INST1 ?INST2) (familyRelation ?INST2 ?INST1))))

(forall (?INST1 ?INST2) (=> (and (instance ?INST1 Organism) (instance ?INST2 Organism)) (=> (sibling ?INST1 ?INST2) (sibling ?INST2 ?INST1))))

(forall (?INST1 ?INST2) (=> (and (instance ?INST1 Organization) (instance ?INST2 Organization)) (=> (and (subOrganization ?INST1 ?INST2) (subOrganization ?INST2 ?INST1)) (equal ?INST1 ?INST2))))

(forall (?INST1 ?INST2) (=> (and (instance ?INST1 Organization) (instance ?INST2 Organization)) (=> (subOrganization ?INST1 ?INST2) (subOrganization ?INST1 ?INST1))))

(forall (?INST1 ?INST2) (=> (and (instance ?INST1 Organization) (subclass ?INST1 Text) (instance ?INST2 Organization) (subclass ?INST2 Text)) (=> (and (publishes ?INST1 ?INST2) (publishes ?INST2 ?INST1)) (equal ?INST1 ?INST2))))

(forall (?INST1 ?INST2) (=> (and (instance ?INST1 Physical) (instance ?INST1 Day) (instance ?INST2 Day) (instance ?INST2 Physical)) (=> (and (date ?INST1 ?INST2) (date ?INST2 ?INST1)) (equal ?INST1 ?INST2))))

(forall (?INST1 ?INST2) (=> (and (instance ?INST1 Physical) (instance ?INST1 TimePosition) (instance ?INST2 TimePosition) (instance ?INST2 Physical)) (=> (and (time ?INST1 ?INST2) (time ?INST2 ?INST1)) (equal ?INST1 ?INST2))))

(forall (?INST1 ?INST2) (=> (and (instance ?INST1 Physical) (instance ?INST2 Physical)) (=> (cooccur ?INST1 ?INST2) (cooccur ?INST1 ?INST1))))

(forall (?INST1 ?INST2) (=> (and (instance ?INST1 Physical) (instance ?INST2 Physical)) (=> (cooccur ?INST1 ?INST2) (cooccur ?INST2 ?INST1))))

(forall (?INST1 ?INST2) (=> (and (instance ?INST1 Process) (instance ?INST1 Agent) (instance ?INST2 Agent) (instance ?INST2 Process)) (=> (and (agent ?INST1 ?INST2) (agent ?INST2 ?INST1)) (equal ?INST1 ?INST2))))

(forall (?INST1 ?INST2) (=> (and (instance ?INST1 Process) (instance ?INST1 Agent) (instance ?INST2 Agent) (instance ?INST2 Process)) (=> (and (experiencer ?INST1 ?INST2) (experiencer ?INST2 ?INST1)) (equal ?INST1 ?INST2))))

(forall (?INST1 ?INST2) (=> (and (instance ?INST1 Process) (instance ?INST1 Attribute) (instance ?INST2 Attribute) (instance ?INST2 Process)) (=> (and (manner ?INST1 ?INST2) (manner ?INST2 ?INST1)) (equal ?INST1 ?INST2))))

(forall (?INST1 ?INST2) (=> (and (instance ?INST1 Process) (instance ?INST1 DirectionalAttribute) (instance ?INST2 DirectionalAttribute) (instance ?INST2 Process)) (=> (and (direction ?INST1 ?INST2) (direction ?INST2 ?INST1)) (equal ?INST1 ?INST2))))

(forall (?INST1 ?INST2) (=> (and (instance ?INST1 Process) (instance ?INST1 Object) (instance ?INST2 Object) (instance ?INST2 Process)) (=> (and (origin ?INST1 ?INST2) (origin ?INST2 ?INST1)) (equal ?INST1 ?INST2))))

(forall (?INST1 ?INST2) (=> (and (instance ?INST1 Process) (instance ?INST1 Proposition) (instance ?INST2 Proposition) (instance ?INST2 Process)) (=> (and (realization ?INST1 ?INST2) (realization ?INST2 ?INST1)) (equal ?INST1 ?INST2))))

(forall (?INST1 ?INST2) (=> (and (instance ?INST1 Process) (instance ?INST2 Process)) (=> (and (causes ?INST1 ?INST2) (causes ?INST2 ?INST1)) (equal ?INST1 ?INST2))))

(forall (?INST1 ?INST2) (=> (and (instance ?INST1 Process) (instance ?INST2 Process)) (=> (and (destination ?INST1 ?INST2) (destination ?INST2 ?INST1)) (equal ?INST1 ?INST2))))

(forall (?INST1 ?INST2) (=> (and (instance ?INST1 Process) (instance ?INST2 Process)) (=> (and (patient ?INST1 ?INST2) (patient ?INST2 ?INST1)) (equal ?INST1 ?INST2))))

(forall (?INST1 ?INST2) (=> (and (instance ?INST1 Process) (instance ?INST2 Process)) (=> (and (subProcess ?INST1 ?INST2) (subProcess ?INST2 ?INST1)) (equal ?INST1 ?INST2))))

(forall (?INST1 ?INST2) (=> (and (instance ?INST1 Process) (instance ?INST2 Process)) (=> (subProcess ?INST1 ?INST2) (subProcess ?INST1 ?INST1))))

(forall (?INST1 ?INST2) (=> (and (instance ?INST1 Proposition) (instance ?INST2 Proposition)) (=> (consistent ?INST1 ?INST2) (consistent ?INST2 ?INST1))))

(forall (?INST1 ?INST2) (=> (and (instance ?INST1 Quantity) (instance ?INST2 Quantity)) (<=> (greaterThan ?INST1 ?INST2) (lessThan ?INST2 ?INST1))))

(forall (?INST1 ?INST2) (=> (and (instance ?INST1 Quantity) (instance ?INST2 Quantity)) (<=> (greaterThanOrEqualTo ?INST1 ?INST2) (lessThanOrEqualTo ?INST2 ?INST1))))

(forall (?INST1 ?INST2) (=> (and (instance ?INST1 Quantity) (instance ?INST2 Quantity)) (=> (and (greaterThanOrEqualTo ?INST1 ?INST2) (greaterThanOrEqualTo ?INST2 ?INST1)) (equal ?INST1 ?INST2))))

(forall (?INST1 ?INST2) (=> (and (instance ?INST1 Quantity) (instance ?INST2 Quantity)) (=> (and (instance ?INST1 RealNumber) (instance ?INST2 RealNumber)) (or (greaterThan ?INST1 ?INST2) (greaterThan ?INST2 ?INST1) (equal ?INST1 ?INST2)))))

(forall (?INST1 ?INST2) (=> (and (instance ?INST1 Quantity) (instance ?INST2 Quantity)) (=> (and (instance ?INST1 RealNumber) (instance ?INST2 RealNumber)) (or (greaterThanOrEqualTo ?INST1 ?INST2) (greaterThanOrEqualTo ?INST2 ?INST1) (equal ?INST1 ?INST2)))))

(forall (?INST1 ?INST2) (=> (and (instance ?INST1 Quantity) (instance ?INST2 Quantity)) (=> (and (instance ?INST1 RealNumber) (instance ?INST2 RealNumber)) (or (lessThan ?INST1 ?INST2) (lessThan ?INST2 ?INST1) (equal ?INST1 ?INST2)))))

(forall (?INST1 ?INST2) (=> (and (instance ?INST1 Quantity) (instance ?INST2 Quantity)) (=> (and (instance ?INST1 RealNumber) (instance ?INST2 RealNumber)) (or (lessThanOrEqualTo ?INST1 ?INST2) (lessThanOrEqualTo ?INST2 ?INST1) (equal ?INST1 ?INST2)))))

(forall (?INST1 ?INST2) (=> (and (instance ?INST1 Quantity) (instance ?INST2 Quantity)) (=> (and (lessThanOrEqualTo ?INST1 ?INST2) (lessThanOrEqualTo ?INST2 ?INST1)) (equal ?INST1 ?INST2))))

(forall (?INST1 ?INST2) (=> (and (instance ?INST1 Quantity) (instance ?INST2 Quantity)) (=> (greaterThanOrEqualTo ?INST1 ?INST2) (greaterThanOrEqualTo ?INST1 ?INST1))))

(forall (?INST1 ?INST2) (=> (and (instance ?INST1 Quantity) (instance ?INST2 Quantity)) (=> (lessThanOrEqualTo ?INST1 ?INST2) (lessThanOrEqualTo ?INST1 ?INST1))))

(forall (?INST1 ?INST2) (=> (and (instance ?INST1 Relation) (instance ?INST1 PositiveInteger) (instance ?INST2 PositiveInteger) (instance ?INST2 Relation)) (=> (and (valence ?INST1 ?INST2) (valence ?INST2 ?INST1)) (equal ?INST1 ?INST2))))

(forall (?INST1 ?INST2) (=> (and (instance ?INST1 Relation) (instance ?INST2 Relation)) (=> (and (subrelation ?INST1 ?INST2) (subrelation ?INST2 ?INST1)) (equal ?INST1 ?INST2))))

(forall (?INST1 ?INST2) (=> (and (instance ?INST1 Relation) (instance ?INST2 Relation)) (=> (subrelation ?INST1 ?INST2) (subrelation ?INST1 ?INST1))))

(forall (?INST1 ?INST2) (=> (and (instance ?INST1 SelfConnectedObject) (instance ?INST1 Collection) (instance ?INST2 Collection) (instance ?INST2 SelfConnectedObject)) (=> (and (member ?INST1 ?INST2) (member ?INST2 ?INST1)) (equal ?INST1 ?INST2))))

(forall (?INST1 ?INST2) (=> (and (instance ?INST1 SelfConnectedObject) (instance ?INST2 SelfConnectedObject)) (=> (and (contains ?INST1 ?INST2) (contains ?INST2 ?INST1)) (equal ?INST1 ?INST2))))

(forall (?INST1 ?INST2) (=> (and (instance ?INST1 SelfConnectedObject) (instance ?INST2 SelfConnectedObject)) (=> (and (surface ?INST1 ?INST2) (surface ?INST2 ?INST1)) (equal ?INST1 ?INST2))))

(forall (?INST1 ?INST2) (=> (and (instance ?INST1 Set) (instance ?INST2 Set)) (=> (and (element ?INST1 ?INST2) (element ?INST2 ?INST1)) (equal ?INST1 ?INST2))))

(forall (?INST1 ?INST2) (=> (and (instance ?INST1 SetOrClass) (instance ?INST2 SetOrClass)) (=> (and (immediateInstance ?INST1 ?INST2) (immediateInstance ?INST2 ?INST1)) (equal ?INST1 ?INST2))))

(forall (?INST1 ?INST2) (=> (and (instance ?INST1 SetOrClass) (instance ?INST2 SetOrClass)) (=> (and (immediateSubclass ?INST1 ?INST2) (immediateSubclass ?INST2 ?INST1)) (equal ?INST1 ?INST2))))

(forall (?INST1 ?INST2) (=> (and (instance ?INST1 SetOrClass) (instance ?INST2 SetOrClass)) (=> (and (subclass ?INST1 ?INST2) (subclass ?INST2 ?INST1)) (equal ?INST1 ?INST2))))

(forall (?INST1 ?INST2) (=> (and (instance ?INST1 SetOrClass) (instance ?INST2 SetOrClass)) (=> (disjoint ?INST1 ?INST2) (disjoint ?INST2 ?INST1))))

(forall (?INST1 ?INST2) (=> (and (instance ?INST1 SetOrClass) (instance ?INST2 SetOrClass)) (=> (subclass ?INST1 ?INST2) (subclass ?INST1 ?INST1))))

(forall (?INST1 ?INST2) (=> (and (instance ?INST1 SymbolicString) (instance ?INST2 SymbolicString)) (=> (and (documentation ?INST1 ?INST2) (documentation ?INST2 ?INST1)) (equal ?INST1 ?INST2))))

(forall (?INST1 ?INST2) (=> (and (instance ?INST1 TimeDuration) (subclass ?INST1 Process) (instance ?INST2 TimeDuration) (subclass ?INST2 Process)) (=> (and (frequency ?INST1 ?INST2) (frequency ?INST2 ?INST1)) (equal ?INST1 ?INST2))))

(forall (?INST1 ?INST2) (=> (and (instance ?INST1 TimeInterval) (instance ?INST1 TimeDuration) (instance ?INST2 TimeDuration) (instance ?INST2 TimeInterval)) (=> (and (duration ?INST1 ?INST2) (duration ?INST2 ?INST1)) (equal ?INST1 ?INST2))))

(forall (?INST1 ?INST2) (=> (and (instance ?INST1 TimeInterval) (instance ?INST2 TimeInterval)) (=> (and (meetsTemporally ?INST1 ?INST2) (meetsTemporally ?INST2 ?INST1)) (equal ?INST1 ?INST2))))

(forall (?INST1 ?INST2) (=> (and (instance ?INST1 TimeInterval) (instance ?INST2 TimeInterval)) (=> (overlapsTemporally ?INST1 ?INST2) (overlapsTemporally ?INST1 ?INST1))))

(forall (?INST1 ?INST2) (=> (and (instance ?INST1 TimeInterval) (instance ?INST2 TimeInterval)) (=> (overlapsTemporally ?INST1 ?INST2) (overlapsTemporally ?INST2 ?INST1))))

(forall (?INST1 ?INST2) (=> (and (instance ?INST1 TimePoint) (instance ?INST2 TimePoint)) (=> (and (beforeOrEqual ?INST1 ?INST2) (beforeOrEqual ?INST2 ?INST1)) (equal ?INST1 ?INST2))))

(forall (?INST1 ?INST2) (=> (and (instance ?INST1 TimePoint) (instance ?INST2 TimePoint)) (=> (beforeOrEqual ?INST1 ?INST2) (beforeOrEqual ?INST1 ?INST1))))

(forall (?INST1 ?INST2) (=> (and (instance ?INST1 TimePosition) (instance ?INST1 Formula) (instance ?INST2 Formula) (instance ?INST2 TimePosition)) (=> (and (holdsDuring ?INST1 ?INST2) (holdsDuring ?INST2 ?INST1)) (equal ?INST1 ?INST2))))

(forall (?INST1 ?INST2) (=> (and (instance ?INST1 TimePosition) (instance ?INST2 TimePosition)) (=> (and (temporalPart ?INST1 ?INST2) (temporalPart ?INST2 ?INST1)) (equal ?INST1 ?INST2))))

(forall (?INST1 ?INST2) (=> (and (instance ?INST1 TimePosition) (instance ?INST2 TimePosition)) (=> (temporalPart ?INST1 ?INST2) (temporalPart ?INST1 ?INST1))))

(forall (?INST1 ?INST2) (=> (and (instance ?INST1 Woman) (instance ?INST1 Man) (instance ?INST2 Man) (instance ?INST2 Woman)) (=> (and (wife ?INST1 ?INST2) (wife ?INST2 ?INST1)) (equal ?INST1 ?INST2))))

(forall (?INST1 ?INST2) (=> (and (subclass ?INST1 Artifact) (subclass ?INST2 Artifact)) (=> (and (version ?INST1 ?INST2) (version ?INST2 ?INST1)) (equal ?INST1 ?INST2))))

(forall (?INST1 ?INST2) (=> (and (subclass ?INST1 ContentBearingObject) (subclass ?INST2 ContentBearingObject)) (=> (and (subsumesContentClass ?INST1 ?INST2) (subsumesContentClass ?INST2 ?INST1)) (equal ?INST1 ?INST2))))

(forall (?INST1 ?INST2) (=> (and (subclass ?INST1 ContentBearingObject) (subclass ?INST2 ContentBearingObject)) (=> (equivalentContentClass ?INST1 ?INST2) (equivalentContentClass ?INST1 ?INST1))))

(forall (?INST1 ?INST2) (=> (and (subclass ?INST1 ContentBearingObject) (subclass ?INST2 ContentBearingObject)) (=> (equivalentContentClass ?INST1 ?INST2) (equivalentContentClass ?INST2 ?INST1))))

(forall (?INST1 ?INST2) (=> (and (subclass ?INST1 ContentBearingObject) (subclass ?INST2 ContentBearingObject)) (=> (subsumesContentClass ?INST1 ?INST2) (subsumesContentClass ?INST1 ?INST1))))

(forall (?INST1 ?INST2) (=> (and (subclass ?INST1 Process) (subclass ?INST2 Process)) (=> (and (causesSubclass ?INST1 ?INST2) (causesSubclass ?INST2 ?INST1)) (equal ?INST1 ?INST2))))

(forall (?INST1 ?INST2) (=> (and (subclass ?INST1 Process) (subclass ?INST2 Process)) (=> (and (precondition ?INST1 ?INST2) (precondition ?INST2 ?INST1)) (equal ?INST1 ?INST2))))

(forall (?INST1 ?INST2) (=> (equal ?INST1 ?INST2) (equal ?INST1 ?INST1)))

(forall (?INST1 ?INST2) (=> (equal ?INST1 ?INST2) (equal ?INST2 ?INST1)))

(forall (?INST1 ?INST2) (=> (relatedInternalConcept ?INST1 ?INST2) (relatedInternalConcept ?INST1 ?INST1)))

(forall (?INST1 ?INST2) (=> (relatedInternalConcept ?INST1 ?INST2) (relatedInternalConcept ?INST2 ?INST1)))

(forall (?INSTRUMENT) (=> (instance ?INSTRUMENT Object) (=> (instance ?INSTRUMENT MusicalInstrument) (capability Music instrument ?INSTRUMENT))))

(forall (?INT) (=> (instance ?INT Integer) (equal ?INT (PredecessorFn (SuccessorFn ?INT)))))

(forall (?INT) (=> (instance ?INT Integer) (equal ?INT (SuccessorFn (PredecessorFn ?INT)))))

(forall (?INT) (=> (instance ?INT Integer) (greaterThan ?INT (PredecessorFn ?INT))))

(forall (?INT) (=> (instance ?INT Integer) (lessThan ?INT (SuccessorFn ?INT))))

(forall (?INT1 ?INT2) (=> (and (instance ?INT1 Integer) (instance ?INT2 Integer)) (=> (equal (PredecessorFn ?INT1) (PredecessorFn ?INT2)) (equal ?INT1 ?INT2))))

(forall (?INT1 ?INT2) (=> (and (instance ?INT1 Integer) (instance ?INT2 Integer)) (=> (equal (SuccessorFn ?INT1) (SuccessorFn ?INT2)) (equal ?INT1 ?INT2))))

(forall (?INT1 ?INT2) (=> (instance ?INT2 Quantity) (=> (and (instance ?INT1 Integer) (instance ?INT2 Integer)) (not (and (lessThan ?INT1 ?INT2) (lessThan ?INT2 (SuccessorFn ?INT1)))))))

(forall (?INT1 ?INT2) (=> (instance ?INT2 Quantity) (=> (and (instance ?INT1 Integer) (instance ?INT2 Integer)) (not (and (lessThan ?INT2 ?INT1) (lessThan (PredecessorFn ?INT1) ?INT2))))))

(forall (?INTERACTION) (=> (instance ?INTERACTION SocialInteraction) (exists (?AGENT1 ?AGENT2) (and (involvedInEvent ?INTERACTION ?AGENT1) (involvedInEvent ?INTERACTION ?AGENT2) (instance ?AGENT1 Agent) (instance ?AGENT2 Agent) (not (equal ?AGENT1 ?AGENT2))))))

(forall (?INTERPRET ?AGENT ?CONTENT) (=> (and (instance ?INTERPRET Process) (instance ?AGENT CognitiveAgent) (instance ?CONTENT ContentBearingPhysical)) (=> (and (instance ?INTERPRET Interpreting) (agent ?INTERPRET ?AGENT) (patient ?INTERPRET ?CONTENT) (instance ?CONTENT ContentBearingObject)) (exists (?PROP) (and (instance ?PROP Proposition) (holdsDuring (EndFn (WhenFn ?INTERPRET)) `(believes ?AGENT `(containsInformation ?CONTENT ?PROP))))))))

(forall (?INTERVAL ?INTERVAL-TYPE ?CLASS) (=> (and (instance ?INTERVAL TimeInterval) (instance ?INTERVAL-TYPE SetOrClass) (subclass ?INTERVAL-TYPE TimeInterval) (instance ?CLASS SetOrClass) (subclass ?CLASS TimeInterval)) (=> (equal (TemporalCompositionFn ?INTERVAL ?INTERVAL-TYPE) ?CLASS) (forall (?TIME1 ?TIME2) (=> (and (instance ?TIME1 TimeInterval) (instance ?TIME2 TimeInterval)) (=> (and (instance ?TIME1 ?INTERVAL-TYPE) (instance ?TIME2 ?CLASS)) (exists (?DURATION) (and (instance ?DURATION TimeDuration) (duration ?TIME1 ?DURATION) (duration ?TIME2 ?DURATION)))))))))

(forall (?INTERVAL ?INTERVAL-TYPE ?CLASS) (=> (and (instance ?INTERVAL TimeInterval) (subclass ?INTERVAL-TYPE TimeInterval) (instance ?CLASS SetOrClass) (subclass ?CLASS TimeInterval)) (=> (equal (TemporalCompositionFn ?INTERVAL ?INTERVAL-TYPE) ?CLASS) (exists (?TIME) (and (instance ?TIME TimeInterval) (instance ?TIME ?CLASS) (finishes ?TIME ?INTERVAL))))))

(forall (?INTERVAL ?INTERVAL-TYPE ?CLASS) (=> (and (instance ?INTERVAL TimeInterval) (subclass ?INTERVAL-TYPE TimeInterval) (instance ?CLASS SetOrClass) (subclass ?CLASS TimeInterval)) (=> (equal (TemporalCompositionFn ?INTERVAL ?INTERVAL-TYPE) ?CLASS) (exists (?TIME) (and (instance ?TIME TimeInterval) (instance ?TIME ?CLASS) (starts ?TIME ?INTERVAL))))))

(forall (?INTERVAL ?INTERVAL-TYPE ?CLASS) (=> (and (instance ?INTERVAL TimeInterval) (subclass ?INTERVAL-TYPE TimeInterval) (instance ?CLASS SetOrClass) (subclass ?CLASS TimeInterval)) (=> (equal (TemporalCompositionFn ?INTERVAL ?INTERVAL-TYPE) ?CLASS) (forall (?TIME) (=> (instance ?TIME TimePosition) (=> (and (instance ?TIME TimePoint) (temporalPart ?TIME ?INTERVAL)) (exists (?INSTANCE) (and (instance ?INSTANCE TimePosition) (instance ?INSTANCE ?CLASS) (temporalPart ?TIME ?INSTANCE)))))))))

(forall (?INTERVAL ?INTERVAL-TYPE ?CLASS) (=> (and (instance ?INTERVAL TimeInterval) (subclass ?INTERVAL-TYPE TimeInterval) (instance ?CLASS SetOrClass) (subclass ?CLASS TimeInterval)) (=> (equal (TemporalCompositionFn ?INTERVAL ?INTERVAL-TYPE) ?CLASS) (forall (?TIME1 ?TIME2) (=> (and (instance ?TIME1 TimeInterval) (instance ?TIME2 TimeInterval)) (=> (and (instance ?TIME1 ?CLASS) (instance ?TIME2 ?CLASS) (not (equal ?TIME1 ?TIME2))) (or (meetsTemporally ?TIME1 ?TIME2) (meetsTemporally ?TIME2 ?TIME1) (earlier ?TIME1 ?TIME2) (earlier ?TIME2 ?TIME1))))))))

(forall (?INTERVAL ?INTERVAL-TYPE ?CLASS) (=> (and (instance ?INTERVAL TimeInterval) (subclass ?INTERVAL-TYPE TimeInterval) (instance ?CLASS SetOrClass) (subclass ?CLASS TimeInterval)) (=> (equal (TemporalCompositionFn ?INTERVAL ?INTERVAL-TYPE) ?CLASS) (forall (?TIME1) (=> (instance ?TIME1 TimeInterval) (=> (and (instance ?TIME1 ?CLASS) (not (finishes ?TIME1 ?INTERVAL))) (exists (?TIME2) (and (instance ?TIME2 TimeInterval) (instance ?TIME2 ?CLASS) (meetsTemporally ?TIME1 ?TIME2)))))))))

(forall (?INTERVAL ?INTERVAL-TYPE ?CLASS) (=> (and (instance ?INTERVAL TimeInterval) (subclass ?INTERVAL-TYPE TimeInterval) (instance ?CLASS SetOrClass) (subclass ?CLASS TimeInterval)) (=> (equal (TemporalCompositionFn ?INTERVAL ?INTERVAL-TYPE) ?CLASS) (forall (?TIME1) (=> (instance ?TIME1 TimeInterval) (=> (and (instance ?TIME1 ?CLASS) (not (starts ?TIME1 ?INTERVAL))) (exists (?TIME2) (and (instance ?TIME2 TimeInterval) (instance ?TIME2 ?CLASS) (meetsTemporally ?TIME2 ?TIME1)))))))))

(forall (?INTERVAL ?POINT) (=> (and (instance ?INTERVAL TimeInterval) (instance ?POINT TimePoint)) (=> (equal (BeginFn ?INTERVAL) ?POINT) (forall (?OTHERPOINT) (=> (instance ?OTHERPOINT TimePoint) (=> (and (temporalPart ?OTHERPOINT ?INTERVAL) (not (equal ?OTHERPOINT ?POINT))) (before ?POINT ?OTHERPOINT)))))))

(forall (?INTERVAL ?POINT) (=> (and (instance ?INTERVAL TimeInterval) (instance ?POINT TimePoint)) (=> (equal (EndFn ?INTERVAL) ?POINT) (forall (?OTHERPOINT) (=> (instance ?OTHERPOINT TimePoint) (=> (and (temporalPart ?OTHERPOINT ?INTERVAL) (not (equal ?OTHERPOINT ?POINT))) (before ?OTHERPOINT ?POINT)))))))

(forall (?INTERVAL ?TIMECLASS1 ?TIMECLASS2) (=> (and (instance ?INTERVAL TimeInterval) (instance ?TIMECLASS1 SetOrClass) (subclass ?TIMECLASS1 TimeInterval) (instance ?TIMECLASS2 SetOrClass) (subclass ?TIMECLASS2 TimeInterval)) (=> (instance ?INTERVAL (RecurrentTimeIntervalFn ?TIMECLASS1 ?TIMECLASS2)) (exists (?TIME1 ?TIME2) (and (instance ?TIME1 TimeInterval) (instance ?TIME2 TimeInterval) (instance ?TIME1 ?TIMECLASS1) (instance ?TIME2 ?TIMECLASS2) (starts ?TIME1 ?INTERVAL) (finishes ?TIME2 ?INTERVAL))))))

(forall (?INTERVAL) (=> (instance ?INTERVAL TimeInterval) (before (BeginFn ?INTERVAL) (EndFn ?INTERVAL))))

(forall (?INTERVAL) (=> (instance ?INTERVAL TimeInterval) (equal (FutureFn ?INTERVAL) (TimeIntervalFn (EndFn ?INTERVAL) PositiveInfinity))))

(forall (?INTERVAL) (=> (instance ?INTERVAL TimeInterval) (equal (PastFn ?INTERVAL) (TimeIntervalFn NegativeInfinity (BeginFn ?INTERVAL)))))

(forall (?INTERVAL) (=> (instance ?INTERVAL TimeInterval) (meetsTemporally (PastFn ?INTERVAL) ?INTERVAL)))

(forall (?INTERVAL) (=> (instance ?INTERVAL TimeInterval) (meetsTemporally ?INTERVAL (FutureFn ?INTERVAL))))

(forall (?INTERVAL) (=> (instance ?INTERVAL TimePosition) (=> (instance ?INTERVAL TimeInterval) (exists (?POINT) (and (instance ?POINT TimePosition) (instance ?POINT TimePoint) (temporalPart ?POINT ?INTERVAL))))))

(forall (?INTERVAL) (=> (instance ?INTERVAL TimePosition) (=> (instance ?INTERVAL TimeInterval) (finishes (ImmediatePastFn ?INTERVAL) (PastFn ?INTERVAL)))))

(forall (?INTERVAL) (=> (instance ?INTERVAL TimePosition) (=> (instance ?INTERVAL TimeInterval) (starts (ImmediateFutureFn ?INTERVAL) (FutureFn ?INTERVAL)))))

(forall (?INTERVAL1 ?INTERVAL2) (=> (and (instance ?INTERVAL1 TimeInterval) (instance ?INTERVAL2 TimeInterval)) (<=> (earlier ?INTERVAL1 ?INTERVAL2) (before (EndFn ?INTERVAL1) (BeginFn ?INTERVAL2)))))

(forall (?INTERVAL1 ?INTERVAL2) (=> (and (instance ?INTERVAL1 TimeInterval) (instance ?INTERVAL2 TimeInterval)) (<=> (finishes ?INTERVAL1 ?INTERVAL2) (and (before (BeginFn ?INTERVAL2) (BeginFn ?INTERVAL1)) (equal (EndFn ?INTERVAL2) (EndFn ?INTERVAL1))))))

(forall (?INTERVAL1 ?INTERVAL2) (=> (and (instance ?INTERVAL1 TimeInterval) (instance ?INTERVAL2 TimeInterval)) (<=> (meetsTemporally ?INTERVAL1 ?INTERVAL2) (equal (EndFn ?INTERVAL1) (BeginFn ?INTERVAL2)))))

(forall (?INTERVAL1 ?INTERVAL2) (=> (and (instance ?INTERVAL1 TimeInterval) (instance ?INTERVAL2 TimeInterval)) (<=> (overlapsTemporally ?INTERVAL1 ?INTERVAL2) (exists (?INTERVAL3) (and (instance ?INTERVAL3 TimePosition) (instance ?INTERVAL3 TimeInterval) (temporalPart ?INTERVAL3 ?INTERVAL1) (temporalPart ?INTERVAL3 ?INTERVAL2))))))

(forall (?INTERVAL1 ?INTERVAL2) (=> (and (instance ?INTERVAL1 TimeInterval) (instance ?INTERVAL2 TimeInterval)) (<=> (starts ?INTERVAL1 ?INTERVAL2) (and (equal (BeginFn ?INTERVAL1) (BeginFn ?INTERVAL2)) (before (EndFn ?INTERVAL1) (EndFn ?INTERVAL2))))))

(forall (?INTERVAL1 ?INTERVAL2) (=> (and (instance ?INTERVAL1 TimeInterval) (instance ?INTERVAL2 TimeInterval)) (=> (and (equal (BeginFn ?INTERVAL1) (BeginFn ?INTERVAL2)) (equal (EndFn ?INTERVAL1) (EndFn ?INTERVAL2))) (equal ?INTERVAL1 ?INTERVAL2))))

(forall (?INTERVAL1 ?INTERVAL2) (=> (and (instance ?INTERVAL1 TimeInterval) (instance ?INTERVAL2 TimeInterval)) (=> (during ?INTERVAL1 ?INTERVAL2) (and (before (EndFn ?INTERVAL1) (EndFn ?INTERVAL2)) (before (BeginFn ?INTERVAL2) (BeginFn ?INTERVAL1))))))

(forall (?INVESTIGATE ?AGENT ?PROP) (=> (and (instance ?INVESTIGATE Process) (instance ?AGENT CognitiveAgent) (instance ?PROP Formula)) (=> (and (instance ?INVESTIGATE Investigating) (agent ?INVESTIGATE ?AGENT) (patient ?INVESTIGATE ?PROP)) (holdsDuring (WhenFn ?INVESTIGATE) `(not (knows ?AGENT ?PROP))))))

(forall (?INVESTIGATE ?PROP) (=> (instance ?INVESTIGATE Process) (=> (and (instance ?INVESTIGATE Investigating) (patient ?INVESTIGATE ?PROP)) (instance ?PROP Formula))))

(forall (?ISLAND) (=> (instance ?ISLAND Object) (=> (instance ?ISLAND Island) (not (exists (?AREA ?PART1 ?PART2) (and (instance ?AREA Object) (instance ?PART1 Object) (instance ?PART2 Object) (instance ?AREA LandArea) (part ?PART1 ?ISLAND) (part ?PART2 ?AREA) (not (part ?ISLAND ?AREA)) (not (part ?AREA ?ISLAND)) (meetsSpatially ?PART1 ?PART2)))))))

(forall (?ISLE ?AREA) (=> (and (instance ?ISLE Object) (instance ?AREA Object)) (=> (and (instance ?ISLE Island) (instance ?AREA GeographicArea) (meetsSpatially ?ISLE ?AREA)) (not (instance ?AREA LandArea)))))

(forall (?ISLE) (=> (instance ?ISLE Object) (=> (instance ?ISLE Island) (exists (?WATER) (and (instance ?WATER Object) (instance ?WATER WaterArea) (meetsSpatially ?ISLE ?WATER))))))

(forall (?ITEM ?LIST) (=> (instance ?LIST List) (=> (inList ?ITEM ?LIST) (exists (?NUMBER) (and (instance ?NUMBER PositiveInteger) (equal (ListOrderFn ?LIST ?NUMBER) ?ITEM))))))

(forall (?ITEM ?VALUE) (=> (instance ?VALUE Attribute) (=> (and (property ?ITEM ?VALUE) (instance ?VALUE TruthValue)) (or (instance ?ITEM Sentence) (instance ?ITEM Proposition)))))

(forall (?JOIN ?ORG ?PERSON) (=> (and (instance ?JOIN Process) (instance ?ORG Collection) (instance ?PERSON Agent) (instance ?PERSON SelfConnectedObject)) (=> (and (instance ?JOIN JoiningAnOrganization) (instance ?ORG Organization) (agent ?JOIN ?PERSON) (patient ?JOIN ?ORG)) (and (holdsDuring (BeginFn (WhenFn ?JOIN)) `(not (member ?PERSON ?ORG))) (holdsDuring (EndFn (WhenFn ?JOIN)) `(member ?PERSON ?ORG))))))

(forall (?JUDGE ?AGENT ?PROPOSITION) (=> (and (instance ?JUDGE Process) (instance ?AGENT CognitiveAgent) (instance ?PROPOSITION Formula)) (=> (and (instance ?JUDGE Judging) (agent ?JUDGE ?AGENT) (patient ?JUDGE ?PROPOSITION)) (and (holdsDuring (BeginFn (WhenFn ?JUDGE)) `(not (believes ?AGENT ?PROPOSITION))) (holdsDuring (EndFn (WhenFn ?JUDGE)) `(believes ?AGENT ?PROPOSITION))))))

(forall (?JUNCT) (=> (instance ?JUNCT SelfConnectedObject) (=> (instance ?JUNCT BodyJunction) (exists (?OBJ1 ?OBJ2) (and (instance ?OBJ1 SelfConnectedObject) (instance ?OBJ2 SelfConnectedObject) (instance ?OBJ1 BodyPart) (instance ?OBJ2 BodyPart) (connects ?JUNCT ?OBJ1 ?OBJ2))))))

(forall (?KEEP ?AGENT ?OBJ) (=> (and (instance ?KEEP Process) (instance ?AGENT Agent)) (=> (and (instance ?KEEP Keeping) (agent ?KEEP ?AGENT) (patient ?KEEP ?OBJ)) (exists (?PUT) (and (instance ?PUT Process) (instance ?PUT Putting) (agent ?PUT ?AGENT) (patient ?PUT ?OBJ) (earlier (WhenFn ?PUT) (WhenFn ?KEEP)))))))

(forall (?KEEP ?OBJ) (=> (and (instance ?KEEP Process) (instance ?OBJ Physical)) (=> (and (instance ?KEEP Keeping) (patient ?KEEP ?OBJ)) (exists (?PLACE) (and (instance ?PLACE Object) (forall (?TIME) (=> (instance ?TIME TimePosition) (=> (temporalPart ?TIME (WhenFn ?KEEP)) (holdsDuring ?TIME `(located ?OBJ ?PLACE))))))))))

(forall (?KILL ?AGENT ?PATIENT) (=> (and (instance ?KILL Process) (instance ?AGENT Agent)) (=> (and (instance ?KILL Killing) (agent ?KILL ?AGENT) (patient ?KILL ?PATIENT)) (and (instance ?AGENT Organism) (instance ?PATIENT Organism)))))

(forall (?KILL ?OBJ) (=> (and (instance ?KILL Process) (instance ?OBJ Agent)) (=> (and (instance ?KILL Killing) (patient ?KILL ?OBJ)) (exists (?DEATH) (and (instance ?DEATH Process) (instance ?DEATH Death) (experiencer ?DEATH ?OBJ) (causes ?KILL ?DEATH))))))

(forall (?KILL ?PATIENT) (=> (and (instance ?KILL Process) (instance ?PATIENT Object)) (=> (and (instance ?KILL Killing) (patient ?KILL ?PATIENT)) (and (holdsDuring (BeginFn (WhenFn ?KILL)) `(attribute ?PATIENT Living)) (holdsDuring (FutureFn (WhenFn ?KILL)) `(attribute ?PATIENT Dead))))))

(forall (?LAND1) (=> (instance ?LAND1 Object) (=> (instance ?LAND1 LandArea) (exists (?LAND2) (and (instance ?LAND2 Object) (part ?LAND1 ?LAND2) (or (instance ?LAND2 Continent) (instance ?LAND2 Island)))))))

(forall (?LANG ?PROC ?AGENT) (=> (and (instance ?LANG Object) (instance ?PROC Process) (instance ?AGENT Agent)) (=> (and (instance ?LANG AnimalLanguage) (agent ?PROC ?AGENT) (instrument ?PROC ?LANG)) (and (instance ?AGENT Animal) (not (instance ?AGENT Human))))))

(forall (?LANG ?PROC ?AGENT) (=> (and (instance ?LANG Object) (instance ?PROC Process) (instance ?AGENT Agent)) (=> (and (instance ?LANG ComputerLanguage) (agent ?PROC ?AGENT) (instrument ?PROC ?LANG)) (instance ?AGENT Machine))))

(forall (?LANG ?PROC ?AGENT) (=> (and (instance ?LANG Object) (instance ?PROC Process) (instance ?AGENT Agent)) (=> (and (instance ?LANG HumanLanguage) (agent ?PROC ?AGENT) (instrument ?PROC ?LANG)) (instance ?AGENT Human))))

(forall (?LANG) (=> (instance ?LANG ConstructedLanguage) (exists (?PLAN) (and (instance ?PLAN Process) (instance ?PLAN Planning) (result ?PLAN ?LANG)))))

(forall (?LEAP ?NUMBER) (=> (and (instance ?LEAP ConstantQuantity) (instance ?NUMBER RealNumber)) (=> (and (instance ?LEAP LeapYear) (equal ?LEAP (MeasureFn ?NUMBER Year))) (or (and (equal (RemainderFn ?NUMBER 4) 0) (not (equal (RemainderFn ?NUMBER 100) 0))) (equal (RemainderFn ?NUMBER 400) 0)))))

(forall (?LEARN ?AGENT ?PROP) (=> (and (instance ?LEARN Process) (instance ?AGENT CognitiveAgent) (instance ?PROP Formula)) (=> (and (instance ?LEARN Learning) (agent ?LEARN ?AGENT) (patient ?LEARN ?PROP)) (and (holdsDuring (BeginFn (WhenFn ?LEARN)) `(not (knows ?AGENT ?PROP))) (holdsDuring (EndFn (WhenFn ?LEARN)) `(knows ?AGENT ?PROP))))))

(forall (?LEARN ?AGENT) (=> (and (instance ?LEARN Process) (instance ?AGENT Agent)) (=> (and (instance ?LEARN Learning) (agent ?LEARN ?AGENT)) (instance ?AGENT CognitiveAgent))))

(forall (?LEAVE ?ORG ?PERSON) (=> (and (instance ?LEAVE Process) (instance ?ORG Collection) (instance ?PERSON Agent) (instance ?PERSON SelfConnectedObject)) (=> (and (instance ?LEAVE LeavingAnOrganization) (instance ?ORG Organization) (agent ?LEAVE ?PERSON) (patient ?LEAVE ?ORG)) (and (holdsDuring (BeginFn (WhenFn ?LEAVE)) `(member ?PERSON ?ORG)) (holdsDuring (EndFn (WhenFn ?LEAVE)) `(not (member ?PERSON ?ORG)))))))

(forall (?LINE1 ?LINE2) (=> (and (instance ?LINE1 OneDimensionalFigure) (instance ?LINE2 OneDimensionalFigure)) (=> (parallel ?LINE1 ?LINE2) (not (exists (?POINT) (and (instance ?POINT GeometricPoint) (pointOfIntersection ?LINE1 ?LINE2 ?POINT)))))))

(forall (?LIST ?AVERAGE) (=> (and (instance ?LIST List) (instance ?AVERAGE RealNumber)) (=> (average ?LIST ?AVERAGE) (forall (?LISTITEM) (=> (inList ?LISTITEM ?LIST) (instance ?LISTITEM RealNumber))))))

(forall (?LIST ?NUMBER1) (=> (instance ?NUMBER1 NonnegativeInteger) (=> (and (equal (ListLengthFn ?LIST) ?NUMBER1) (instance ?LIST List) (instance ?NUMBER1 PositiveInteger)) (forall (?NUMBER2) (=> (instance ?NUMBER2 PositiveInteger) (<=> (exists (?ITEM) (and (equal (ListOrderFn ?LIST ?NUMBER2) ?ITEM) (inList ?ITEM ?LIST))) (lessThanOrEqualTo ?NUMBER2 ?NUMBER1)))))))

(forall (?LIST) (<=> (equal ?LIST NullList) (and (instance ?LIST List) (not (exists (?ITEM) (inList ?ITEM ?LIST))))))

(forall (?LIST) (=> (instance ?LIST List) (=> (instance ?LIST UniqueList) (forall (?NUMBER1 ?NUMBER2) (=> (and (instance ?NUMBER1 PositiveInteger) (instance ?NUMBER2 PositiveInteger)) (=> (equal (ListOrderFn ?LIST ?NUMBER1) (ListOrderFn ?LIST ?NUMBER2)) (equal ?NUMBER1 ?NUMBER2)))))))

(forall (?LIST) (=> (instance ?LIST List) (exists (?NUMBER1) (and (instance ?NUMBER1 PositiveInteger) (exists (?ITEM1) (and (not (equal (ListOrderFn ?LIST ?NUMBER1) ?ITEM1)) (forall (?NUMBER2) (=> (and (instance ?NUMBER2 PositiveInteger) (lessThan ?NUMBER2 ?NUMBER1)) (exists (?ITEM2) (equal (ListOrderFn ?LIST ?NUMBER2) ?ITEM2))))))))))

(forall (?LIST1 ?LIST2 ?ITEM) (=> (and (instance ?LIST1 List) (instance ?LIST2 List)) (=> (identicalListItems ?LIST1 ?LIST2) (<=> (inList ?ITEM ?LIST1) (inList ?ITEM ?LIST2)))))

(forall (?LIST1 ?LIST2 ?ROW11 ?ROW12 ?ROW13 ?ROW14 ?ROW15 ?ROW16 ?ROW17 ?ROW21 ?ROW22 ?ROW23 ?ROW24 ?ROW25 ?ROW26 ?ROW27) (=> (and (instance ?LIST1 List) (instance ?LIST2 List)) (=> (equal ?LIST1 ?LIST2) (=> (and (equal ?LIST1 (ListFn ?ROW11 ?ROW12 ?ROW13 ?ROW14 ?ROW15 ?ROW16 ?ROW17)) (equal ?LIST2 (ListFn ?ROW21 ?ROW22 ?ROW23 ?ROW24 ?ROW25 ?ROW26 ?ROW27))) (forall (?NUMBER) (=> (instance ?NUMBER PositiveInteger) (equal (ListOrderFn (ListFn ?ROW11 ?ROW12 ?ROW13 ?ROW14 ?ROW15 ?ROW16 ?ROW17) ?NUMBER) (ListOrderFn (ListFn ?ROW21 ?ROW22 ?ROW23 ?ROW24 ?ROW25 ?ROW26 ?ROW27) ?NUMBER))))))))

(forall (?LIST1 ?LIST2 ?ROW11 ?ROW12 ?ROW13 ?ROW14 ?ROW15 ?ROW16 ?ROW17 ?ROW21 ?ROW22 ?ROW23 ?ROW24 ?ROW25 ?ROW26) (=> (and (instance ?LIST1 List) (instance ?LIST2 List)) (=> (equal ?LIST1 ?LIST2) (=> (and (equal ?LIST1 (ListFn ?ROW11 ?ROW12 ?ROW13 ?ROW14 ?ROW15 ?ROW16 ?ROW17)) (equal ?LIST2 (ListFn ?ROW21 ?ROW22 ?ROW23 ?ROW24 ?ROW25 ?ROW26))) (forall (?NUMBER) (=> (instance ?NUMBER PositiveInteger) (equal (ListOrderFn (ListFn ?ROW11 ?ROW12 ?ROW13 ?ROW14 ?ROW15 ?ROW16 ?ROW17) ?NUMBER) (ListOrderFn (ListFn ?ROW21 ?ROW22 ?ROW23 ?ROW24 ?ROW25 ?ROW26) ?NUMBER))))))))

(forall (?LIST1 ?LIST2 ?ROW11 ?ROW12 ?ROW13 ?ROW14 ?ROW15 ?ROW16 ?ROW17 ?ROW21 ?ROW22 ?ROW23 ?ROW24 ?ROW25) (=> (and (instance ?LIST1 List) (instance ?LIST2 List)) (=> (equal ?LIST1 ?LIST2) (=> (and (equal ?LIST1 (ListFn ?ROW11 ?ROW12 ?ROW13 ?ROW14 ?ROW15 ?ROW16 ?ROW17)) (equal ?LIST2 (ListFn ?ROW21 ?ROW22 ?ROW23 ?ROW24 ?ROW25))) (forall (?NUMBER) (=> (instance ?NUMBER PositiveInteger) (equal (ListOrderFn (ListFn ?ROW11 ?ROW12 ?ROW13 ?ROW14 ?ROW15 ?ROW16 ?ROW17) ?NUMBER) (ListOrderFn (ListFn ?ROW21 ?ROW22 ?ROW23 ?ROW24 ?ROW25) ?NUMBER))))))))

(forall (?LIST1 ?LIST2 ?ROW11 ?ROW12 ?ROW13 ?ROW14 ?ROW15 ?ROW16 ?ROW17 ?ROW21 ?ROW22 ?ROW23 ?ROW24) (=> (and (instance ?LIST1 List) (instance ?LIST2 List)) (=> (equal ?LIST1 ?LIST2) (=> (and (equal ?LIST1 (ListFn ?ROW11 ?ROW12 ?ROW13 ?ROW14 ?ROW15 ?ROW16 ?ROW17)) (equal ?LIST2 (ListFn ?ROW21 ?ROW22 ?ROW23 ?ROW24))) (forall (?NUMBER) (=> (instance ?NUMBER PositiveInteger) (equal (ListOrderFn (ListFn ?ROW11 ?ROW12 ?ROW13 ?ROW14 ?ROW15 ?ROW16 ?ROW17) ?NUMBER) (ListOrderFn (ListFn ?ROW21 ?ROW22 ?ROW23 ?ROW24) ?NUMBER))))))))

(forall (?LIST1 ?LIST2 ?ROW11 ?ROW12 ?ROW13 ?ROW14 ?ROW15 ?ROW16 ?ROW17 ?ROW21 ?ROW22 ?ROW23) (=> (and (instance ?LIST1 List) (instance ?LIST2 List)) (=> (equal ?LIST1 ?LIST2) (=> (and (equal ?LIST1 (ListFn ?ROW11 ?ROW12 ?ROW13 ?ROW14 ?ROW15 ?ROW16 ?ROW17)) (equal ?LIST2 (ListFn ?ROW21 ?ROW22 ?ROW23))) (forall (?NUMBER) (=> (instance ?NUMBER PositiveInteger) (equal (ListOrderFn (ListFn ?ROW11 ?ROW12 ?ROW13 ?ROW14 ?ROW15 ?ROW16 ?ROW17) ?NUMBER) (ListOrderFn (ListFn ?ROW21 ?ROW22 ?ROW23) ?NUMBER))))))))

(forall (?LIST1 ?LIST2 ?ROW11 ?ROW12 ?ROW13 ?ROW14 ?ROW15 ?ROW16 ?ROW17 ?ROW21 ?ROW22) (=> (and (instance ?LIST1 List) (instance ?LIST2 List)) (=> (equal ?LIST1 ?LIST2) (=> (and (equal ?LIST1 (ListFn ?ROW11 ?ROW12 ?ROW13 ?ROW14 ?ROW15 ?ROW16 ?ROW17)) (equal ?LIST2 (ListFn ?ROW21 ?ROW22))) (forall (?NUMBER) (=> (instance ?NUMBER PositiveInteger) (equal (ListOrderFn (ListFn ?ROW11 ?ROW12 ?ROW13 ?ROW14 ?ROW15 ?ROW16 ?ROW17) ?NUMBER) (ListOrderFn (ListFn ?ROW21 ?ROW22) ?NUMBER))))))))

(forall (?LIST1 ?LIST2 ?ROW11 ?ROW12 ?ROW13 ?ROW14 ?ROW15 ?ROW16 ?ROW17 ?ROW21) (=> (and (instance ?LIST1 List) (instance ?LIST2 List)) (=> (equal ?LIST1 ?LIST2) (=> (and (equal ?LIST1 (ListFn ?ROW11 ?ROW12 ?ROW13 ?ROW14 ?ROW15 ?ROW16 ?ROW17)) (equal ?LIST2 (ListFn ?ROW21))) (forall (?NUMBER) (=> (instance ?NUMBER PositiveInteger) (equal (ListOrderFn (ListFn ?ROW11 ?ROW12 ?ROW13 ?ROW14 ?ROW15 ?ROW16 ?ROW17) ?NUMBER) (ListOrderFn (ListFn ?ROW21) ?NUMBER))))))))

(forall (?LIST1 ?LIST2 ?ROW11 ?ROW12 ?ROW13 ?ROW14 ?ROW15 ?ROW16 ?ROW21 ?ROW22 ?ROW23 ?ROW24 ?ROW25 ?ROW26 ?ROW27) (=> (and (instance ?LIST1 List) (instance ?LIST2 List)) (=> (equal ?LIST1 ?LIST2) (=> (and (equal ?LIST1 (ListFn ?ROW11 ?ROW12 ?ROW13 ?ROW14 ?ROW15 ?ROW16)) (equal ?LIST2 (ListFn ?ROW21 ?ROW22 ?ROW23 ?ROW24 ?ROW25 ?ROW26 ?ROW27))) (forall (?NUMBER) (=> (instance ?NUMBER PositiveInteger) (equal (ListOrderFn (ListFn ?ROW11 ?ROW12 ?ROW13 ?ROW14 ?ROW15 ?ROW16) ?NUMBER) (ListOrderFn (ListFn ?ROW21 ?ROW22 ?ROW23 ?ROW24 ?ROW25 ?ROW26 ?ROW27) ?NUMBER))))))))

(forall (?LIST1 ?LIST2 ?ROW11 ?ROW12 ?ROW13 ?ROW14 ?ROW15 ?ROW16 ?ROW21 ?ROW22 ?ROW23 ?ROW24 ?ROW25 ?ROW26) (=> (and (instance ?LIST1 List) (instance ?LIST2 List)) (=> (equal ?LIST1 ?LIST2) (=> (and (equal ?LIST1 (ListFn ?ROW11 ?ROW12 ?ROW13 ?ROW14 ?ROW15 ?ROW16)) (equal ?LIST2 (ListFn ?ROW21 ?ROW22 ?ROW23 ?ROW24 ?ROW25 ?ROW26))) (forall (?NUMBER) (=> (instance ?NUMBER PositiveInteger) (equal (ListOrderFn (ListFn ?ROW11 ?ROW12 ?ROW13 ?ROW14 ?ROW15 ?ROW16) ?NUMBER) (ListOrderFn (ListFn ?ROW21 ?ROW22 ?ROW23 ?ROW24 ?ROW25 ?ROW26) ?NUMBER))))))))

(forall (?LIST1 ?LIST2 ?ROW11 ?ROW12 ?ROW13 ?ROW14 ?ROW15 ?ROW16 ?ROW21 ?ROW22 ?ROW23 ?ROW24 ?ROW25) (=> (and (instance ?LIST1 List) (instance ?LIST2 List)) (=> (equal ?LIST1 ?LIST2) (=> (and (equal ?LIST1 (ListFn ?ROW11 ?ROW12 ?ROW13 ?ROW14 ?ROW15 ?ROW16)) (equal ?LIST2 (ListFn ?ROW21 ?ROW22 ?ROW23 ?ROW24 ?ROW25))) (forall (?NUMBER) (=> (instance ?NUMBER PositiveInteger) (equal (ListOrderFn (ListFn ?ROW11 ?ROW12 ?ROW13 ?ROW14 ?ROW15 ?ROW16) ?NUMBER) (ListOrderFn (ListFn ?ROW21 ?ROW22 ?ROW23 ?ROW24 ?ROW25) ?NUMBER))))))))

(forall (?LIST1 ?LIST2 ?ROW11 ?ROW12 ?ROW13 ?ROW14 ?ROW15 ?ROW16 ?ROW21 ?ROW22 ?ROW23 ?ROW24) (=> (and (instance ?LIST1 List) (instance ?LIST2 List)) (=> (equal ?LIST1 ?LIST2) (=> (and (equal ?LIST1 (ListFn ?ROW11 ?ROW12 ?ROW13 ?ROW14 ?ROW15 ?ROW16)) (equal ?LIST2 (ListFn ?ROW21 ?ROW22 ?ROW23 ?ROW24))) (forall (?NUMBER) (=> (instance ?NUMBER PositiveInteger) (equal (ListOrderFn (ListFn ?ROW11 ?ROW12 ?ROW13 ?ROW14 ?ROW15 ?ROW16) ?NUMBER) (ListOrderFn (ListFn ?ROW21 ?ROW22 ?ROW23 ?ROW24) ?NUMBER))))))))

(forall (?LIST1 ?LIST2 ?ROW11 ?ROW12 ?ROW13 ?ROW14 ?ROW15 ?ROW16 ?ROW21 ?ROW22 ?ROW23) (=> (and (instance ?LIST1 List) (instance ?LIST2 List)) (=> (equal ?LIST1 ?LIST2) (=> (and (equal ?LIST1 (ListFn ?ROW11 ?ROW12 ?ROW13 ?ROW14 ?ROW15 ?ROW16)) (equal ?LIST2 (ListFn ?ROW21 ?ROW22 ?ROW23))) (forall (?NUMBER) (=> (instance ?NUMBER PositiveInteger) (equal (ListOrderFn (ListFn ?ROW11 ?ROW12 ?ROW13 ?ROW14 ?ROW15 ?ROW16) ?NUMBER) (ListOrderFn (ListFn ?ROW21 ?ROW22 ?ROW23) ?NUMBER))))))))

(forall (?LIST1 ?LIST2 ?ROW11 ?ROW12 ?ROW13 ?ROW14 ?ROW15 ?ROW16 ?ROW21 ?ROW22) (=> (and (instance ?LIST1 List) (instance ?LIST2 List)) (=> (equal ?LIST1 ?LIST2) (=> (and (equal ?LIST1 (ListFn ?ROW11 ?ROW12 ?ROW13 ?ROW14 ?ROW15 ?ROW16)) (equal ?LIST2 (ListFn ?ROW21 ?ROW22))) (forall (?NUMBER) (=> (instance ?NUMBER PositiveInteger) (equal (ListOrderFn (ListFn ?ROW11 ?ROW12 ?ROW13 ?ROW14 ?ROW15 ?ROW16) ?NUMBER) (ListOrderFn (ListFn ?ROW21 ?ROW22) ?NUMBER))))))))

(forall (?LIST1 ?LIST2 ?ROW11 ?ROW12 ?ROW13 ?ROW14 ?ROW15 ?ROW16 ?ROW21) (=> (and (instance ?LIST1 List) (instance ?LIST2 List)) (=> (equal ?LIST1 ?LIST2) (=> (and (equal ?LIST1 (ListFn ?ROW11 ?ROW12 ?ROW13 ?ROW14 ?ROW15 ?ROW16)) (equal ?LIST2 (ListFn ?ROW21))) (forall (?NUMBER) (=> (instance ?NUMBER PositiveInteger) (equal (ListOrderFn (ListFn ?ROW11 ?ROW12 ?ROW13 ?ROW14 ?ROW15 ?ROW16) ?NUMBER) (ListOrderFn (ListFn ?ROW21) ?NUMBER))))))))

(forall (?LIST1 ?LIST2 ?ROW11 ?ROW12 ?ROW13 ?ROW14 ?ROW15 ?ROW21 ?ROW22 ?ROW23 ?ROW24 ?ROW25 ?ROW26 ?ROW27) (=> (and (instance ?LIST1 List) (instance ?LIST2 List)) (=> (equal ?LIST1 ?LIST2) (=> (and (equal ?LIST1 (ListFn ?ROW11 ?ROW12 ?ROW13 ?ROW14 ?ROW15)) (equal ?LIST2 (ListFn ?ROW21 ?ROW22 ?ROW23 ?ROW24 ?ROW25 ?ROW26 ?ROW27))) (forall (?NUMBER) (=> (instance ?NUMBER PositiveInteger) (equal (ListOrderFn (ListFn ?ROW11 ?ROW12 ?ROW13 ?ROW14 ?ROW15) ?NUMBER) (ListOrderFn (ListFn ?ROW21 ?ROW22 ?ROW23 ?ROW24 ?ROW25 ?ROW26 ?ROW27) ?NUMBER))))))))

(forall (?LIST1 ?LIST2 ?ROW11 ?ROW12 ?ROW13 ?ROW14 ?ROW15 ?ROW21 ?ROW22 ?ROW23 ?ROW24 ?ROW25 ?ROW26) (=> (and (instance ?LIST1 List) (instance ?LIST2 List)) (=> (equal ?LIST1 ?LIST2) (=> (and (equal ?LIST1 (ListFn ?ROW11 ?ROW12 ?ROW13 ?ROW14 ?ROW15)) (equal ?LIST2 (ListFn ?ROW21 ?ROW22 ?ROW23 ?ROW24 ?ROW25 ?ROW26))) (forall (?NUMBER) (=> (instance ?NUMBER PositiveInteger) (equal (ListOrderFn (ListFn ?ROW11 ?ROW12 ?ROW13 ?ROW14 ?ROW15) ?NUMBER) (ListOrderFn (ListFn ?ROW21 ?ROW22 ?ROW23 ?ROW24 ?ROW25 ?ROW26) ?NUMBER))))))))

(forall (?LIST1 ?LIST2 ?ROW11 ?ROW12 ?ROW13 ?ROW14 ?ROW15 ?ROW21 ?ROW22 ?ROW23 ?ROW24 ?ROW25) (=> (and (instance ?LIST1 List) (instance ?LIST2 List)) (=> (equal ?LIST1 ?LIST2) (=> (and (equal ?LIST1 (ListFn ?ROW11 ?ROW12 ?ROW13 ?ROW14 ?ROW15)) (equal ?LIST2 (ListFn ?ROW21 ?ROW22 ?ROW23 ?ROW24 ?ROW25))) (forall (?NUMBER) (=> (instance ?NUMBER PositiveInteger) (equal (ListOrderFn (ListFn ?ROW11 ?ROW12 ?ROW13 ?ROW14 ?ROW15) ?NUMBER) (ListOrderFn (ListFn ?ROW21 ?ROW22 ?ROW23 ?ROW24 ?ROW25) ?NUMBER))))))))

(forall (?LIST1 ?LIST2 ?ROW11 ?ROW12 ?ROW13 ?ROW14 ?ROW15 ?ROW21 ?ROW22 ?ROW23 ?ROW24) (=> (and (instance ?LIST1 List) (instance ?LIST2 List)) (=> (equal ?LIST1 ?LIST2) (=> (and (equal ?LIST1 (ListFn ?ROW11 ?ROW12 ?ROW13 ?ROW14 ?ROW15)) (equal ?LIST2 (ListFn ?ROW21 ?ROW22 ?ROW23 ?ROW24))) (forall (?NUMBER) (=> (instance ?NUMBER PositiveInteger) (equal (ListOrderFn (ListFn ?ROW11 ?ROW12 ?ROW13 ?ROW14 ?ROW15) ?NUMBER) (ListOrderFn (ListFn ?ROW21 ?ROW22 ?ROW23 ?ROW24) ?NUMBER))))))))

(forall (?LIST1 ?LIST2 ?ROW11 ?ROW12 ?ROW13 ?ROW14 ?ROW15 ?ROW21 ?ROW22 ?ROW23) (=> (and (instance ?LIST1 List) (instance ?LIST2 List)) (=> (equal ?LIST1 ?LIST2) (=> (and (equal ?LIST1 (ListFn ?ROW11 ?ROW12 ?ROW13 ?ROW14 ?ROW15)) (equal ?LIST2 (ListFn ?ROW21 ?ROW22 ?ROW23))) (forall (?NUMBER) (=> (instance ?NUMBER PositiveInteger) (equal (ListOrderFn (ListFn ?ROW11 ?ROW12 ?ROW13 ?ROW14 ?ROW15) ?NUMBER) (ListOrderFn (ListFn ?ROW21 ?ROW22 ?ROW23) ?NUMBER))))))))

(forall (?LIST1 ?LIST2 ?ROW11 ?ROW12 ?ROW13 ?ROW14 ?ROW15 ?ROW21 ?ROW22) (=> (and (instance ?LIST1 List) (instance ?LIST2 List)) (=> (equal ?LIST1 ?LIST2) (=> (and (equal ?LIST1 (ListFn ?ROW11 ?ROW12 ?ROW13 ?ROW14 ?ROW15)) (equal ?LIST2 (ListFn ?ROW21 ?ROW22))) (forall (?NUMBER) (=> (instance ?NUMBER PositiveInteger) (equal (ListOrderFn (ListFn ?ROW11 ?ROW12 ?ROW13 ?ROW14 ?ROW15) ?NUMBER) (ListOrderFn (ListFn ?ROW21 ?ROW22) ?NUMBER))))))))

(forall (?LIST1 ?LIST2 ?ROW11 ?ROW12 ?ROW13 ?ROW14 ?ROW15 ?ROW21) (=> (and (instance ?LIST1 List) (instance ?LIST2 List)) (=> (equal ?LIST1 ?LIST2) (=> (and (equal ?LIST1 (ListFn ?ROW11 ?ROW12 ?ROW13 ?ROW14 ?ROW15)) (equal ?LIST2 (ListFn ?ROW21))) (forall (?NUMBER) (=> (instance ?NUMBER PositiveInteger) (equal (ListOrderFn (ListFn ?ROW11 ?ROW12 ?ROW13 ?ROW14 ?ROW15) ?NUMBER) (ListOrderFn (ListFn ?ROW21) ?NUMBER))))))))

(forall (?LIST1 ?LIST2 ?ROW11 ?ROW12 ?ROW13 ?ROW14 ?ROW21 ?ROW22 ?ROW23 ?ROW24 ?ROW25 ?ROW26 ?ROW27) (=> (and (instance ?LIST1 List) (instance ?LIST2 List)) (=> (equal ?LIST1 ?LIST2) (=> (and (equal ?LIST1 (ListFn ?ROW11 ?ROW12 ?ROW13 ?ROW14)) (equal ?LIST2 (ListFn ?ROW21 ?ROW22 ?ROW23 ?ROW24 ?ROW25 ?ROW26 ?ROW27))) (forall (?NUMBER) (=> (instance ?NUMBER PositiveInteger) (equal (ListOrderFn (ListFn ?ROW11 ?ROW12 ?ROW13 ?ROW14) ?NUMBER) (ListOrderFn (ListFn ?ROW21 ?ROW22 ?ROW23 ?ROW24 ?ROW25 ?ROW26 ?ROW27) ?NUMBER))))))))

(forall (?LIST1 ?LIST2 ?ROW11 ?ROW12 ?ROW13 ?ROW14 ?ROW21 ?ROW22 ?ROW23 ?ROW24 ?ROW25 ?ROW26) (=> (and (instance ?LIST1 List) (instance ?LIST2 List)) (=> (equal ?LIST1 ?LIST2) (=> (and (equal ?LIST1 (ListFn ?ROW11 ?ROW12 ?ROW13 ?ROW14)) (equal ?LIST2 (ListFn ?ROW21 ?ROW22 ?ROW23 ?ROW24 ?ROW25 ?ROW26))) (forall (?NUMBER) (=> (instance ?NUMBER PositiveInteger) (equal (ListOrderFn (ListFn ?ROW11 ?ROW12 ?ROW13 ?ROW14) ?NUMBER) (ListOrderFn (ListFn ?ROW21 ?ROW22 ?ROW23 ?ROW24 ?ROW25 ?ROW26) ?NUMBER))))))))

(forall (?LIST1 ?LIST2 ?ROW11 ?ROW12 ?ROW13 ?ROW14 ?ROW21 ?ROW22 ?ROW23 ?ROW24 ?ROW25) (=> (and (instance ?LIST1 List) (instance ?LIST2 List)) (=> (equal ?LIST1 ?LIST2) (=> (and (equal ?LIST1 (ListFn ?ROW11 ?ROW12 ?ROW13 ?ROW14)) (equal ?LIST2 (ListFn ?ROW21 ?ROW22 ?ROW23 ?ROW24 ?ROW25))) (forall (?NUMBER) (=> (instance ?NUMBER PositiveInteger) (equal (ListOrderFn (ListFn ?ROW11 ?ROW12 ?ROW13 ?ROW14) ?NUMBER) (ListOrderFn (ListFn ?ROW21 ?ROW22 ?ROW23 ?ROW24 ?ROW25) ?NUMBER))))))))

(forall (?LIST1 ?LIST2 ?ROW11 ?ROW12 ?ROW13 ?ROW14 ?ROW21 ?ROW22 ?ROW23 ?ROW24) (=> (and (instance ?LIST1 List) (instance ?LIST2 List)) (=> (equal ?LIST1 ?LIST2) (=> (and (equal ?LIST1 (ListFn ?ROW11 ?ROW12 ?ROW13 ?ROW14)) (equal ?LIST2 (ListFn ?ROW21 ?ROW22 ?ROW23 ?ROW24))) (forall (?NUMBER) (=> (instance ?NUMBER PositiveInteger) (equal (ListOrderFn (ListFn ?ROW11 ?ROW12 ?ROW13 ?ROW14) ?NUMBER) (ListOrderFn (ListFn ?ROW21 ?ROW22 ?ROW23 ?ROW24) ?NUMBER))))))))

(forall (?LIST1 ?LIST2 ?ROW11 ?ROW12 ?ROW13 ?ROW14 ?ROW21 ?ROW22 ?ROW23) (=> (and (instance ?LIST1 List) (instance ?LIST2 List)) (=> (equal ?LIST1 ?LIST2) (=> (and (equal ?LIST1 (ListFn ?ROW11 ?ROW12 ?ROW13 ?ROW14)) (equal ?LIST2 (ListFn ?ROW21 ?ROW22 ?ROW23))) (forall (?NUMBER) (=> (instance ?NUMBER PositiveInteger) (equal (ListOrderFn (ListFn ?ROW11 ?ROW12 ?ROW13 ?ROW14) ?NUMBER) (ListOrderFn (ListFn ?ROW21 ?ROW22 ?ROW23) ?NUMBER))))))))

(forall (?LIST1 ?LIST2 ?ROW11 ?ROW12 ?ROW13 ?ROW14 ?ROW21 ?ROW22) (=> (and (instance ?LIST1 List) (instance ?LIST2 List)) (=> (equal ?LIST1 ?LIST2) (=> (and (equal ?LIST1 (ListFn ?ROW11 ?ROW12 ?ROW13 ?ROW14)) (equal ?LIST2 (ListFn ?ROW21 ?ROW22))) (forall (?NUMBER) (=> (instance ?NUMBER PositiveInteger) (equal (ListOrderFn (ListFn ?ROW11 ?ROW12 ?ROW13 ?ROW14) ?NUMBER) (ListOrderFn (ListFn ?ROW21 ?ROW22) ?NUMBER))))))))

(forall (?LIST1 ?LIST2 ?ROW11 ?ROW12 ?ROW13 ?ROW14 ?ROW21) (=> (and (instance ?LIST1 List) (instance ?LIST2 List)) (=> (equal ?LIST1 ?LIST2) (=> (and (equal ?LIST1 (ListFn ?ROW11 ?ROW12 ?ROW13 ?ROW14)) (equal ?LIST2 (ListFn ?ROW21))) (forall (?NUMBER) (=> (instance ?NUMBER PositiveInteger) (equal (ListOrderFn (ListFn ?ROW11 ?ROW12 ?ROW13 ?ROW14) ?NUMBER) (ListOrderFn (ListFn ?ROW21) ?NUMBER))))))))

(forall (?LIST1 ?LIST2 ?ROW11 ?ROW12 ?ROW13 ?ROW21 ?ROW22 ?ROW23 ?ROW24 ?ROW25 ?ROW26 ?ROW27) (=> (and (instance ?LIST1 List) (instance ?LIST2 List)) (=> (equal ?LIST1 ?LIST2) (=> (and (equal ?LIST1 (ListFn ?ROW11 ?ROW12 ?ROW13)) (equal ?LIST2 (ListFn ?ROW21 ?ROW22 ?ROW23 ?ROW24 ?ROW25 ?ROW26 ?ROW27))) (forall (?NUMBER) (=> (instance ?NUMBER PositiveInteger) (equal (ListOrderFn (ListFn ?ROW11 ?ROW12 ?ROW13) ?NUMBER) (ListOrderFn (ListFn ?ROW21 ?ROW22 ?ROW23 ?ROW24 ?ROW25 ?ROW26 ?ROW27) ?NUMBER))))))))

(forall (?LIST1 ?LIST2 ?ROW11 ?ROW12 ?ROW13 ?ROW21 ?ROW22 ?ROW23 ?ROW24 ?ROW25 ?ROW26) (=> (and (instance ?LIST1 List) (instance ?LIST2 List)) (=> (equal ?LIST1 ?LIST2) (=> (and (equal ?LIST1 (ListFn ?ROW11 ?ROW12 ?ROW13)) (equal ?LIST2 (ListFn ?ROW21 ?ROW22 ?ROW23 ?ROW24 ?ROW25 ?ROW26))) (forall (?NUMBER) (=> (instance ?NUMBER PositiveInteger) (equal (ListOrderFn (ListFn ?ROW11 ?ROW12 ?ROW13) ?NUMBER) (ListOrderFn (ListFn ?ROW21 ?ROW22 ?ROW23 ?ROW24 ?ROW25 ?ROW26) ?NUMBER))))))))

(forall (?LIST1 ?LIST2 ?ROW11 ?ROW12 ?ROW13 ?ROW21 ?ROW22 ?ROW23 ?ROW24 ?ROW25) (=> (and (instance ?LIST1 List) (instance ?LIST2 List)) (=> (equal ?LIST1 ?LIST2) (=> (and (equal ?LIST1 (ListFn ?ROW11 ?ROW12 ?ROW13)) (equal ?LIST2 (ListFn ?ROW21 ?ROW22 ?ROW23 ?ROW24 ?ROW25))) (forall (?NUMBER) (=> (instance ?NUMBER PositiveInteger) (equal (ListOrderFn (ListFn ?ROW11 ?ROW12 ?ROW13) ?NUMBER) (ListOrderFn (ListFn ?ROW21 ?ROW22 ?ROW23 ?ROW24 ?ROW25) ?NUMBER))))))))

(forall (?LIST1 ?LIST2 ?ROW11 ?ROW12 ?ROW13 ?ROW21 ?ROW22 ?ROW23 ?ROW24) (=> (and (instance ?LIST1 List) (instance ?LIST2 List)) (=> (equal ?LIST1 ?LIST2) (=> (and (equal ?LIST1 (ListFn ?ROW11 ?ROW12 ?ROW13)) (equal ?LIST2 (ListFn ?ROW21 ?ROW22 ?ROW23 ?ROW24))) (forall (?NUMBER) (=> (instance ?NUMBER PositiveInteger) (equal (ListOrderFn (ListFn ?ROW11 ?ROW12 ?ROW13) ?NUMBER) (ListOrderFn (ListFn ?ROW21 ?ROW22 ?ROW23 ?ROW24) ?NUMBER))))))))

(forall (?LIST1 ?LIST2 ?ROW11 ?ROW12 ?ROW13 ?ROW21 ?ROW22 ?ROW23) (=> (and (instance ?LIST1 List) (instance ?LIST2 List)) (=> (equal ?LIST1 ?LIST2) (=> (and (equal ?LIST1 (ListFn ?ROW11 ?ROW12 ?ROW13)) (equal ?LIST2 (ListFn ?ROW21 ?ROW22 ?ROW23))) (forall (?NUMBER) (=> (instance ?NUMBER PositiveInteger) (equal (ListOrderFn (ListFn ?ROW11 ?ROW12 ?ROW13) ?NUMBER) (ListOrderFn (ListFn ?ROW21 ?ROW22 ?ROW23) ?NUMBER))))))))

(forall (?LIST1 ?LIST2 ?ROW11 ?ROW12 ?ROW13 ?ROW21 ?ROW22) (=> (and (instance ?LIST1 List) (instance ?LIST2 List)) (=> (equal ?LIST1 ?LIST2) (=> (and (equal ?LIST1 (ListFn ?ROW11 ?ROW12 ?ROW13)) (equal ?LIST2 (ListFn ?ROW21 ?ROW22))) (forall (?NUMBER) (=> (instance ?NUMBER PositiveInteger) (equal (ListOrderFn (ListFn ?ROW11 ?ROW12 ?ROW13) ?NUMBER) (ListOrderFn (ListFn ?ROW21 ?ROW22) ?NUMBER))))))))

(forall (?LIST1 ?LIST2 ?ROW11 ?ROW12 ?ROW13 ?ROW21) (=> (and (instance ?LIST1 List) (instance ?LIST2 List)) (=> (equal ?LIST1 ?LIST2) (=> (and (equal ?LIST1 (ListFn ?ROW11 ?ROW12 ?ROW13)) (equal ?LIST2 (ListFn ?ROW21))) (forall (?NUMBER) (=> (instance ?NUMBER PositiveInteger) (equal (ListOrderFn (ListFn ?ROW11 ?ROW12 ?ROW13) ?NUMBER) (ListOrderFn (ListFn ?ROW21) ?NUMBER))))))))

(forall (?LIST1 ?LIST2 ?ROW11 ?ROW12 ?ROW21 ?ROW22 ?ROW23 ?ROW24 ?ROW25 ?ROW26 ?ROW27) (=> (and (instance ?LIST1 List) (instance ?LIST2 List)) (=> (equal ?LIST1 ?LIST2) (=> (and (equal ?LIST1 (ListFn ?ROW11 ?ROW12)) (equal ?LIST2 (ListFn ?ROW21 ?ROW22 ?ROW23 ?ROW24 ?ROW25 ?ROW26 ?ROW27))) (forall (?NUMBER) (=> (instance ?NUMBER PositiveInteger) (equal (ListOrderFn (ListFn ?ROW11 ?ROW12) ?NUMBER) (ListOrderFn (ListFn ?ROW21 ?ROW22 ?ROW23 ?ROW24 ?ROW25 ?ROW26 ?ROW27) ?NUMBER))))))))

(forall (?LIST1 ?LIST2 ?ROW11 ?ROW12 ?ROW21 ?ROW22 ?ROW23 ?ROW24 ?ROW25 ?ROW26) (=> (and (instance ?LIST1 List) (instance ?LIST2 List)) (=> (equal ?LIST1 ?LIST2) (=> (and (equal ?LIST1 (ListFn ?ROW11 ?ROW12)) (equal ?LIST2 (ListFn ?ROW21 ?ROW22 ?ROW23 ?ROW24 ?ROW25 ?ROW26))) (forall (?NUMBER) (=> (instance ?NUMBER PositiveInteger) (equal (ListOrderFn (ListFn ?ROW11 ?ROW12) ?NUMBER) (ListOrderFn (ListFn ?ROW21 ?ROW22 ?ROW23 ?ROW24 ?ROW25 ?ROW26) ?NUMBER))))))))

(forall (?LIST1 ?LIST2 ?ROW11 ?ROW12 ?ROW21 ?ROW22 ?ROW23 ?ROW24 ?ROW25) (=> (and (instance ?LIST1 List) (instance ?LIST2 List)) (=> (equal ?LIST1 ?LIST2) (=> (and (equal ?LIST1 (ListFn ?ROW11 ?ROW12)) (equal ?LIST2 (ListFn ?ROW21 ?ROW22 ?ROW23 ?ROW24 ?ROW25))) (forall (?NUMBER) (=> (instance ?NUMBER PositiveInteger) (equal (ListOrderFn (ListFn ?ROW11 ?ROW12) ?NUMBER) (ListOrderFn (ListFn ?ROW21 ?ROW22 ?ROW23 ?ROW24 ?ROW25) ?NUMBER))))))))

(forall (?LIST1 ?LIST2 ?ROW11 ?ROW12 ?ROW21 ?ROW22 ?ROW23 ?ROW24) (=> (and (instance ?LIST1 List) (instance ?LIST2 List)) (=> (equal ?LIST1 ?LIST2) (=> (and (equal ?LIST1 (ListFn ?ROW11 ?ROW12)) (equal ?LIST2 (ListFn ?ROW21 ?ROW22 ?ROW23 ?ROW24))) (forall (?NUMBER) (=> (instance ?NUMBER PositiveInteger) (equal (ListOrderFn (ListFn ?ROW11 ?ROW12) ?NUMBER) (ListOrderFn (ListFn ?ROW21 ?ROW22 ?ROW23 ?ROW24) ?NUMBER))))))))

(forall (?LIST1 ?LIST2 ?ROW11 ?ROW12 ?ROW21 ?ROW22 ?ROW23) (=> (and (instance ?LIST1 List) (instance ?LIST2 List)) (=> (equal ?LIST1 ?LIST2) (=> (and (equal ?LIST1 (ListFn ?ROW11 ?ROW12)) (equal ?LIST2 (ListFn ?ROW21 ?ROW22 ?ROW23))) (forall (?NUMBER) (=> (instance ?NUMBER PositiveInteger) (equal (ListOrderFn (ListFn ?ROW11 ?ROW12) ?NUMBER) (ListOrderFn (ListFn ?ROW21 ?ROW22 ?ROW23) ?NUMBER))))))))

(forall (?LIST1 ?LIST2 ?ROW11 ?ROW12 ?ROW21 ?ROW22) (=> (and (instance ?LIST1 List) (instance ?LIST2 List)) (=> (equal ?LIST1 ?LIST2) (=> (and (equal ?LIST1 (ListFn ?ROW11 ?ROW12)) (equal ?LIST2 (ListFn ?ROW21 ?ROW22))) (forall (?NUMBER) (=> (instance ?NUMBER PositiveInteger) (equal (ListOrderFn (ListFn ?ROW11 ?ROW12) ?NUMBER) (ListOrderFn (ListFn ?ROW21 ?ROW22) ?NUMBER))))))))

(forall (?LIST1 ?LIST2 ?ROW11 ?ROW12 ?ROW21) (=> (and (instance ?LIST1 List) (instance ?LIST2 List)) (=> (equal ?LIST1 ?LIST2) (=> (and (equal ?LIST1 (ListFn ?ROW11 ?ROW12)) (equal ?LIST2 (ListFn ?ROW21))) (forall (?NUMBER) (=> (instance ?NUMBER PositiveInteger) (equal (ListOrderFn (ListFn ?ROW11 ?ROW12) ?NUMBER) (ListOrderFn (ListFn ?ROW21) ?NUMBER))))))))

(forall (?LIST1 ?LIST2 ?ROW11 ?ROW21 ?ROW22 ?ROW23 ?ROW24 ?ROW25 ?ROW26 ?ROW27) (=> (and (instance ?LIST1 List) (instance ?LIST2 List)) (=> (equal ?LIST1 ?LIST2) (=> (and (equal ?LIST1 (ListFn ?ROW11)) (equal ?LIST2 (ListFn ?ROW21 ?ROW22 ?ROW23 ?ROW24 ?ROW25 ?ROW26 ?ROW27))) (forall (?NUMBER) (=> (instance ?NUMBER PositiveInteger) (equal (ListOrderFn (ListFn ?ROW11) ?NUMBER) (ListOrderFn (ListFn ?ROW21 ?ROW22 ?ROW23 ?ROW24 ?ROW25 ?ROW26 ?ROW27) ?NUMBER))))))))

(forall (?LIST1 ?LIST2 ?ROW11 ?ROW21 ?ROW22 ?ROW23 ?ROW24 ?ROW25 ?ROW26) (=> (and (instance ?LIST1 List) (instance ?LIST2 List)) (=> (equal ?LIST1 ?LIST2) (=> (and (equal ?LIST1 (ListFn ?ROW11)) (equal ?LIST2 (ListFn ?ROW21 ?ROW22 ?ROW23 ?ROW24 ?ROW25 ?ROW26))) (forall (?NUMBER) (=> (instance ?NUMBER PositiveInteger) (equal (ListOrderFn (ListFn ?ROW11) ?NUMBER) (ListOrderFn (ListFn ?ROW21 ?ROW22 ?ROW23 ?ROW24 ?ROW25 ?ROW26) ?NUMBER))))))))

(forall (?LIST1 ?LIST2 ?ROW11 ?ROW21 ?ROW22 ?ROW23 ?ROW24 ?ROW25) (=> (and (instance ?LIST1 List) (instance ?LIST2 List)) (=> (equal ?LIST1 ?LIST2) (=> (and (equal ?LIST1 (ListFn ?ROW11)) (equal ?LIST2 (ListFn ?ROW21 ?ROW22 ?ROW23 ?ROW24 ?ROW25))) (forall (?NUMBER) (=> (instance ?NUMBER PositiveInteger) (equal (ListOrderFn (ListFn ?ROW11) ?NUMBER) (ListOrderFn (ListFn ?ROW21 ?ROW22 ?ROW23 ?ROW24 ?ROW25) ?NUMBER))))))))

(forall (?LIST1 ?LIST2 ?ROW11 ?ROW21 ?ROW22 ?ROW23 ?ROW24) (=> (and (instance ?LIST1 List) (instance ?LIST2 List)) (=> (equal ?LIST1 ?LIST2) (=> (and (equal ?LIST1 (ListFn ?ROW11)) (equal ?LIST2 (ListFn ?ROW21 ?ROW22 ?ROW23 ?ROW24))) (forall (?NUMBER) (=> (instance ?NUMBER PositiveInteger) (equal (ListOrderFn (ListFn ?ROW11) ?NUMBER) (ListOrderFn (ListFn ?ROW21 ?ROW22 ?ROW23 ?ROW24) ?NUMBER))))))))

(forall (?LIST1 ?LIST2 ?ROW11 ?ROW21 ?ROW22 ?ROW23) (=> (and (instance ?LIST1 List) (instance ?LIST2 List)) (=> (equal ?LIST1 ?LIST2) (=> (and (equal ?LIST1 (ListFn ?ROW11)) (equal ?LIST2 (ListFn ?ROW21 ?ROW22 ?ROW23))) (forall (?NUMBER) (=> (instance ?NUMBER PositiveInteger) (equal (ListOrderFn (ListFn ?ROW11) ?NUMBER) (ListOrderFn (ListFn ?ROW21 ?ROW22 ?ROW23) ?NUMBER))))))))

(forall (?LIST1 ?LIST2 ?ROW11 ?ROW21 ?ROW22) (=> (and (instance ?LIST1 List) (instance ?LIST2 List)) (=> (equal ?LIST1 ?LIST2) (=> (and (equal ?LIST1 (ListFn ?ROW11)) (equal ?LIST2 (ListFn ?ROW21 ?ROW22))) (forall (?NUMBER) (=> (instance ?NUMBER PositiveInteger) (equal (ListOrderFn (ListFn ?ROW11) ?NUMBER) (ListOrderFn (ListFn ?ROW21 ?ROW22) ?NUMBER))))))))

(forall (?LIST1 ?LIST2 ?ROW11 ?ROW21) (=> (and (instance ?LIST1 List) (instance ?LIST2 List)) (=> (equal ?LIST1 ?LIST2) (=> (and (equal ?LIST1 (ListFn ?ROW11)) (equal ?LIST2 (ListFn ?ROW21))) (forall (?NUMBER) (=> (instance ?NUMBER PositiveInteger) (equal (ListOrderFn (ListFn ?ROW11) ?NUMBER) (ListOrderFn (ListFn ?ROW21) ?NUMBER))))))))

(forall (?LIST1 ?LIST2) (=> (and (instance ?LIST1 List) (instance ?LIST2 List) (forall (?NUMBER) (=> (instance ?NUMBER PositiveInteger) (equal (ListOrderFn ?LIST1 ?NUMBER) (ListOrderFn ?LIST2 ?NUMBER))))) (equal ?LIST1 ?LIST2)))

(forall (?LIST1 ?LIST2) (=> (and (instance ?LIST1 List) (instance ?LIST2 List)) (=> (initialList ?LIST1 ?LIST2) (forall (?NUMBER1 ?NUMBER2) (=> (and (instance ?NUMBER1 NonnegativeInteger) (instance ?NUMBER2 PositiveInteger)) (=> (and (equal (ListLengthFn ?LIST1) ?NUMBER1) (lessThanOrEqualTo ?NUMBER2 ?NUMBER1)) (equal (ListOrderFn ?LIST1 ?NUMBER2) (ListOrderFn ?LIST2 ?NUMBER2))))))))

(forall (?LIST1 ?LIST2) (=> (and (instance ?LIST1 List) (instance ?LIST2 List)) (=> (subList ?LIST1 ?LIST2) (exists (?NUMBER3) (and (instance ?NUMBER3 Quantity) (forall (?ITEM) (=> (inList ?ITEM ?LIST1) (exists (?NUMBER1 ?NUMBER2) (and (instance ?NUMBER1 PositiveInteger) (instance ?NUMBER2 PositiveInteger) (equal (ListOrderFn ?LIST1 ?NUMBER1) ?ITEM) (equal (ListOrderFn ?LIST2 ?NUMBER2) ?ITEM) (equal ?NUMBER2 (AdditionFn ?NUMBER1 ?NUMBER3)))))))))))

(forall (?LIST1 ?LIST2) (=> (and (instance ?LIST1 List) (instance ?LIST2 List)) (=> (subList ?LIST1 ?LIST2) (forall (?ITEM) (=> (inList ?ITEM ?LIST1) (inList ?ITEM ?LIST2))))))

(forall (?LIST1 ?NUMBER ?LIST ?NUMBER1) (=> (and (instance ?LIST1 List) (instance ?NUMBER NonnegativeInteger)) (=> (and (equal (ListLengthFn ?LIST1) ?NUMBER) (instance ?LIST List) (instance ?NUMBER1 PositiveInteger)) (exists (?LIST2 ?ITEM) (and (instance ?LIST2 List) (initialList ?LIST1 ?LIST2) (equal (SuccessorFn ?NUMBER) (ListLengthFn ?LIST2)) (equal (ListOrderFn ?LIST2 (SuccessorFn ?NUMBER)) ?ITEM))))))

(forall (?LIST3 ?LIST1 ?LIST2) (=> (and (instance ?LIST3 List) (instance ?LIST1 List) (instance ?LIST2 List)) (<=> (equal ?LIST3 (ListConcatenateFn ?LIST1 ?LIST2)) (forall (?NUMBER1 ?NUMBER2) (=> (and (lessThanOrEqualTo ?NUMBER1 (ListLengthFn ?LIST1)) (lessThanOrEqualTo ?NUMBER2 (ListLengthFn ?LIST2)) (instance ?NUMBER1 PositiveInteger) (instance ?NUMBER2 PositiveInteger)) (and (equal (ListOrderFn ?LIST3 ?NUMBER1) (ListOrderFn ?LIST1 ?NUMBER1)) (equal (ListOrderFn ?LIST3 (AdditionFn (ListLengthFn ?LIST1) ?NUMBER2)) (ListOrderFn ?LIST2 ?NUMBER2))))))))

(forall (?LOOP) (=> (instance ?LOOP GraphArc) (<=> (instance ?LOOP GraphLoop) (exists (?NODE) (and (instance ?NODE GraphNode) (links ?NODE ?NODE ?LOOP))))))

(forall (?MACHINE) (=> (instance ?MACHINE Object) (=> (instance ?MACHINE Machine) (exists (?COMP1 ?COMP2) (and (instance ?COMP1 Object) (instance ?COMP2 Object) (instance ?COMP1 EngineeringComponent) (instance ?COMP2 EngineeringComponent) (not (equal ?COMP1 ?COMP2)) (part ?COMP1 ?MACHINE) (part ?COMP2 ?MACHINE))))))

(forall (?MACHINE) (=> (instance ?MACHINE Object) (=> (instance ?MACHINE Machine) (forall (?PROC) (=> (instance ?PROC Process) (=> (instrument ?PROC ?MACHINE) (exists (?RESOURCE ?RESULT) (and (instance ?RESOURCE Object) (resource ?PROC ?RESOURCE) (result ?PROC ?RESULT)))))))))

(forall (?MAN) (=> (instance ?MAN Object) (=> (instance ?MAN Man) (attribute ?MAN Male))))

(forall (?MANEUVER ?CONTEST) (=> (and (instance ?MANEUVER Process) (instance ?CONTEST Process)) (=> (and (instance ?MANEUVER Maneuver) (instance ?CONTEST ViolentContest) (subProcess ?MANEUVER ?CONTEST)) (or (instance ?MANEUVER Attack) (instance ?MANEUVER DefensiveManeuver)))))

(forall (?MAT ?ORG ?PERSON) (=> (and (instance ?MAT Process) (instance ?ORG Agent)) (=> (and (instance ?MAT Matriculation) (agent ?MAT ?ORG) (patient ?MAT ?PERSON)) (instance ?ORG EducationalOrganization))))

(forall (?MEAS ?AGENT ?OBJ) (=> (and (instance ?MEAS Process) (instance ?AGENT CognitiveAgent) (instance ?OBJ Object)) (=> (and (instance ?MEAS Measuring) (agent ?MEAS ?AGENT) (patient ?MEAS ?OBJ)) (exists (?QUANT ?UNIT) (and (instance ?QUANT RealNumber) (instance ?UNIT UnitOfMeasure) (holdsDuring (EndFn (WhenFn ?MEAS)) `(knows ?AGENT `(measure ?OBJ (MeasureFn ?QUANT ?UNIT)))))))))

(forall (?MEAT) (=> (instance ?MEAT Object) (=> (instance ?MEAT Meat) (forall (?PART) (=> (instance ?PART Object) (=> (part ?PART ?MEAT) (exists (?SUBPART ?TIME ?ANIMAL) (and (instance ?SUBPART Object) (instance ?TIME TimePosition) (instance ?ANIMAL Object) (part ?SUBPART ?PART) (holdsDuring ?TIME `(and (instance ?ANIMAL Animal) (part ?SUBPART ?ANIMAL)))))))))))

(forall (?MEET ?AGENT1 ?AGENT2) (=> (and (instance ?MEET Process) (instance ?AGENT1 Agent) (instance ?AGENT2 Agent)) (=> (and (instance ?MEET Meeting) (agent ?MEET ?AGENT1) (agent ?MEET ?AGENT2)) (holdsDuring (WhenFn ?MEET) `(orientation ?AGENT1 ?AGENT2 Near)))))

(forall (?MEET) (=> (instance ?MEET Process) (=> (instance ?MEET Meeting) (exists (?AGENT1 ?AGENT2) (and (instance ?AGENT1 Agent) (instance ?AGENT2 Agent) (agent ?MEET ?AGENT1) (agent ?MEET ?AGENT2) (hasPurpose ?MEET `(exists (?COMM) (and (instance ?COMM Process) (instance ?COMM Communication) (agent ?COMM ?AGENT1) (agent ?COMM ?AGENT2)))))))))

(forall (?MELT ?OBJ) (=> (and (instance ?MELT Process) (instance ?OBJ Object)) (=> (and (instance ?MELT Melting) (patient ?MELT ?OBJ)) (exists (?PART) (and (instance ?PART Object) (part ?PART ?OBJ) (holdsDuring (BeginFn (WhenFn ?MELT)) `(attribute ?PART Solid)) (holdsDuring (EndFn (WhenFn ?MELT)) `(attribute ?PART Liquid)))))))

(forall (?MELT) (=> (instance ?MELT Process) (=> (instance ?MELT Melting) (exists (?HEAT) (and (instance ?HEAT Process) (instance ?HEAT Heating) (subProcess ?HEAT ?MELT))))))

(forall (?MINUTE ?NUMBER ?HOUR) (=> (and (instance ?MINUTE Minute) (instance ?NUMBER PositiveRealNumber) (subclass ?HOUR Hour)) (=> (instance ?MINUTE (MinuteFn ?NUMBER ?HOUR)) (lessThan ?NUMBER 60))))

(forall (?MINUTE) (=> (instance ?MINUTE TimeInterval) (=> (instance ?MINUTE Minute) (duration ?MINUTE (MeasureFn 1 MinuteDuration)))))

(forall (?MINUTE) (=> (instance ?MINUTE TimeInterval) (=> (instance ?MINUTE Minute) (equal (CardinalityFn (TemporalCompositionFn ?MINUTE Second)) 60))))

(forall (?MINUTE1 ?NUMBER1 ?HOUR ?MINUTE2 ?NUMBER2) (=> (and (instance ?MINUTE1 Minute) (instance ?NUMBER1 PositiveRealNumber) (subclass ?HOUR Hour) (instance ?MINUTE2 Minute) (instance ?NUMBER2 PositiveRealNumber)) (=> (and (instance ?MINUTE1 (MinuteFn ?NUMBER1 ?HOUR)) (instance ?MINUTE2 (MinuteFn ?NUMBER2 ?HOUR)) (equal (SubtractionFn ?NUMBER2 ?NUMBER1) 1)) (meetsTemporally ?MINUTE1 ?MINUTE2))))

(forall (?MIX) (=> (instance ?MIX Object) (=> (instance ?MIX GasMixture) (exists (?PART) (and (instance ?PART Object) (part ?PART ?MIX) (attribute ?PART Gas))))))

(forall (?MIX) (=> (instance ?MIX Object) (=> (instance ?MIX LiquidMixture) (exists (?PART) (and (instance ?PART Object) (part ?PART ?MIX) (attribute ?PART Liquid))))))

(forall (?MIXTURE ?SUBSTANCE) (=> (and (instance ?MIXTURE Object) (instance ?SUBSTANCE Object)) (=> (and (instance ?MIXTURE Mixture) (part ?SUBSTANCE ?MIXTURE) (not (instance ?SUBSTANCE Mixture))) (instance ?SUBSTANCE PureSubstance))))

(forall (?MIXTURE) (=> (instance ?MIXTURE Object) (=> (instance ?MIXTURE Mixture) (exists (?PURE1 ?PURE2) (and (instance ?PURE1 Object) (instance ?PURE2 Object) (instance ?PURE1 PureSubstance) (instance ?PURE2 PureSubstance) (not (equal ?PURE1 ?PURE2)) (part ?PURE1 ?MIXTURE) (part ?PURE2 ?MIXTURE))))))

(forall (?MOLE) (=> (instance ?MOLE Object) (=> (instance ?MOLE Molecule) (exists (?ATOM1 ?ATOM2) (and (instance ?ATOM1 Object) (instance ?ATOM2 Object) (instance ?ATOM1 Atom) (instance ?ATOM2 Atom) (part ?ATOM1 ?MOLE) (part ?ATOM2 ?MOLE) (not (equal ?ATOM1 ?ATOM2)))))))

(forall (?MONTH ?NUMBER) (=> (and (instance ?MONTH TimeInterval) (instance ?NUMBER RealNumber)) (=> (and (instance ?MONTH Month) (duration ?MONTH (MeasureFn ?NUMBER DayDuration))) (equal (CardinalityFn (TemporalCompositionFn ?MONTH Day)) ?NUMBER))))

(forall (?MONTH) (=> (instance ?MONTH TimeInterval) (=> (instance ?MONTH April) (duration ?MONTH (MeasureFn 30 DayDuration)))))

(forall (?MONTH) (=> (instance ?MONTH TimeInterval) (=> (instance ?MONTH August) (duration ?MONTH (MeasureFn 31 DayDuration)))))

(forall (?MONTH) (=> (instance ?MONTH TimeInterval) (=> (instance ?MONTH December) (duration ?MONTH (MeasureFn 31 DayDuration)))))

(forall (?MONTH) (=> (instance ?MONTH TimeInterval) (=> (instance ?MONTH January) (duration ?MONTH (MeasureFn 31 DayDuration)))))

(forall (?MONTH) (=> (instance ?MONTH TimeInterval) (=> (instance ?MONTH July) (duration ?MONTH (MeasureFn 31 DayDuration)))))

(forall (?MONTH) (=> (instance ?MONTH TimeInterval) (=> (instance ?MONTH June) (duration ?MONTH (MeasureFn 30 DayDuration)))))

(forall (?MONTH) (=> (instance ?MONTH TimeInterval) (=> (instance ?MONTH March) (duration ?MONTH (MeasureFn 31 DayDuration)))))

(forall (?MONTH) (=> (instance ?MONTH TimeInterval) (=> (instance ?MONTH May) (duration ?MONTH (MeasureFn 31 DayDuration)))))

(forall (?MONTH) (=> (instance ?MONTH TimeInterval) (=> (instance ?MONTH November) (duration ?MONTH (MeasureFn 30 DayDuration)))))

(forall (?MONTH) (=> (instance ?MONTH TimeInterval) (=> (instance ?MONTH October) (duration ?MONTH (MeasureFn 31 DayDuration)))))

(forall (?MONTH) (=> (instance ?MONTH TimeInterval) (=> (instance ?MONTH September) (duration ?MONTH (MeasureFn 30 DayDuration)))))

(forall (?MONTH1 ?YEAR ?MONTH2) (=> (and (instance ?MONTH1 TimeInterval) (subclass ?MONTH1 Month) (subclass ?YEAR Year) (instance ?MONTH2 TimeInterval) (subclass ?MONTH2 Month)) (=> (and (equal ?MONTH1 (MonthFn April ?YEAR)) (equal ?MONTH2 (MonthFn May ?YEAR))) (meetsTemporally ?MONTH1 ?MONTH2))))

(forall (?MONTH1 ?YEAR ?MONTH2) (=> (and (instance ?MONTH1 TimeInterval) (subclass ?MONTH1 Month) (subclass ?YEAR Year) (instance ?MONTH2 TimeInterval) (subclass ?MONTH2 Month)) (=> (and (equal ?MONTH1 (MonthFn August ?YEAR)) (equal ?MONTH2 (MonthFn September ?YEAR))) (meetsTemporally ?MONTH1 ?MONTH2))))

(forall (?MONTH1 ?YEAR ?MONTH2) (=> (and (instance ?MONTH1 TimeInterval) (subclass ?MONTH1 Month) (subclass ?YEAR Year) (instance ?MONTH2 TimeInterval) (subclass ?MONTH2 Month)) (=> (and (equal ?MONTH1 (MonthFn February ?YEAR)) (equal ?MONTH2 (MonthFn March ?YEAR))) (meetsTemporally ?MONTH1 ?MONTH2))))

(forall (?MONTH1 ?YEAR ?MONTH2) (=> (and (instance ?MONTH1 TimeInterval) (subclass ?MONTH1 Month) (subclass ?YEAR Year) (instance ?MONTH2 TimeInterval) (subclass ?MONTH2 Month)) (=> (and (equal ?MONTH1 (MonthFn January ?YEAR)) (equal ?MONTH2 (MonthFn February ?YEAR))) (meetsTemporally ?MONTH1 ?MONTH2))))

(forall (?MONTH1 ?YEAR ?MONTH2) (=> (and (instance ?MONTH1 TimeInterval) (subclass ?MONTH1 Month) (subclass ?YEAR Year) (instance ?MONTH2 TimeInterval) (subclass ?MONTH2 Month)) (=> (and (equal ?MONTH1 (MonthFn July ?YEAR)) (equal ?MONTH2 (MonthFn August ?YEAR))) (meetsTemporally ?MONTH1 ?MONTH2))))

(forall (?MONTH1 ?YEAR ?MONTH2) (=> (and (instance ?MONTH1 TimeInterval) (subclass ?MONTH1 Month) (subclass ?YEAR Year) (instance ?MONTH2 TimeInterval) (subclass ?MONTH2 Month)) (=> (and (equal ?MONTH1 (MonthFn June ?YEAR)) (equal ?MONTH2 (MonthFn July ?YEAR))) (meetsTemporally ?MONTH1 ?MONTH2))))

(forall (?MONTH1 ?YEAR ?MONTH2) (=> (and (instance ?MONTH1 TimeInterval) (subclass ?MONTH1 Month) (subclass ?YEAR Year) (instance ?MONTH2 TimeInterval) (subclass ?MONTH2 Month)) (=> (and (equal ?MONTH1 (MonthFn March ?YEAR)) (equal ?MONTH2 (MonthFn April ?YEAR))) (meetsTemporally ?MONTH1 ?MONTH2))))

(forall (?MONTH1 ?YEAR ?MONTH2) (=> (and (instance ?MONTH1 TimeInterval) (subclass ?MONTH1 Month) (subclass ?YEAR Year) (instance ?MONTH2 TimeInterval) (subclass ?MONTH2 Month)) (=> (and (equal ?MONTH1 (MonthFn May ?YEAR)) (equal ?MONTH2 (MonthFn June ?YEAR))) (meetsTemporally ?MONTH1 ?MONTH2))))

(forall (?MONTH1 ?YEAR ?MONTH2) (=> (and (instance ?MONTH1 TimeInterval) (subclass ?MONTH1 Month) (subclass ?YEAR Year) (instance ?MONTH2 TimeInterval) (subclass ?MONTH2 Month)) (=> (and (equal ?MONTH1 (MonthFn November ?YEAR)) (equal ?MONTH2 (MonthFn December ?YEAR))) (meetsTemporally ?MONTH1 ?MONTH2))))

(forall (?MONTH1 ?YEAR ?MONTH2) (=> (and (instance ?MONTH1 TimeInterval) (subclass ?MONTH1 Month) (subclass ?YEAR Year) (instance ?MONTH2 TimeInterval) (subclass ?MONTH2 Month)) (=> (and (equal ?MONTH1 (MonthFn October ?YEAR)) (equal ?MONTH2 (MonthFn November ?YEAR))) (meetsTemporally ?MONTH1 ?MONTH2))))

(forall (?MONTH1 ?YEAR ?MONTH2) (=> (and (instance ?MONTH1 TimeInterval) (subclass ?MONTH1 Month) (subclass ?YEAR Year) (instance ?MONTH2 TimeInterval) (subclass ?MONTH2 Month)) (=> (and (equal ?MONTH1 (MonthFn September ?YEAR)) (equal ?MONTH2 (MonthFn October ?YEAR))) (meetsTemporally ?MONTH1 ?MONTH2))))

(forall (?MONTH1 ?YEAR1 ?MONTH2 ?YEAR2) (=> (and (instance ?MONTH1 TimeInterval) (subclass ?MONTH1 Month) (instance ?YEAR1 TimeInterval) (subclass ?YEAR1 Year) (instance ?MONTH2 TimeInterval) (subclass ?MONTH2 Month) (instance ?YEAR2 TimeInterval) (subclass ?YEAR2 Year)) (=> (and (equal ?MONTH1 (MonthFn December ?YEAR1)) (equal ?MONTH2 (MonthFn January ?YEAR2)) (meetsTemporally ?YEAR1 ?YEAR2)) (meetsTemporally ?MONTH1 ?MONTH2))))

(forall (?MORPH) (=> (instance ?MORPH Object) (=> (instance ?MORPH Morpheme) (exists (?WORD) (and (instance ?WORD Object) (instance ?WORD Word) (part ?MORPH ?WORD))))))

(forall (?MORPH) (=> (instance ?MORPH Object) (=> (instance ?MORPH Morpheme) (not (exists (?OTHERMORPH) (and (instance ?OTHERMORPH Object) (instance ?OTHERMORPH Morpheme) (part ?OTHERMORPH ?MORPH) (not (equal ?OTHERMORPH ?MORPH))))))))

(forall (?MOTION ?OBJ ?PLACE) (=> (and (instance ?MOTION Process) (instance ?OBJ Physical) (instance ?PLACE Object)) (=> (and (instance ?MOTION Motion) (patient ?MOTION ?OBJ) (destination ?MOTION ?PLACE)) (holdsDuring (EndFn (WhenFn ?MOTION)) `(located ?OBJ ?PLACE)))))

(forall (?MOTION ?OBJ ?PLACE) (=> (and (instance ?MOTION Process) (instance ?OBJ Physical) (instance ?PLACE Object)) (=> (and (instance ?MOTION Motion) (patient ?MOTION ?OBJ) (origin ?MOTION ?PLACE)) (holdsDuring (BeginFn (WhenFn ?MOTION)) `(located ?OBJ ?PLACE)))))

(forall (?MOTION ?OBJ) (=> (and (instance ?MOTION Process) (instance ?OBJ Object)) (=> (and (instance ?MOTION GasMotion) (patient ?MOTION ?OBJ)) (attribute ?OBJ Gas))))

(forall (?MOTION ?OBJ) (=> (and (instance ?MOTION Process) (instance ?OBJ Object)) (=> (and (instance ?MOTION LiquidMotion) (patient ?MOTION ?OBJ)) (attribute ?OBJ Liquid))))

(forall (?MOTION) (=> (instance ?MOTION Process) (=> (instance ?MOTION BodyMotion) (exists (?OBJ ?AGENT) (and (instance ?AGENT Agent) (instance ?OBJ BodyPart) (patient ?MOTION ?OBJ) (instance ?AGENT Organism) (agent ?MOTION ?AGENT))))))

(forall (?MOTION) (=> (instance ?MOTION Process) (=> (instance ?MOTION WaterMotion) (exists (?WATER) (and (patient ?MOTION ?WATER) (instance ?WATER Water))))))

(forall (?MOVE) (=> (instance ?MOVE Process) (=> (instance ?MOVE Maneuver) (exists (?CONTEST) (and (instance ?CONTEST Process) (instance ?CONTEST Contest) (subProcess ?MOVE ?CONTEST))))))

(forall (?MOVEMENT ?PLACE1) (=> (and (instance ?MOVEMENT Process) (instance ?PLACE1 Object)) (=> (and (instance ?MOVEMENT Translocation) (origin ?MOVEMENT ?PLACE1)) (exists (?PLACE2 ?STAGE) (and (instance ?PLACE2 Object) (instance ?STAGE Process) (instance ?PLACE2 Region) (not (equal ?PLACE1 ?PLACE2)) (subProcess ?STAGE ?MOVEMENT) (located ?STAGE ?PLACE2))))))

(forall (?NODE) (=> (instance ?NODE GraphNode) (exists (?OTHER ?ARC) (and (instance ?OTHER GraphNode) (instance ?ARC GraphArc) (links ?NODE ?OTHER ?ARC)))))

(forall (?NODE1 ?NODE2 ?ARC) (=> (and (instance ?NODE1 GraphNode) (instance ?NODE2 GraphNode) (instance ?ARC GraphArc)) (=> (links ?NODE1 ?NODE2 ?ARC) (links ?NODE2 ?NODE1 ?ARC))))

(forall (?NODE1 ?NODE2 ?PATH ?NUMBER ?NUMBER2 ?NUMBER1) (=> (and (instance ?NODE1 GraphNode) (instance ?NODE2 GraphNode) (instance ?PATH GraphPath) (instance ?NUMBER RealNumber) (instance ?NUMBER2 RealNumber) (instance ?NUMBER1 Quantity)) (=> (and (equal (MaximalWeightedPathFn ?NODE1 ?NODE2) ?PATH) (equal (PathWeightFn ?PATH) ?NUMBER)) (forall (?PATH2) (=> (instance ?PATH2 GraphPath) (=> (and (instance ?PATH2 (GraphPathFn ?NODE1 ?NODE2)) (equal (PathWeightFn ?PATH2) ?NUMBER2)) (lessThanOrEqualTo ?NUMBER2 ?NUMBER1)))))))

(forall (?NODE1 ?NODE2 ?PATH ?NUMBER ?NUMBER2 ?NUMBER1) (=> (and (instance ?NODE1 GraphNode) (instance ?NODE2 GraphNode) (instance ?PATH GraphPath) (instance ?NUMBER RealNumber) (instance ?NUMBER2 RealNumber) (instance ?NUMBER1 Quantity)) (=> (and (equal (MinimalWeightedPathFn ?NODE1 ?NODE2) ?PATH) (equal (PathWeightFn ?PATH) ?NUMBER)) (forall (?PATH2) (=> (instance ?PATH2 GraphPath) (=> (and (instance ?PATH2 (GraphPathFn ?NODE1 ?NODE2)) (equal (PathWeightFn ?PATH2) ?NUMBER2)) (greaterThanOrEqualTo ?NUMBER2 ?NUMBER1)))))))

(forall (?NODE1 ?NODE2 ?PATH) (=> (and (instance ?NODE1 GraphNode) (instance ?NODE2 GraphNode) (instance ?PATH GraphPath)) (=> (equal (MaximalWeightedPathFn ?NODE1 ?NODE2) ?PATH) (instance ?PATH (GraphPathFn ?NODE1 ?NODE2)))))

(forall (?NODE1 ?NODE2 ?PATH) (=> (and (instance ?NODE1 GraphNode) (instance ?NODE2 GraphNode) (instance ?PATH GraphPath)) (=> (equal (MinimalWeightedPathFn ?NODE1 ?NODE2) ?PATH) (instance ?PATH (GraphPathFn ?NODE1 ?NODE2)))))

(forall (?NUCLEUS) (=> (instance ?NUCLEUS CorpuscularObject) (=> (instance ?NUCLEUS AtomicNucleus) (exists (?NEUTRON ?PROTON) (and (instance ?NEUTRON CorpuscularObject) (instance ?PROTON CorpuscularObject) (component ?NEUTRON ?NUCLEUS) (component ?PROTON ?NUCLEUS) (instance ?NEUTRON Neutron) (instance ?PROTON Proton))))))

(forall (?NUMBER ?INT) (=> (and (instance ?NUMBER RealNumber) (instance ?INT Integer)) (=> (equal (CeilingFn ?NUMBER) ?INT) (not (exists (?OTHERINT) (and (instance ?OTHERINT Quantity) (instance ?OTHERINT Integer) (greaterThanOrEqualTo ?OTHERINT ?NUMBER) (lessThan ?OTHERINT ?INT)))))))

(forall (?NUMBER ?INT) (=> (and (instance ?NUMBER RealNumber) (instance ?INT Integer)) (=> (equal (FloorFn ?NUMBER) ?INT) (not (exists (?OTHERINT) (and (instance ?OTHERINT Quantity) (instance ?OTHERINT Integer) (lessThanOrEqualTo ?OTHERINT ?NUMBER) (greaterThan ?OTHERINT ?INT)))))))

(forall (?NUMBER ?UNIT ?QUANT ?QUANTTYPE) (=> (and (instance ?NUMBER RealNumber) (instance ?UNIT UnitOfMeasure) (instance ?UNIT SetOrClass) (instance ?QUANT ConstantQuantity) (instance ?QUANTTYPE SetOrClass)) (=> (and (equal (MeasureFn ?NUMBER ?UNIT) ?QUANT) (subclass ?UNIT ?QUANTTYPE)) (instance ?QUANT ?QUANTTYPE))))

(forall (?NUMBER ?UNIT) (=> (and (instance ?NUMBER RealNumber) (instance ?UNIT UnitOfMeasure)) (equal (MagnitudeFn (MeasureFn ?NUMBER ?UNIT)) ?NUMBER)))

(forall (?NUMBER) (=> (instance ?NUMBER ComplexNumber) (exists (?PART1 ?PART2) (and (instance ?PART1 RealNumber) (instance ?PART2 ImaginaryNumber) (equal ?PART1 (RealNumberFn ?NUMBER)) (equal ?PART2 (ImaginaryPartFn ?NUMBER))))))

(forall (?NUMBER) (=> (instance ?NUMBER Integer) (equal (PredecessorFn ?NUMBER) (SubtractionFn ?NUMBER 1))))

(forall (?NUMBER) (=> (instance ?NUMBER Integer) (equal (SuccessorFn ?NUMBER) (AdditionFn ?NUMBER 1))))

(forall (?NUMBER) (=> (instance ?NUMBER Quantity) (<=> (instance ?NUMBER NegativeRealNumber) (and (lessThan ?NUMBER 0) (instance ?NUMBER RealNumber)))))

(forall (?NUMBER) (=> (instance ?NUMBER Quantity) (<=> (instance ?NUMBER NonnegativeRealNumber) (and (greaterThanOrEqualTo ?NUMBER 0) (instance ?NUMBER RealNumber)))))

(forall (?NUMBER) (=> (instance ?NUMBER Quantity) (<=> (instance ?NUMBER PositiveRealNumber) (and (greaterThan ?NUMBER 0) (instance ?NUMBER RealNumber)))))

(forall (?NUMBER) (=> (instance ?NUMBER Quantity) (=> (instance ?NUMBER ComplexNumber) (exists (?REAL1 ?REAL2) (and (instance ?REAL1 Quantity) (instance ?REAL2 Quantity) (instance ?REAL1 RealNumber) (instance ?REAL2 RealNumber) (equal ?NUMBER (AdditionFn ?REAL1 (MultiplicationFn ?REAL2 (SquareRootFn -1)))))))))

(forall (?NUMBER) (=> (instance ?NUMBER Quantity) (=> (instance ?NUMBER EvenInteger) (equal (RemainderFn ?NUMBER 2) 0))))

(forall (?NUMBER) (=> (instance ?NUMBER Quantity) (=> (instance ?NUMBER ImaginaryNumber) (exists (?REAL) (and (instance ?REAL Quantity) (instance ?REAL RealNumber) (equal ?NUMBER (MultiplicationFn ?REAL (SquareRootFn -1))))))))

(forall (?NUMBER) (=> (instance ?NUMBER Quantity) (=> (instance ?NUMBER OddInteger) (equal (RemainderFn ?NUMBER 2) 1))))

(forall (?NUMBER) (=> (instance ?NUMBER Quantity) (=> (instance ?NUMBER RationalNumber) (exists (?INT1 ?INT2) (and (instance ?INT1 Quantity) (instance ?INT2 Quantity) (instance ?INT1 Integer) (instance ?INT2 Integer) (equal ?NUMBER (DivisionFn ?INT1 ?INT2)))))))

(forall (?NUMBER) (=> (instance ?NUMBER Quantity) (equal (ReciprocalFn ?NUMBER) (ExponentiationFn ?NUMBER -1))))

(forall (?NUMBER) (=> (instance ?NUMBER Quantity) (equal 1 (MultiplicationFn ?NUMBER (ReciprocalFn ?NUMBER)))))

(forall (?NUMBER) (=> (instance ?NUMBER RealNumber) (=> (instance ?NUMBER NegativeRealNumber) (equal (SignumFn ?NUMBER) -1))))

(forall (?NUMBER) (=> (instance ?NUMBER RealNumber) (=> (instance ?NUMBER NonnegativeRealNumber) (or (equal (SignumFn ?NUMBER) 1) (equal (SignumFn ?NUMBER) 0)))))

(forall (?NUMBER) (=> (instance ?NUMBER RealNumber) (=> (instance ?NUMBER PositiveRealNumber) (equal (SignumFn ?NUMBER) 1))))

(forall (?NUMBER) (=> (instance ?NUMBER RealNumber) (equal (MeasureFn ?NUMBER Amu) (MeasureFn (MultiplicationFn ?NUMBER 1.6605402E-24) Gram))))

(forall (?NUMBER) (=> (instance ?NUMBER RealNumber) (equal (MeasureFn ?NUMBER Angstrom) (MeasureFn (MultiplicationFn ?NUMBER 1.0E-10) Meter))))

(forall (?NUMBER) (=> (instance ?NUMBER RealNumber) (equal (MeasureFn ?NUMBER AngularDegree) (MeasureFn (MultiplicationFn ?NUMBER (DivisionFn Pi 180)) Radian))))

(forall (?NUMBER) (=> (instance ?NUMBER RealNumber) (equal (MeasureFn ?NUMBER BritishThermalUnit) (MeasureFn (MultiplicationFn ?NUMBER 1055.05585262) Joule))))

(forall (?NUMBER) (=> (instance ?NUMBER RealNumber) (equal (MeasureFn ?NUMBER Byte) (MeasureFn (MultiplicationFn ?NUMBER 8) Bit))))

(forall (?NUMBER) (=> (instance ?NUMBER RealNumber) (equal (MeasureFn ?NUMBER Calorie) (MeasureFn (MultiplicationFn ?NUMBER 4.1868) Joule))))

(forall (?NUMBER) (=> (instance ?NUMBER RealNumber) (equal (MeasureFn ?NUMBER CelsiusDegree) (MeasureFn (DivisionFn (SubtractionFn ?NUMBER 32) 1.8) FahrenheitDegree))))

(forall (?NUMBER) (=> (instance ?NUMBER RealNumber) (equal (MeasureFn ?NUMBER CelsiusDegree) (MeasureFn (SubtractionFn ?NUMBER 273.15) KelvinDegree))))

(forall (?NUMBER) (=> (instance ?NUMBER RealNumber) (equal (MeasureFn ?NUMBER Centimeter) (MeasureFn (MultiplicationFn ?NUMBER 0.01) Meter))))

(forall (?NUMBER) (=> (instance ?NUMBER RealNumber) (equal (MeasureFn ?NUMBER Cup) (MeasureFn (DivisionFn ?NUMBER 2) Pint))))

(forall (?NUMBER) (=> (instance ?NUMBER RealNumber) (equal (MeasureFn ?NUMBER DayDuration) (MeasureFn (MultiplicationFn ?NUMBER 24) HourDuration))))

(forall (?NUMBER) (=> (instance ?NUMBER RealNumber) (equal (MeasureFn ?NUMBER ElectronVolt) (MeasureFn (MultiplicationFn ?NUMBER 1.60217733E-19) Joule))))

(forall (?NUMBER) (=> (instance ?NUMBER RealNumber) (equal (MeasureFn ?NUMBER EuroCent) (MeasureFn (MultiplicationFn ?NUMBER 0.01) EuroDollar))))

(forall (?NUMBER) (=> (instance ?NUMBER RealNumber) (equal (MeasureFn ?NUMBER FootLength) (MeasureFn (MultiplicationFn ?NUMBER 0.3048) Meter))))

(forall (?NUMBER) (=> (instance ?NUMBER RealNumber) (equal (MeasureFn ?NUMBER HourDuration) (MeasureFn (MultiplicationFn ?NUMBER 60) MinuteDuration))))

(forall (?NUMBER) (=> (instance ?NUMBER RealNumber) (equal (MeasureFn ?NUMBER Inch) (MeasureFn (MultiplicationFn ?NUMBER 0.0254) Meter))))

(forall (?NUMBER) (=> (instance ?NUMBER RealNumber) (equal (MeasureFn ?NUMBER KiloByte) (MeasureFn (MultiplicationFn ?NUMBER 1024) Byte))))

(forall (?NUMBER) (=> (instance ?NUMBER RealNumber) (equal (MeasureFn ?NUMBER Kilogram) (MeasureFn (MultiplicationFn ?NUMBER 1000) Gram))))

(forall (?NUMBER) (=> (instance ?NUMBER RealNumber) (equal (MeasureFn ?NUMBER Kilometer) (MeasureFn (MultiplicationFn ?NUMBER 1000) Meter))))

(forall (?NUMBER) (=> (instance ?NUMBER RealNumber) (equal (MeasureFn ?NUMBER MegaByte) (MeasureFn (MultiplicationFn ?NUMBER 1024) KiloByte))))

(forall (?NUMBER) (=> (instance ?NUMBER RealNumber) (equal (MeasureFn ?NUMBER Mile) (MeasureFn (MultiplicationFn ?NUMBER 1609.344) Meter))))

(forall (?NUMBER) (=> (instance ?NUMBER RealNumber) (equal (MeasureFn ?NUMBER Millimeter) (MeasureFn (MultiplicationFn ?NUMBER 0.001) Meter))))

(forall (?NUMBER) (=> (instance ?NUMBER RealNumber) (equal (MeasureFn ?NUMBER MinuteDuration) (MeasureFn (MultiplicationFn ?NUMBER 60) SecondDuration))))

(forall (?NUMBER) (=> (instance ?NUMBER RealNumber) (equal (MeasureFn ?NUMBER Ounce) (MeasureFn (DivisionFn ?NUMBER 8) Cup))))

(forall (?NUMBER) (=> (instance ?NUMBER RealNumber) (equal (MeasureFn ?NUMBER Pint) (MeasureFn (DivisionFn ?NUMBER 2) Quart))))

(forall (?NUMBER) (=> (instance ?NUMBER RealNumber) (equal (MeasureFn ?NUMBER PoundForce) (MeasureFn (MultiplicationFn ?NUMBER 4.448222) Newton))))

(forall (?NUMBER) (=> (instance ?NUMBER RealNumber) (equal (MeasureFn ?NUMBER PoundMass) (MeasureFn (MultiplicationFn ?NUMBER 453.59237) Gram))))

(forall (?NUMBER) (=> (instance ?NUMBER RealNumber) (equal (MeasureFn ?NUMBER Quart) (MeasureFn (DivisionFn ?NUMBER 4) UnitedStatesGallon))))

(forall (?NUMBER) (=> (instance ?NUMBER RealNumber) (equal (MeasureFn ?NUMBER RankineDegree) (MeasureFn (MultiplicationFn ?NUMBER 1.8) KelvinDegree))))

(forall (?NUMBER) (=> (instance ?NUMBER RealNumber) (equal (MeasureFn ?NUMBER Slug) (MeasureFn (MultiplicationFn ?NUMBER 14593.90) Gram))))

(forall (?NUMBER) (=> (instance ?NUMBER RealNumber) (equal (MeasureFn ?NUMBER UnitedKingdomGallon) (MeasureFn (MultiplicationFn ?NUMBER 4.54609) Liter))))

(forall (?NUMBER) (=> (instance ?NUMBER RealNumber) (equal (MeasureFn ?NUMBER UnitedStatesCent) (MeasureFn (MultiplicationFn ?NUMBER 0.01) UnitedStatesDollar))))

(forall (?NUMBER) (=> (instance ?NUMBER RealNumber) (equal (MeasureFn ?NUMBER UnitedStatesGallon) (MeasureFn (MultiplicationFn ?NUMBER 3.785411784) Liter))))

(forall (?NUMBER) (=> (instance ?NUMBER RealNumber) (equal (MeasureFn ?NUMBER WeekDuration) (MeasureFn (MultiplicationFn ?NUMBER 7) DayDuration))))

(forall (?NUMBER) (=> (instance ?NUMBER RealNumber) (equal (MeasureFn ?NUMBER YearDuration) (MeasureFn (MultiplicationFn ?NUMBER 365) DayDuration))))

(forall (?NUMBER) (=> (instance ?NUMBER RealNumber) (greaterThanOrEqualTo (MeasureFn ?NUMBER MonthDuration) (MeasureFn (MultiplicationFn ?NUMBER 28) DayDuration))))

(forall (?NUMBER) (=> (instance ?NUMBER RealNumber) (lessThanOrEqualTo (MeasureFn ?NUMBER MonthDuration) (MeasureFn (MultiplicationFn ?NUMBER 31) DayDuration))))

(forall (?NUMBER1 ?NUMBER2 ?NUMBER) (=> (and (instance ?NUMBER1 Quantity) (instance ?NUMBER2 Quantity) (instance ?NUMBER Quantity)) (<=> (equal (RemainderFn ?NUMBER1 ?NUMBER2) ?NUMBER) (equal (AdditionFn (MultiplicationFn (FloorFn (DivisionFn ?NUMBER1 ?NUMBER2)) ?NUMBER2) ?NUMBER) ?NUMBER1))))

(forall (?NUMBER1 ?NUMBER2 ?NUMBER) (=> (and (instance ?NUMBER1 Quantity) (instance ?NUMBER2 Quantity) (instance ?NUMBER Quantity)) (=> (equal (MaxFn ?NUMBER1 ?NUMBER2) ?NUMBER) (or (and (equal ?NUMBER ?NUMBER1) (greaterThan ?NUMBER1 ?NUMBER2)) (and (equal ?NUMBER ?NUMBER2) (greaterThan ?NUMBER2 ?NUMBER1)) (and (equal ?NUMBER ?NUMBER1) (equal ?NUMBER ?NUMBER2))))))

(forall (?NUMBER1 ?NUMBER2 ?NUMBER) (=> (and (instance ?NUMBER1 Quantity) (instance ?NUMBER2 Quantity) (instance ?NUMBER Quantity)) (=> (equal (MinFn ?NUMBER1 ?NUMBER2) ?NUMBER) (or (and (equal ?NUMBER ?NUMBER1) (lessThan ?NUMBER1 ?NUMBER2)) (and (equal ?NUMBER ?NUMBER2) (lessThan ?NUMBER2 ?NUMBER1)) (and (equal ?NUMBER ?NUMBER1) (equal ?NUMBER ?NUMBER2))))))

(forall (?NUMBER1 ?NUMBER2 ?NUMBER) (=> (and (instance ?NUMBER1 Quantity) (instance ?NUMBER2 RealNumber) (instance ?NUMBER RealNumber)) (=> (equal (RemainderFn ?NUMBER1 ?NUMBER2) ?NUMBER) (equal (SignumFn ?NUMBER2) (SignumFn ?NUMBER)))))

(forall (?NUMBER1 ?NUMBER2) (=> (and (instance ?NUMBER1 Quantity) (instance ?NUMBER2 Quantity)) (<=> (greaterThanOrEqualTo ?NUMBER1 ?NUMBER2) (or (equal ?NUMBER1 ?NUMBER2) (greaterThan ?NUMBER1 ?NUMBER2)))))

(forall (?NUMBER1 ?NUMBER2) (=> (and (instance ?NUMBER1 Quantity) (instance ?NUMBER2 Quantity)) (<=> (lessThanOrEqualTo ?NUMBER1 ?NUMBER2) (or (equal ?NUMBER1 ?NUMBER2) (lessThan ?NUMBER1 ?NUMBER2)))))

(forall (?NUMBER1 ?NUMBER2) (=> (and (instance ?NUMBER1 RealNumber) (instance ?NUMBER2 Integer)) (=> (equal (RoundFn ?NUMBER1) ?NUMBER2) (or (=> (lessThan (SubtractionFn ?NUMBER1 (FloorFn ?NUMBER1)) 0.5) (equal ?NUMBER2 (FloorFn ?NUMBER1))) (=> (greaterThanOrEqualTo (SubtractionFn ?NUMBER1 (FloorFn ?NUMBER1)) 0.5) (equal ?NUMBER2 (CeilingFn ?NUMBER1)))))))

(forall (?NUMBER1 ?NUMBER2) (=> (and (instance ?NUMBER1 RealNumber) (instance ?NUMBER2 Number)) (=> (equal (SquareRootFn ?NUMBER1) ?NUMBER2) (equal (MultiplicationFn ?NUMBER2 ?NUMBER2) ?NUMBER1))))

(forall (?NUMBER1 ?NUMBER2) (=> (and (instance ?NUMBER1 RealNumber) (instance ?NUMBER2 RealNumber) (equal ?NUMBER1 ?NUMBER2)) (forall (?UNIT) (=> (instance ?UNIT UnitOfMeasure) (equal (MeasureFn ?NUMBER1 ?UNIT) (MeasureFn ?NUMBER2 ?UNIT))))))

(forall (?NUMBER1 ?NUMBER2) (=> (and (instance ?NUMBER1 RealNumber) (instance ?NUMBER2 RealNumber) (greaterThan ?NUMBER1 ?NUMBER2)) (forall (?UNIT) (=> (instance ?UNIT UnitOfMeasure) (greaterThan (MeasureFn ?NUMBER1 ?UNIT) (MeasureFn ?NUMBER2 ?UNIT))))))

(forall (?NUMBER1 ?NUMBER2) (=> (and (instance ?NUMBER1 RealNumber) (instance ?NUMBER2 RealNumber) (greaterThanOrEqualTo ?NUMBER1 ?NUMBER2)) (forall (?UNIT) (=> (instance ?UNIT UnitOfMeasure) (greaterThanOrEqualTo (MeasureFn ?NUMBER1 ?UNIT) (MeasureFn ?NUMBER2 ?UNIT))))))

(forall (?NUMBER1 ?NUMBER2) (=> (and (instance ?NUMBER1 RealNumber) (instance ?NUMBER2 RealNumber) (lessThan ?NUMBER1 ?NUMBER2)) (forall (?UNIT) (=> (instance ?UNIT UnitOfMeasure) (lessThan (MeasureFn ?NUMBER1 ?UNIT) (MeasureFn ?NUMBER2 ?UNIT))))))

(forall (?NUMBER1 ?NUMBER2) (=> (and (instance ?NUMBER1 RealNumber) (instance ?NUMBER2 RealNumber) (lessThanOrEqualTo ?NUMBER1 ?NUMBER2)) (forall (?UNIT) (=> (instance ?UNIT UnitOfMeasure) (lessThanOrEqualTo (MeasureFn ?NUMBER1 ?UNIT) (MeasureFn ?NUMBER2 ?UNIT))))))

(forall (?NUMBER1 ?NUMBER2) (=> (instance ?NUMBER2 NonnegativeRealNumber) (<=> (and (equal (AbsoluteValueFn ?NUMBER1) ?NUMBER2) (instance ?NUMBER1 RealNumber) (instance ?NUMBER2 RealNumber)) (or (and (instance ?NUMBER1 NonnegativeRealNumber) (equal ?NUMBER1 ?NUMBER2)) (and (instance ?NUMBER1 NegativeRealNumber) (equal ?NUMBER2 (SubtractionFn 0 ?NUMBER1)))))))

(forall (?OBJ ?AGENT) (=> (and (instance ?OBJ Object) (instance ?AGENT Agent)) (=> (exploits ?OBJ ?AGENT) (exists (?PROCESS) (and (instance ?PROCESS Process) (agent ?PROCESS ?AGENT) (resource ?PROCESS ?OBJ))))))

(forall (?OBJ ?AGENT) (=> (and (instance ?OBJ Object) (instance ?AGENT Agent)) (=> (uses ?OBJ ?AGENT) (exists (?PROC) (and (instance ?PROC Process) (agent ?PROC ?AGENT) (instrument ?PROC ?OBJ))))))

(forall (?OBJ ?ATTR ?PART) (=> (and (instance ?OBJ Object) (instance ?ATTR Attribute) (instance ?PART Object)) (=> (and (instance ?OBJ Substance) (attribute ?OBJ ?ATTR) (part ?PART ?OBJ)) (attribute ?PART ?ATTR))))

(forall (?OBJ ?HOLE) (=> (and (instance ?OBJ Object) (instance ?HOLE Hole)) (=> (exists (?TIME) (and (instance ?TIME TimePosition) (holdsDuring ?TIME `(fills ?OBJ ?HOLE)))) (attribute ?HOLE Fillable))))

(forall (?OBJ ?HOLE1 ?HOLE2) (=> (and (instance ?OBJ Object) (instance ?HOLE1 Hole) (instance ?HOLE2 Object)) (=> (and (fills ?OBJ ?HOLE1) (properPart ?HOLE2 ?HOLE1)) (completelyFills ?OBJ ?HOLE2))))

(forall (?OBJ ?HOLE1) (=> (and (instance ?OBJ Object) (instance ?HOLE1 Hole)) (=> (partiallyFills ?OBJ ?HOLE1) (exists (?HOLE2) (and (instance ?HOLE2 Object) (part ?HOLE2 ?HOLE1) (completelyFills ?OBJ ?HOLE2))))))

(forall (?OBJ ?HOLE1) (=> (and (instance ?OBJ Object) (instance ?HOLE1 Hole)) (=> (properlyFills ?OBJ ?HOLE1) (exists (?HOLE2) (and (instance ?HOLE2 Hole) (part ?HOLE2 ?HOLE1) (fills ?OBJ ?HOLE2))))))

(forall (?OBJ ?PART ?COLOR) (=> (and (instance ?OBJ Object) (instance ?PART Object) (instance ?COLOR Attribute)) (=> (and (attribute ?OBJ Monochromatic) (superficialPart ?PART ?OBJ) (attribute ?PART ?COLOR) (instance ?COLOR PrimaryColor)) (forall (?ELEMENT) (=> (instance ?ELEMENT Object) (=> (superficialPart ?ELEMENT ?OBJ) (attribute ?ELEMENT ?COLOR)))))))

(forall (?OBJ ?PERSON) (=> (and (instance ?OBJ Set) (instance ?OBJ Object) (instance ?PERSON Agent)) (<=> (instance ?OBJ (PropertyFn ?PERSON)) (possesses ?PERSON ?OBJ))))

(forall (?OBJ ?PROCESS) (=> (and (instance ?OBJ Agent) (instance ?PROCESS Process)) (=> (and (instance ?OBJ Object) (agent ?PROCESS ?OBJ)) (exists (?TIME) (and (instance ?TIME TimePoint) (overlapsSpatially (WhereFn ?PROCESS ?TIME) ?OBJ))))))

(forall (?OBJ ?PROCESS) (=> (and (instance ?OBJ Agent) (instance ?PROCESS Process)) (=> (and (instance ?OBJ Object) (experiencer ?PROCESS ?OBJ)) (exists (?TIME) (and (instance ?TIME TimePoint) (overlapsSpatially (WhereFn ?PROCESS ?TIME) ?OBJ))))))

(forall (?OBJ ?PROCESS) (=> (and (instance ?OBJ DirectionalAttribute) (instance ?PROCESS Process)) (=> (and (instance ?OBJ Object) (direction ?PROCESS ?OBJ)) (exists (?TIME) (and (instance ?TIME TimePoint) (overlapsSpatially (WhereFn ?PROCESS ?TIME) ?OBJ))))))

(forall (?OBJ ?PROCESS) (=> (instance ?PROCESS Motion) (=> (and (instance ?OBJ Object) (path ?PROCESS ?OBJ)) (exists (?TIME) (and (instance ?TIME TimePoint) (overlapsSpatially (WhereFn ?PROCESS ?TIME) ?OBJ))))))

(forall (?OBJ ?PROCESS) (=> (instance ?PROCESS Process) (=> (and (instance ?OBJ Object) (destination ?PROCESS ?OBJ)) (exists (?TIME) (and (instance ?TIME TimePoint) (overlapsSpatially (WhereFn ?PROCESS ?TIME) ?OBJ))))))

(forall (?OBJ ?PROCESS) (=> (instance ?PROCESS Process) (=> (and (instance ?OBJ Object) (origin ?PROCESS ?OBJ)) (exists (?TIME) (and (instance ?TIME TimePoint) (overlapsSpatially (WhereFn ?PROCESS ?TIME) ?OBJ))))))

(forall (?OBJ ?PROCESS) (=> (instance ?PROCESS Process) (=> (and (instance ?OBJ Object) (patient ?PROCESS ?OBJ)) (exists (?TIME) (and (instance ?TIME TimePoint) (overlapsSpatially (WhereFn ?PROCESS ?TIME) ?OBJ))))))

(forall (?OBJ ?REGION) (=> (and (instance ?OBJ Physical) (instance ?REGION Object)) (=> (exactlyLocated ?OBJ ?REGION) (not (exists (?OTHEROBJ) (and (instance ?OTHEROBJ Physical) (exactlyLocated ?OTHEROBJ ?REGION) (not (equal ?OTHEROBJ ?OBJ))))))))

(forall (?OBJ) (=> (instance ?OBJ Agent) (=> (attribute ?OBJ FullyFormed) (exists (?GROWTH) (and (instance ?GROWTH Process) (instance ?GROWTH Growth) (experiencer ?GROWTH ?OBJ) (holdsDuring (BeginFn (WhenFn ?OBJ)) `(attribute ?OBJ NonFullyFormed)))))))

(forall (?OBJ) (=> (instance ?OBJ ContentBearingPhysical) (exists (?THING) (represents ?OBJ ?THING))))

(forall (?OBJ) (=> (instance ?OBJ CorpuscularObject) (exists (?SUBSTANCE1 ?SUBSTANCE2) (and (instance ?SUBSTANCE1 SetOrClass) (instance ?SUBSTANCE2 SetOrClass) (subclass ?SUBSTANCE1 Substance) (subclass ?SUBSTANCE2 Substance) (material ?SUBSTANCE1 ?OBJ) (material ?SUBSTANCE2 ?OBJ) (not (equal ?SUBSTANCE1 ?SUBSTANCE2))))))

(forall (?OBJ) (=> (instance ?OBJ Object) (<=> (instance ?OBJ SelfConnectedObject) (forall (?PART1 ?PART2) (=> (and (instance ?PART1 Object) (instance ?PART2 Object)) (=> (equal ?OBJ (MereologicalSumFn ?PART1 ?PART2)) (connected ?PART1 ?PART2)))))))

(forall (?OBJ) (=> (instance ?OBJ Object) (<=> (instance ?OBJ Substance) (exists (?ATTR) (and (instance ?ATTR Attribute) (instance ?ATTR PhysicalState) (attribute ?OBJ ?ATTR))))))

(forall (?OBJ) (=> (instance ?OBJ Object) (=> (attribute ?OBJ Dry) (not (exists (?SUBOBJ) (and (instance ?SUBOBJ Object) (part ?SUBOBJ ?OBJ) (attribute ?SUBOBJ Liquid)))))))

(forall (?OBJ) (=> (instance ?OBJ Object) (=> (attribute ?OBJ Polychromatic) (exists (?PART1 ?PART2 ?COLOR1 ?COLOR2) (and (instance ?PART1 Object) (instance ?PART2 Object) (instance ?COLOR1 Attribute) (instance ?COLOR2 Attribute) (superficialPart ?PART1 ?OBJ) (superficialPart ?PART2 ?OBJ) (attribute ?PART1 ?COLOR1) (attribute ?PART2 ?COLOR2) (instance ?COLOR1 ColorAttribute) (instance ?COLOR2 ColorAttribute) (not (equal ?COLOR1 ?COLOR2)))))))

(forall (?OBJ) (=> (instance ?OBJ Object) (=> (attribute ?OBJ Wet) (forall (?PART) (=> (instance ?PART Object) (=> (part ?PART ?OBJ) (exists (?SUBPART) (and (instance ?SUBPART Object) (part ?SUBPART ?PART) (attribute ?SUBPART Liquid)))))))))

(forall (?OBJ) (=> (instance ?OBJ Object) (=> (exists (?CHANGE) (and (instance ?CHANGE Process) (instance ?CHANGE ShapeChange) (patient ?CHANGE ?OBJ))) (attribute ?OBJ Pliable))))

(forall (?OBJ) (=> (instance ?OBJ Object) (=> (instance ?OBJ Food) (exists (?ATTR) (and (instance ?ATTR Attribute) (instance ?ATTR TasteAttribute) (attribute ?OBJ ?ATTR))))))

(forall (?OBJ) (=> (instance ?OBJ Object) (=> (instance ?OBJ Solution) (attribute ?OBJ Liquid))))

(forall (?OBJ) (=> (instance ?OBJ Object) (or (attribute ?OBJ Monochromatic) (attribute ?OBJ Polychromatic))))

(forall (?OBJ) (=> (instance ?OBJ Physical) (=> (instance ?OBJ Object) (exists (?TIME1 ?TIME2) (and (instance ?TIME1 TimePoint) (instance ?TIME2 TimePoint) (before ?TIME1 ?TIME2) (forall (?TIME) (=> (instance ?TIME TimePoint) (=> (and (beforeOrEqual ?TIME1 ?TIME) (beforeOrEqual ?TIME ?TIME2)) (time ?OBJ ?TIME)))))))))

(forall (?OBJ) (=> (instance ?OBJ SelfConnectedObject) (side (BackFn ?OBJ) ?OBJ)))

(forall (?OBJ) (=> (instance ?OBJ SelfConnectedObject) (side (FrontFn ?OBJ) ?OBJ)))

(forall (?OBJ1 ?COLL ?OBJ2) (=> (and (instance ?OBJ1 SelfConnectedObject) (instance ?COLL Collection) (instance ?OBJ2 SelfConnectedObject)) (=> (and (member ?OBJ1 ?COLL) (member ?OBJ2 ?COLL) (not (equal ?OBJ1 ?OBJ2))) (not (overlapsSpatially ?OBJ1 ?OBJ2)))))

(forall (?OBJ1 ?HOLE ?OBJ2) (=> (and (instance ?OBJ1 Object) (instance ?HOLE Hole) (instance ?OBJ2 Object)) (=> (and (fills ?OBJ1 ?HOLE) (attribute ?OBJ2 Fillable)) (not (overlapsSpatially ?OBJ1 ?OBJ2)))))

(forall (?OBJ1 ?HOLE ?OBJ2) (=> (and (instance ?OBJ1 Object) (instance ?HOLE Hole) (instance ?OBJ2 Object)) (=> (and (fills ?OBJ1 ?HOLE) (properPart ?OBJ2 ?OBJ1)) (properlyFills ?OBJ2 ?HOLE))))

(forall (?OBJ1 ?HOLE ?OBJ2) (=> (and (instance ?OBJ1 Object) (instance ?HOLE Hole) (instance ?OBJ2 Object)) (=> (and (properlyFills ?OBJ1 ?HOLE) (connected ?OBJ2 ?OBJ1)) (connected ?HOLE ?OBJ2))))

(forall (?OBJ1 ?HOLE) (=> (and (instance ?OBJ1 Object) (instance ?HOLE Hole)) (=> (completelyFills ?OBJ1 ?HOLE) (exists (?OBJ2) (and (instance ?OBJ2 Object) (part ?OBJ2 ?OBJ1) (fills ?OBJ2 ?HOLE))))))

(forall (?OBJ1 ?HOLE) (=> (and (instance ?OBJ1 Object) (instance ?HOLE Hole)) (=> (equal ?OBJ1 (HoleHostFn ?HOLE)) (forall (?OBJ2) (=> (instance ?OBJ2 Object) (<=> (overlapsSpatially ?OBJ2 ?OBJ1) (exists (?OBJ3) (and (instance ?OBJ3 SelfConnectedObject) (hole ?HOLE ?OBJ3) (overlapsSpatially ?OBJ2 ?OBJ3)))))))))

(forall (?OBJ1 ?HOLE) (=> (and (instance ?OBJ1 Object) (instance ?HOLE Hole)) (=> (equal ?OBJ1 (HoleSkinFn ?HOLE)) (forall (?OBJ2) (=> (instance ?OBJ2 Object) (<=> (overlapsSpatially ?OBJ2 ?OBJ1) (exists (?OBJ3) (and (instance ?OBJ3 Object) (superficialPart ?OBJ3 (HoleHostFn ?HOLE)) (meetsSpatially ?HOLE ?OBJ3) (overlapsSpatially ?OBJ2 ?OBJ3)))))))))

(forall (?OBJ1 ?HOLE) (=> (and (instance ?OBJ1 Object) (instance ?HOLE Object)) (=> (completelyFills ?OBJ1 ?HOLE) (forall (?OBJ2) (=> (instance ?OBJ2 Object) (=> (connected ?OBJ2 ?HOLE) (connected ?OBJ2 ?OBJ1)))))))

(forall (?OBJ1 ?OBJ2 ?ATTR1 ?ATTR2) (=> (and (instance ?OBJ1 Object) (instance ?OBJ2 Object) (instance ?ATTR1 PositionalAttribute) (instance ?ATTR2 PositionalAttribute)) (=> (and (orientation ?OBJ1 ?OBJ2 ?ATTR1) (instance ?ATTR1 DirectionalAttribute) (instance ?ATTR2 DirectionalAttribute) (not (equal ?ATTR1 ?ATTR2))) (not (orientation ?OBJ1 ?OBJ2 ?ATTR2)))))

(forall (?OBJ1 ?OBJ2 ?ATTR1 ?ROW1 ?ATTR2) (=> (and (instance ?OBJ1 Object) (instance ?OBJ2 Object) (instance ?ATTR1 PositionalAttribute) (instance ?ATTR2 PositionalAttribute)) (=> (and (orientation ?OBJ1 ?OBJ2 ?ATTR1) (contraryAttribute ?ROW1) (inList ?ATTR1 (ListFn ?ROW1)) (inList ?ATTR2 (ListFn ?ROW1)) (not (equal ?ATTR1 ?ATTR2))) (not (orientation ?OBJ1 ?OBJ2 ?ATTR2)))))

(forall (?OBJ1 ?OBJ2 ?ATTR1 ?ROW1 ?ROW2 ?ATTR2) (=> (and (instance ?OBJ1 Object) (instance ?OBJ2 Object) (instance ?ATTR1 PositionalAttribute) (instance ?ATTR2 PositionalAttribute)) (=> (and (orientation ?OBJ1 ?OBJ2 ?ATTR1) (contraryAttribute ?ROW1 ?ROW2) (inList ?ATTR1 (ListFn ?ROW1 ?ROW2)) (inList ?ATTR2 (ListFn ?ROW1 ?ROW2)) (not (equal ?ATTR1 ?ATTR2))) (not (orientation ?OBJ1 ?OBJ2 ?ATTR2)))))

(forall (?OBJ1 ?OBJ2 ?ATTR1 ?ROW1 ?ROW2 ?ROW3 ?ATTR2) (=> (and (instance ?OBJ1 Object) (instance ?OBJ2 Object) (instance ?ATTR1 PositionalAttribute) (instance ?ATTR2 PositionalAttribute)) (=> (and (orientation ?OBJ1 ?OBJ2 ?ATTR1) (contraryAttribute ?ROW1 ?ROW2 ?ROW3) (inList ?ATTR1 (ListFn ?ROW1 ?ROW2 ?ROW3)) (inList ?ATTR2 (ListFn ?ROW1 ?ROW2 ?ROW3)) (not (equal ?ATTR1 ?ATTR2))) (not (orientation ?OBJ1 ?OBJ2 ?ATTR2)))))

(forall (?OBJ1 ?OBJ2 ?ATTR1 ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ATTR2) (=> (and (instance ?OBJ1 Object) (instance ?OBJ2 Object) (instance ?ATTR1 PositionalAttribute) (instance ?ATTR2 PositionalAttribute)) (=> (and (orientation ?OBJ1 ?OBJ2 ?ATTR1) (contraryAttribute ?ROW1 ?ROW2 ?ROW3 ?ROW4) (inList ?ATTR1 (ListFn ?ROW1 ?ROW2 ?ROW3 ?ROW4)) (inList ?ATTR2 (ListFn ?ROW1 ?ROW2 ?ROW3 ?ROW4)) (not (equal ?ATTR1 ?ATTR2))) (not (orientation ?OBJ1 ?OBJ2 ?ATTR2)))))

(forall (?OBJ1 ?OBJ2 ?ATTR1 ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5 ?ATTR2) (=> (and (instance ?OBJ1 Object) (instance ?OBJ2 Object) (instance ?ATTR1 PositionalAttribute) (instance ?ATTR2 PositionalAttribute)) (=> (and (orientation ?OBJ1 ?OBJ2 ?ATTR1) (contraryAttribute ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5) (inList ?ATTR1 (ListFn ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5)) (inList ?ATTR2 (ListFn ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5)) (not (equal ?ATTR1 ?ATTR2))) (not (orientation ?OBJ1 ?OBJ2 ?ATTR2)))))

(forall (?OBJ1 ?OBJ2 ?ATTR1 ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5 ?ROW6 ?ATTR2) (=> (and (instance ?OBJ1 Object) (instance ?OBJ2 Object) (instance ?ATTR1 PositionalAttribute) (instance ?ATTR2 PositionalAttribute)) (=> (and (orientation ?OBJ1 ?OBJ2 ?ATTR1) (contraryAttribute ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5 ?ROW6) (inList ?ATTR1 (ListFn ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5 ?ROW6)) (inList ?ATTR2 (ListFn ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5 ?ROW6)) (not (equal ?ATTR1 ?ATTR2))) (not (orientation ?OBJ1 ?OBJ2 ?ATTR2)))))

(forall (?OBJ1 ?OBJ2 ?ATTR1 ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5 ?ROW6 ?ROW7 ?ATTR2) (=> (and (instance ?OBJ1 Object) (instance ?OBJ2 Object) (instance ?ATTR1 PositionalAttribute) (instance ?ATTR2 PositionalAttribute)) (=> (and (orientation ?OBJ1 ?OBJ2 ?ATTR1) (contraryAttribute ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5 ?ROW6 ?ROW7) (inList ?ATTR1 (ListFn ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5 ?ROW6 ?ROW7)) (inList ?ATTR2 (ListFn ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5 ?ROW6 ?ROW7)) (not (equal ?ATTR1 ?ATTR2))) (not (orientation ?OBJ1 ?OBJ2 ?ATTR2)))))

(forall (?OBJ1 ?OBJ2 ?DEPTH) (=> (and (instance ?OBJ1 Object) (instance ?OBJ2 Object) (instance ?DEPTH LengthMeasure)) (=> (depth ?OBJ1 ?OBJ2 ?DEPTH) (orientation ?OBJ1 ?OBJ2 Below))))

(forall (?OBJ1 ?OBJ2 ?DEPTH) (=> (and (instance ?OBJ1 SelfConnectedObject) (instance ?OBJ2 Physical) (instance ?DEPTH LengthMeasure)) (=> (depth ?OBJ1 ?OBJ2 ?DEPTH) (exists (?BOTTOM) (and (instance ?BOTTOM SelfConnectedObject) (bottom ?BOTTOM ?OBJ1) (distance ?BOTTOM ?OBJ2 ?DEPTH))))))

(forall (?OBJ1 ?OBJ2 ?HEIGHT) (=> (and (instance ?OBJ1 Object) (instance ?OBJ2 Object) (instance ?HEIGHT LengthMeasure)) (=> (altitude ?OBJ1 ?OBJ2 ?HEIGHT) (orientation ?OBJ1 ?OBJ2 Above))))

(forall (?OBJ1 ?OBJ2 ?HEIGHT) (=> (and (instance ?OBJ1 SelfConnectedObject) (instance ?OBJ2 Physical) (instance ?HEIGHT LengthMeasure)) (=> (altitude ?OBJ1 ?OBJ2 ?HEIGHT) (exists (?TOP) (and (instance ?TOP SelfConnectedObject) (top ?TOP ?OBJ1) (distance ?TOP ?OBJ2 ?HEIGHT))))))

(forall (?OBJ1 ?OBJ2 ?OBJ3) (=> (and (instance ?OBJ1 SelfConnectedObject) (instance ?OBJ2 SelfConnectedObject) (instance ?OBJ3 SelfConnectedObject)) (<=> (connects ?OBJ1 ?OBJ2 ?OBJ3) (and (connected ?OBJ1 ?OBJ2) (connected ?OBJ1 ?OBJ3) (not (connected ?OBJ2 ?OBJ3))))))

(forall (?OBJ1 ?OBJ2 ?QUANT) (=> (and (instance ?OBJ1 Physical) (instance ?OBJ2 Physical) (instance ?QUANT LengthMeasure)) (=> (distance ?OBJ1 ?OBJ2 ?QUANT) (distance ?OBJ2 ?OBJ1 ?QUANT))))

(forall (?OBJ1 ?OBJ2) (=> (and (instance ?OBJ1 ContentBearingObject) (instance ?OBJ2 ContentBearingObject)) (<=> (and (subsumesContentInstance ?OBJ1 ?OBJ2) (subsumesContentInstance ?OBJ2 ?OBJ1)) (equivalentContentInstance ?OBJ1 ?OBJ2))))

(forall (?OBJ1 ?OBJ2) (=> (and (instance ?OBJ1 ContentBearingObject) (instance ?OBJ2 ContentBearingObject)) (=> (subsumesContentInstance ?OBJ1 ?OBJ2) (forall (?INFO) (=> (instance ?INFO Proposition) (=> (containsInformation ?OBJ2 ?INFO) (containsInformation ?OBJ1 ?INFO)))))))

(forall (?OBJ1 ?OBJ2) (=> (and (instance ?OBJ1 Hole) (instance ?OBJ2 SelfConnectedObject)) (=> (hole ?OBJ1 ?OBJ2) (overlapsTemporally (WhenFn ?OBJ1) (WhenFn ?OBJ2)))))

(forall (?OBJ1 ?OBJ2) (=> (and (instance ?OBJ1 Object) (instance ?OBJ2 Object)) (<=> (orientation ?OBJ1 ?OBJ2 Adjacent) (or (orientation ?OBJ1 ?OBJ2 Near) (connected ?OBJ1 ?OBJ2)))))

(forall (?OBJ1 ?OBJ2) (=> (and (instance ?OBJ1 Object) (instance ?OBJ2 Object)) (<=> (orientation ?OBJ1 ?OBJ2 Below) (or (orientation ?OBJ2 ?OBJ1 On) (orientation ?OBJ2 ?OBJ1 Above)))))

(forall (?OBJ1 ?OBJ2) (=> (and (instance ?OBJ1 Object) (instance ?OBJ2 Object)) (<=> (orientation ?OBJ1 ?OBJ2 East) (orientation ?OBJ2 ?OBJ1 West))))

(forall (?OBJ1 ?OBJ2) (=> (and (instance ?OBJ1 Object) (instance ?OBJ2 Object)) (<=> (orientation ?OBJ1 ?OBJ2 Horizontal) (orientation ?OBJ2 ?OBJ1 Horizontal))))

(forall (?OBJ1 ?OBJ2) (=> (and (instance ?OBJ1 Object) (instance ?OBJ2 Object)) (<=> (orientation ?OBJ1 ?OBJ2 North) (orientation ?OBJ2 ?OBJ1 South))))

(forall (?OBJ1 ?OBJ2) (=> (and (instance ?OBJ1 Object) (instance ?OBJ2 Object)) (<=> (orientation ?OBJ1 ?OBJ2 Right) (orientation ?OBJ2 ?OBJ1 Left))))

(forall (?OBJ1 ?OBJ2) (=> (and (instance ?OBJ1 Object) (instance ?OBJ2 Object)) (<=> (orientation ?OBJ1 ?OBJ2 Vertical) (orientation ?OBJ2 ?OBJ1 Vertical))))

(forall (?OBJ1 ?OBJ2) (=> (and (instance ?OBJ1 Object) (instance ?OBJ2 Object)) (<=> (overlapsPartially ?OBJ1 ?OBJ2) (and (not (part ?OBJ1 ?OBJ2)) (not (part ?OBJ2 ?OBJ1)) (exists (?OBJ3) (and (instance ?OBJ3 Object) (part ?OBJ3 ?OBJ1) (part ?OBJ3 ?OBJ2)))))))

(forall (?OBJ1 ?OBJ2) (=> (and (instance ?OBJ1 Object) (instance ?OBJ2 Object)) (<=> (overlapsSpatially ?OBJ1 ?OBJ2) (exists (?OBJ3) (and (instance ?OBJ3 Object) (part ?OBJ3 ?OBJ1) (part ?OBJ3 ?OBJ2))))))

(forall (?OBJ1 ?OBJ2) (=> (and (instance ?OBJ1 Object) (instance ?OBJ2 Object)) (<=> (properPart ?OBJ1 ?OBJ2) (and (part ?OBJ1 ?OBJ2) (not (part ?OBJ2 ?OBJ1))))))

(forall (?OBJ1 ?OBJ2) (=> (and (instance ?OBJ1 Object) (instance ?OBJ2 Object)) (=> (connected ?OBJ1 ?OBJ2) (or (meetsSpatially ?OBJ1 ?OBJ2) (overlapsSpatially ?OBJ1 ?OBJ2)))))

(forall (?OBJ1 ?OBJ2) (=> (and (instance ?OBJ1 Object) (instance ?OBJ2 Object)) (=> (connected ?OBJ1 ?OBJ2) (overlapsTemporally (WhenFn ?OBJ1) (WhenFn ?OBJ2)))))

(forall (?OBJ1 ?OBJ2) (=> (and (instance ?OBJ1 Object) (instance ?OBJ2 Object)) (=> (copy ?OBJ1 ?OBJ2) (forall (?ATTR) (=> (instance ?ATTR Attribute) (=> (attribute ?OBJ1 ?ATTR) (attribute ?OBJ2 ?ATTR)))))))

(forall (?OBJ1 ?OBJ2) (=> (and (instance ?OBJ1 Object) (instance ?OBJ2 Object)) (=> (interiorPart ?OBJ1 ?OBJ2) (forall (?PART) (=> (instance ?PART Object) (=> (superficialPart ?PART ?OBJ2) (not (overlapsSpatially ?OBJ1 ?PART))))))))

(forall (?OBJ1 ?OBJ2) (=> (and (instance ?OBJ1 Object) (instance ?OBJ2 Object)) (=> (larger ?OBJ1 ?OBJ2) (forall (?QUANT1 ?QUANT2) (=> (and (instance ?QUANT1 RealNumber) (instance ?QUANT2 RealNumber)) (=> (and (measure ?OBJ1 (MeasureFn ?QUANT1 LengthMeasure)) (measure ?OBJ2 (MeasureFn ?QUANT2 LengthMeasure))) (greaterThan ?QUANT1 ?QUANT2)))))))

(forall (?OBJ1 ?OBJ2) (=> (and (instance ?OBJ1 Object) (instance ?OBJ2 Object)) (=> (larger ?OBJ1 ?OBJ2) (overlapsTemporally (WhenFn ?OBJ1) (WhenFn ?OBJ2)))))

(forall (?OBJ1 ?OBJ2) (=> (and (instance ?OBJ1 Object) (instance ?OBJ2 Object)) (=> (located ?OBJ1 ?OBJ2) (forall (?SUB) (=> (instance ?SUB Object) (=> (part ?SUB ?OBJ1) (located ?SUB ?OBJ2)))))))

(forall (?OBJ1 ?OBJ2) (=> (and (instance ?OBJ1 Object) (instance ?OBJ2 Object)) (=> (orientation ?OBJ1 ?OBJ2 Above) (not (connected ?OBJ1 ?OBJ2)))))

(forall (?OBJ1 ?OBJ2) (=> (and (instance ?OBJ1 Object) (instance ?OBJ2 Object)) (=> (orientation ?OBJ1 ?OBJ2 Near) (not (connected ?OBJ1 ?OBJ2)))))

(forall (?OBJ1 ?OBJ2) (=> (and (instance ?OBJ1 Object) (instance ?OBJ2 Object)) (=> (orientation ?OBJ1 ?OBJ2 Near) (orientation ?OBJ2 ?OBJ1 Near))))

(forall (?OBJ1 ?OBJ2) (=> (and (instance ?OBJ1 Object) (instance ?OBJ2 Object)) (=> (orientation ?OBJ1 ?OBJ2 On) (connected ?OBJ1 ?OBJ2))))

(forall (?OBJ1 ?OBJ2) (=> (and (instance ?OBJ1 Object) (instance ?OBJ2 Object)) (=> (orientation ?OBJ1 ?OBJ2 On) (located ?OBJ1 ?OBJ2))))

(forall (?OBJ1 ?OBJ2) (=> (and (instance ?OBJ1 Object) (instance ?OBJ2 Object)) (=> (orientation ?OBJ1 ?OBJ2 On) (not (orientation ?OBJ2 ?OBJ1 On)))))

(forall (?OBJ1 ?OBJ2) (=> (and (instance ?OBJ1 Object) (instance ?OBJ2 Object)) (=> (smaller ?OBJ1 ?OBJ2) (overlapsTemporally (WhenFn ?OBJ1) (WhenFn ?OBJ2)))))

(forall (?OBJ1 ?OBJ2) (=> (and (instance ?OBJ1 Object) (instance ?OBJ2 Object)) (=> (superficialPart ?OBJ1 ?OBJ2) (and (not (interiorPart ?OBJ1 ?OBJ2)) (not (exists (?OBJ3) (and (instance ?OBJ3 Object) (interiorPart ?OBJ3 ?OBJ1))))))))

(forall (?OBJ1 ?OBJ2) (=> (and (instance ?OBJ1 Object) (instance ?OBJ2 Object)) (=> (traverses ?OBJ1 ?OBJ2) (or (crosses ?OBJ1 ?OBJ2) (penetrates ?OBJ1 ?OBJ2)))))

(forall (?OBJ1 ?OBJ2) (=> (and (instance ?OBJ1 Object) (instance ?OBJ2 Object)) (=> (traverses ?OBJ1 ?OBJ2) (overlapsTemporally (WhenFn ?OBJ1) (WhenFn ?OBJ2)))))

(forall (?OBJ1 ?OBJ2) (=> (and (instance ?OBJ1 Physical) (instance ?OBJ2 Object)) (=> (partlyLocated ?OBJ1 ?OBJ2) (overlapsTemporally (WhenFn ?OBJ1) (WhenFn ?OBJ2)))))

(forall (?OBJ1 ?OBJ2) (=> (and (instance ?OBJ1 SelfConnectedObject) (instance ?OBJ2 Object)) (<=> (contains ?OBJ1 ?OBJ2) (exists (?HOLE) (and (instance ?HOLE Hole) (hole ?HOLE ?OBJ1) (properlyFills ?OBJ2 ?HOLE))))))

(forall (?OBJ1 ?OBJ2) (=> (and (instance ?OBJ1 SelfConnectedObject) (instance ?OBJ2 SelfConnectedObject)) (=> (surface ?OBJ1 ?OBJ2) (forall (?OBJ3) (=> (instance ?OBJ3 Object) (=> (superficialPart ?OBJ3 ?OBJ2) (part ?OBJ3 ?OBJ1)))))))

(forall (?OBJ1 ?OBJ2) (=> (instance ?OBJ2 Object) (=> (and (instance ?OBJ1 Object) (partlyLocated ?OBJ1 ?OBJ2)) (exists (?SUB) (and (instance ?SUB Object) (part ?SUB ?OBJ1) (located ?SUB ?OBJ2))))))

(forall (?OBJ1 ?OBJ2) (=> (instance ?OBJ2 Object) (=> (and (instance ?OBJ1 Object) (partlyLocated ?OBJ1 ?OBJ2)) (overlapsSpatially ?OBJ1 ?OBJ2))))

(forall (?OBJ3 ?OBJ1 ?OBJ2) (=> (and (instance ?OBJ3 Object) (instance ?OBJ1 Object) (instance ?OBJ2 Object)) (=> (equal ?OBJ3 (MereologicalDifferenceFn ?OBJ1 ?OBJ2)) (forall (?PART) (=> (instance ?PART Object) (<=> (part ?PART ?OBJ3) (and (part ?PART ?OBJ1) (not (part ?PART ?OBJ2)))))))))

(forall (?OBJ3 ?OBJ1 ?OBJ2) (=> (and (instance ?OBJ3 Object) (instance ?OBJ1 Object) (instance ?OBJ2 Object)) (=> (equal ?OBJ3 (MereologicalProductFn ?OBJ1 ?OBJ2)) (forall (?PART) (=> (instance ?PART Object) (<=> (part ?PART ?OBJ3) (and (part ?PART ?OBJ1) (part ?PART ?OBJ2))))))))

(forall (?OBJ3 ?OBJ1 ?OBJ2) (=> (and (instance ?OBJ3 Object) (instance ?OBJ1 Object) (instance ?OBJ2 Object)) (=> (equal ?OBJ3 (MereologicalSumFn ?OBJ1 ?OBJ2)) (forall (?PART) (=> (instance ?PART Object) (<=> (part ?PART ?OBJ3) (or (part ?PART ?OBJ1) (part ?PART ?OBJ2))))))))

(forall (?OBJECT ?DISTANCE ?TIME ?REF ?DIRECTION) (=> (and (instance ?OBJECT Object) (instance ?DISTANCE LengthMeasure) (instance ?TIME TimeDuration) (instance ?REF Region) (instance ?DIRECTION DirectionalAttribute)) (=> (measure ?OBJECT (VelocityFn ?DISTANCE ?TIME ?REF ?DIRECTION)) (measure ?OBJECT (SpeedFn ?DISTANCE ?TIME)))))

(forall (?OBJECT ?HEIGHT ?TOP ?BOTTOM) (=> (and (instance ?OBJECT SelfConnectedObject) (instance ?HEIGHT LengthMeasure) (instance ?TOP SelfConnectedObject) (instance ?BOTTOM SelfConnectedObject)) (=> (and (height ?OBJECT ?HEIGHT) (top ?TOP ?OBJECT) (bottom ?BOTTOM ?OBJECT)) (distance ?TOP ?BOTTOM ?HEIGHT))))

(forall (?OBJECT ?WIDTH) (=> (and (instance ?OBJECT SelfConnectedObject) (instance ?WIDTH LengthMeasure)) (<=> (width ?OBJECT ?WIDTH) (exists (?SIDE1 ?SIDE2) (and (instance ?SIDE1 SelfConnectedObject) (instance ?SIDE2 SelfConnectedObject) (side ?SIDE1 ?OBJECT) (side ?SIDE2 ?OBJECT) (distance ?SIDE1 ?SIDE2 ?WIDTH))))))

(forall (?OBJECTTYPE ?OBJECT ?PART) (=> (and (instance ?OBJECTTYPE SetOrClass) (instance ?OBJECT Object) (instance ?PART Object)) (=> (and (subclass ?OBJECTTYPE Substance) (instance ?OBJECT ?OBJECTTYPE) (part ?PART ?OBJECT)) (instance ?PART ?OBJECTTYPE))))

(forall (?ORDER ?FORMULA) (=> (and (instance ?ORDER Process) (instance ?FORMULA Formula)) (=> (and (instance ?ORDER Ordering) (patient ?ORDER ?FORMULA)) (modalAttribute ?FORMULA Obligation))))

(forall (?ORG ?AGENT) (=> (and (instance ?ORG Collection) (instance ?AGENT SelfConnectedObject)) (=> (and (instance ?ORG Organization) (member ?AGENT ?ORG)) (instance ?AGENT Agent))))

(forall (?ORG ?ATT) (=> (and (instance ?ORG Object) (instance ?ATT Attribute)) (=> (and (attribute ?ORG ?ATT) (instance ?ATT BiologicalAttribute)) (instance ?ORG Organism))))

(forall (?ORG ?GOV) (=> (and (instance ?ORG Organization) (instance ?GOV Organization)) (=> (and (subOrganization ?ORG ?GOV) (instance ?GOV GovernmentOrganization)) (instance ?ORG GovernmentOrganization))))

(forall (?ORG ?PERSON) (=> (and (instance ?ORG Organization) (instance ?PERSON Human)) (=> (employs ?ORG ?PERSON) (exists (?POSITION) (and (instance ?POSITION Position) (occupiesPosition ?PERSON ?POSITION ?ORG))))))

(forall (?ORG ?TEXT) (=> (and (instance ?ORG Organization) (subclass ?TEXT Text)) (<=> (publishes ?ORG ?TEXT) (exists (?PUB) (and (instance ?PUB Process) (instance ?PUB Publication) (agent ?PUB ?ORG) (patient ?PUB ?TEXT))))))

(forall (?ORG) (=> (instance ?ORG Agent) (=> (instance ?ORG Manufacturer) (hasPurpose `(exists (?MANUFACTURE) (and (instance ?MANUFACTURE Process) (instance ?MANUFACTURE Manufacture) (instance ?MANUFACTURE CommercialService) (agent ?MANUFACTURE ?ORG)))))))

(forall (?ORG) (=> (instance ?ORG Agent) (=> (instance ?ORG MercantileOrganization) (hasPurpose `(exists (?SELL) (and (instance ?SELL Process) (instance ?SELL Selling) (instance ?SELL CommercialService) (agent ?SELL ?ORG)))))))

(forall (?ORG) (=> (instance ?ORG Collection) (=> (instance ?ORG Organization) (exists (?PURP) (and (instance ?PURP Formula) (forall (?MEMBER) (=> (instance ?MEMBER SelfConnectedObject) (=> (member ?MEMBER ?ORG) (hasPurpose ?MEMBER ?PURP)))))))))

(forall (?ORG) (=> (instance ?ORG Object) (=> (attribute ?ORG Embryonic) (exists (?BODY) (and (instance ?BODY Object) (instance ?BODY ReproductiveBody) (located ?ORG ?BODY))))))

(forall (?ORG) (=> (instance ?ORG Object) (=> (instance ?ORG MilitaryForce) (capability ViolentContest agent ?ORG))))

(forall (?ORG) (=> (instance ?ORG Object) (=> (instance ?ORG Organism) (exists (?ATTR) (and (instance ?ATTR Attribute) (instance ?ATTR AnimacyAttribute) (attribute ?ORG ?ATTR))))))

(forall (?ORG) (=> (instance ?ORG Object) (=> (instance ?ORG Organism) (exists (?ATTR) (and (instance ?ATTR Attribute) (instance ?ATTR DevelopmentalAttribute) (attribute ?ORG ?ATTR))))))

(forall (?ORG) (=> (instance ?ORG Organization) (<=> (instance ?ORG GovernmentOrganization) (exists (?GOV) (and (instance ?GOV Organization) (instance ?GOV Government) (subOrganization ?ORG ?GOV))))))

(forall (?ORGAN) (=> (instance ?ORGAN Physical) (=> (instance ?ORGAN Organ) (exists (?PURP) (and (instance ?PURP Formula) (hasPurpose ?ORGAN ?PURP))))))

(forall (?ORGANISM ?PROCESS) (=> (and (instance ?ORGANISM Agent) (instance ?PROCESS Process)) (=> (and (instance ?ORGANISM Organism) (agent ?PROCESS ?ORGANISM)) (holdsDuring (WhenFn ?PROCESS) `(attribute ?ORGANISM Living)))))

(forall (?ORGANISM) (=> (instance ?ORGANISM Agent) (=> (instance ?ORGANISM Organism) (exists (?BIRTH) (and (instance ?BIRTH Process) (instance ?BIRTH Birth) (experiencer ?BIRTH ?ORGANISM))))))

(forall (?ORGANISM) (=> (instance ?ORGANISM Organism) (exists (?PARENT) (and (instance ?PARENT Organism) (parent ?ORGANISM ?PARENT)))))

(forall (?ORGANISM1 ?ORGANISM2) (=> (and (instance ?ORGANISM1 Organism) (instance ?ORGANISM2 Organism)) (=> (familyRelation ?ORGANISM1 ?ORGANISM2) (exists (?ORGANISM3) (and (instance ?ORGANISM3 Organism) (ancestor ?ORGANISM3 ?ORGANISM1) (ancestor ?ORGANISM3 ?ORGANISM2))))))

(forall (?PART) (=> (instance ?PART BodyPart) (exists (?PROC) (and (instance ?PROC Process) (instance ?PROC PhysiologicProcess) (result ?PROC ?PART)))))

(forall (?PART) (=> (instance ?PART CorpuscularObject) (=> (instance ?PART BodyPart) (exists (?ORGANISM ?TIME) (and (instance ?ORGANISM CorpuscularObject) (instance ?TIME TimePosition) (instance ?ORGANISM Organism) (temporalPart ?TIME (WhenFn ?ORGANISM)) (holdsDuring ?TIME `(component ?PART ?ORGANISM)))))))

(forall (?PART) (=> (instance ?PART GraphElement) (exists (?GRAPH) (and (instance ?GRAPH Graph) (graphPart ?PART ?GRAPH)))))

(forall (?PART) (=> (instance ?PART Object) (=> (instance ?PART AnatomicalStructure) (exists (?CELL) (and (instance ?CELL Object) (instance ?CELL Cell) (part ?CELL ?PART))))))

(forall (?PARTICLE) (=> (instance ?PARTICLE Object) (=> (instance ?PARTICLE SubatomicParticle) (exists (?ATOM) (and (instance ?ATOM Object) (instance ?ATOM Atom) (part ?PARTICLE ?ATOM))))))

(forall (?PATH ?GRAPH ?NODE1 ?NODE2) (=> (and (instance ?PATH GraphElement) (subclass ?PATH GraphPath) (instance ?GRAPH Graph) (instance ?NODE1 GraphNode) (instance ?NODE2 GraphNode)) (=> (and (graphPart ?PATH ?GRAPH) (not (instance ?GRAPH DirectedGraph))) (<=> (equal (GraphPathFn ?NODE1 ?NODE2) ?PATH) (equal (GraphPathFn ?NODE2 ?NODE1) ?PATH)))))

(forall (?PATH ?ORG) (=> (and (instance ?PATH Process) (instance ?ORG Agent)) (=> (and (instance ?PATH PathologicProcess) (experiencer ?PATH ?ORG)) (exists (?PART ?DISEASE) (and (instance ?PART Object) (instance ?DISEASE Attribute) (part ?PART ?ORG) (instance ?DISEASE DiseaseOrSyndrome) (attribute ?PART ?DISEASE))))))

(forall (?PATH ?SUM ?ARC1 ?ARC2 ?NUMBER1 ?NUMBER2) (=> (and (instance ?PATH GraphPath) (instance ?SUM RealNumber) (instance ?ARC1 GraphArc) (instance ?ARC2 GraphArc) (instance ?NUMBER1 RealNumber) (instance ?NUMBER2 RealNumber)) (=> (and (equal (PathWeightFn ?PATH) ?SUM) (graphPart ?ARC1 ?PATH) (graphPart ?ARC2 ?PATH) (arcWeight ?ARC1 ?NUMBER1) (arcWeight ?ARC2 ?NUMBER2) (forall (?ARC3) (=> (instance ?ARC3 GraphElement) (=> (graphPart ?ARC3 ?PATH) (or (equal ?ARC3 ?ARC1) (equal ?ARC3 ?ARC2)))))) (equal (PathWeightFn ?PATH) (AdditionFn ?NUMBER1 ?NUMBER2)))))

(forall (?PATH ?SUM ?SUBPATH ?ARC1 ?NUMBER1) (=> (and (instance ?PATH GraphPath) (instance ?SUM RealNumber) (instance ?SUBPATH GraphPath) (instance ?ARC1 GraphArc) (instance ?NUMBER1 RealNumber)) (=> (and (equal (PathWeightFn ?PATH) ?SUM) (subGraph ?SUBPATH ?PATH) (graphPart ?ARC1 ?PATH) (arcWeight ?ARC1 ?NUMBER1) (forall (?ARC2) (=> (instance ?ARC2 GraphElement) (=> (graphPart ?ARC2 ?PATH) (or (graphPart ?ARC2 ?SUBPATH) (equal ?ARC2 ?ARC1)))))) (equal ?SUM (AdditionFn (PathWeightFn ?SUBPATH) ?NUMBER1)))))

(forall (?PERCEPT ?AGENT) (=> (and (instance ?PERCEPT Process) (instance ?AGENT Agent)) (=> (and (instance ?PERCEPT Perception) (agent ?PERCEPT ?AGENT)) (instance ?AGENT Animal))))

(forall (?PERCEPTION ?OBJ) (=> (and (instance ?PERCEPTION Process) (instance ?OBJ Object)) (=> (and (instance ?PERCEPTION Perception) (patient ?PERCEPTION ?OBJ)) (exists (?PROP) (and (instance ?PROP Attribute) (instance ?PROP PerceptualAttribute) (attribute ?OBJ ?PROP))))))

(forall (?PERIODICAL ?NUMBER ?ISSUE) (=> (and (subclass ?PERIODICAL Periodical) (subclass ?PERIODICAL ContentBearingObject) (instance ?NUMBER PositiveInteger) (subclass ?ISSUE Periodical) (subclass ?ISSUE ContentBearingObject)) (=> (equal (PeriodicalIssueFn ?PERIODICAL ?NUMBER) ?ISSUE) (subsumesContentClass ?PERIODICAL ?ISSUE))))

(forall (?PERSON ?AMOUNT) (=> (and (instance ?PERSON Agent) (instance ?AMOUNT CurrencyMeasure)) (<=> (equal (WealthFn ?PERSON) ?AMOUNT) (monetaryValue (PropertyFn ?PERSON) ?AMOUNT))))

(forall (?PERSON ?ATTRIBUTE) (=> (and (instance ?PERSON Object) (instance ?ATTRIBUTE Attribute)) (=> (and (attribute ?PERSON ?ATTRIBUTE) (instance ?ATTRIBUTE SocialRole)) (instance ?PERSON Human))))

(forall (?PERSON ?FAMILY) (=> (instance ?FAMILY FamilyGroup) (=> (and (instance ?PERSON Human) (equal (ImmediateFamilyFn ?PERSON) ?FAMILY)) (forall (?MEMBER) (=> (instance ?MEMBER Organism) (<=> (member ?MEMBER ?FAMILY) (or (parent ?MEMBER ?PERSON) (parent ?PERSON ?MEMBER))))))))

(forall (?PERSON ?OBJ) (=> (and (instance ?PERSON Agent) (instance ?OBJ Object)) (=> (possesses ?PERSON ?OBJ) (modalAttribute `(uses ?OBJ ?PERSON) Permission))))

(forall (?PERSON ?POSITION ?ORGANIZATION) (=> (and (instance ?PERSON Human) (instance ?POSITION Position) (instance ?ORGANIZATION Organization)) (=> (occupiesPosition ?PERSON ?POSITION ?ORGANIZATION) (member ?PERSON ?ORGANIZATION))))

(forall (?PERSON) (=> (instance ?PERSON CognitiveAgent) (<=> (and (instance ?PERSON Human) (forall (?ORG) (=> (instance ?ORG Organization) (not (employs ?ORG ?PERSON))))) (attribute ?PERSON Unemployed))))

(forall (?PHRASE) (=> (instance ?PHRASE Object) (=> (instance ?PHRASE NounPhrase) (exists (?NOUN) (and (instance ?NOUN Object) (instance ?NOUN Noun) (part ?NOUN ?PHRASE))))))

(forall (?PHRASE) (=> (instance ?PHRASE Object) (=> (instance ?PHRASE Phrase) (exists (?PART1 ?PART2) (and (instance ?PART1 Object) (instance ?PART2 Object) (part ?PART1 ?PHRASE) (part ?PART2 ?PHRASE) (instance ?PART1 Word) (instance ?PART2 Word) (not (equal ?PART1 ?PART2)))))))

(forall (?PHRASE) (=> (instance ?PHRASE Object) (=> (instance ?PHRASE PrepositionalPhrase) (exists (?PREP) (and (instance ?PREP Object) (instance ?PREP ParticleWord) (part ?PREP ?PHRASE))))))

(forall (?PHRASE) (=> (instance ?PHRASE Object) (=> (instance ?PHRASE VerbPhrase) (exists (?VERB) (and (instance ?VERB Object) (instance ?VERB Verb) (part ?VERB ?PHRASE))))))

(forall (?PHYS ?TIME) (=> (instance ?PHYS Physical) (<=> (and (time ?PHYS ?TIME) (instance ?TIME TimePoint)) (temporallyBetweenOrEqual (BeginFn (WhenFn ?PHYS)) ?TIME (EndFn (WhenFn ?PHYS))))))

(forall (?PHYS) (<=> (instance ?PHYS Physical) (exists (?LOC ?TIME) (and (instance ?LOC Object) (instance ?TIME TimePosition) (located ?PHYS ?LOC) (time ?PHYS ?TIME)))))

(forall (?PHYS1 ?PHYS2) (=> (and (instance ?PHYS1 Physical) (instance ?PHYS2 Physical)) (<=> (cooccur ?PHYS1 ?PHYS2) (equal (WhenFn ?PHYS1) (WhenFn ?PHYS2)))))

(forall (?PLAN ?OBJ) (=> (and (instance ?PLAN Proposition) (instance ?OBJ ContentBearingPhysical)) (=> (and (instance ?PLAN Plan) (instance ?OBJ ContentBearingObject) (containsInformation ?OBJ ?PLAN)) (exists (?PLANNING) (and (instance ?PLANNING Process) (instance ?PLANNING Planning) (result ?PLANNING ?OBJ))))))

(forall (?POINT) (=> (and (instance ?POINT TimePoint) (not (equal ?POINT NegativeInfinity))) (before NegativeInfinity ?POINT)))

(forall (?POINT) (=> (and (instance ?POINT TimePoint) (not (equal ?POINT NegativeInfinity))) (exists (?OTHERPOINT) (and (instance ?OTHERPOINT TimePoint) (temporallyBetween NegativeInfinity ?OTHERPOINT ?POINT)))))

(forall (?POINT) (=> (and (instance ?POINT TimePoint) (not (equal ?POINT PositiveInfinity))) (before ?POINT PositiveInfinity)))

(forall (?POINT) (=> (and (instance ?POINT TimePoint) (not (equal ?POINT PositiveInfinity))) (exists (?OTHERPOINT) (and (instance ?OTHERPOINT TimePoint) (temporallyBetween ?POINT ?OTHERPOINT PositiveInfinity)))))

(forall (?POINT) (=> (instance ?POINT TimePosition) (=> (instance ?POINT TimePoint) (exists (?INTERVAL) (and (instance ?INTERVAL TimePosition) (instance ?INTERVAL TimeInterval) (temporalPart ?POINT ?INTERVAL))))))

(forall (?POINT1 ?POINT2 ?INTERVAL) (=> (and (instance ?POINT1 TimePoint) (instance ?POINT2 TimePoint) (instance ?INTERVAL TimeInterval) (equal (TimeIntervalFn ?POINT1 ?POINT2) ?INTERVAL)) (and (equal (BeginFn ?INTERVAL) ?POINT1) (equal (EndFn ?INTERVAL) ?POINT2))))

(forall (?POINT1 ?POINT2 ?INTERVAL) (=> (and (instance ?POINT1 TimePoint) (instance ?POINT2 TimePoint) (instance ?INTERVAL TimeInterval) (equal (TimeIntervalFn ?POINT1 ?POINT2) ?INTERVAL)) (forall (?POINT) (=> (instance ?POINT TimePoint) (<=> (temporallyBetweenOrEqual ?POINT1 ?POINT ?POINT2) (temporalPart ?POINT ?INTERVAL))))))

(forall (?POINT1 ?POINT2 ?LENGTH) (=> (and (instance ?POINT1 GeometricPoint) (instance ?POINT2 GeometricPoint) (instance ?LENGTH LengthMeasure)) (=> (geometricDistance ?POINT1 ?POINT2 ?LENGTH) (geometricDistance ?POINT2 ?POINT1 ?LENGTH))))

(forall (?POINT1 ?POINT2 ?POINT3) (=> (and (instance ?POINT1 TimePoint) (instance ?POINT2 TimePoint) (instance ?POINT3 TimePoint)) (<=> (temporallyBetween ?POINT1 ?POINT2 ?POINT3) (and (before ?POINT1 ?POINT2) (before ?POINT2 ?POINT3)))))

(forall (?POINT1 ?POINT2 ?POINT3) (=> (and (instance ?POINT1 TimePoint) (instance ?POINT2 TimePoint) (instance ?POINT3 TimePoint)) (<=> (temporallyBetweenOrEqual ?POINT1 ?POINT2 ?POINT3) (and (beforeOrEqual ?POINT1 ?POINT2) (beforeOrEqual ?POINT2 ?POINT3)))))

(forall (?POINT1 ?POINT2) (=> (and (instance ?POINT1 TimePoint) (instance ?POINT2 TimePoint)) (=> (beforeOrEqual ?POINT1 ?POINT2) (or (before ?POINT1 ?POINT2) (equal ?POINT1 ?POINT2)))))

(forall (?POISON) (=> (instance ?POISON Process) (=> (instance ?POISON Poisoning) (exists (?SUBSTANCE) (and (instance ?SUBSTANCE Object) (instance ?SUBSTANCE BiologicallyActiveSubstance) (instrument ?POISON ?SUBSTANCE))))))

(forall (?POISON) (=> (instance ?POISON Process) (=> (instance ?POISON Poisoning) (exists (?THING) (and (patient ?POISON ?THING) (or (instance ?THING Organism) (instance ?THING AnatomicalStructure)))))))

(forall (?POKE ?AGENT ?OBJ ?INST) (=> (and (instance ?POKE Process) (instance ?AGENT Agent) (instance ?AGENT SelfConnectedObject) (instance ?OBJ SelfConnectedObject) (instance ?INST SelfConnectedObject)) (=> (and (instance ?POKE Poking) (agent ?POKE ?AGENT) (patient ?POKE ?OBJ) (instrument ?POKE ?INST)) (holdsDuring (WhenFn ?POKE) `(connects ?INST ?AGENT ?OBJ)))))

(forall (?POL) (=> (instance ?POL Agent) (=> (instance ?POL PoliticalOrganization) (exists (?PROC) (and (instance ?PROC Process) (instance ?PROC PoliticalProcess) (agent ?PROC ?POL))))))

(forall (?POS ?THING) (=> (and (instance ?POS TimePosition) (instance ?THING Physical)) (<=> (temporalPart ?POS (WhenFn ?THING)) (time ?THING ?POS))))

(forall (?PRED1 ?PRED2 ?CLASS) (=> (and (instance ?PRED1 Relation) (instance ?PRED2 Relation) (instance ?CLASS SetOrClass)) (=> (and (subrelation ?PRED1 ?PRED2) (instance ?PRED2 ?CLASS) (instance ?CLASS InheritableRelation)) (instance ?PRED1 ?CLASS))))

(forall (?PRED1 ?PRED2 ?NUMBER ?CLASS1) (=> (and (instance ?PRED1 Relation) (instance ?PRED2 Relation) (instance ?NUMBER PositiveInteger) (instance ?CLASS1 SetOrClass)) (=> (and (subrelation ?PRED1 ?PRED2) (domain ?PRED2 ?NUMBER ?CLASS1)) (domain ?PRED1 ?NUMBER ?CLASS1))))

(forall (?PRED1 ?PRED2 ?NUMBER) (=> (and (instance ?PRED1 Relation) (instance ?PRED2 Relation) (instance ?NUMBER PositiveInteger)) (=> (and (subrelation ?PRED1 ?PRED2) (valence ?PRED1 ?NUMBER)) (valence ?PRED2 ?NUMBER))))

(forall (?PREDICT ?FORMULA) (=> (and (instance ?PREDICT Process) (instance ?FORMULA Formula)) (=> (and (instance ?PREDICT Predicting) (patient ?PREDICT ?FORMULA)) (exists (?TIME) (and (instance ?TIME TimePoint) (instance ?TIME TimeInterval) (holdsDuring ?TIME ?FORMULA) (or (before ?TIME (WhenFn ?PREDICT)) (earlier ?TIME (WhenFn ?PREDICT))))))))

(forall (?PRETEND) (=> (instance ?PRETEND Physical) (=> (instance ?PRETEND Pretending) (exists (?PERSON ?PROP) (and (instance ?PERSON CognitiveAgent) (instance ?PROP Formula) (hasPurpose ?PRETEND `(believes ?PERSON ?PROP)) (truth ?PROP True))))))

(forall (?PRIME) (=> (instance ?PRIME Quantity) (=> (instance ?PRIME PrimeNumber) (forall (?NUMBER) (=> (instance ?NUMBER Quantity) (=> (equal (RemainderFn ?PRIME ?NUMBER) 0) (or (equal ?NUMBER 1) (equal ?NUMBER ?PRIME))))))))

(forall (?PROC ?AGENT) (=> (and (instance ?PROC Process) (instance ?AGENT CognitiveAgent)) (=> (and (instance ?PROC DiagnosticProcess) (agent ?PROC ?AGENT)) (exists (?CAUSE) (and (instance ?CAUSE Process) (hasPurposeForAgent ?PROC `(knows ?AGENT `(causes ?CAUSE ?PROC)) ?AGENT))))))

(forall (?PROC ?AGENT) (=> (and (instance ?PROC Process) (instance ?AGENT CognitiveAgent)) (=> (and (instance ?PROC IntentionalProcess) (agent ?PROC ?AGENT)) (exists (?PURP) (and (instance ?PURP Formula) (hasPurposeForAgent ?PROC ?PURP ?AGENT))))))

(forall (?PROC ?AGENT) (=> (and (subclass ?PROC Process) (instance ?AGENT Agent)) (=> (hasSkill ?PROC ?AGENT) (capability ?PROC agent ?AGENT))))

(forall (?PROC ?BIO) (=> (and (instance ?PROC Process) (instance ?BIO Object)) (=> (and (instance ?PROC TherapeuticProcess) (patient ?PROC ?BIO)) (or (instance ?BIO Organism) (exists (?ORG) (and (instance ?ORG Object) (instance ?ORG Organism) (part ?BIO ?ORG)))))))

(forall (?PROC ?HUMAN) (=> (and (instance ?PROC Process) (instance ?HUMAN Agent)) (=> (and (instance ?PROC IntentionalProcess) (agent ?PROC ?HUMAN) (instance ?HUMAN Animal)) (holdsDuring (WhenFn ?PROC) `(attribute ?HUMAN Awake)))))

(forall (?PROC ?OBJ ?QUANT1 ?QUANT2) (=> (and (instance ?PROC Process) (instance ?OBJ Object) (instance ?QUANT1 PhysicalQuantity) (instance ?QUANT2 PhysicalQuantity)) (=> (and (resource ?PROC ?OBJ) (holdsDuring (BeginFn (WhenFn ?PROC)) `(measure ?OBJ ?QUANT1)) (holdsDuring (EndFn (WhenFn ?PROC)) `(measure ?OBJ ?QUANT2))) (greaterThan ?QUANT1 ?QUANT2))))

(forall (?PROC ?OBJ) (=> (and (instance ?PROC Process) (instance ?OBJ Physical)) (=> (result ?PROC ?OBJ) (forall (?TIME) (=> (instance ?TIME TimePoint) (=> (before ?TIME (BeginFn (WhenFn ?PROC))) (not (time ?OBJ ?TIME))))))))

(forall (?PROC ?ORG) (=> (and (instance ?PROC Process) (instance ?ORG Agent)) (=> (and (instance ?PROC BiologicalProcess) (experiencer ?PROC ?ORG)) (instance ?ORG Organism))))

(forall (?PROC ?STUFF) (=> (and (instance ?PROC Process) (instance ?STUFF Object)) (=> (and (instance ?PROC ChemicalProcess) (or (resource ?PROC ?STUFF) (result ?PROC ?STUFF))) (instance ?STUFF PureSubstance))))

(forall (?PROC ?SUBPROC) (=> (instance ?SUBPROC Process) (=> (and (instance ?PROC Process) (subProcess ?SUBPROC ?PROC)) (exists (?TIME) (and (instance ?TIME TimePosition) (time ?SUBPROC ?TIME))))))

(forall (?PROC ?SUBSTANCE1 ?SUBSTANCE2) (=> (and (instance ?PROC Process) (instance ?SUBSTANCE1 Object)) (=> (and (resource ?PROC ?SUBSTANCE1) (result ?PROC ?SUBSTANCE2) (instance ?SUBSTANCE1 CompoundSubstance) (instance ?SUBSTANCE2 ElementalSubstance)) (instance ?PROC ChemicalDecomposition))))

(forall (?PROC ?SUBSTANCE1 ?SUBSTANCE2) (=> (and (instance ?PROC Process) (instance ?SUBSTANCE1 Object)) (=> (and (resource ?PROC ?SUBSTANCE1) (result ?PROC ?SUBSTANCE2) (instance ?SUBSTANCE1 ElementalSubstance) (instance ?SUBSTANCE2 CompoundSubstance)) (instance ?PROC ChemicalSynthesis))))

(forall (?PROC ?TIME1) (=> (and (instance ?PROC SetOrClass) (subclass ?PROC Process) (instance ?TIME1 TimeDuration)) (=> (frequency ?PROC ?TIME1) (forall (?TIME2) (=> (instance ?TIME2 TimeInterval) (=> (duration ?TIME2 ?TIME1) (exists (?POSITION) (and (instance ?POSITION TimePosition) (temporalPart ?POSITION ?TIME2) (holdsDuring ?POSITION `(exists (?INST) (instance ?INST ?PROC)))))))))))

(forall (?PROC) (=> (instance ?PROC Physical) (=> (instance ?PROC BiologicalProcess) (exists (?OBJ) (and (instance ?OBJ Object) (instance ?OBJ Organism) (located ?PROC ?OBJ))))))

(forall (?PROC) (=> (instance ?PROC Physical) (=> (instance ?PROC OrganOrTissueProcess) (exists (?THING) (and (instance ?THING Object) (located ?PROC ?THING) (or (instance ?THING Organ) (instance ?THING Tissue)))))))

(forall (?PROC) (=> (instance ?PROC Process) (=> (instance ?PROC DirectionChange) (exists (?ATTR) (and (instance ?ATTR Attribute) (instance ?ATTR DirectionalAttribute) (or (and (holdsDuring (BeginFn (WhenFn ?PROC)) `(manner ?PROC ?ATTR)) (holdsDuring (EndFn (WhenFn ?PROC)) `(not (manner ?PROC ?ATTR)))) (and (holdsDuring (EndFn (WhenFn ?PROC)) `(manner ?PROC ?ATTR)) (holdsDuring (BeginFn (WhenFn ?PROC)) `(not (manner ?PROC ?ATTR))))))))))

(forall (?PROC) (=> (instance ?PROC Process) (=> (instance ?PROC IntentionalProcess) (exists (?AGENT) (and (instance ?AGENT Agent) (instance ?AGENT CognitiveAgent) (agent ?PROC ?AGENT))))))

(forall (?PROC) (=> (instance ?PROC Process) (=> (instance ?PROC PoliticalProcess) (exists (?POL) (and (instance ?POL SelfConnectedObject) (instance ?POL Agent) (or (instance ?POL Government) (exists (?GOV) (and (instance ?GOV Collection) (instance ?GOV Government) (member ?POL ?GOV)))) (or (agent ?PROC ?POL) (patient ?PROC ?POL)))))))

(forall (?PROC1 ?PROC2) (=> (and (instance ?PROC1 SetOrClass) (subclass ?PROC1 Process) (instance ?PROC2 SetOrClass) (subclass ?PROC2 Process)) (=> (causesSubclass ?PROC1 ?PROC2) (forall (?INST2) (=> (instance ?INST2 Process) (=> (instance ?INST2 ?PROC2) (exists (?INST1) (and (instance ?INST1 Process) (instance ?INST1 ?PROC1) (causes ?INST1 ?INST2)))))))))

(forall (?PROC1 ?PROC2) (=> (and (instance ?PROC1 SetOrClass) (subclass ?PROC1 Process) (instance ?PROC2 SetOrClass) (subclass ?PROC2 Process)) (=> (inhibits ?PROC1 ?PROC2) (forall (?TIME ?PLACE) (=> (and (instance ?TIME TimePosition) (instance ?PLACE Object)) (decreasesLikelihood `(holdsDuring ?TIME `(exists (?INST1) (and (instance ?INST1 Physical) (instance ?INST1 ?PROC1) (located ?INST1 ?PLACE)))) `(holdsDuring ?TIME `(exists (?INST2) (and (instance ?INST2 Physical) (instance ?INST2 ?PROC2) (located ?INST2 ?PLACE))))))))))

(forall (?PROC1 ?PROC2) (=> (and (instance ?PROC1 SetOrClass) (subclass ?PROC1 Process) (instance ?PROC2 SetOrClass) (subclass ?PROC2 Process)) (=> (precondition ?PROC1 ?PROC2) (=> (exists (?INST2) (instance ?INST2 ?PROC2)) (exists (?INST1) (instance ?INST1 ?PROC1))))))

(forall (?PROC1 ?PROC2) (=> (and (instance ?PROC1 SetOrClass) (subclass ?PROC1 Process) (instance ?PROC2 SetOrClass) (subclass ?PROC2 Process)) (=> (prevents ?PROC1 ?PROC2) (forall (?TIME ?PLACE) (=> (and (instance ?TIME TimePosition) (instance ?PLACE Object)) (=> (holdsDuring ?TIME `(exists (?INST1) (and (instance ?INST1 Physical) (instance ?INST1 ?PROC1) (located ?INST1 ?PLACE)))) (not (holdsDuring ?TIME `(exists (?INST2) (and (instance ?INST2 Physical) (instance ?INST2 ?PROC2) (located ?INST2 ?PLACE)))))))))))

(forall (?PROC1) (=> (instance ?PROC1 Process) (exists (?PROC2) (and (instance ?PROC2 Process) (causes ?PROC2 ?PROC1)))))

(forall (?PROCESS ?LOC) (=> (and (instance ?PROCESS Process) (instance ?LOC Object)) (=> (destination ?PROCESS ?LOC) (partlyLocated ?PROCESS ?LOC))))

(forall (?PROCESS ?LOC) (=> (and (instance ?PROCESS Process) (instance ?LOC Object)) (=> (origin ?PROCESS ?LOC) (partlyLocated ?PROCESS ?LOC))))

(forall (?PROCESS ?OBJ) (=> (and (instance ?PROCESS Process) (instance ?OBJ Object)) (=> (and (instance ?PROCESS StateChange) (patient ?PROCESS ?OBJ)) (exists (?PART ?STATE1 ?STATE2) (and (instance ?PART Object) (instance ?STATE1 Attribute) (instance ?STATE2 Attribute) (part ?PART ?OBJ) (instance ?STATE1 PhysicalState) (instance ?STATE2 PhysicalState) (not (equal ?STATE1 ?STATE2)) (holdsDuring (BeginFn (WhenFn ?PROCESS)) `(attribute ?PART ?STATE1)) (holdsDuring (EndFn (WhenFn ?PROCESS)) `(attribute ?PART ?STATE2)))))))

(forall (?PROCESS ?OBJ) (=> (and (instance ?PROCESS Process) (instance ?OBJ Object)) (=> (located ?PROCESS ?OBJ) (forall (?SUB) (=> (instance ?SUB Process) (=> (subProcess ?SUB ?PROCESS) (located ?SUB ?OBJ)))))))

(forall (?PROCESS ?OBJ) (=> (and (instance ?PROCESS Process) (instance ?OBJ Object)) (=> (origin ?PROCESS ?OBJ) (located (WhereFn ?PROCESS (BeginFn (WhenFn ?PROCESS))) (WhereFn ?OBJ (BeginFn (WhenFn ?OBJ)))))))

(forall (?PROCESS ?ORG) (=> (and (instance ?PROCESS Process) (instance ?ORG Agent)) (=> (and (instance ?PROCESS JudicialProcess) (agent ?PROCESS ?ORG) (instance ?ORG Organization)) (instance ?ORG JudicialOrganization))))

(forall (?PROCESS ?PATH1 ?SOURCE ?DEST ?MEASURE1 ?DISTANCE) (=> (and (instance ?PROCESS Motion) (instance ?PATH1 Object) (instance ?SOURCE Object) (instance ?DEST Object) (instance ?MEASURE1 LengthMeasure) (instance ?DISTANCE LengthMeasure)) (=> (and (path ?PROCESS ?PATH1) (origin ?PROCESS ?SOURCE) (destination ?PROCESS ?DEST) (length ?PATH1 ?MEASURE1) (distance ?SOURCE ?DEST ?DISTANCE) (not (greaterThan ?MEASURE1 ?DISTANCE))) (forall (?OBJ) (=> (instance ?OBJ Object) (=> (part ?OBJ ?PATH1) (between ?SOURCE ?OBJ ?DEST)))))))

(forall (?PROCESS ?PROP) (=> (and (instance ?PROCESS Process) (instance ?PROP Proposition)) (=> (realization ?PROCESS ?PROP) (exists (?OBJ) (and (instance ?OBJ ContentBearingPhysical) (instance ?OBJ ContentBearingObject) (containsInformation ?OBJ ?PROP))))))

(forall (?PROCESS ?THING ?NAME) (=> (and (instance ?PROCESS Process) (instance ?NAME SymbolicString)) (=> (and (instance ?PROCESS Naming) (patient ?PROCESS ?THING) (destination ?PROCESS ?NAME)) (holdsDuring (FutureFn (WhenFn ?PROCESS)) `(names ?NAME ?THING)))))

(forall (?PROCESS) (=> (instance ?PROCESS Process) (<=> (instance ?PROCESS Creation) (exists (?PATIENT) (and (instance ?PATIENT Physical) (patient ?PROCESS ?PATIENT) (time ?PATIENT (EndFn (WhenFn ?PROCESS))) (not (time ?PATIENT (BeginFn (WhenFn ?PROCESS)))))))))

(forall (?PROCESS) (=> (instance ?PROCESS Process) (<=> (instance ?PROCESS Destruction) (exists (?PATIENT) (and (instance ?PATIENT Physical) (patient ?PROCESS ?PATIENT) (time ?PATIENT (BeginFn (WhenFn ?PROCESS))) (not (time ?PATIENT (EndFn (WhenFn ?PROCESS)))))))))

(forall (?PROCESS) (=> (instance ?PROCESS Process) (=> (instance ?PROCESS DualObjectProcess) (exists (?OBJ1 ?OBJ2) (and (patient ?PROCESS ?OBJ1) (patient ?PROCESS ?OBJ2) (not (equal ?OBJ1 ?OBJ2)))))))

(forall (?PROCESS) (=> (instance ?PROCESS Process) (=> (instance ?PROCESS Precipitation) (exists (?STUFF) (and (instance ?STUFF Water) (patient ?PROCESS ?STUFF))))))

(forall (?PROCESS) (=> (instance ?PROCESS Process) (=> (instance ?PROCESS PsychologicalProcess) (exists (?ANIMAL) (and (instance ?ANIMAL Agent) (instance ?ANIMAL Animal) (experiencer ?PROCESS ?ANIMAL))))))

(forall (?PROCESS) (=> (instance ?PROCESS Process) (exists (?CAUSE) (and (instance ?CAUSE Agent) (agent ?PROCESS ?CAUSE)))))

(forall (?PRODUCT) (=> (instance ?PRODUCT Product) (exists (?MANUFACTURE) (and (instance ?MANUFACTURE Process) (instance ?MANUFACTURE Manufacture) (result ?MANUFACTURE ?PRODUCT)))))

(forall (?PROP1 ?PROP2) (=> (and (instance ?PROP1 Proposition) (instance ?PROP2 Proposition)) (=> (subProposition ?PROP1 ?PROP2) (forall (?OBJ1 ?OBJ2) (=> (and (instance ?OBJ1 ContentBearingObject) (instance ?OBJ2 ContentBearingObject)) (=> (and (containsInformation ?OBJ1 ?PROP1) (containsInformation ?OBJ2 ?PROP2)) (subsumesContentInstance ?OBJ2 ?OBJ1)))))))

(forall (?PUB ?TEXT) (=> (and (instance ?PUB Process) (instance ?TEXT SetOrClass)) (=> (and (instance ?PUB Publication) (patient ?PUB ?TEXT)) (subclass ?TEXT Text))))

(forall (?PURSUE ?AGENT ?OBJ) (=> (and (instance ?PURSUE Process) (instance ?PURSUE TimePosition) (instance ?AGENT Agent) (instance ?OBJ Object)) (=> (and (instance ?PURSUE Pursuing) (agent ?PURSUE ?AGENT) (patient ?PURSUE ?OBJ)) (holdsDuring ?PURSUE `(not (possesses ?AGENT ?OBJ))))))

(forall (?PURSUE ?AGENT ?OBJ) (=> (and (instance ?PURSUE Process) (instance ?PURSUE TimePosition) (instance ?AGENT CognitiveAgent) (instance ?OBJ Physical)) (=> (and (instance ?PURSUE Pursuing) (agent ?PURSUE ?AGENT) (patient ?PURSUE ?OBJ)) (holdsDuring ?PURSUE `(wants ?AGENT ?OBJ)))))

(forall (?PURSUE) (=> (instance ?PURSUE Process) (=> (instance ?PURSUE Pursuing) (exists (?OBJ) (and (instance ?OBJ Object) (patient ?PURSUE ?OBJ))))))

(forall (?PUT ?PLACE ?OBJ) (=> (and (instance ?PUT Process) (instance ?PLACE Object) (instance ?OBJ Physical)) (=> (and (instance ?PUT Putting) (destination ?PUT ?PLACE) (patient ?PUT ?OBJ)) (and (holdsDuring (BeginFn (WhenFn ?PUT)) `(not (located ?OBJ ?PLACE))) (holdsDuring (EndFn (WhenFn ?PUT)) `(located ?OBJ ?PLACE))))))

(forall (?QUANTITY ?FROM ?TO) (=> (and (instance ?QUANTITY ConstantQuantity) (instance ?FROM ConstantQuantity) (instance ?TO ConstantQuantity)) (<=> (instance ?QUANTITY (IntervalFn ?FROM ?TO)) (and (greaterThanOrEqualTo ?QUANTITY ?FROM) (lessThanOrEqualTo ?QUANTITY ?TO)))))

(forall (?QUESTION ?AGENT ?FORMULA) (=> (and (instance ?QUESTION Process) (instance ?AGENT CognitiveAgent)) (=> (and (instance ?QUESTION Questioning) (agent ?QUESTION ?AGENT) (patient ?QUESTION ?FORMULA) (instance ?FORMULA Formula)) (holdsDuring (WhenFn ?QUESTION) `(not (knows ?AGENT ?FORMULA))))))

(forall (?READ) (=> (instance ?READ Process) (=> (instance ?READ Reading) (exists (?TEXT ?PROP) (and (instance ?TEXT ContentBearingPhysical) (instance ?PROP Proposition) (instance ?TEXT Text) (containsInformation ?TEXT ?PROP) (realization ?READ ?PROP))))))

(forall (?REASON) (=> (instance ?REASON Process) (=> (instance ?REASON Reasoning) (exists (?ARGUMENT) (and (instance ?ARGUMENT Proposition) (instance ?ARGUMENT Argument) (realization ?REASON ?ARGUMENT))))))

(forall (?REGION) (=> (instance ?REGION Object) (<=> (exists (?EMIT) (and (instance ?EMIT Process) (instance ?EMIT RadiatingLight) (patient ?EMIT ?REGION) (instance ?REGION Region))) (attribute ?REGION Illuminated))))

(forall (?REGION) (=> (instance ?REGION Object) (=> (instance ?REGION Region) (exists (?PHYS) (and (instance ?PHYS Physical) (located ?PHYS ?REGION))))))

(forall (?REL ?CLASS1 ?CLASS2) (=> (and (instance ?REL Function) (instance ?CLASS1 SetOrClass) (instance ?CLASS2 SetOrClass)) (=> (and (range ?REL ?CLASS1) (range ?REL ?CLASS2)) (or (subclass ?CLASS1 ?CLASS2) (subclass ?CLASS2 ?CLASS1)))))

(forall (?REL ?CLASS1 ?CLASS2) (=> (and (instance ?REL Function) (instance ?CLASS1 SetOrClass) (subclass ?CLASS1 SetOrClass) (instance ?CLASS2 SetOrClass) (subclass ?CLASS2 SetOrClass)) (=> (and (rangeSubclass ?REL ?CLASS1) (rangeSubclass ?REL ?CLASS2)) (or (subclass ?CLASS1 ?CLASS2) (subclass ?CLASS2 ?CLASS1)))))

(forall (?REL ?NUMBER ?CLASS1 ?CLASS2) (=> (and (instance ?REL Relation) (instance ?NUMBER PositiveInteger) (instance ?CLASS1 SetOrClass) (instance ?CLASS2 SetOrClass)) (=> (and (domain ?REL ?NUMBER ?CLASS1) (domain ?REL ?NUMBER ?CLASS2)) (or (subclass ?CLASS1 ?CLASS2) (subclass ?CLASS2 ?CLASS1)))))

(forall (?REL ?NUMBER ?CLASS1 ?CLASS2) (=> (and (instance ?REL Relation) (instance ?NUMBER PositiveInteger) (instance ?CLASS1 SetOrClass) (instance ?CLASS2 SetOrClass)) (=> (and (domainSubclass ?REL ?NUMBER ?CLASS1) (domainSubclass ?REL ?NUMBER ?CLASS2)) (or (subclass ?CLASS1 ?CLASS2) (subclass ?CLASS2 ?CLASS1)))))

(forall (?REL) (<=> (instance ?REL AsymmetricRelation) (and (instance ?REL AntisymmetricRelation) (instance ?REL IrreflexiveRelation))))

(forall (?REL) (=> (instance ?REL Relation) (=> (instance ?REL BinaryPredicate) (valence ?REL 2))))

(forall (?REL) (=> (instance ?REL Relation) (=> (instance ?REL QuaternaryPredicate) (valence ?REL 4))))

(forall (?REL) (=> (instance ?REL Relation) (=> (instance ?REL QuintaryPredicate) (valence ?REL 5))))

(forall (?REL) (=> (instance ?REL Relation) (=> (instance ?REL TernaryPredicate) (valence ?REL 3))))

(forall (?REL) (=> (instance ?REL Relation) (=> (instance ?REL VariableArityRelation) (not (exists (?INT) (and (instance ?INT PositiveInteger) (valence ?REL ?INT)))))))

(forall (?REL1 ?CLASS1 ?REL2 ?CLASS2) (=> (and (instance ?REL1 Function) (instance ?CLASS1 SetOrClass) (instance ?REL2 Function) (instance ?CLASS2 SetOrClass)) (=> (and (range ?REL1 ?CLASS1) (range ?REL2 ?CLASS2) (disjoint ?CLASS1 ?CLASS2)) (disjointRelation ?REL1 ?REL2))))

(forall (?REL1 ?CLASS1 ?REL2 ?CLASS2) (=> (and (instance ?REL1 Function) (instance ?CLASS1 SetOrClass) (subclass ?CLASS1 SetOrClass) (instance ?REL2 Function) (instance ?CLASS2 SetOrClass) (subclass ?CLASS2 SetOrClass)) (=> (and (rangeSubclass ?REL1 ?CLASS1) (rangeSubclass ?REL2 ?CLASS2) (disjoint ?CLASS1 ?CLASS2)) (disjointRelation ?REL1 ?REL2))))

(forall (?REL1 ?NUMBER ?CLASS1 ?REL2 ?CLASS2) (=> (and (instance ?REL1 Relation) (instance ?NUMBER PositiveInteger) (instance ?CLASS1 SetOrClass) (instance ?REL2 Relation) (instance ?CLASS2 SetOrClass)) (=> (and (domain ?REL1 ?NUMBER ?CLASS1) (domain ?REL2 ?NUMBER ?CLASS2) (disjoint ?CLASS1 ?CLASS2)) (disjointRelation ?REL1 ?REL2))))

(forall (?REL1 ?NUMBER ?CLASS1 ?REL2 ?CLASS2) (=> (and (instance ?REL1 Relation) (instance ?NUMBER PositiveInteger) (instance ?CLASS1 SetOrClass) (instance ?REL2 Relation) (instance ?CLASS2 SetOrClass)) (=> (and (domainSubclass ?REL1 ?NUMBER ?CLASS1) (domainSubclass ?REL2 ?NUMBER ?CLASS2) (disjoint ?CLASS1 ?CLASS2)) (disjointRelation ?REL1 ?REL2))))

(forall (?REL1 ?REL2 ?CLASS1) (=> (and (instance ?REL1 Function) (instance ?REL2 Function) (instance ?CLASS1 SetOrClass)) (=> (and (subrelation ?REL1 ?REL2) (range ?REL2 ?CLASS1)) (range ?REL1 ?CLASS1))))

(forall (?REL1 ?REL2 ?CLASS1) (=> (and (instance ?REL1 Function) (instance ?REL2 Function) (subclass ?CLASS1 SetOrClass)) (=> (and (subrelation ?REL1 ?REL2) (rangeSubclass ?REL2 ?CLASS1)) (rangeSubclass ?REL1 ?CLASS1))))

(forall (?REL1 ?REL2 ?NUMBER ?CLASS1) (=> (and (instance ?REL1 Relation) (instance ?REL2 Relation) (instance ?NUMBER PositiveInteger) (instance ?CLASS1 SetOrClass)) (=> (and (subrelation ?REL1 ?REL2) (domainSubclass ?REL2 ?NUMBER ?CLASS1)) (domainSubclass ?REL1 ?NUMBER ?CLASS1))))

(forall (?RELATION ?CLASS) (=> (and (instance ?RELATION BinaryRelation) (instance ?CLASS SetOrClass)) (<=> (totalOrderingOn ?RELATION ?CLASS) (and (partialOrderingOn ?RELATION ?CLASS) (trichotomizingOn ?RELATION ?CLASS)))))

(forall (?RELATION ?CLASS) (=> (and (instance ?RELATION BinaryRelation) (instance ?CLASS SetOrClass)) (=> (equivalenceRelationOn ?RELATION ?CLASS) (and (instance ?RELATION TransitiveRelation) (instance ?RELATION SymmetricRelation) (reflexiveOn ?RELATION ?CLASS)))))

(forall (?RELATION ?CLASS) (=> (and (instance ?RELATION BinaryRelation) (instance ?CLASS SetOrClass)) (=> (partialOrderingOn ?RELATION ?CLASS) (and (reflexiveOn ?RELATION ?CLASS) (instance ?RELATION TransitiveRelation) (instance ?RELATION AntisymmetricRelation)))))

(forall (?RELEASE ?GRAB ?AGENT ?THING) (=> (and (instance ?RELEASE Physical) (instance ?GRAB Process) (instance ?AGENT Animal) (instance ?THING Object)) (=> (and (instance ?RELEASE Releasing) (agent ?GRAB ?AGENT) (patient ?GRAB ?THING)) (and (holdsDuring (BeginFn (WhenFn ?RELEASE)) `(grasps ?AGENT ?THING)) (holdsDuring (EndFn (WhenFn ?RELEASE)) `(not (grasps ?AGENT ?THING)))))))

(forall (?RELEASE ?GRAB ?AGENT ?THING) (=> (and (instance ?RELEASE Physical) (instance ?GRAB Process) (instance ?AGENT Animal) (instance ?THING Object)) (=> (and (instance ?RELEASE Ungrasping) (agent ?GRAB ?AGENT) (patient ?GRAB ?THING)) (and (holdsDuring (BeginFn (WhenFn ?RELEASE)) `(grasps ?AGENT ?THING)) (holdsDuring (EndFn (WhenFn ?RELEASE)) `(not (grasps ?AGENT ?THING)))))))

(forall (?REMEMBER ?FORMULA) (=> (and (instance ?REMEMBER Process) (instance ?FORMULA Formula)) (=> (and (instance ?REMEMBER Remembering) (patient ?REMEMBER ?FORMULA)) (exists (?TIME) (and (instance ?TIME TimePoint) (instance ?TIME TimeInterval) (holdsDuring ?TIME ?FORMULA) (or (before ?TIME (WhenFn ?REMEMBER)) (earlier ?TIME (WhenFn ?REMEMBER))))))))

(forall (?REMOVE ?PLACE ?OBJ) (=> (and (instance ?REMOVE Process) (instance ?PLACE Object) (instance ?OBJ Physical)) (=> (and (instance ?REMOVE Removing) (origin ?REMOVE ?PLACE) (patient ?REMOVE ?OBJ)) (and (holdsDuring (BeginFn (WhenFn ?REMOVE)) `(located ?OBJ ?PLACE)) (holdsDuring (EndFn (WhenFn ?REMOVE)) `(not (located ?OBJ ?PLACE)))))))

(forall (?REP ?ENTITY ?AGENT) (=> (instance ?AGENT Agent) (=> (representsForAgent ?REP ?ENTITY ?AGENT) (represents ?REP ?ENTITY))))

(forall (?REP ?ENTITY ?LANGUAGE) (=> (and (instance ?REP LinguisticExpression) (instance ?LANGUAGE Language)) (=> (representsInLanguage ?REP ?ENTITY ?LANGUAGE) (exists (?AGENT) (and (instance ?AGENT Agent) (representsForAgent ?REP ?ENTITY ?AGENT))))))

(forall (?REP ?ORGANISM) (=> (and (instance ?REP Process) (instance ?ORGANISM Organism)) (=> (and (instance ?REP AsexualReproduction) (result ?REP ?ORGANISM)) (not (exists (?PARENT1 ?PARENT2) (and (instance ?PARENT1 Organism) (instance ?PARENT2 Organism) (parent ?ORGANISM ?PARENT1) (parent ?ORGANISM ?PARENT2) (not (equal ?PARENT1 ?PARENT2))))))))

(forall (?REP ?ORGANISM) (=> (and (instance ?REP Process) (instance ?ORGANISM Organism)) (=> (and (instance ?REP SexualReproduction) (result ?REP ?ORGANISM)) (exists (?MOTHER ?FATHER) (and (instance ?MOTHER Organism) (instance ?FATHER Organism) (mother ?ORGANISM ?MOTHER) (father ?ORGANISM ?FATHER))))))

(forall (?REP ?PARENT ?CHILD) (=> (and (instance ?REP Process) (instance ?PARENT Organism) (instance ?CHILD Organism)) (=> (and (instance ?REP Replication) (agent ?REP ?PARENT) (result ?REP ?CHILD)) (parent ?CHILD ?PARENT))))

(forall (?REP) (=> (instance ?REP Process) (=> (instance ?REP Replication) (exists (?BODY) (and (instance ?BODY ReproductiveBody) (result ?REP ?BODY))))))

(forall (?REPAIR ?OBJ) (=> (instance ?REPAIR Process) (=> (and (instance ?REPAIR Repairing) (patient ?REPAIR ?OBJ)) (exists (?DAMAGE) (and (instance ?DAMAGE Process) (instance ?DAMAGE Damaging) (patient ?DAMAGE ?OBJ) (earlier (WhenFn ?DAMAGE) (WhenFn ?REPAIR)))))))

(forall (?REQUEST ?AGENT ?FORMULA) (=> (and (instance ?REQUEST Process) (instance ?AGENT CognitiveAgent)) (=> (and (instance ?REQUEST Requesting) (agent ?REQUEST ?AGENT) (patient ?REQUEST ?FORMULA) (instance ?FORMULA Formula)) (desires ?AGENT ?FORMULA))))

(forall (?RESIDENCE) (=> (instance ?RESIDENCE Object) (=> (instance ?RESIDENCE Residence) (or (instance ?RESIDENCE House) (exists (?BUILDING) (and (instance ?BUILDING Object) (instance ?BUILDING ResidentialBuilding) (part ?RESIDENCE ?BUILDING)))))))

(forall (?RESIDENCE) (=> (instance ?RESIDENCE PermanentResidence) (=> (instance ?RESIDENCE SingleFamilyResidence) (hasPurpose ?RESIDENCE `(forall (?AGENT1 ?AGENT2) (=> (and (instance ?AGENT1 Human) (instance ?AGENT2 Human)) (=> (and (home ?AGENT1 ?RESIDENCE) (home ?AGENT2 ?RESIDENCE)) (exists (?UNIT) (and (instance ?UNIT Collection) (instance ?UNIT SocialUnit) (member ?AGENT1 ?UNIT) (member ?AGENT2 ?UNIT))))))))))

(forall (?RESIDENCE) (=> (instance ?RESIDENCE PermanentResidence) (=> (instance ?RESIDENCE TemporaryResidence) (not (exists (?PERSON) (and (instance ?PERSON Human) (home ?PERSON ?RESIDENCE)))))))

(forall (?RESIDENCE) (=> (instance ?RESIDENCE PermanentResidence) (exists (?PERSON) (and (instance ?PERSON Human) (home ?PERSON ?RESIDENCE)))))

(forall (?RETURN ?AGENT ?DEST) (=> (and (instance ?RETURN Process) (instance ?AGENT Agent) (instance ?DEST Agent)) (=> (and (instance ?RETURN GivingBack) (agent ?RETURN ?AGENT) (destination ?RETURN ?DEST)) (exists (?GIVE) (and (instance ?GIVE Process) (instance ?GIVE Giving) (agent ?GIVE ?DEST) (destination ?GIVE ?AGENT) (earlier (WhenFn ?GIVE) (WhenFn ?RETURN)))))))

(forall (?ROOM) (=> (instance ?ROOM Object) (=> (instance ?ROOM Room) (exists (?BUILD) (and (instance ?BUILD Object) (instance ?BUILD Building) (properPart ?ROOM ?BUILD))))))

(forall (?ROW1 ?ELEMENT) (=> (contraryAttribute ?ROW1) (=> (inList ?ELEMENT (ListFn ?ROW1)) (instance ?ELEMENT Attribute))))

(forall (?ROW1 ?ELEMENT) (=> (instance ?ROW1 Class) (=> (disjointDecomposition ?ROW1) (=> (inList ?ELEMENT (ListFn ?ROW1)) (instance ?ELEMENT Class)))))

(forall (?ROW1 ?ELEMENT) (=> (instance ?ROW1 Class) (=> (exhaustiveDecomposition ?ROW1) (=> (inList ?ELEMENT (ListFn ?ROW1)) (instance ?ELEMENT Class)))))

(forall (?ROW1 ?ITEM) (equal (ListLengthFn (ListFn ?ROW1 ?ITEM)) (SuccessorFn (ListLengthFn (ListFn ?ROW1)))))

(forall (?ROW1 ?ITEM) (equal (ListOrderFn (ListFn ?ROW1 ?ITEM) (ListLengthFn (ListFn ?ROW1 ?ITEM))) ?ITEM))

(forall (?ROW1 ?ITEM) (initialList (ListFn ?ROW1) (ListFn ?ROW1 ?ITEM)))

(forall (?ROW1 ?ITEM1 ?ITEM2) (=> (and (instance ?ROW1 Agent) (instance ?ITEM1 Human) (instance ?ITEM2 Human)) (=> (and (leader ?ROW1 ?ITEM1) (leader ?ROW1 ?ITEM2)) (equal ?ITEM1 ?ITEM2))))

(forall (?ROW1 ?ITEM1 ?ITEM2) (=> (and (instance ?ROW1 Argument) (instance ?ITEM1 Proposition) (instance ?ITEM2 Proposition)) (=> (and (conclusion ?ROW1 ?ITEM1) (conclusion ?ROW1 ?ITEM2)) (equal ?ITEM1 ?ITEM2))))

(forall (?ROW1 ?ITEM1 ?ITEM2) (=> (and (instance ?ROW1 FinancialTransaction) (instance ?ITEM1 CurrencyMeasure) (instance ?ITEM2 CurrencyMeasure)) (=> (and (transactionAmount ?ROW1 ?ITEM1) (transactionAmount ?ROW1 ?ITEM2)) (equal ?ITEM1 ?ITEM2))))

(forall (?ROW1 ?ITEM1 ?ITEM2) (=> (and (instance ?ROW1 GraphArc) (instance ?ITEM1 RealNumber) (instance ?ITEM2 RealNumber)) (=> (and (arcWeight ?ROW1 ?ITEM1) (arcWeight ?ROW1 ?ITEM2)) (equal ?ITEM1 ?ITEM2))))

(forall (?ROW1 ?ITEM1 ?ITEM2) (=> (and (instance ?ROW1 List) (instance ?ITEM1 RealNumber) (instance ?ITEM2 RealNumber)) (=> (and (average ?ROW1 ?ITEM1) (average ?ROW1 ?ITEM2)) (equal ?ITEM1 ?ITEM2))))

(forall (?ROW1 ?ITEM1 ?ITEM2) (=> (and (instance ?ROW1 Object) (instance ?ITEM1 LengthMeasure) (instance ?ITEM2 LengthMeasure)) (=> (and (width ?ROW1 ?ITEM1) (width ?ROW1 ?ITEM2)) (equal ?ITEM1 ?ITEM2))))

(forall (?ROW1 ?ITEM1 ?ITEM2) (=> (and (instance ?ROW1 Object) (instance ?ITEM1 TimeDuration) (instance ?ITEM2 TimeDuration)) (=> (and (age ?ROW1 ?ITEM1) (age ?ROW1 ?ITEM2)) (equal ?ITEM1 ?ITEM2))))

(forall (?ROW1 ?ITEM1 ?ITEM2) (=> (and (instance ?ROW1 Organism) (instance ?ITEM1 Organism) (instance ?ITEM2 Organism)) (=> (and (father ?ROW1 ?ITEM1) (father ?ROW1 ?ITEM2)) (equal ?ITEM1 ?ITEM2))))

(forall (?ROW1 ?ITEM1 ?ITEM2) (=> (and (instance ?ROW1 Organism) (instance ?ITEM1 Organism) (instance ?ITEM2 Organism)) (=> (and (mother ?ROW1 ?ITEM1) (mother ?ROW1 ?ITEM2)) (equal ?ITEM1 ?ITEM2))))

(forall (?ROW1 ?ITEM1 ?ITEM2) (=> (and (instance ?ROW1 Physical) (instance ?ITEM1 CurrencyMeasure) (instance ?ITEM2 CurrencyMeasure)) (=> (and (monetaryValue ?ROW1 ?ITEM1) (monetaryValue ?ROW1 ?ITEM2)) (equal ?ITEM1 ?ITEM2))))

(forall (?ROW1 ?ITEM1 ?ITEM2) (=> (and (instance ?ROW1 Physical) (instance ?ITEM1 Day) (instance ?ITEM2 Day)) (=> (and (date ?ROW1 ?ITEM1) (date ?ROW1 ?ITEM2)) (equal ?ITEM1 ?ITEM2))))

(forall (?ROW1 ?ITEM1 ?ITEM2) (=> (and (instance ?ROW1 Relation) (instance ?ITEM1 PositiveInteger) (instance ?ITEM2 PositiveInteger)) (=> (and (valence ?ROW1 ?ITEM1) (valence ?ROW1 ?ITEM2)) (equal ?ITEM1 ?ITEM2))))

(forall (?ROW1 ?ITEM1 ?ITEM2) (=> (instance ?ROW1 SymbolicString) (=> (and (uniqueIdentifier ?ROW1 ?ITEM1) (uniqueIdentifier ?ROW1 ?ITEM2)) (equal ?ITEM1 ?ITEM2))))

(forall (?ROW1 ?NUMBER) (=> (instance ?NUMBER Integer) (=> (equal (GreatestCommonDivisorFn ?ROW1) ?NUMBER) (forall (?ELEMENT) (=> (instance ?ELEMENT Quantity) (=> (inList ?ELEMENT (ListFn ?ROW1)) (equal (RemainderFn ?ELEMENT ?NUMBER) 0)))))))

(forall (?ROW1 ?NUMBER) (=> (instance ?NUMBER Integer) (=> (equal (GreatestCommonDivisorFn ?ROW1) ?NUMBER) (not (exists (?GREATER) (and (instance ?GREATER Quantity) (greaterThan ?GREATER ?NUMBER) (forall (?ELEMENT) (=> (instance ?ELEMENT Quantity) (=> (inList ?ELEMENT (ListFn ?ROW1)) (equal (RemainderFn ?ELEMENT ?GREATER) 0))))))))))

(forall (?ROW1 ?NUMBER) (=> (instance ?NUMBER Integer) (=> (equal (LeastCommonMultipleFn ?ROW1) ?NUMBER) (forall (?ELEMENT) (=> (instance ?ELEMENT Quantity) (=> (inList ?ELEMENT (ListFn ?ROW1)) (equal (RemainderFn ?NUMBER ?ELEMENT) 0)))))))

(forall (?ROW1 ?NUMBER) (=> (instance ?NUMBER Integer) (=> (equal (LeastCommonMultipleFn ?ROW1) ?NUMBER) (not (exists (?LESS) (and (instance ?LESS Quantity) (lessThan ?LESS ?NUMBER) (forall (?ELEMENT) (=> (instance ?ELEMENT Quantity) (=> (inList ?ELEMENT (ListFn ?ROW1)) (equal (RemainderFn ?LESS ?ELEMENT) 0))))))))))

(forall (?ROW1 ?NUMBER1 ?NUMBER2 ?OBJ) (=> (and (instance ?NUMBER1 PositiveInteger) (instance ?NUMBER2 PositiveInteger)) (=> (contraryAttribute ?ROW1) (forall (?ATTR1 ?ATTR2) (=> (and (instance ?ATTR1 Attribute) (instance ?ATTR2 Attribute)) (=> (and (equal ?ATTR1 (ListOrderFn (ListFn ?ROW1) ?NUMBER1)) (equal ?ATTR2 (ListOrderFn (ListFn ?ROW1) ?NUMBER2)) (not (equal ?NUMBER1 ?NUMBER2))) (=> (property ?OBJ ?ATTR1) (not (property ?OBJ ?ATTR2)))))))))

(forall (?ROW1 ?ROW2 ?ELEMENT) (=> (and (instance ?ROW1 Class) (instance ?ROW2 Class)) (=> (disjointDecomposition ?ROW1 ?ROW2) (=> (inList ?ELEMENT (ListFn ?ROW1 ?ROW2)) (instance ?ELEMENT Class)))))

(forall (?ROW1 ?ROW2 ?ELEMENT) (=> (and (instance ?ROW1 Class) (instance ?ROW2 Class)) (=> (exhaustiveDecomposition ?ROW1 ?ROW2) (=> (inList ?ELEMENT (ListFn ?ROW1 ?ROW2)) (instance ?ELEMENT Class)))))

(forall (?ROW1 ?ROW2 ?ELEMENT) (=> (contraryAttribute ?ROW1 ?ROW2) (=> (inList ?ELEMENT (ListFn ?ROW1 ?ROW2)) (instance ?ELEMENT Attribute))))

(forall (?ROW1 ?ROW2 ?ITEM) (equal (ListLengthFn (ListFn ?ROW1 ?ROW2 ?ITEM)) (SuccessorFn (ListLengthFn (ListFn ?ROW1 ?ROW2)))))

(forall (?ROW1 ?ROW2 ?ITEM) (equal (ListOrderFn (ListFn ?ROW1 ?ROW2 ?ITEM) (ListLengthFn (ListFn ?ROW1 ?ROW2 ?ITEM))) ?ITEM))

(forall (?ROW1 ?ROW2 ?ITEM) (initialList (ListFn ?ROW1 ?ROW2) (ListFn ?ROW1 ?ROW2 ?ITEM)))

(forall (?ROW1 ?ROW2 ?ITEM1 ?ITEM2) (=> (and (instance ?ROW1 GeometricPoint) (instance ?ROW2 GeometricPoint) (instance ?ITEM1 LengthMeasure) (instance ?ITEM2 LengthMeasure)) (=> (and (geometricDistance ?ROW1 ?ROW2 ?ITEM1) (geometricDistance ?ROW1 ?ROW2 ?ITEM2)) (equal ?ITEM1 ?ITEM2))))

(forall (?ROW1 ?ROW2 ?ITEM1 ?ITEM2) (=> (and (instance ?ROW1 Physical) (instance ?ROW2 Physical) (instance ?ITEM1 LengthMeasure) (instance ?ITEM2 LengthMeasure)) (=> (and (altitude ?ROW1 ?ROW2 ?ITEM1) (altitude ?ROW1 ?ROW2 ?ITEM2)) (equal ?ITEM1 ?ITEM2))))

(forall (?ROW1 ?ROW2 ?ITEM1 ?ITEM2) (=> (and (instance ?ROW1 Physical) (instance ?ROW2 Physical) (instance ?ITEM1 LengthMeasure) (instance ?ITEM2 LengthMeasure)) (=> (and (depth ?ROW1 ?ROW2 ?ITEM1) (depth ?ROW1 ?ROW2 ?ITEM2)) (equal ?ITEM1 ?ITEM2))))

(forall (?ROW1 ?ROW2 ?ITEM1 ?ITEM2) (=> (and (instance ?ROW1 Physical) (instance ?ROW2 Physical) (instance ?ITEM1 LengthMeasure) (instance ?ITEM2 LengthMeasure)) (=> (and (distance ?ROW1 ?ROW2 ?ITEM1) (distance ?ROW1 ?ROW2 ?ITEM2)) (equal ?ITEM1 ?ITEM2))))

(forall (?ROW1 ?ROW2 ?NUMBER) (=> (instance ?NUMBER Integer) (=> (equal (GreatestCommonDivisorFn ?ROW1 ?ROW2) ?NUMBER) (forall (?ELEMENT) (=> (instance ?ELEMENT Quantity) (=> (inList ?ELEMENT (ListFn ?ROW1 ?ROW2)) (equal (RemainderFn ?ELEMENT ?NUMBER) 0)))))))

(forall (?ROW1 ?ROW2 ?NUMBER) (=> (instance ?NUMBER Integer) (=> (equal (GreatestCommonDivisorFn ?ROW1 ?ROW2) ?NUMBER) (not (exists (?GREATER) (and (instance ?GREATER Quantity) (greaterThan ?GREATER ?NUMBER) (forall (?ELEMENT) (=> (instance ?ELEMENT Quantity) (=> (inList ?ELEMENT (ListFn ?ROW1 ?ROW2)) (equal (RemainderFn ?ELEMENT ?GREATER) 0))))))))))

(forall (?ROW1 ?ROW2 ?NUMBER) (=> (instance ?NUMBER Integer) (=> (equal (LeastCommonMultipleFn ?ROW1 ?ROW2) ?NUMBER) (forall (?ELEMENT) (=> (instance ?ELEMENT Quantity) (=> (inList ?ELEMENT (ListFn ?ROW1 ?ROW2)) (equal (RemainderFn ?NUMBER ?ELEMENT) 0)))))))

(forall (?ROW1 ?ROW2 ?NUMBER) (=> (instance ?NUMBER Integer) (=> (equal (LeastCommonMultipleFn ?ROW1 ?ROW2) ?NUMBER) (not (exists (?LESS) (and (instance ?LESS Quantity) (lessThan ?LESS ?NUMBER) (forall (?ELEMENT) (=> (instance ?ELEMENT Quantity) (=> (inList ?ELEMENT (ListFn ?ROW1 ?ROW2)) (equal (RemainderFn ?LESS ?ELEMENT) 0))))))))))

(forall (?ROW1 ?ROW2 ?NUMBER1 ?NUMBER2 ?OBJ) (=> (and (instance ?NUMBER1 PositiveInteger) (instance ?NUMBER2 PositiveInteger)) (=> (contraryAttribute ?ROW1 ?ROW2) (forall (?ATTR1 ?ATTR2) (=> (and (instance ?ATTR1 Attribute) (instance ?ATTR2 Attribute)) (=> (and (equal ?ATTR1 (ListOrderFn (ListFn ?ROW1 ?ROW2) ?NUMBER1)) (equal ?ATTR2 (ListOrderFn (ListFn ?ROW1 ?ROW2) ?NUMBER2)) (not (equal ?NUMBER1 ?NUMBER2))) (=> (property ?OBJ ?ATTR1) (not (property ?OBJ ?ATTR2)))))))))

(forall (?ROW1 ?ROW2 ?ROW3 ?ELEMENT) (=> (and (instance ?ROW1 Class) (instance ?ROW2 Class) (instance ?ROW3 Class)) (=> (disjointDecomposition ?ROW1 ?ROW2 ?ROW3) (=> (inList ?ELEMENT (ListFn ?ROW1 ?ROW2 ?ROW3)) (instance ?ELEMENT Class)))))

(forall (?ROW1 ?ROW2 ?ROW3 ?ELEMENT) (=> (and (instance ?ROW1 Class) (instance ?ROW2 Class) (instance ?ROW3 Class)) (=> (exhaustiveDecomposition ?ROW1 ?ROW2 ?ROW3) (=> (inList ?ELEMENT (ListFn ?ROW1 ?ROW2 ?ROW3)) (instance ?ELEMENT Class)))))

(forall (?ROW1 ?ROW2 ?ROW3 ?ELEMENT) (=> (contraryAttribute ?ROW1 ?ROW2 ?ROW3) (=> (inList ?ELEMENT (ListFn ?ROW1 ?ROW2 ?ROW3)) (instance ?ELEMENT Attribute))))

(forall (?ROW1 ?ROW2 ?ROW3 ?ITEM) (equal (ListLengthFn (ListFn ?ROW1 ?ROW2 ?ROW3 ?ITEM)) (SuccessorFn (ListLengthFn (ListFn ?ROW1 ?ROW2 ?ROW3)))))

(forall (?ROW1 ?ROW2 ?ROW3 ?ITEM) (equal (ListOrderFn (ListFn ?ROW1 ?ROW2 ?ROW3 ?ITEM) (ListLengthFn (ListFn ?ROW1 ?ROW2 ?ROW3 ?ITEM))) ?ITEM))

(forall (?ROW1 ?ROW2 ?ROW3 ?ITEM) (initialList (ListFn ?ROW1 ?ROW2 ?ROW3) (ListFn ?ROW1 ?ROW2 ?ROW3 ?ITEM)))

(forall (?ROW1 ?ROW2 ?ROW3 ?NUMBER) (=> (instance ?NUMBER Integer) (=> (equal (GreatestCommonDivisorFn ?ROW1 ?ROW2 ?ROW3) ?NUMBER) (forall (?ELEMENT) (=> (instance ?ELEMENT Quantity) (=> (inList ?ELEMENT (ListFn ?ROW1 ?ROW2 ?ROW3)) (equal (RemainderFn ?ELEMENT ?NUMBER) 0)))))))

(forall (?ROW1 ?ROW2 ?ROW3 ?NUMBER) (=> (instance ?NUMBER Integer) (=> (equal (GreatestCommonDivisorFn ?ROW1 ?ROW2 ?ROW3) ?NUMBER) (not (exists (?GREATER) (and (instance ?GREATER Quantity) (greaterThan ?GREATER ?NUMBER) (forall (?ELEMENT) (=> (instance ?ELEMENT Quantity) (=> (inList ?ELEMENT (ListFn ?ROW1 ?ROW2 ?ROW3)) (equal (RemainderFn ?ELEMENT ?GREATER) 0))))))))))

(forall (?ROW1 ?ROW2 ?ROW3 ?NUMBER) (=> (instance ?NUMBER Integer) (=> (equal (LeastCommonMultipleFn ?ROW1 ?ROW2 ?ROW3) ?NUMBER) (forall (?ELEMENT) (=> (instance ?ELEMENT Quantity) (=> (inList ?ELEMENT (ListFn ?ROW1 ?ROW2 ?ROW3)) (equal (RemainderFn ?NUMBER ?ELEMENT) 0)))))))

(forall (?ROW1 ?ROW2 ?ROW3 ?NUMBER) (=> (instance ?NUMBER Integer) (=> (equal (LeastCommonMultipleFn ?ROW1 ?ROW2 ?ROW3) ?NUMBER) (not (exists (?LESS) (and (instance ?LESS Quantity) (lessThan ?LESS ?NUMBER) (forall (?ELEMENT) (=> (instance ?ELEMENT Quantity) (=> (inList ?ELEMENT (ListFn ?ROW1 ?ROW2 ?ROW3)) (equal (RemainderFn ?LESS ?ELEMENT) 0))))))))))

(forall (?ROW1 ?ROW2 ?ROW3 ?NUMBER1 ?NUMBER2 ?OBJ) (=> (and (instance ?NUMBER1 PositiveInteger) (instance ?NUMBER2 PositiveInteger)) (=> (contraryAttribute ?ROW1 ?ROW2 ?ROW3) (forall (?ATTR1 ?ATTR2) (=> (and (instance ?ATTR1 Attribute) (instance ?ATTR2 Attribute)) (=> (and (equal ?ATTR1 (ListOrderFn (ListFn ?ROW1 ?ROW2 ?ROW3) ?NUMBER1)) (equal ?ATTR2 (ListOrderFn (ListFn ?ROW1 ?ROW2 ?ROW3) ?NUMBER2)) (not (equal ?NUMBER1 ?NUMBER2))) (=> (property ?OBJ ?ATTR1) (not (property ?OBJ ?ATTR2)))))))))

(forall (?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ELEMENT) (=> (and (instance ?ROW1 Class) (instance ?ROW2 Class) (instance ?ROW3 Class) (instance ?ROW4 Class)) (=> (disjointDecomposition ?ROW1 ?ROW2 ?ROW3 ?ROW4) (=> (inList ?ELEMENT (ListFn ?ROW1 ?ROW2 ?ROW3 ?ROW4)) (instance ?ELEMENT Class)))))

(forall (?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ELEMENT) (=> (and (instance ?ROW1 Class) (instance ?ROW2 Class) (instance ?ROW3 Class) (instance ?ROW4 Class)) (=> (exhaustiveDecomposition ?ROW1 ?ROW2 ?ROW3 ?ROW4) (=> (inList ?ELEMENT (ListFn ?ROW1 ?ROW2 ?ROW3 ?ROW4)) (instance ?ELEMENT Class)))))

(forall (?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ELEMENT) (=> (contraryAttribute ?ROW1 ?ROW2 ?ROW3 ?ROW4) (=> (inList ?ELEMENT (ListFn ?ROW1 ?ROW2 ?ROW3 ?ROW4)) (instance ?ELEMENT Attribute))))

(forall (?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ITEM) (equal (ListLengthFn (ListFn ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ITEM)) (SuccessorFn (ListLengthFn (ListFn ?ROW1 ?ROW2 ?ROW3 ?ROW4)))))

(forall (?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ITEM) (equal (ListOrderFn (ListFn ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ITEM) (ListLengthFn (ListFn ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ITEM))) ?ITEM))

(forall (?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ITEM) (initialList (ListFn ?ROW1 ?ROW2 ?ROW3 ?ROW4) (ListFn ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ITEM)))

(forall (?ROW1 ?ROW2 ?ROW3 ?ROW4 ?NUMBER) (=> (instance ?NUMBER Integer) (=> (equal (GreatestCommonDivisorFn ?ROW1 ?ROW2 ?ROW3 ?ROW4) ?NUMBER) (forall (?ELEMENT) (=> (instance ?ELEMENT Quantity) (=> (inList ?ELEMENT (ListFn ?ROW1 ?ROW2 ?ROW3 ?ROW4)) (equal (RemainderFn ?ELEMENT ?NUMBER) 0)))))))

(forall (?ROW1 ?ROW2 ?ROW3 ?ROW4 ?NUMBER) (=> (instance ?NUMBER Integer) (=> (equal (GreatestCommonDivisorFn ?ROW1 ?ROW2 ?ROW3 ?ROW4) ?NUMBER) (not (exists (?GREATER) (and (instance ?GREATER Quantity) (greaterThan ?GREATER ?NUMBER) (forall (?ELEMENT) (=> (instance ?ELEMENT Quantity) (=> (inList ?ELEMENT (ListFn ?ROW1 ?ROW2 ?ROW3 ?ROW4)) (equal (RemainderFn ?ELEMENT ?GREATER) 0))))))))))

(forall (?ROW1 ?ROW2 ?ROW3 ?ROW4 ?NUMBER) (=> (instance ?NUMBER Integer) (=> (equal (LeastCommonMultipleFn ?ROW1 ?ROW2 ?ROW3 ?ROW4) ?NUMBER) (forall (?ELEMENT) (=> (instance ?ELEMENT Quantity) (=> (inList ?ELEMENT (ListFn ?ROW1 ?ROW2 ?ROW3 ?ROW4)) (equal (RemainderFn ?NUMBER ?ELEMENT) 0)))))))

(forall (?ROW1 ?ROW2 ?ROW3 ?ROW4 ?NUMBER) (=> (instance ?NUMBER Integer) (=> (equal (LeastCommonMultipleFn ?ROW1 ?ROW2 ?ROW3 ?ROW4) ?NUMBER) (not (exists (?LESS) (and (instance ?LESS Quantity) (lessThan ?LESS ?NUMBER) (forall (?ELEMENT) (=> (instance ?ELEMENT Quantity) (=> (inList ?ELEMENT (ListFn ?ROW1 ?ROW2 ?ROW3 ?ROW4)) (equal (RemainderFn ?LESS ?ELEMENT) 0))))))))))

(forall (?ROW1 ?ROW2 ?ROW3 ?ROW4 ?NUMBER1 ?NUMBER2 ?OBJ) (=> (and (instance ?NUMBER1 PositiveInteger) (instance ?NUMBER2 PositiveInteger)) (=> (contraryAttribute ?ROW1 ?ROW2 ?ROW3 ?ROW4) (forall (?ATTR1 ?ATTR2) (=> (and (instance ?ATTR1 Attribute) (instance ?ATTR2 Attribute)) (=> (and (equal ?ATTR1 (ListOrderFn (ListFn ?ROW1 ?ROW2 ?ROW3 ?ROW4) ?NUMBER1)) (equal ?ATTR2 (ListOrderFn (ListFn ?ROW1 ?ROW2 ?ROW3 ?ROW4) ?NUMBER2)) (not (equal ?NUMBER1 ?NUMBER2))) (=> (property ?OBJ ?ATTR1) (not (property ?OBJ ?ATTR2)))))))))

(forall (?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5 ?ELEMENT) (=> (and (instance ?ROW1 Class) (instance ?ROW2 Class) (instance ?ROW3 Class) (instance ?ROW4 Class) (instance ?ROW5 Class)) (=> (disjointDecomposition ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5) (=> (inList ?ELEMENT (ListFn ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5)) (instance ?ELEMENT Class)))))

(forall (?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5 ?ELEMENT) (=> (and (instance ?ROW1 Class) (instance ?ROW2 Class) (instance ?ROW3 Class) (instance ?ROW4 Class) (instance ?ROW5 Class)) (=> (exhaustiveDecomposition ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5) (=> (inList ?ELEMENT (ListFn ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5)) (instance ?ELEMENT Class)))))

(forall (?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5 ?ELEMENT) (=> (contraryAttribute ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5) (=> (inList ?ELEMENT (ListFn ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5)) (instance ?ELEMENT Attribute))))

(forall (?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5 ?ITEM) (equal (ListLengthFn (ListFn ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5 ?ITEM)) (SuccessorFn (ListLengthFn (ListFn ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5)))))

(forall (?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5 ?ITEM) (equal (ListOrderFn (ListFn ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5 ?ITEM) (ListLengthFn (ListFn ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5 ?ITEM))) ?ITEM))

(forall (?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5 ?ITEM) (initialList (ListFn ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5) (ListFn ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5 ?ITEM)))

(forall (?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5 ?NUMBER) (=> (instance ?NUMBER Integer) (=> (equal (GreatestCommonDivisorFn ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5) ?NUMBER) (forall (?ELEMENT) (=> (instance ?ELEMENT Quantity) (=> (inList ?ELEMENT (ListFn ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5)) (equal (RemainderFn ?ELEMENT ?NUMBER) 0)))))))

(forall (?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5 ?NUMBER) (=> (instance ?NUMBER Integer) (=> (equal (GreatestCommonDivisorFn ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5) ?NUMBER) (not (exists (?GREATER) (and (instance ?GREATER Quantity) (greaterThan ?GREATER ?NUMBER) (forall (?ELEMENT) (=> (instance ?ELEMENT Quantity) (=> (inList ?ELEMENT (ListFn ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5)) (equal (RemainderFn ?ELEMENT ?GREATER) 0))))))))))

(forall (?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5 ?NUMBER) (=> (instance ?NUMBER Integer) (=> (equal (LeastCommonMultipleFn ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5) ?NUMBER) (forall (?ELEMENT) (=> (instance ?ELEMENT Quantity) (=> (inList ?ELEMENT (ListFn ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5)) (equal (RemainderFn ?NUMBER ?ELEMENT) 0)))))))

(forall (?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5 ?NUMBER) (=> (instance ?NUMBER Integer) (=> (equal (LeastCommonMultipleFn ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5) ?NUMBER) (not (exists (?LESS) (and (instance ?LESS Quantity) (lessThan ?LESS ?NUMBER) (forall (?ELEMENT) (=> (instance ?ELEMENT Quantity) (=> (inList ?ELEMENT (ListFn ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5)) (equal (RemainderFn ?LESS ?ELEMENT) 0))))))))))

(forall (?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5 ?NUMBER1 ?NUMBER2 ?OBJ) (=> (and (instance ?NUMBER1 PositiveInteger) (instance ?NUMBER2 PositiveInteger)) (=> (contraryAttribute ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5) (forall (?ATTR1 ?ATTR2) (=> (and (instance ?ATTR1 Attribute) (instance ?ATTR2 Attribute)) (=> (and (equal ?ATTR1 (ListOrderFn (ListFn ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5) ?NUMBER1)) (equal ?ATTR2 (ListOrderFn (ListFn ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5) ?NUMBER2)) (not (equal ?NUMBER1 ?NUMBER2))) (=> (property ?OBJ ?ATTR1) (not (property ?OBJ ?ATTR2)))))))))

(forall (?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5 ?ROW6 ?ELEMENT) (=> (and (instance ?ROW1 Class) (instance ?ROW2 Class) (instance ?ROW3 Class) (instance ?ROW4 Class) (instance ?ROW5 Class) (instance ?ROW6 Class)) (=> (disjointDecomposition ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5 ?ROW6) (=> (inList ?ELEMENT (ListFn ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5 ?ROW6)) (instance ?ELEMENT Class)))))

(forall (?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5 ?ROW6 ?ELEMENT) (=> (and (instance ?ROW1 Class) (instance ?ROW2 Class) (instance ?ROW3 Class) (instance ?ROW4 Class) (instance ?ROW5 Class) (instance ?ROW6 Class)) (=> (exhaustiveDecomposition ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5 ?ROW6) (=> (inList ?ELEMENT (ListFn ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5 ?ROW6)) (instance ?ELEMENT Class)))))

(forall (?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5 ?ROW6 ?ELEMENT) (=> (contraryAttribute ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5 ?ROW6) (=> (inList ?ELEMENT (ListFn ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5 ?ROW6)) (instance ?ELEMENT Attribute))))

(forall (?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5 ?ROW6 ?ITEM) (equal (ListLengthFn (ListFn ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5 ?ROW6 ?ITEM)) (SuccessorFn (ListLengthFn (ListFn ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5 ?ROW6)))))

(forall (?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5 ?ROW6 ?ITEM) (equal (ListOrderFn (ListFn ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5 ?ROW6 ?ITEM) (ListLengthFn (ListFn ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5 ?ROW6 ?ITEM))) ?ITEM))

(forall (?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5 ?ROW6 ?ITEM) (initialList (ListFn ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5 ?ROW6) (ListFn ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5 ?ROW6 ?ITEM)))

(forall (?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5 ?ROW6 ?NUMBER) (=> (instance ?NUMBER Integer) (=> (equal (GreatestCommonDivisorFn ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5 ?ROW6) ?NUMBER) (forall (?ELEMENT) (=> (instance ?ELEMENT Quantity) (=> (inList ?ELEMENT (ListFn ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5 ?ROW6)) (equal (RemainderFn ?ELEMENT ?NUMBER) 0)))))))

(forall (?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5 ?ROW6 ?NUMBER) (=> (instance ?NUMBER Integer) (=> (equal (GreatestCommonDivisorFn ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5 ?ROW6) ?NUMBER) (not (exists (?GREATER) (and (instance ?GREATER Quantity) (greaterThan ?GREATER ?NUMBER) (forall (?ELEMENT) (=> (instance ?ELEMENT Quantity) (=> (inList ?ELEMENT (ListFn ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5 ?ROW6)) (equal (RemainderFn ?ELEMENT ?GREATER) 0))))))))))

(forall (?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5 ?ROW6 ?NUMBER) (=> (instance ?NUMBER Integer) (=> (equal (LeastCommonMultipleFn ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5 ?ROW6) ?NUMBER) (forall (?ELEMENT) (=> (instance ?ELEMENT Quantity) (=> (inList ?ELEMENT (ListFn ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5 ?ROW6)) (equal (RemainderFn ?NUMBER ?ELEMENT) 0)))))))

(forall (?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5 ?ROW6 ?NUMBER) (=> (instance ?NUMBER Integer) (=> (equal (LeastCommonMultipleFn ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5 ?ROW6) ?NUMBER) (not (exists (?LESS) (and (instance ?LESS Quantity) (lessThan ?LESS ?NUMBER) (forall (?ELEMENT) (=> (instance ?ELEMENT Quantity) (=> (inList ?ELEMENT (ListFn ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5 ?ROW6)) (equal (RemainderFn ?LESS ?ELEMENT) 0))))))))))

(forall (?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5 ?ROW6 ?NUMBER1 ?NUMBER2 ?OBJ) (=> (and (instance ?NUMBER1 PositiveInteger) (instance ?NUMBER2 PositiveInteger)) (=> (contraryAttribute ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5 ?ROW6) (forall (?ATTR1 ?ATTR2) (=> (and (instance ?ATTR1 Attribute) (instance ?ATTR2 Attribute)) (=> (and (equal ?ATTR1 (ListOrderFn (ListFn ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5 ?ROW6) ?NUMBER1)) (equal ?ATTR2 (ListOrderFn (ListFn ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5 ?ROW6) ?NUMBER2)) (not (equal ?NUMBER1 ?NUMBER2))) (=> (property ?OBJ ?ATTR1) (not (property ?OBJ ?ATTR2)))))))))

(forall (?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5 ?ROW6 ?ROW7 ?ELEMENT) (=> (and (instance ?ROW1 Class) (instance ?ROW2 Class) (instance ?ROW3 Class) (instance ?ROW4 Class) (instance ?ROW5 Class) (instance ?ROW6 Class) (instance ?ROW7 Class)) (=> (disjointDecomposition ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5 ?ROW6 ?ROW7) (=> (inList ?ELEMENT (ListFn ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5 ?ROW6 ?ROW7)) (instance ?ELEMENT Class)))))

(forall (?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5 ?ROW6 ?ROW7 ?ELEMENT) (=> (and (instance ?ROW1 Class) (instance ?ROW2 Class) (instance ?ROW3 Class) (instance ?ROW4 Class) (instance ?ROW5 Class) (instance ?ROW6 Class) (instance ?ROW7 Class)) (=> (exhaustiveDecomposition ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5 ?ROW6 ?ROW7) (=> (inList ?ELEMENT (ListFn ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5 ?ROW6 ?ROW7)) (instance ?ELEMENT Class)))))

(forall (?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5 ?ROW6 ?ROW7 ?ELEMENT) (=> (contraryAttribute ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5 ?ROW6 ?ROW7) (=> (inList ?ELEMENT (ListFn ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5 ?ROW6 ?ROW7)) (instance ?ELEMENT Attribute))))

(forall (?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5 ?ROW6 ?ROW7 ?ITEM) (equal (ListLengthFn (ListFn ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5 ?ROW6 ?ROW7 ?ITEM)) (SuccessorFn (ListLengthFn (ListFn ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5 ?ROW6 ?ROW7)))))

(forall (?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5 ?ROW6 ?ROW7 ?NUMBER) (=> (instance ?NUMBER Integer) (=> (equal (GreatestCommonDivisorFn ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5 ?ROW6 ?ROW7) ?NUMBER) (forall (?ELEMENT) (=> (instance ?ELEMENT Quantity) (=> (inList ?ELEMENT (ListFn ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5 ?ROW6 ?ROW7)) (equal (RemainderFn ?ELEMENT ?NUMBER) 0)))))))

(forall (?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5 ?ROW6 ?ROW7 ?NUMBER) (=> (instance ?NUMBER Integer) (=> (equal (GreatestCommonDivisorFn ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5 ?ROW6 ?ROW7) ?NUMBER) (not (exists (?GREATER) (and (instance ?GREATER Quantity) (greaterThan ?GREATER ?NUMBER) (forall (?ELEMENT) (=> (instance ?ELEMENT Quantity) (=> (inList ?ELEMENT (ListFn ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5 ?ROW6 ?ROW7)) (equal (RemainderFn ?ELEMENT ?GREATER) 0))))))))))

(forall (?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5 ?ROW6 ?ROW7 ?NUMBER) (=> (instance ?NUMBER Integer) (=> (equal (LeastCommonMultipleFn ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5 ?ROW6 ?ROW7) ?NUMBER) (forall (?ELEMENT) (=> (instance ?ELEMENT Quantity) (=> (inList ?ELEMENT (ListFn ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5 ?ROW6 ?ROW7)) (equal (RemainderFn ?NUMBER ?ELEMENT) 0)))))))

(forall (?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5 ?ROW6 ?ROW7 ?NUMBER) (=> (instance ?NUMBER Integer) (=> (equal (LeastCommonMultipleFn ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5 ?ROW6 ?ROW7) ?NUMBER) (not (exists (?LESS) (and (instance ?LESS Quantity) (lessThan ?LESS ?NUMBER) (forall (?ELEMENT) (=> (instance ?ELEMENT Quantity) (=> (inList ?ELEMENT (ListFn ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5 ?ROW6 ?ROW7)) (equal (RemainderFn ?LESS ?ELEMENT) 0))))))))))

(forall (?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5 ?ROW6 ?ROW7 ?NUMBER1 ?NUMBER2 ?OBJ) (=> (and (instance ?NUMBER1 PositiveInteger) (instance ?NUMBER2 PositiveInteger)) (=> (contraryAttribute ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5 ?ROW6 ?ROW7) (forall (?ATTR1 ?ATTR2) (=> (and (instance ?ATTR1 Attribute) (instance ?ATTR2 Attribute)) (=> (and (equal ?ATTR1 (ListOrderFn (ListFn ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5 ?ROW6 ?ROW7) ?NUMBER1)) (equal ?ATTR2 (ListOrderFn (ListFn ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5 ?ROW6 ?ROW7) ?NUMBER2)) (not (equal ?NUMBER1 ?NUMBER2))) (=> (property ?OBJ ?ATTR1) (not (property ?OBJ ?ATTR2)))))))))

(forall (?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5 ?ROW6 ?ROW7) (=> (and (instance ?ROW1 Class) (instance ?ROW2 Class) (instance ?ROW3 Class) (instance ?ROW4 Class) (instance ?ROW5 Class) (instance ?ROW6 Class) (instance ?ROW7 Class)) (<=> (partition ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5 ?ROW6 ?ROW7) (and (exhaustiveDecomposition ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5 ?ROW6 ?ROW7) (disjointDecomposition ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5 ?ROW6 ?ROW7)))))

(forall (?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5 ?ROW6 ?ROW7) (=> (and (instance ?ROW1 Class) (instance ?ROW2 Class) (instance ?ROW3 Class) (instance ?ROW4 Class) (instance ?ROW5 Class) (instance ?ROW6 Class) (instance ?ROW7 Class)) (=> (disjointDecomposition ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5 ?ROW6 ?ROW7) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5 ?ROW6 ?ROW7) 1) Class))))

(forall (?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5 ?ROW6 ?ROW7) (=> (and (instance ?ROW1 Class) (instance ?ROW2 Class) (instance ?ROW3 Class) (instance ?ROW4 Class) (instance ?ROW5 Class) (instance ?ROW6 Class) (instance ?ROW7 Class)) (=> (exhaustiveDecomposition ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5 ?ROW6 ?ROW7) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5 ?ROW6 ?ROW7) 1) Class))))

(forall (?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5 ?ROW6 ?ROW7) (=> (and (instance ?ROW1 Class) (instance ?ROW2 Class) (instance ?ROW3 Class) (instance ?ROW4 Class) (instance ?ROW5 Class) (instance ?ROW6 Class) (instance ?ROW7 Class)) (=> (partition ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5 ?ROW6 ?ROW7) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5 ?ROW6 ?ROW7) 1) Class))))

(forall (?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5 ?ROW6 ?ROW7) (=> (and (subclass ?ROW1 Attribute) (subclass ?ROW2 Attribute) (subclass ?ROW3 Attribute) (subclass ?ROW4 Attribute) (subclass ?ROW5 Attribute) (subclass ?ROW6 Attribute) (subclass ?ROW7 Attribute)) (=> (exhaustiveAttribute ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5 ?ROW6 ?ROW7) (subclass (ListOrderFn (ListFn ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5 ?ROW6 ?ROW7) 1) Attribute))))

(forall (?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5 ?ROW6) (=> (and (instance ?ROW1 Class) (instance ?ROW2 Class) (instance ?ROW3 Class) (instance ?ROW4 Class) (instance ?ROW5 Class) (instance ?ROW6 Class)) (<=> (partition ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5 ?ROW6) (and (exhaustiveDecomposition ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5 ?ROW6) (disjointDecomposition ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5 ?ROW6)))))

(forall (?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5 ?ROW6) (=> (and (instance ?ROW1 Class) (instance ?ROW2 Class) (instance ?ROW3 Class) (instance ?ROW4 Class) (instance ?ROW5 Class) (instance ?ROW6 Class)) (=> (disjointDecomposition ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5 ?ROW6) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5 ?ROW6) 1) Class))))

(forall (?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5 ?ROW6) (=> (and (instance ?ROW1 Class) (instance ?ROW2 Class) (instance ?ROW3 Class) (instance ?ROW4 Class) (instance ?ROW5 Class) (instance ?ROW6 Class)) (=> (exhaustiveDecomposition ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5 ?ROW6) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5 ?ROW6) 1) Class))))

(forall (?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5 ?ROW6) (=> (and (instance ?ROW1 Class) (instance ?ROW2 Class) (instance ?ROW3 Class) (instance ?ROW4 Class) (instance ?ROW5 Class) (instance ?ROW6 Class)) (=> (partition ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5 ?ROW6) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5 ?ROW6) 1) Class))))

(forall (?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5 ?ROW6) (=> (and (subclass ?ROW1 Attribute) (subclass ?ROW2 Attribute) (subclass ?ROW3 Attribute) (subclass ?ROW4 Attribute) (subclass ?ROW5 Attribute) (subclass ?ROW6 Attribute)) (=> (exhaustiveAttribute ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5 ?ROW6) (subclass (ListOrderFn (ListFn ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5 ?ROW6) 1) Attribute))))

(forall (?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5) (=> (and (instance ?ROW1 Class) (instance ?ROW2 Class) (instance ?ROW3 Class) (instance ?ROW4 Class) (instance ?ROW5 Class)) (<=> (partition ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5) (and (exhaustiveDecomposition ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5) (disjointDecomposition ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5)))))

(forall (?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5) (=> (and (instance ?ROW1 Class) (instance ?ROW2 Class) (instance ?ROW3 Class) (instance ?ROW4 Class) (instance ?ROW5 Class)) (=> (disjointDecomposition ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5) 1) Class))))

(forall (?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5) (=> (and (instance ?ROW1 Class) (instance ?ROW2 Class) (instance ?ROW3 Class) (instance ?ROW4 Class) (instance ?ROW5 Class)) (=> (exhaustiveDecomposition ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5) 1) Class))))

(forall (?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5) (=> (and (instance ?ROW1 Class) (instance ?ROW2 Class) (instance ?ROW3 Class) (instance ?ROW4 Class) (instance ?ROW5 Class)) (=> (partition ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5) 1) Class))))

(forall (?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5) (=> (and (subclass ?ROW1 Attribute) (subclass ?ROW2 Attribute) (subclass ?ROW3 Attribute) (subclass ?ROW4 Attribute) (subclass ?ROW5 Attribute)) (=> (exhaustiveAttribute ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5) (subclass (ListOrderFn (ListFn ?ROW1 ?ROW2 ?ROW3 ?ROW4 ?ROW5) 1) Attribute))))

(forall (?ROW1 ?ROW2 ?ROW3 ?ROW4) (=> (and (instance ?ROW1 Class) (instance ?ROW2 Class) (instance ?ROW3 Class) (instance ?ROW4 Class)) (<=> (partition ?ROW1 ?ROW2 ?ROW3 ?ROW4) (and (exhaustiveDecomposition ?ROW1 ?ROW2 ?ROW3 ?ROW4) (disjointDecomposition ?ROW1 ?ROW2 ?ROW3 ?ROW4)))))

(forall (?ROW1 ?ROW2 ?ROW3 ?ROW4) (=> (and (instance ?ROW1 Class) (instance ?ROW2 Class) (instance ?ROW3 Class) (instance ?ROW4 Class)) (=> (disjointDecomposition ?ROW1 ?ROW2 ?ROW3 ?ROW4) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2 ?ROW3 ?ROW4) 1) Class))))

(forall (?ROW1 ?ROW2 ?ROW3 ?ROW4) (=> (and (instance ?ROW1 Class) (instance ?ROW2 Class) (instance ?ROW3 Class) (instance ?ROW4 Class)) (=> (exhaustiveDecomposition ?ROW1 ?ROW2 ?ROW3 ?ROW4) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2 ?ROW3 ?ROW4) 1) Class))))

(forall (?ROW1 ?ROW2 ?ROW3 ?ROW4) (=> (and (instance ?ROW1 Class) (instance ?ROW2 Class) (instance ?ROW3 Class) (instance ?ROW4 Class)) (=> (partition ?ROW1 ?ROW2 ?ROW3 ?ROW4) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2 ?ROW3 ?ROW4) 1) Class))))

(forall (?ROW1 ?ROW2 ?ROW3 ?ROW4) (=> (and (subclass ?ROW1 Attribute) (subclass ?ROW2 Attribute) (subclass ?ROW3 Attribute) (subclass ?ROW4 Attribute)) (=> (exhaustiveAttribute ?ROW1 ?ROW2 ?ROW3 ?ROW4) (subclass (ListOrderFn (ListFn ?ROW1 ?ROW2 ?ROW3 ?ROW4) 1) Attribute))))

(forall (?ROW1 ?ROW2 ?ROW3) (=> (and (instance ?ROW1 Class) (instance ?ROW2 Class) (instance ?ROW3 Class)) (<=> (partition ?ROW1 ?ROW2 ?ROW3) (and (exhaustiveDecomposition ?ROW1 ?ROW2 ?ROW3) (disjointDecomposition ?ROW1 ?ROW2 ?ROW3)))))

(forall (?ROW1 ?ROW2 ?ROW3) (=> (and (instance ?ROW1 Class) (instance ?ROW2 Class) (instance ?ROW3 Class)) (=> (disjointDecomposition ?ROW1 ?ROW2 ?ROW3) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2 ?ROW3) 1) Class))))

(forall (?ROW1 ?ROW2 ?ROW3) (=> (and (instance ?ROW1 Class) (instance ?ROW2 Class) (instance ?ROW3 Class)) (=> (exhaustiveDecomposition ?ROW1 ?ROW2 ?ROW3) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2 ?ROW3) 1) Class))))

(forall (?ROW1 ?ROW2 ?ROW3) (=> (and (instance ?ROW1 Class) (instance ?ROW2 Class) (instance ?ROW3 Class)) (=> (partition ?ROW1 ?ROW2 ?ROW3) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2 ?ROW3) 1) Class))))

(forall (?ROW1 ?ROW2 ?ROW3) (=> (and (instance ?ROW1 CognitiveAgent) (instance ?ROW2 Formula) (instance ?ROW3 Formula)) (=> (prefers ?ROW1 ?ROW2 ?ROW3) (equal (ListLengthFn (ListFn ?ROW1 ?ROW2 ?ROW3)) 3))))

(forall (?ROW1 ?ROW2 ?ROW3) (=> (and (instance ?ROW1 CognitiveAgent) (instance ?ROW2 Formula) (instance ?ROW3 Formula)) (=> (prefers ?ROW1 ?ROW2 ?ROW3) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2 ?ROW3) 1) CognitiveAgent))))

(forall (?ROW1 ?ROW2 ?ROW3) (=> (and (instance ?ROW1 CognitiveAgent) (instance ?ROW2 Formula) (instance ?ROW3 Formula)) (=> (prefers ?ROW1 ?ROW2 ?ROW3) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2 ?ROW3) 2) Formula))))

(forall (?ROW1 ?ROW2 ?ROW3) (=> (and (instance ?ROW1 CognitiveAgent) (instance ?ROW2 Formula) (instance ?ROW3 Formula)) (=> (prefers ?ROW1 ?ROW2 ?ROW3) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2 ?ROW3) 3) Formula))))

(forall (?ROW1 ?ROW2 ?ROW3) (=> (and (instance ?ROW1 EngineeringConnection) (instance ?ROW2 EngineeringComponent) (instance ?ROW3 EngineeringComponent)) (=> (connectsEngineeringComponents ?ROW1 ?ROW2 ?ROW3) (connects ?ROW1 ?ROW2 ?ROW3))))

(forall (?ROW1 ?ROW2 ?ROW3) (=> (and (instance ?ROW1 EngineeringConnection) (instance ?ROW2 EngineeringComponent) (instance ?ROW3 EngineeringComponent)) (=> (connectsEngineeringComponents ?ROW1 ?ROW2 ?ROW3) (equal (ListLengthFn (ListFn ?ROW1 ?ROW2 ?ROW3)) 3))))

(forall (?ROW1 ?ROW2 ?ROW3) (=> (and (instance ?ROW1 EngineeringConnection) (instance ?ROW2 EngineeringComponent) (instance ?ROW3 EngineeringComponent)) (=> (connectsEngineeringComponents ?ROW1 ?ROW2 ?ROW3) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2 ?ROW3) 1) EngineeringConnection))))

(forall (?ROW1 ?ROW2 ?ROW3) (=> (and (instance ?ROW1 EngineeringConnection) (instance ?ROW2 EngineeringComponent) (instance ?ROW3 EngineeringComponent)) (=> (connectsEngineeringComponents ?ROW1 ?ROW2 ?ROW3) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2 ?ROW3) 2) EngineeringComponent))))

(forall (?ROW1 ?ROW2 ?ROW3) (=> (and (instance ?ROW1 EngineeringConnection) (instance ?ROW2 EngineeringComponent) (instance ?ROW3 EngineeringComponent)) (=> (connectsEngineeringComponents ?ROW1 ?ROW2 ?ROW3) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2 ?ROW3) 3) EngineeringComponent))))

(forall (?ROW1 ?ROW2 ?ROW3) (=> (and (instance ?ROW1 Formula) (instance ?ROW2 Formula) (instance ?ROW3 RealNumber)) (=> (conditionalProbability ?ROW1 ?ROW2 ?ROW3) (equal (ListLengthFn (ListFn ?ROW1 ?ROW2 ?ROW3)) 3))))

(forall (?ROW1 ?ROW2 ?ROW3) (=> (and (instance ?ROW1 Formula) (instance ?ROW2 Formula) (instance ?ROW3 RealNumber)) (=> (conditionalProbability ?ROW1 ?ROW2 ?ROW3) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2 ?ROW3) 1) Formula))))

(forall (?ROW1 ?ROW2 ?ROW3) (=> (and (instance ?ROW1 Formula) (instance ?ROW2 Formula) (instance ?ROW3 RealNumber)) (=> (conditionalProbability ?ROW1 ?ROW2 ?ROW3) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2 ?ROW3) 2) Formula))))

(forall (?ROW1 ?ROW2 ?ROW3) (=> (and (instance ?ROW1 Formula) (instance ?ROW2 Formula) (instance ?ROW3 RealNumber)) (=> (conditionalProbability ?ROW1 ?ROW2 ?ROW3) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2 ?ROW3) 3) RealNumber))))

(forall (?ROW1 ?ROW2 ?ROW3) (=> (and (instance ?ROW1 Formula) (instance ?ROW3 CognitiveAgent)) (=> (confersObligation ?ROW1 ?ROW2 ?ROW3) (equal (ListLengthFn (ListFn ?ROW1 ?ROW2 ?ROW3)) 3))))

(forall (?ROW1 ?ROW2 ?ROW3) (=> (and (instance ?ROW1 Formula) (instance ?ROW3 CognitiveAgent)) (=> (confersObligation ?ROW1 ?ROW2 ?ROW3) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2 ?ROW3) 1) Formula))))

(forall (?ROW1 ?ROW2 ?ROW3) (=> (and (instance ?ROW1 Formula) (instance ?ROW3 CognitiveAgent)) (=> (confersObligation ?ROW1 ?ROW2 ?ROW3) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2 ?ROW3) 2) Entity))))

(forall (?ROW1 ?ROW2 ?ROW3) (=> (and (instance ?ROW1 Formula) (instance ?ROW3 CognitiveAgent)) (=> (confersObligation ?ROW1 ?ROW2 ?ROW3) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2 ?ROW3) 3) CognitiveAgent))))

(forall (?ROW1 ?ROW2 ?ROW3) (=> (and (instance ?ROW1 Formula) (instance ?ROW3 CognitiveAgent)) (=> (confersRight ?ROW1 ?ROW2 ?ROW3) (equal (ListLengthFn (ListFn ?ROW1 ?ROW2 ?ROW3)) 3))))

(forall (?ROW1 ?ROW2 ?ROW3) (=> (and (instance ?ROW1 Formula) (instance ?ROW3 CognitiveAgent)) (=> (confersRight ?ROW1 ?ROW2 ?ROW3) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2 ?ROW3) 1) Formula))))

(forall (?ROW1 ?ROW2 ?ROW3) (=> (and (instance ?ROW1 Formula) (instance ?ROW3 CognitiveAgent)) (=> (confersRight ?ROW1 ?ROW2 ?ROW3) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2 ?ROW3) 2) Entity))))

(forall (?ROW1 ?ROW2 ?ROW3) (=> (and (instance ?ROW1 Formula) (instance ?ROW3 CognitiveAgent)) (=> (confersRight ?ROW1 ?ROW2 ?ROW3) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2 ?ROW3) 3) CognitiveAgent))))

(forall (?ROW1 ?ROW2 ?ROW3) (=> (and (instance ?ROW1 GeometricPoint) (instance ?ROW2 GeometricPoint) (instance ?ROW3 LengthMeasure)) (=> (geometricDistance ?ROW1 ?ROW2 ?ROW3) (equal (ListLengthFn (ListFn ?ROW1 ?ROW2 ?ROW3)) 3))))

(forall (?ROW1 ?ROW2 ?ROW3) (=> (and (instance ?ROW1 GeometricPoint) (instance ?ROW2 GeometricPoint) (instance ?ROW3 LengthMeasure)) (=> (geometricDistance ?ROW1 ?ROW2 ?ROW3) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2 ?ROW3) 1) GeometricPoint))))

(forall (?ROW1 ?ROW2 ?ROW3) (=> (and (instance ?ROW1 GeometricPoint) (instance ?ROW2 GeometricPoint) (instance ?ROW3 LengthMeasure)) (=> (geometricDistance ?ROW1 ?ROW2 ?ROW3) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2 ?ROW3) 2) GeometricPoint))))

(forall (?ROW1 ?ROW2 ?ROW3) (=> (and (instance ?ROW1 GeometricPoint) (instance ?ROW2 GeometricPoint) (instance ?ROW3 LengthMeasure)) (=> (geometricDistance ?ROW1 ?ROW2 ?ROW3) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2 ?ROW3) 3) LengthMeasure))))

(forall (?ROW1 ?ROW2 ?ROW3) (=> (and (instance ?ROW1 GraphNode) (instance ?ROW2 GraphNode) (instance ?ROW3 GraphArc)) (=> (links ?ROW1 ?ROW2 ?ROW3) (equal (ListLengthFn (ListFn ?ROW1 ?ROW2 ?ROW3)) 3))))

(forall (?ROW1 ?ROW2 ?ROW3) (=> (and (instance ?ROW1 GraphNode) (instance ?ROW2 GraphNode) (instance ?ROW3 GraphArc)) (=> (links ?ROW1 ?ROW2 ?ROW3) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2 ?ROW3) 1) GraphNode))))

(forall (?ROW1 ?ROW2 ?ROW3) (=> (and (instance ?ROW1 GraphNode) (instance ?ROW2 GraphNode) (instance ?ROW3 GraphArc)) (=> (links ?ROW1 ?ROW2 ?ROW3) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2 ?ROW3) 2) GraphNode))))

(forall (?ROW1 ?ROW2 ?ROW3) (=> (and (instance ?ROW1 GraphNode) (instance ?ROW2 GraphNode) (instance ?ROW3 GraphArc)) (=> (links ?ROW1 ?ROW2 ?ROW3) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2 ?ROW3) 3) GraphArc))))

(forall (?ROW1 ?ROW2 ?ROW3) (=> (and (instance ?ROW1 Human) (instance ?ROW2 Position) (instance ?ROW3 Organization)) (=> (occupiesPosition ?ROW1 ?ROW2 ?ROW3) (equal (ListLengthFn (ListFn ?ROW1 ?ROW2 ?ROW3)) 3))))

(forall (?ROW1 ?ROW2 ?ROW3) (=> (and (instance ?ROW1 Human) (instance ?ROW2 Position) (instance ?ROW3 Organization)) (=> (occupiesPosition ?ROW1 ?ROW2 ?ROW3) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2 ?ROW3) 1) Human))))

(forall (?ROW1 ?ROW2 ?ROW3) (=> (and (instance ?ROW1 Human) (instance ?ROW2 Position) (instance ?ROW3 Organization)) (=> (occupiesPosition ?ROW1 ?ROW2 ?ROW3) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2 ?ROW3) 2) Position))))

(forall (?ROW1 ?ROW2 ?ROW3) (=> (and (instance ?ROW1 Human) (instance ?ROW2 Position) (instance ?ROW3 Organization)) (=> (occupiesPosition ?ROW1 ?ROW2 ?ROW3) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2 ?ROW3) 3) Organization))))

(forall (?ROW1 ?ROW2 ?ROW3) (=> (and (instance ?ROW1 LinguisticExpression) (instance ?ROW3 Language)) (=> (representsInLanguage ?ROW1 ?ROW2 ?ROW3) (equal (ListLengthFn (ListFn ?ROW1 ?ROW2 ?ROW3)) 3))))

(forall (?ROW1 ?ROW2 ?ROW3) (=> (and (instance ?ROW1 LinguisticExpression) (instance ?ROW3 Language)) (=> (representsInLanguage ?ROW1 ?ROW2 ?ROW3) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2 ?ROW3) 1) LinguisticExpression))))

(forall (?ROW1 ?ROW2 ?ROW3) (=> (and (instance ?ROW1 LinguisticExpression) (instance ?ROW3 Language)) (=> (representsInLanguage ?ROW1 ?ROW2 ?ROW3) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2 ?ROW3) 2) Entity))))

(forall (?ROW1 ?ROW2 ?ROW3) (=> (and (instance ?ROW1 LinguisticExpression) (instance ?ROW3 Language)) (=> (representsInLanguage ?ROW1 ?ROW2 ?ROW3) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2 ?ROW3) 3) Language))))

(forall (?ROW1 ?ROW2 ?ROW3) (=> (and (instance ?ROW1 Object) (instance ?ROW2 Object) (instance ?ROW3 Object)) (=> (between ?ROW1 ?ROW2 ?ROW3) (equal (ListLengthFn (ListFn ?ROW1 ?ROW2 ?ROW3)) 3))))

(forall (?ROW1 ?ROW2 ?ROW3) (=> (and (instance ?ROW1 Object) (instance ?ROW2 Object) (instance ?ROW3 Object)) (=> (between ?ROW1 ?ROW2 ?ROW3) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2 ?ROW3) 1) Object))))

(forall (?ROW1 ?ROW2 ?ROW3) (=> (and (instance ?ROW1 Object) (instance ?ROW2 Object) (instance ?ROW3 Object)) (=> (between ?ROW1 ?ROW2 ?ROW3) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2 ?ROW3) 2) Object))))

(forall (?ROW1 ?ROW2 ?ROW3) (=> (and (instance ?ROW1 Object) (instance ?ROW2 Object) (instance ?ROW3 Object)) (=> (between ?ROW1 ?ROW2 ?ROW3) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2 ?ROW3) 3) Object))))

(forall (?ROW1 ?ROW2 ?ROW3) (=> (and (instance ?ROW1 Object) (instance ?ROW2 Object) (instance ?ROW3 PositionalAttribute)) (=> (orientation ?ROW1 ?ROW2 ?ROW3) (equal (ListLengthFn (ListFn ?ROW1 ?ROW2 ?ROW3)) 3))))

(forall (?ROW1 ?ROW2 ?ROW3) (=> (and (instance ?ROW1 Object) (instance ?ROW2 Object) (instance ?ROW3 PositionalAttribute)) (=> (orientation ?ROW1 ?ROW2 ?ROW3) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2 ?ROW3) 1) Object))))

(forall (?ROW1 ?ROW2 ?ROW3) (=> (and (instance ?ROW1 Object) (instance ?ROW2 Object) (instance ?ROW3 PositionalAttribute)) (=> (orientation ?ROW1 ?ROW2 ?ROW3) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2 ?ROW3) 2) Object))))

(forall (?ROW1 ?ROW2 ?ROW3) (=> (and (instance ?ROW1 Object) (instance ?ROW2 Object) (instance ?ROW3 PositionalAttribute)) (=> (orientation ?ROW1 ?ROW2 ?ROW3) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2 ?ROW3) 3) PositionalAttribute))))

(forall (?ROW1 ?ROW2 ?ROW3) (=> (and (instance ?ROW1 OneDimensionalFigure) (instance ?ROW2 OneDimensionalFigure) (instance ?ROW3 GeometricPoint)) (=> (pointOfIntersection ?ROW1 ?ROW2 ?ROW3) (equal (ListLengthFn (ListFn ?ROW1 ?ROW2 ?ROW3)) 3))))

(forall (?ROW1 ?ROW2 ?ROW3) (=> (and (instance ?ROW1 OneDimensionalFigure) (instance ?ROW2 OneDimensionalFigure) (instance ?ROW3 GeometricPoint)) (=> (pointOfIntersection ?ROW1 ?ROW2 ?ROW3) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2 ?ROW3) 1) OneDimensionalFigure))))

(forall (?ROW1 ?ROW2 ?ROW3) (=> (and (instance ?ROW1 OneDimensionalFigure) (instance ?ROW2 OneDimensionalFigure) (instance ?ROW3 GeometricPoint)) (=> (pointOfIntersection ?ROW1 ?ROW2 ?ROW3) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2 ?ROW3) 2) OneDimensionalFigure))))

(forall (?ROW1 ?ROW2 ?ROW3) (=> (and (instance ?ROW1 OneDimensionalFigure) (instance ?ROW2 OneDimensionalFigure) (instance ?ROW3 GeometricPoint)) (=> (pointOfIntersection ?ROW1 ?ROW2 ?ROW3) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2 ?ROW3) 3) GeometricPoint))))

(forall (?ROW1 ?ROW2 ?ROW3) (=> (and (instance ?ROW1 Physical) (instance ?ROW2 Formula) (instance ?ROW3 CognitiveAgent)) (=> (hasPurposeForAgent ?ROW1 ?ROW2 ?ROW3) (equal (ListLengthFn (ListFn ?ROW1 ?ROW2 ?ROW3)) 3))))

(forall (?ROW1 ?ROW2 ?ROW3) (=> (and (instance ?ROW1 Physical) (instance ?ROW2 Formula) (instance ?ROW3 CognitiveAgent)) (=> (hasPurposeForAgent ?ROW1 ?ROW2 ?ROW3) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2 ?ROW3) 1) Physical))))

(forall (?ROW1 ?ROW2 ?ROW3) (=> (and (instance ?ROW1 Physical) (instance ?ROW2 Formula) (instance ?ROW3 CognitiveAgent)) (=> (hasPurposeForAgent ?ROW1 ?ROW2 ?ROW3) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2 ?ROW3) 2) Formula))))

(forall (?ROW1 ?ROW2 ?ROW3) (=> (and (instance ?ROW1 Physical) (instance ?ROW2 Formula) (instance ?ROW3 CognitiveAgent)) (=> (hasPurposeForAgent ?ROW1 ?ROW2 ?ROW3) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2 ?ROW3) 3) CognitiveAgent))))

(forall (?ROW1 ?ROW2 ?ROW3) (=> (and (instance ?ROW1 Physical) (instance ?ROW2 Physical) (instance ?ROW3 LengthMeasure)) (=> (altitude ?ROW1 ?ROW2 ?ROW3) (distance ?ROW1 ?ROW2 ?ROW3))))

(forall (?ROW1 ?ROW2 ?ROW3) (=> (and (instance ?ROW1 Physical) (instance ?ROW2 Physical) (instance ?ROW3 LengthMeasure)) (=> (altitude ?ROW1 ?ROW2 ?ROW3) (equal (ListLengthFn (ListFn ?ROW1 ?ROW2 ?ROW3)) 3))))

(forall (?ROW1 ?ROW2 ?ROW3) (=> (and (instance ?ROW1 Physical) (instance ?ROW2 Physical) (instance ?ROW3 LengthMeasure)) (=> (depth ?ROW1 ?ROW2 ?ROW3) (distance ?ROW1 ?ROW2 ?ROW3))))

(forall (?ROW1 ?ROW2 ?ROW3) (=> (and (instance ?ROW1 Physical) (instance ?ROW2 Physical) (instance ?ROW3 LengthMeasure)) (=> (depth ?ROW1 ?ROW2 ?ROW3) (equal (ListLengthFn (ListFn ?ROW1 ?ROW2 ?ROW3)) 3))))

(forall (?ROW1 ?ROW2 ?ROW3) (=> (and (instance ?ROW1 Physical) (instance ?ROW2 Physical) (instance ?ROW3 LengthMeasure)) (=> (distance ?ROW1 ?ROW2 ?ROW3) (equal (ListLengthFn (ListFn ?ROW1 ?ROW2 ?ROW3)) 3))))

(forall (?ROW1 ?ROW2 ?ROW3) (=> (and (instance ?ROW1 Physical) (instance ?ROW2 Physical) (instance ?ROW3 LengthMeasure)) (=> (distance ?ROW1 ?ROW2 ?ROW3) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2 ?ROW3) 1) Physical))))

(forall (?ROW1 ?ROW2 ?ROW3) (=> (and (instance ?ROW1 Physical) (instance ?ROW2 Physical) (instance ?ROW3 LengthMeasure)) (=> (distance ?ROW1 ?ROW2 ?ROW3) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2 ?ROW3) 2) Physical))))

(forall (?ROW1 ?ROW2 ?ROW3) (=> (and (instance ?ROW1 Physical) (instance ?ROW2 Physical) (instance ?ROW3 LengthMeasure)) (=> (distance ?ROW1 ?ROW2 ?ROW3) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2 ?ROW3) 3) LengthMeasure))))

(forall (?ROW1 ?ROW2 ?ROW3) (=> (and (instance ?ROW1 Relation) (instance ?ROW2 PositiveInteger) (instance ?ROW3 SetOrClass)) (=> (domain ?ROW1 ?ROW2 ?ROW3) (equal (ListLengthFn (ListFn ?ROW1 ?ROW2 ?ROW3)) 3))))

(forall (?ROW1 ?ROW2 ?ROW3) (=> (and (instance ?ROW1 Relation) (instance ?ROW2 PositiveInteger) (instance ?ROW3 SetOrClass)) (=> (domain ?ROW1 ?ROW2 ?ROW3) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2 ?ROW3) 1) Relation))))

(forall (?ROW1 ?ROW2 ?ROW3) (=> (and (instance ?ROW1 Relation) (instance ?ROW2 PositiveInteger) (instance ?ROW3 SetOrClass)) (=> (domain ?ROW1 ?ROW2 ?ROW3) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2 ?ROW3) 2) PositiveInteger))))

(forall (?ROW1 ?ROW2 ?ROW3) (=> (and (instance ?ROW1 Relation) (instance ?ROW2 PositiveInteger) (instance ?ROW3 SetOrClass)) (=> (domain ?ROW1 ?ROW2 ?ROW3) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2 ?ROW3) 3) SetOrClass))))

(forall (?ROW1 ?ROW2 ?ROW3) (=> (and (instance ?ROW1 Relation) (instance ?ROW2 PositiveInteger) (instance ?ROW3 SetOrClass)) (=> (domainSubclass ?ROW1 ?ROW2 ?ROW3) (equal (ListLengthFn (ListFn ?ROW1 ?ROW2 ?ROW3)) 3))))

(forall (?ROW1 ?ROW2 ?ROW3) (=> (and (instance ?ROW1 Relation) (instance ?ROW2 PositiveInteger) (instance ?ROW3 SetOrClass)) (=> (domainSubclass ?ROW1 ?ROW2 ?ROW3) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2 ?ROW3) 1) Relation))))

(forall (?ROW1 ?ROW2 ?ROW3) (=> (and (instance ?ROW1 Relation) (instance ?ROW2 PositiveInteger) (instance ?ROW3 SetOrClass)) (=> (domainSubclass ?ROW1 ?ROW2 ?ROW3) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2 ?ROW3) 2) PositiveInteger))))

(forall (?ROW1 ?ROW2 ?ROW3) (=> (and (instance ?ROW1 Relation) (instance ?ROW2 PositiveInteger) (instance ?ROW3 SetOrClass)) (=> (domainSubclass ?ROW1 ?ROW2 ?ROW3) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2 ?ROW3) 3) SetOrClass))))

(forall (?ROW1 ?ROW2 ?ROW3) (=> (and (instance ?ROW1 SelfConnectedObject) (instance ?ROW2 SelfConnectedObject) (instance ?ROW3 SelfConnectedObject)) (=> (connects ?ROW1 ?ROW2 ?ROW3) (equal (ListLengthFn (ListFn ?ROW1 ?ROW2 ?ROW3)) 3))))

(forall (?ROW1 ?ROW2 ?ROW3) (=> (and (instance ?ROW1 SelfConnectedObject) (instance ?ROW2 SelfConnectedObject) (instance ?ROW3 SelfConnectedObject)) (=> (connects ?ROW1 ?ROW2 ?ROW3) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2 ?ROW3) 1) SelfConnectedObject))))

(forall (?ROW1 ?ROW2 ?ROW3) (=> (and (instance ?ROW1 SelfConnectedObject) (instance ?ROW2 SelfConnectedObject) (instance ?ROW3 SelfConnectedObject)) (=> (connects ?ROW1 ?ROW2 ?ROW3) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2 ?ROW3) 2) SelfConnectedObject))))

(forall (?ROW1 ?ROW2 ?ROW3) (=> (and (instance ?ROW1 SelfConnectedObject) (instance ?ROW2 SelfConnectedObject) (instance ?ROW3 SelfConnectedObject)) (=> (connects ?ROW1 ?ROW2 ?ROW3) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2 ?ROW3) 3) SelfConnectedObject))))

(forall (?ROW1 ?ROW2 ?ROW3) (=> (and (instance ?ROW1 SymbolicString) (instance ?ROW3 Language)) (=> (relatedExternalConcept ?ROW1 ?ROW2 ?ROW3) (equal (ListLengthFn (ListFn ?ROW1 ?ROW2 ?ROW3)) 3))))

(forall (?ROW1 ?ROW2 ?ROW3) (=> (and (instance ?ROW1 SymbolicString) (instance ?ROW3 Language)) (=> (relatedExternalConcept ?ROW1 ?ROW2 ?ROW3) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2 ?ROW3) 1) SymbolicString))))

(forall (?ROW1 ?ROW2 ?ROW3) (=> (and (instance ?ROW1 SymbolicString) (instance ?ROW3 Language)) (=> (relatedExternalConcept ?ROW1 ?ROW2 ?ROW3) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2 ?ROW3) 2) Entity))))

(forall (?ROW1 ?ROW2 ?ROW3) (=> (and (instance ?ROW1 SymbolicString) (instance ?ROW3 Language)) (=> (relatedExternalConcept ?ROW1 ?ROW2 ?ROW3) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2 ?ROW3) 3) Language))))

(forall (?ROW1 ?ROW2 ?ROW3) (=> (and (instance ?ROW1 SymbolicString) (instance ?ROW3 Language)) (=> (subsumedExternalConcept ?ROW1 ?ROW2 ?ROW3) (equal (ListLengthFn (ListFn ?ROW1 ?ROW2 ?ROW3)) 3))))

(forall (?ROW1 ?ROW2 ?ROW3) (=> (and (instance ?ROW1 SymbolicString) (instance ?ROW3 Language)) (=> (subsumedExternalConcept ?ROW1 ?ROW2 ?ROW3) (relatedExternalConcept ?ROW1 ?ROW2 ?ROW3))))

(forall (?ROW1 ?ROW2 ?ROW3) (=> (and (instance ?ROW1 SymbolicString) (instance ?ROW3 Language)) (=> (subsumingExternalConcept ?ROW1 ?ROW2 ?ROW3) (equal (ListLengthFn (ListFn ?ROW1 ?ROW2 ?ROW3)) 3))))

(forall (?ROW1 ?ROW2 ?ROW3) (=> (and (instance ?ROW1 SymbolicString) (instance ?ROW3 Language)) (=> (subsumingExternalConcept ?ROW1 ?ROW2 ?ROW3) (relatedExternalConcept ?ROW1 ?ROW2 ?ROW3))))

(forall (?ROW1 ?ROW2 ?ROW3) (=> (and (instance ?ROW1 SymbolicString) (instance ?ROW3 Language)) (=> (synonymousExternalConcept ?ROW1 ?ROW2 ?ROW3) (equal (ListLengthFn (ListFn ?ROW1 ?ROW2 ?ROW3)) 3))))

(forall (?ROW1 ?ROW2 ?ROW3) (=> (and (instance ?ROW1 SymbolicString) (instance ?ROW3 Language)) (=> (synonymousExternalConcept ?ROW1 ?ROW2 ?ROW3) (relatedExternalConcept ?ROW1 ?ROW2 ?ROW3))))

(forall (?ROW1 ?ROW2 ?ROW3) (=> (and (instance ?ROW1 TimePoint) (instance ?ROW2 TimePoint) (instance ?ROW3 TimePoint)) (=> (temporallyBetween ?ROW1 ?ROW2 ?ROW3) (equal (ListLengthFn (ListFn ?ROW1 ?ROW2 ?ROW3)) 3))))

(forall (?ROW1 ?ROW2 ?ROW3) (=> (and (instance ?ROW1 TimePoint) (instance ?ROW2 TimePoint) (instance ?ROW3 TimePoint)) (=> (temporallyBetween ?ROW1 ?ROW2 ?ROW3) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2 ?ROW3) 1) TimePoint))))

(forall (?ROW1 ?ROW2 ?ROW3) (=> (and (instance ?ROW1 TimePoint) (instance ?ROW2 TimePoint) (instance ?ROW3 TimePoint)) (=> (temporallyBetween ?ROW1 ?ROW2 ?ROW3) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2 ?ROW3) 2) TimePoint))))

(forall (?ROW1 ?ROW2 ?ROW3) (=> (and (instance ?ROW1 TimePoint) (instance ?ROW2 TimePoint) (instance ?ROW3 TimePoint)) (=> (temporallyBetween ?ROW1 ?ROW2 ?ROW3) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2 ?ROW3) 3) TimePoint))))

(forall (?ROW1 ?ROW2 ?ROW3) (=> (and (instance ?ROW1 TimePoint) (instance ?ROW2 TimePoint) (instance ?ROW3 TimePoint)) (=> (temporallyBetween ?ROW1 ?ROW2 ?ROW3) (temporallyBetweenOrEqual ?ROW1 ?ROW2 ?ROW3))))

(forall (?ROW1 ?ROW2 ?ROW3) (=> (and (instance ?ROW1 TimePoint) (instance ?ROW2 TimePoint) (instance ?ROW3 TimePoint)) (=> (temporallyBetweenOrEqual ?ROW1 ?ROW2 ?ROW3) (equal (ListLengthFn (ListFn ?ROW1 ?ROW2 ?ROW3)) 3))))

(forall (?ROW1 ?ROW2 ?ROW3) (=> (and (instance ?ROW1 TimePoint) (instance ?ROW2 TimePoint) (instance ?ROW3 TimePoint)) (=> (temporallyBetweenOrEqual ?ROW1 ?ROW2 ?ROW3) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2 ?ROW3) 1) TimePoint))))

(forall (?ROW1 ?ROW2 ?ROW3) (=> (and (instance ?ROW1 TimePoint) (instance ?ROW2 TimePoint) (instance ?ROW3 TimePoint)) (=> (temporallyBetweenOrEqual ?ROW1 ?ROW2 ?ROW3) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2 ?ROW3) 2) TimePoint))))

(forall (?ROW1 ?ROW2 ?ROW3) (=> (and (instance ?ROW1 TimePoint) (instance ?ROW2 TimePoint) (instance ?ROW3 TimePoint)) (=> (temporallyBetweenOrEqual ?ROW1 ?ROW2 ?ROW3) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2 ?ROW3) 3) TimePoint))))

(forall (?ROW1 ?ROW2 ?ROW3) (=> (and (instance ?ROW2 Formula) (instance ?ROW3 ObjectiveNorm)) (=> (confersNorm ?ROW1 ?ROW2 ?ROW3) (equal (ListLengthFn (ListFn ?ROW1 ?ROW2 ?ROW3)) 3))))

(forall (?ROW1 ?ROW2 ?ROW3) (=> (and (instance ?ROW2 Formula) (instance ?ROW3 ObjectiveNorm)) (=> (confersNorm ?ROW1 ?ROW2 ?ROW3) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2 ?ROW3) 1) Entity))))

(forall (?ROW1 ?ROW2 ?ROW3) (=> (and (instance ?ROW2 Formula) (instance ?ROW3 ObjectiveNorm)) (=> (confersNorm ?ROW1 ?ROW2 ?ROW3) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2 ?ROW3) 2) Formula))))

(forall (?ROW1 ?ROW2 ?ROW3) (=> (and (instance ?ROW2 Formula) (instance ?ROW3 ObjectiveNorm)) (=> (confersNorm ?ROW1 ?ROW2 ?ROW3) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2 ?ROW3) 3) ObjectiveNorm))))

(forall (?ROW1 ?ROW2 ?ROW3) (=> (and (instance ?ROW2 Formula) (instance ?ROW3 ObjectiveNorm)) (=> (deprivesNorm ?ROW1 ?ROW2 ?ROW3) (equal (ListLengthFn (ListFn ?ROW1 ?ROW2 ?ROW3)) 3))))

(forall (?ROW1 ?ROW2 ?ROW3) (=> (and (instance ?ROW2 Formula) (instance ?ROW3 ObjectiveNorm)) (=> (deprivesNorm ?ROW1 ?ROW2 ?ROW3) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2 ?ROW3) 1) Entity))))

(forall (?ROW1 ?ROW2 ?ROW3) (=> (and (instance ?ROW2 Formula) (instance ?ROW3 ObjectiveNorm)) (=> (deprivesNorm ?ROW1 ?ROW2 ?ROW3) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2 ?ROW3) 2) Formula))))

(forall (?ROW1 ?ROW2 ?ROW3) (=> (and (instance ?ROW2 Formula) (instance ?ROW3 ObjectiveNorm)) (=> (deprivesNorm ?ROW1 ?ROW2 ?ROW3) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2 ?ROW3) 3) ObjectiveNorm))))

(forall (?ROW1 ?ROW2 ?ROW3) (=> (and (subclass ?ROW1 Attribute) (subclass ?ROW2 Attribute) (subclass ?ROW3 Attribute)) (=> (exhaustiveAttribute ?ROW1 ?ROW2 ?ROW3) (subclass (ListOrderFn (ListFn ?ROW1 ?ROW2 ?ROW3) 1) Attribute))))

(forall (?ROW1 ?ROW2 ?ROW3) (=> (and (subclass ?ROW1 Process) (instance ?ROW2 CaseRole) (instance ?ROW3 Object)) (=> (capability ?ROW1 ?ROW2 ?ROW3) (equal (ListLengthFn (ListFn ?ROW1 ?ROW2 ?ROW3)) 3))))

(forall (?ROW1 ?ROW2 ?ROW3) (=> (and (subclass ?ROW1 Process) (instance ?ROW2 CaseRole) (instance ?ROW3 Object)) (=> (capability ?ROW1 ?ROW2 ?ROW3) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2 ?ROW3) 2) CaseRole))))

(forall (?ROW1 ?ROW2 ?ROW3) (=> (and (subclass ?ROW1 Process) (instance ?ROW2 CaseRole) (instance ?ROW3 Object)) (=> (capability ?ROW1 ?ROW2 ?ROW3) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2 ?ROW3) 3) Object))))

(forall (?ROW1 ?ROW2 ?ROW3) (=> (and (subclass ?ROW1 Process) (instance ?ROW2 CaseRole) (instance ?ROW3 Object)) (=> (capability ?ROW1 ?ROW2 ?ROW3) (subclass (ListOrderFn (ListFn ?ROW1 ?ROW2 ?ROW3) 1) Process))))

(forall (?ROW1 ?ROW2 ?ROW3) (=> (instance ?ROW3 Agent) (=> (representsForAgent ?ROW1 ?ROW2 ?ROW3) (equal (ListLengthFn (ListFn ?ROW1 ?ROW2 ?ROW3)) 3))))

(forall (?ROW1 ?ROW2 ?ROW3) (=> (instance ?ROW3 Agent) (=> (representsForAgent ?ROW1 ?ROW2 ?ROW3) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2 ?ROW3) 1) Entity))))

(forall (?ROW1 ?ROW2 ?ROW3) (=> (instance ?ROW3 Agent) (=> (representsForAgent ?ROW1 ?ROW2 ?ROW3) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2 ?ROW3) 2) Entity))))

(forall (?ROW1 ?ROW2 ?ROW3) (=> (instance ?ROW3 Agent) (=> (representsForAgent ?ROW1 ?ROW2 ?ROW3) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2 ?ROW3) 3) Agent))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Agent) (instance ?ROW2 Human)) (=> (leader ?ROW1 ?ROW2) (equal (ListLengthFn (ListFn ?ROW1 ?ROW2)) 2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Agent) (instance ?ROW2 Human)) (=> (leader ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 1) Agent))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Agent) (instance ?ROW2 Human)) (=> (leader ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 2) Human))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Agent) (instance ?ROW2 Object)) (=> (possesses ?ROW1 ?ROW2) (equal (ListLengthFn (ListFn ?ROW1 ?ROW2)) 2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Agent) (instance ?ROW2 Object)) (=> (possesses ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 1) Agent))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Agent) (instance ?ROW2 Object)) (=> (possesses ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 2) Object))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Agent) (subclass ?ROW2 Text)) (=> (authors ?ROW1 ?ROW2) (equal (ListLengthFn (ListFn ?ROW1 ?ROW2)) 2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Agent) (subclass ?ROW2 Text)) (=> (authors ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 1) Agent))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Agent) (subclass ?ROW2 Text)) (=> (authors ?ROW1 ?ROW2) (subclass (ListOrderFn (ListFn ?ROW1 ?ROW2) 2) Text))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Agent) (subclass ?ROW2 Text)) (=> (editor ?ROW1 ?ROW2) (equal (ListLengthFn (ListFn ?ROW1 ?ROW2)) 2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Agent) (subclass ?ROW2 Text)) (=> (editor ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 1) Agent))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Agent) (subclass ?ROW2 Text)) (=> (editor ?ROW1 ?ROW2) (subclass (ListOrderFn (ListFn ?ROW1 ?ROW2) 2) Text))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Animal) (instance ?ROW2 Clothing)) (=> (wears ?ROW1 ?ROW2) (equal (ListLengthFn (ListFn ?ROW1 ?ROW2)) 2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Animal) (instance ?ROW2 Clothing)) (=> (wears ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 1) Animal))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Animal) (instance ?ROW2 Clothing)) (=> (wears ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 2) Clothing))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Animal) (instance ?ROW2 Object)) (=> (grasps ?ROW1 ?ROW2) (connected ?ROW1 ?ROW2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Animal) (instance ?ROW2 Object)) (=> (grasps ?ROW1 ?ROW2) (equal (ListLengthFn (ListFn ?ROW1 ?ROW2)) 2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Animal) (instance ?ROW2 Object)) (=> (grasps ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 1) Animal))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Animal) (instance ?ROW2 Object)) (=> (grasps ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 2) Object))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Animal) (instance ?ROW2 Object)) (=> (grasps ?ROW1 ?ROW2) (meetsSpatially ?ROW1 ?ROW2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Argument) (instance ?ROW2 Proposition)) (=> (conclusion ?ROW1 ?ROW2) (equal (ListLengthFn (ListFn ?ROW1 ?ROW2)) 2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Argument) (instance ?ROW2 Proposition)) (=> (conclusion ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 1) Argument))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Argument) (instance ?ROW2 Proposition)) (=> (conclusion ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 2) Proposition))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Argument) (instance ?ROW2 Proposition)) (=> (premise ?ROW1 ?ROW2) (equal (ListLengthFn (ListFn ?ROW1 ?ROW2)) 2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Argument) (instance ?ROW2 Proposition)) (=> (premise ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 1) Argument))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Argument) (instance ?ROW2 Proposition)) (=> (premise ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 2) Proposition))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Attribute) (instance ?ROW2 Attribute)) (=> (subAttribute ?ROW1 ?ROW2) (equal (ListLengthFn (ListFn ?ROW1 ?ROW2)) 2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Attribute) (instance ?ROW2 Attribute)) (=> (subAttribute ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 1) Attribute))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Attribute) (instance ?ROW2 Attribute)) (=> (subAttribute ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 2) Attribute))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Attribute) (instance ?ROW2 Attribute)) (=> (successorAttribute ?ROW1 ?ROW2) (equal (ListLengthFn (ListFn ?ROW1 ?ROW2)) 2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Attribute) (instance ?ROW2 Attribute)) (=> (successorAttribute ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 1) Attribute))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Attribute) (instance ?ROW2 Attribute)) (=> (successorAttribute ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 2) Attribute))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Attribute) (instance ?ROW2 Attribute)) (=> (successorAttributeClosure ?ROW1 ?ROW2) (equal (ListLengthFn (ListFn ?ROW1 ?ROW2)) 2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Attribute) (instance ?ROW2 Attribute)) (=> (successorAttributeClosure ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 1) Attribute))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Attribute) (instance ?ROW2 Attribute)) (=> (successorAttributeClosure ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 2) Attribute))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 BinaryFunction) (instance ?ROW2 BinaryFunction)) (=> (distributes ?ROW1 ?ROW2) (equal (ListLengthFn (ListFn ?ROW1 ?ROW2)) 2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 BinaryFunction) (instance ?ROW2 BinaryFunction)) (=> (distributes ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 1) BinaryFunction))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 BinaryFunction) (instance ?ROW2 BinaryFunction)) (=> (distributes ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 2) BinaryFunction))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 BinaryRelation) (instance ?ROW2 BinaryRelation)) (=> (inverse ?ROW1 ?ROW2) (equal (ListLengthFn (ListFn ?ROW1 ?ROW2)) 2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 BinaryRelation) (instance ?ROW2 BinaryRelation)) (=> (inverse ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 1) BinaryRelation))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 BinaryRelation) (instance ?ROW2 BinaryRelation)) (=> (inverse ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 2) BinaryRelation))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 BinaryRelation) (instance ?ROW2 SetOrClass)) (=> (equivalenceRelationOn ?ROW1 ?ROW2) (equal (ListLengthFn (ListFn ?ROW1 ?ROW2)) 2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 BinaryRelation) (instance ?ROW2 SetOrClass)) (=> (equivalenceRelationOn ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 1) BinaryRelation))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 BinaryRelation) (instance ?ROW2 SetOrClass)) (=> (equivalenceRelationOn ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 2) SetOrClass))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 BinaryRelation) (instance ?ROW2 SetOrClass)) (=> (irreflexiveOn ?ROW1 ?ROW2) (equal (ListLengthFn (ListFn ?ROW1 ?ROW2)) 2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 BinaryRelation) (instance ?ROW2 SetOrClass)) (=> (irreflexiveOn ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 1) BinaryRelation))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 BinaryRelation) (instance ?ROW2 SetOrClass)) (=> (irreflexiveOn ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 2) SetOrClass))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 BinaryRelation) (instance ?ROW2 SetOrClass)) (=> (partialOrderingOn ?ROW1 ?ROW2) (equal (ListLengthFn (ListFn ?ROW1 ?ROW2)) 2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 BinaryRelation) (instance ?ROW2 SetOrClass)) (=> (partialOrderingOn ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 1) BinaryRelation))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 BinaryRelation) (instance ?ROW2 SetOrClass)) (=> (partialOrderingOn ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 2) SetOrClass))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 BinaryRelation) (instance ?ROW2 SetOrClass)) (=> (reflexiveOn ?ROW1 ?ROW2) (equal (ListLengthFn (ListFn ?ROW1 ?ROW2)) 2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 BinaryRelation) (instance ?ROW2 SetOrClass)) (=> (reflexiveOn ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 1) BinaryRelation))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 BinaryRelation) (instance ?ROW2 SetOrClass)) (=> (reflexiveOn ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 2) SetOrClass))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 BinaryRelation) (instance ?ROW2 SetOrClass)) (=> (totalOrderingOn ?ROW1 ?ROW2) (equal (ListLengthFn (ListFn ?ROW1 ?ROW2)) 2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 BinaryRelation) (instance ?ROW2 SetOrClass)) (=> (totalOrderingOn ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 1) BinaryRelation))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 BinaryRelation) (instance ?ROW2 SetOrClass)) (=> (totalOrderingOn ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 2) SetOrClass))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 BinaryRelation) (instance ?ROW2 SetOrClass)) (=> (trichotomizingOn ?ROW1 ?ROW2) (equal (ListLengthFn (ListFn ?ROW1 ?ROW2)) 2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 BinaryRelation) (instance ?ROW2 SetOrClass)) (=> (trichotomizingOn ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 1) BinaryRelation))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 BinaryRelation) (instance ?ROW2 SetOrClass)) (=> (trichotomizingOn ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 2) SetOrClass))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Class) (instance ?ROW2 Class)) (<=> (partition ?ROW1 ?ROW2) (and (exhaustiveDecomposition ?ROW1 ?ROW2) (disjointDecomposition ?ROW1 ?ROW2)))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Class) (instance ?ROW2 Class)) (=> (disjointDecomposition ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 1) Class))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Class) (instance ?ROW2 Class)) (=> (exhaustiveDecomposition ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 1) Class))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Class) (instance ?ROW2 Class)) (=> (partition ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 1) Class))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 CognitiveAgent) (instance ?ROW2 Formula)) (=> (believes ?ROW1 ?ROW2) (equal (ListLengthFn (ListFn ?ROW1 ?ROW2)) 2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 CognitiveAgent) (instance ?ROW2 Formula)) (=> (believes ?ROW1 ?ROW2) (inScopeOfInterest ?ROW1 ?ROW2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 CognitiveAgent) (instance ?ROW2 Formula)) (=> (believes ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 1) CognitiveAgent))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 CognitiveAgent) (instance ?ROW2 Formula)) (=> (believes ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 2) Formula))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 CognitiveAgent) (instance ?ROW2 Formula)) (=> (considers ?ROW1 ?ROW2) (equal (ListLengthFn (ListFn ?ROW1 ?ROW2)) 2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 CognitiveAgent) (instance ?ROW2 Formula)) (=> (considers ?ROW1 ?ROW2) (inScopeOfInterest ?ROW1 ?ROW2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 CognitiveAgent) (instance ?ROW2 Formula)) (=> (considers ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 1) CognitiveAgent))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 CognitiveAgent) (instance ?ROW2 Formula)) (=> (considers ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 2) Formula))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 CognitiveAgent) (instance ?ROW2 Formula)) (=> (desires ?ROW1 ?ROW2) (equal (ListLengthFn (ListFn ?ROW1 ?ROW2)) 2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 CognitiveAgent) (instance ?ROW2 Formula)) (=> (desires ?ROW1 ?ROW2) (inScopeOfInterest ?ROW1 ?ROW2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 CognitiveAgent) (instance ?ROW2 Formula)) (=> (desires ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 1) CognitiveAgent))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 CognitiveAgent) (instance ?ROW2 Formula)) (=> (desires ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 2) Formula))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 CognitiveAgent) (instance ?ROW2 Formula)) (=> (knows ?ROW1 ?ROW2) (equal (ListLengthFn (ListFn ?ROW1 ?ROW2)) 2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 CognitiveAgent) (instance ?ROW2 Formula)) (=> (knows ?ROW1 ?ROW2) (inScopeOfInterest ?ROW1 ?ROW2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 CognitiveAgent) (instance ?ROW2 Formula)) (=> (knows ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 1) CognitiveAgent))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 CognitiveAgent) (instance ?ROW2 Formula)) (=> (knows ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 2) Formula))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 CognitiveAgent) (instance ?ROW2 Physical)) (=> (needs ?ROW1 ?ROW2) (equal (ListLengthFn (ListFn ?ROW1 ?ROW2)) 2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 CognitiveAgent) (instance ?ROW2 Physical)) (=> (needs ?ROW1 ?ROW2) (inScopeOfInterest ?ROW1 ?ROW2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 CognitiveAgent) (instance ?ROW2 Physical)) (=> (needs ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 1) CognitiveAgent))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 CognitiveAgent) (instance ?ROW2 Physical)) (=> (needs ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 2) Physical))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 CognitiveAgent) (instance ?ROW2 Physical)) (=> (wants ?ROW1 ?ROW2) (equal (ListLengthFn (ListFn ?ROW1 ?ROW2)) 2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 CognitiveAgent) (instance ?ROW2 Physical)) (=> (wants ?ROW1 ?ROW2) (inScopeOfInterest ?ROW1 ?ROW2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 CognitiveAgent) (instance ?ROW2 Physical)) (=> (wants ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 1) CognitiveAgent))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 CognitiveAgent) (instance ?ROW2 Physical)) (=> (wants ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 2) Physical))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Collection) (instance ?ROW2 Collection)) (=> (subCollection ?ROW1 ?ROW2) (equal (ListLengthFn (ListFn ?ROW1 ?ROW2)) 2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Collection) (instance ?ROW2 Collection)) (=> (subCollection ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 1) Collection))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Collection) (instance ?ROW2 Collection)) (=> (subCollection ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 2) Collection))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 ContentBearingObject) (instance ?ROW2 ContentBearingObject)) (=> (equivalentContentInstance ?ROW1 ?ROW2) (equal (ListLengthFn (ListFn ?ROW1 ?ROW2)) 2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 ContentBearingObject) (instance ?ROW2 ContentBearingObject)) (=> (equivalentContentInstance ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 1) ContentBearingObject))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 ContentBearingObject) (instance ?ROW2 ContentBearingObject)) (=> (equivalentContentInstance ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 2) ContentBearingObject))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 ContentBearingObject) (instance ?ROW2 ContentBearingObject)) (=> (equivalentContentInstance ?ROW1 ?ROW2) (subsumesContentInstance ?ROW1 ?ROW2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 ContentBearingObject) (instance ?ROW2 ContentBearingObject)) (=> (subsumesContentInstance ?ROW1 ?ROW2) (equal (ListLengthFn (ListFn ?ROW1 ?ROW2)) 2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 ContentBearingObject) (instance ?ROW2 ContentBearingObject)) (=> (subsumesContentInstance ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 1) ContentBearingObject))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 ContentBearingObject) (instance ?ROW2 ContentBearingObject)) (=> (subsumesContentInstance ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 2) ContentBearingObject))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 ContentBearingPhysical) (instance ?ROW2 Proposition)) (=> (containsInformation ?ROW1 ?ROW2) (equal (ListLengthFn (ListFn ?ROW1 ?ROW2)) 2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 ContentBearingPhysical) (instance ?ROW2 Proposition)) (=> (containsInformation ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 1) ContentBearingPhysical))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 ContentBearingPhysical) (instance ?ROW2 Proposition)) (=> (containsInformation ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 2) Proposition))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 ContentBearingPhysical) (instance ?ROW2 Proposition)) (=> (containsInformation ?ROW1 ?ROW2) (refers ?ROW1 ?ROW2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 ContentBearingPhysical) (instance ?ROW2 Proposition)) (=> (containsInformation ?ROW1 ?ROW2) (represents ?ROW1 ?ROW2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 CorpuscularObject) (instance ?ROW2 CorpuscularObject)) (=> (component ?ROW1 ?ROW2) (equal (ListLengthFn (ListFn ?ROW1 ?ROW2)) 2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 CorpuscularObject) (instance ?ROW2 CorpuscularObject)) (=> (component ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 1) CorpuscularObject))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 CorpuscularObject) (instance ?ROW2 CorpuscularObject)) (=> (component ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 2) CorpuscularObject))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 CorpuscularObject) (instance ?ROW2 CorpuscularObject)) (=> (component ?ROW1 ?ROW2) (part ?ROW1 ?ROW2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Demonstrating) (instance ?ROW2 Human)) (=> (attends ?ROW1 ?ROW2) (equal (ListLengthFn (ListFn ?ROW1 ?ROW2)) 2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Demonstrating) (instance ?ROW2 Human)) (=> (attends ?ROW1 ?ROW2) (experiencer ?ROW1 ?ROW2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Demonstrating) (instance ?ROW2 Human)) (=> (attends ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 1) Demonstrating))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Demonstrating) (instance ?ROW2 Human)) (=> (attends ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 2) Human))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 EngineeringComponent) (instance ?ROW2 EngineeringComponent)) (=> (connectedEngineeringComponents ?ROW1 ?ROW2) (connected ?ROW1 ?ROW2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 EngineeringComponent) (instance ?ROW2 EngineeringComponent)) (=> (connectedEngineeringComponents ?ROW1 ?ROW2) (equal (ListLengthFn (ListFn ?ROW1 ?ROW2)) 2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 EngineeringComponent) (instance ?ROW2 EngineeringComponent)) (=> (connectedEngineeringComponents ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 1) EngineeringComponent))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 EngineeringComponent) (instance ?ROW2 EngineeringComponent)) (=> (connectedEngineeringComponents ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 2) EngineeringComponent))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 EngineeringComponent) (instance ?ROW2 EngineeringComponent)) (=> (engineeringSubcomponent ?ROW1 ?ROW2) (equal (ListLengthFn (ListFn ?ROW1 ?ROW2)) 2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 EngineeringComponent) (instance ?ROW2 EngineeringComponent)) (=> (engineeringSubcomponent ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 1) EngineeringComponent))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 EngineeringComponent) (instance ?ROW2 EngineeringComponent)) (=> (engineeringSubcomponent ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 2) EngineeringComponent))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 EngineeringComponent) (instance ?ROW2 EngineeringComponent)) (=> (engineeringSubcomponent ?ROW1 ?ROW2) (part ?ROW1 ?ROW2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 EngineeringComponent) (instance ?ROW2 EngineeringComponent)) (=> (engineeringSubcomponent ?ROW1 ?ROW2) (properPart ?ROW1 ?ROW2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 FinancialTransaction) (instance ?ROW2 CurrencyMeasure)) (=> (transactionAmount ?ROW1 ?ROW2) (equal (ListLengthFn (ListFn ?ROW1 ?ROW2)) 2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 FinancialTransaction) (instance ?ROW2 CurrencyMeasure)) (=> (transactionAmount ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 1) FinancialTransaction))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 FinancialTransaction) (instance ?ROW2 CurrencyMeasure)) (=> (transactionAmount ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 2) CurrencyMeasure))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Formula) (instance ?ROW2 CognitiveAgent)) (=> (holdsObligation ?ROW1 ?ROW2) (equal (ListLengthFn (ListFn ?ROW1 ?ROW2)) 2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Formula) (instance ?ROW2 CognitiveAgent)) (=> (holdsObligation ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 1) Formula))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Formula) (instance ?ROW2 CognitiveAgent)) (=> (holdsObligation ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 2) CognitiveAgent))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Formula) (instance ?ROW2 CognitiveAgent)) (=> (holdsRight ?ROW1 ?ROW2) (equal (ListLengthFn (ListFn ?ROW1 ?ROW2)) 2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Formula) (instance ?ROW2 CognitiveAgent)) (=> (holdsRight ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 1) Formula))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Formula) (instance ?ROW2 CognitiveAgent)) (=> (holdsRight ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 2) CognitiveAgent))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Formula) (instance ?ROW2 Formula)) (=> (causesProposition ?ROW1 ?ROW2) (equal (ListLengthFn (ListFn ?ROW1 ?ROW2)) 2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Formula) (instance ?ROW2 Formula)) (=> (causesProposition ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 1) Formula))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Formula) (instance ?ROW2 Formula)) (=> (causesProposition ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 2) Formula))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Formula) (instance ?ROW2 Formula)) (=> (decreasesLikelihood ?ROW1 ?ROW2) (equal (ListLengthFn (ListFn ?ROW1 ?ROW2)) 2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Formula) (instance ?ROW2 Formula)) (=> (decreasesLikelihood ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 1) Formula))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Formula) (instance ?ROW2 Formula)) (=> (decreasesLikelihood ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 2) Formula))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Formula) (instance ?ROW2 Formula)) (=> (entails ?ROW1 ?ROW2) (equal (ListLengthFn (ListFn ?ROW1 ?ROW2)) 2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Formula) (instance ?ROW2 Formula)) (=> (entails ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 1) Formula))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Formula) (instance ?ROW2 Formula)) (=> (entails ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 2) Formula))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Formula) (instance ?ROW2 Formula)) (=> (increasesLikelihood ?ROW1 ?ROW2) (equal (ListLengthFn (ListFn ?ROW1 ?ROW2)) 2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Formula) (instance ?ROW2 Formula)) (=> (increasesLikelihood ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 1) Formula))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Formula) (instance ?ROW2 Formula)) (=> (increasesLikelihood ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 2) Formula))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Formula) (instance ?ROW2 Formula)) (=> (independentProbability ?ROW1 ?ROW2) (equal (ListLengthFn (ListFn ?ROW1 ?ROW2)) 2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Formula) (instance ?ROW2 Formula)) (=> (independentProbability ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 1) Formula))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Formula) (instance ?ROW2 Formula)) (=> (independentProbability ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 2) Formula))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Formula) (instance ?ROW2 NormativeAttribute)) (=> (modalAttribute ?ROW1 ?ROW2) (equal (ListLengthFn (ListFn ?ROW1 ?ROW2)) 2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Formula) (instance ?ROW2 NormativeAttribute)) (=> (modalAttribute ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 1) Formula))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Formula) (instance ?ROW2 NormativeAttribute)) (=> (modalAttribute ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 2) NormativeAttribute))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Formula) (instance ?ROW2 NormativeAttribute)) (=> (modalAttribute ?ROW1 ?ROW2) (property ?ROW1 ?ROW2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Function) (instance ?ROW2 SetOrClass)) (=> (closedOn ?ROW1 ?ROW2) (equal (ListLengthFn (ListFn ?ROW1 ?ROW2)) 2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Function) (instance ?ROW2 SetOrClass)) (=> (closedOn ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 1) Function))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Function) (instance ?ROW2 SetOrClass)) (=> (closedOn ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 2) SetOrClass))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Function) (instance ?ROW2 SetOrClass)) (=> (range ?ROW1 ?ROW2) (equal (ListLengthFn (ListFn ?ROW1 ?ROW2)) 2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Function) (instance ?ROW2 SetOrClass)) (=> (range ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 1) Function))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Function) (instance ?ROW2 SetOrClass)) (=> (range ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 2) SetOrClass))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Function) (subclass ?ROW2 SetOrClass)) (=> (rangeSubclass ?ROW1 ?ROW2) (equal (ListLengthFn (ListFn ?ROW1 ?ROW2)) 2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Function) (subclass ?ROW2 SetOrClass)) (=> (rangeSubclass ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 1) Function))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Function) (subclass ?ROW2 SetOrClass)) (=> (rangeSubclass ?ROW1 ?ROW2) (subclass (ListOrderFn (ListFn ?ROW1 ?ROW2) 2) SetOrClass))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 GeographicArea) (instance ?ROW2 GeographicArea)) (=> (geographicSubregion ?ROW1 ?ROW2) (equal (ListLengthFn (ListFn ?ROW1 ?ROW2)) 2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 GeographicArea) (instance ?ROW2 GeographicArea)) (=> (geographicSubregion ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 1) GeographicArea))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 GeographicArea) (instance ?ROW2 GeographicArea)) (=> (geographicSubregion ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 2) GeographicArea))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 GeographicArea) (instance ?ROW2 GeographicArea)) (=> (geographicSubregion ?ROW1 ?ROW2) (located ?ROW1 ?ROW2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 GeographicArea) (instance ?ROW2 GeographicArea)) (=> (geographicSubregion ?ROW1 ?ROW2) (part ?ROW1 ?ROW2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 GeographicArea) (instance ?ROW2 GeographicArea)) (=> (geographicSubregion ?ROW1 ?ROW2) (partlyLocated ?ROW1 ?ROW2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 GeographicArea) (instance ?ROW2 GeographicArea)) (=> (geographicSubregion ?ROW1 ?ROW2) (properPart ?ROW1 ?ROW2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 GeometricFigure) (instance ?ROW2 GeometricFigure)) (=> (geometricPart ?ROW1 ?ROW2) (equal (ListLengthFn (ListFn ?ROW1 ?ROW2)) 2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 GeometricFigure) (instance ?ROW2 GeometricFigure)) (=> (geometricPart ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 1) GeometricFigure))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 GeometricFigure) (instance ?ROW2 GeometricFigure)) (=> (geometricPart ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 2) GeometricFigure))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 GeometricPoint) (instance ?ROW2 GeometricFigure)) (=> (pointOfFigure ?ROW1 ?ROW2) (equal (ListLengthFn (ListFn ?ROW1 ?ROW2)) 2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 GeometricPoint) (instance ?ROW2 GeometricFigure)) (=> (pointOfFigure ?ROW1 ?ROW2) (geometricPart ?ROW1 ?ROW2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 GeometricPoint) (instance ?ROW2 GeometricFigure)) (=> (pointOfFigure ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 1) GeometricPoint))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 GeometricPoint) (instance ?ROW2 GeometricFigure)) (=> (pointOfFigure ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 2) GeometricFigure))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 GeometricPoint) (instance ?ROW2 GeometricPoint)) (exists (?VALENCE) (and (instance ?VALENCE Quantity) (instance geometricDistance Relation) (=> (forall (?NUMBER ?ELEMENT ?CLASS) (=> (and (instance ?NUMBER PositiveInteger) (instance ?CLASS SetOrClass)) (=> (and (lessThan ?NUMBER ?VALENCE) (equal ?ELEMENT (ListOrderFn (ListFn ?ROW1 ?ROW2) ?NUMBER))) (instance ?ELEMENT ?CLASS)))) (exists (?ITEM) (and (instance ?ITEM LengthMeasure) (geometricDistance ?ROW1 ?ROW2 ?ITEM))))))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 GeopoliticalArea) (instance ?ROW2 GeopoliticalArea)) (=> (geopoliticalSubdivision ?ROW1 ?ROW2) (equal (ListLengthFn (ListFn ?ROW1 ?ROW2)) 2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 GeopoliticalArea) (instance ?ROW2 GeopoliticalArea)) (=> (geopoliticalSubdivision ?ROW1 ?ROW2) (geographicSubregion ?ROW1 ?ROW2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 GeopoliticalArea) (instance ?ROW2 GeopoliticalArea)) (=> (geopoliticalSubdivision ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 1) GeopoliticalArea))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 GeopoliticalArea) (instance ?ROW2 GeopoliticalArea)) (=> (geopoliticalSubdivision ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 2) GeopoliticalArea))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 GeopoliticalArea) (instance ?ROW2 GeopoliticalArea)) (=> (geopoliticalSubdivision ?ROW1 ?ROW2) (located ?ROW1 ?ROW2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 GeopoliticalArea) (instance ?ROW2 GeopoliticalArea)) (=> (geopoliticalSubdivision ?ROW1 ?ROW2) (part ?ROW1 ?ROW2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 GeopoliticalArea) (instance ?ROW2 GeopoliticalArea)) (=> (geopoliticalSubdivision ?ROW1 ?ROW2) (partlyLocated ?ROW1 ?ROW2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 GeopoliticalArea) (instance ?ROW2 GeopoliticalArea)) (=> (geopoliticalSubdivision ?ROW1 ?ROW2) (properPart ?ROW1 ?ROW2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Graph) (instance ?ROW2 Graph)) (=> (subGraph ?ROW1 ?ROW2) (equal (ListLengthFn (ListFn ?ROW1 ?ROW2)) 2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Graph) (instance ?ROW2 Graph)) (=> (subGraph ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 1) Graph))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Graph) (instance ?ROW2 Graph)) (=> (subGraph ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 2) Graph))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 GraphArc) (instance ?ROW2 RealNumber)) (=> (arcWeight ?ROW1 ?ROW2) (equal (ListLengthFn (ListFn ?ROW1 ?ROW2)) 2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 GraphArc) (instance ?ROW2 RealNumber)) (=> (arcWeight ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 1) GraphArc))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 GraphArc) (instance ?ROW2 RealNumber)) (=> (arcWeight ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 2) RealNumber))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 GraphElement) (instance ?ROW2 Graph)) (=> (graphPart ?ROW1 ?ROW2) (equal (ListLengthFn (ListFn ?ROW1 ?ROW2)) 2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 GraphElement) (instance ?ROW2 Graph)) (=> (graphPart ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 1) GraphElement))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 GraphElement) (instance ?ROW2 Graph)) (=> (graphPart ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 2) Graph))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 GraphPath) (instance ?ROW2 PositiveInteger)) (=> (pathLength ?ROW1 ?ROW2) (equal (ListLengthFn (ListFn ?ROW1 ?ROW2)) 2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 GraphPath) (instance ?ROW2 PositiveInteger)) (=> (pathLength ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 1) GraphPath))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 GraphPath) (instance ?ROW2 PositiveInteger)) (=> (pathLength ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 2) PositiveInteger))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Hole) (instance ?ROW2 SelfConnectedObject)) (=> (hole ?ROW1 ?ROW2) (equal (ListLengthFn (ListFn ?ROW1 ?ROW2)) 2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Hole) (instance ?ROW2 SelfConnectedObject)) (=> (hole ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 1) Hole))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Hole) (instance ?ROW2 SelfConnectedObject)) (=> (hole ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 2) SelfConnectedObject))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Human) (instance ?ROW2 Human)) (=> (legalRelation ?ROW1 ?ROW2) (equal (ListLengthFn (ListFn ?ROW1 ?ROW2)) 2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Human) (instance ?ROW2 Human)) (=> (legalRelation ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 1) Human))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Human) (instance ?ROW2 Human)) (=> (legalRelation ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 2) Human))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Human) (instance ?ROW2 Human)) (=> (spouse ?ROW1 ?ROW2) (equal (ListLengthFn (ListFn ?ROW1 ?ROW2)) 2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Human) (instance ?ROW2 Human)) (=> (spouse ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 1) Human))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Human) (instance ?ROW2 Human)) (=> (spouse ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 2) Human))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Human) (instance ?ROW2 Human)) (=> (spouse ?ROW1 ?ROW2) (legalRelation ?ROW1 ?ROW2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Human) (instance ?ROW2 Nation)) (=> (citizen ?ROW1 ?ROW2) (equal (ListLengthFn (ListFn ?ROW1 ?ROW2)) 2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Human) (instance ?ROW2 Nation)) (=> (citizen ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 1) Human))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Human) (instance ?ROW2 Nation)) (=> (citizen ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 2) Nation))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Human) (instance ?ROW2 PermanentResidence)) (=> (home ?ROW1 ?ROW2) (equal (ListLengthFn (ListFn ?ROW1 ?ROW2)) 2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Human) (instance ?ROW2 PermanentResidence)) (=> (home ?ROW1 ?ROW2) (inhabits ?ROW1 ?ROW2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Human) (instance ?ROW2 PermanentResidence)) (=> (home ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 1) Human))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Human) (instance ?ROW2 PermanentResidence)) (=> (home ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 2) PermanentResidence))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Human) (instance ?ROW2 TemporaryResidence)) (=> (stays ?ROW1 ?ROW2) (equal (ListLengthFn (ListFn ?ROW1 ?ROW2)) 2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Human) (instance ?ROW2 TemporaryResidence)) (=> (stays ?ROW1 ?ROW2) (inhabits ?ROW1 ?ROW2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Human) (instance ?ROW2 TemporaryResidence)) (=> (stays ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 1) Human))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Human) (instance ?ROW2 TemporaryResidence)) (=> (stays ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 2) TemporaryResidence))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 LinguisticExpression) (instance ?ROW2 Language)) (=> (expressedInLanguage ?ROW1 ?ROW2) (equal (ListLengthFn (ListFn ?ROW1 ?ROW2)) 2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 LinguisticExpression) (instance ?ROW2 Language)) (=> (expressedInLanguage ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 1) LinguisticExpression))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 LinguisticExpression) (instance ?ROW2 Language)) (=> (expressedInLanguage ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 2) Language))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 List) (instance ?ROW2 List)) (=> (identicalListItems ?ROW1 ?ROW2) (equal (ListLengthFn (ListFn ?ROW1 ?ROW2)) 2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 List) (instance ?ROW2 List)) (=> (identicalListItems ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 1) List))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 List) (instance ?ROW2 List)) (=> (identicalListItems ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 2) List))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 List) (instance ?ROW2 List)) (=> (initialList ?ROW1 ?ROW2) (equal (ListLengthFn (ListFn ?ROW1 ?ROW2)) 2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 List) (instance ?ROW2 List)) (=> (initialList ?ROW1 ?ROW2) (subList ?ROW1 ?ROW2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 List) (instance ?ROW2 List)) (=> (subList ?ROW1 ?ROW2) (equal (ListLengthFn (ListFn ?ROW1 ?ROW2)) 2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 List) (instance ?ROW2 List)) (=> (subList ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 1) List))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 List) (instance ?ROW2 List)) (=> (subList ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 2) List))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 List) (instance ?ROW2 RealNumber)) (=> (average ?ROW1 ?ROW2) (equal (ListLengthFn (ListFn ?ROW1 ?ROW2)) 2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 List) (instance ?ROW2 RealNumber)) (=> (average ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 1) List))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 List) (instance ?ROW2 RealNumber)) (=> (average ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 2) RealNumber))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Man) (instance ?ROW2 Human)) (=> (brother ?ROW1 ?ROW2) (equal (ListLengthFn (ListFn ?ROW1 ?ROW2)) 2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Man) (instance ?ROW2 Human)) (=> (brother ?ROW1 ?ROW2) (familyRelation ?ROW1 ?ROW2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Man) (instance ?ROW2 Human)) (=> (brother ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 1) Man))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Man) (instance ?ROW2 Human)) (=> (brother ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 2) Human))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Man) (instance ?ROW2 Human)) (=> (brother ?ROW1 ?ROW2) (sibling ?ROW1 ?ROW2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Man) (instance ?ROW2 Human)) (=> (son ?ROW1 ?ROW2) (ancestor ?ROW1 ?ROW2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Man) (instance ?ROW2 Human)) (=> (son ?ROW1 ?ROW2) (equal (ListLengthFn (ListFn ?ROW1 ?ROW2)) 2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Man) (instance ?ROW2 Human)) (=> (son ?ROW1 ?ROW2) (familyRelation ?ROW1 ?ROW2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Man) (instance ?ROW2 Human)) (=> (son ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 1) Man))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Man) (instance ?ROW2 Human)) (=> (son ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 2) Human))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Man) (instance ?ROW2 Human)) (=> (son ?ROW1 ?ROW2) (parent ?ROW1 ?ROW2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Man) (instance ?ROW2 Woman)) (=> (husband ?ROW1 ?ROW2) (equal (ListLengthFn (ListFn ?ROW1 ?ROW2)) 2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Man) (instance ?ROW2 Woman)) (=> (husband ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 1) Man))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Man) (instance ?ROW2 Woman)) (=> (husband ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 2) Woman))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Man) (instance ?ROW2 Woman)) (=> (husband ?ROW1 ?ROW2) (legalRelation ?ROW1 ?ROW2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Man) (instance ?ROW2 Woman)) (=> (husband ?ROW1 ?ROW2) (spouse ?ROW1 ?ROW2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Motion) (instance ?ROW2 Object)) (=> (path ?ROW1 ?ROW2) (equal (ListLengthFn (ListFn ?ROW1 ?ROW2)) 2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Motion) (instance ?ROW2 Object)) (=> (path ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 1) Motion))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Motion) (instance ?ROW2 Object)) (=> (path ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 2) Object))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Object) (instance ?ROW2 Agent)) (=> (exploits ?ROW1 ?ROW2) (equal (ListLengthFn (ListFn ?ROW1 ?ROW2)) 2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Object) (instance ?ROW2 Agent)) (=> (exploits ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 1) Object))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Object) (instance ?ROW2 Agent)) (=> (exploits ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 2) Agent))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Object) (instance ?ROW2 Agent)) (=> (uses ?ROW1 ?ROW2) (equal (ListLengthFn (ListFn ?ROW1 ?ROW2)) 2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Object) (instance ?ROW2 Agent)) (=> (uses ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 1) Object))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Object) (instance ?ROW2 Agent)) (=> (uses ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 2) Agent))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Object) (instance ?ROW2 Attribute)) (=> (attribute ?ROW1 ?ROW2) (equal (ListLengthFn (ListFn ?ROW1 ?ROW2)) 2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Object) (instance ?ROW2 Attribute)) (=> (attribute ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 1) Object))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Object) (instance ?ROW2 Attribute)) (=> (attribute ?ROW1 ?ROW2) (property ?ROW1 ?ROW2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Object) (instance ?ROW2 CurrencyMeasure)) (=> (monetaryValue ?ROW1 ?ROW2) (measure ?ROW1 ?ROW2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Object) (instance ?ROW2 DirectionalAttribute)) (=> (faces ?ROW1 ?ROW2) (equal (ListLengthFn (ListFn ?ROW1 ?ROW2)) 2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Object) (instance ?ROW2 DirectionalAttribute)) (=> (faces ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 1) Object))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Object) (instance ?ROW2 DirectionalAttribute)) (=> (faces ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 2) DirectionalAttribute))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Object) (instance ?ROW2 Hole)) (=> (completelyFills ?ROW1 ?ROW2) (partiallyFills ?ROW1 ?ROW2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Object) (instance ?ROW2 Hole)) (=> (fills ?ROW1 ?ROW2) (completelyFills ?ROW1 ?ROW2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Object) (instance ?ROW2 Hole)) (=> (fills ?ROW1 ?ROW2) (equal (ListLengthFn (ListFn ?ROW1 ?ROW2)) 2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Object) (instance ?ROW2 Hole)) (=> (fills ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 1) Object))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Object) (instance ?ROW2 Hole)) (=> (fills ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 2) Hole))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Object) (instance ?ROW2 Hole)) (=> (fills ?ROW1 ?ROW2) (located ?ROW1 ?ROW2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Object) (instance ?ROW2 Hole)) (=> (fills ?ROW1 ?ROW2) (partiallyFills ?ROW1 ?ROW2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Object) (instance ?ROW2 Hole)) (=> (fills ?ROW1 ?ROW2) (partlyLocated ?ROW1 ?ROW2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Object) (instance ?ROW2 Hole)) (=> (fills ?ROW1 ?ROW2) (properlyFills ?ROW1 ?ROW2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Object) (instance ?ROW2 Hole)) (=> (partiallyFills ?ROW1 ?ROW2) (equal (ListLengthFn (ListFn ?ROW1 ?ROW2)) 2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Object) (instance ?ROW2 Hole)) (=> (partiallyFills ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 1) Object))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Object) (instance ?ROW2 Hole)) (=> (partiallyFills ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 2) Hole))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Object) (instance ?ROW2 Hole)) (=> (partiallyFills ?ROW1 ?ROW2) (located ?ROW1 ?ROW2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Object) (instance ?ROW2 Hole)) (=> (partiallyFills ?ROW1 ?ROW2) (partlyLocated ?ROW1 ?ROW2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Object) (instance ?ROW2 Hole)) (=> (properlyFills ?ROW1 ?ROW2) (equal (ListLengthFn (ListFn ?ROW1 ?ROW2)) 2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Object) (instance ?ROW2 Hole)) (=> (properlyFills ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 1) Object))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Object) (instance ?ROW2 Hole)) (=> (properlyFills ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 2) Hole))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Object) (instance ?ROW2 Hole)) (=> (properlyFills ?ROW1 ?ROW2) (located ?ROW1 ?ROW2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Object) (instance ?ROW2 Hole)) (=> (properlyFills ?ROW1 ?ROW2) (partiallyFills ?ROW1 ?ROW2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Object) (instance ?ROW2 Hole)) (=> (properlyFills ?ROW1 ?ROW2) (partlyLocated ?ROW1 ?ROW2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Object) (instance ?ROW2 LengthMeasure)) (=> (diameter ?ROW1 ?ROW2) (equal (ListLengthFn (ListFn ?ROW1 ?ROW2)) 2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Object) (instance ?ROW2 LengthMeasure)) (=> (diameter ?ROW1 ?ROW2) (length ?ROW1 ?ROW2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Object) (instance ?ROW2 LengthMeasure)) (=> (diameter ?ROW1 ?ROW2) (measure ?ROW1 ?ROW2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Object) (instance ?ROW2 LengthMeasure)) (=> (diameter ?ROW1 ?ROW2) (width ?ROW1 ?ROW2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Object) (instance ?ROW2 LengthMeasure)) (=> (length ?ROW1 ?ROW2) (equal (ListLengthFn (ListFn ?ROW1 ?ROW2)) 2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Object) (instance ?ROW2 LengthMeasure)) (=> (length ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 2) LengthMeasure))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Object) (instance ?ROW2 LengthMeasure)) (=> (length ?ROW1 ?ROW2) (measure ?ROW1 ?ROW2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Object) (instance ?ROW2 LengthMeasure)) (=> (width ?ROW1 ?ROW2) (equal (ListLengthFn (ListFn ?ROW1 ?ROW2)) 2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Object) (instance ?ROW2 LengthMeasure)) (=> (width ?ROW1 ?ROW2) (length ?ROW1 ?ROW2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Object) (instance ?ROW2 LengthMeasure)) (=> (width ?ROW1 ?ROW2) (measure ?ROW1 ?ROW2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Object) (instance ?ROW2 Object)) (=> (connected ?ROW1 ?ROW2) (equal (ListLengthFn (ListFn ?ROW1 ?ROW2)) 2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Object) (instance ?ROW2 Object)) (=> (connected ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 1) Object))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Object) (instance ?ROW2 Object)) (=> (connected ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 2) Object))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Object) (instance ?ROW2 Object)) (=> (copy ?ROW1 ?ROW2) (equal (ListLengthFn (ListFn ?ROW1 ?ROW2)) 2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Object) (instance ?ROW2 Object)) (=> (copy ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 1) Object))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Object) (instance ?ROW2 Object)) (=> (copy ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 2) Object))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Object) (instance ?ROW2 Object)) (=> (crosses ?ROW1 ?ROW2) (equal (ListLengthFn (ListFn ?ROW1 ?ROW2)) 2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Object) (instance ?ROW2 Object)) (=> (crosses ?ROW1 ?ROW2) (traverses ?ROW1 ?ROW2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Object) (instance ?ROW2 Object)) (=> (interiorPart ?ROW1 ?ROW2) (equal (ListLengthFn (ListFn ?ROW1 ?ROW2)) 2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Object) (instance ?ROW2 Object)) (=> (interiorPart ?ROW1 ?ROW2) (part ?ROW1 ?ROW2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Object) (instance ?ROW2 Object)) (=> (larger ?ROW1 ?ROW2) (equal (ListLengthFn (ListFn ?ROW1 ?ROW2)) 2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Object) (instance ?ROW2 Object)) (=> (larger ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 1) Object))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Object) (instance ?ROW2 Object)) (=> (larger ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 2) Object))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Object) (instance ?ROW2 Object)) (=> (meetsSpatially ?ROW1 ?ROW2) (connected ?ROW1 ?ROW2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Object) (instance ?ROW2 Object)) (=> (meetsSpatially ?ROW1 ?ROW2) (equal (ListLengthFn (ListFn ?ROW1 ?ROW2)) 2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Object) (instance ?ROW2 Object)) (=> (overlapsPartially ?ROW1 ?ROW2) (connected ?ROW1 ?ROW2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Object) (instance ?ROW2 Object)) (=> (overlapsPartially ?ROW1 ?ROW2) (equal (ListLengthFn (ListFn ?ROW1 ?ROW2)) 2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Object) (instance ?ROW2 Object)) (=> (overlapsPartially ?ROW1 ?ROW2) (overlapsSpatially ?ROW1 ?ROW2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Object) (instance ?ROW2 Object)) (=> (overlapsSpatially ?ROW1 ?ROW2) (connected ?ROW1 ?ROW2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Object) (instance ?ROW2 Object)) (=> (overlapsSpatially ?ROW1 ?ROW2) (equal (ListLengthFn (ListFn ?ROW1 ?ROW2)) 2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Object) (instance ?ROW2 Object)) (=> (part ?ROW1 ?ROW2) (equal (ListLengthFn (ListFn ?ROW1 ?ROW2)) 2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Object) (instance ?ROW2 Object)) (=> (part ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 1) Object))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Object) (instance ?ROW2 Object)) (=> (part ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 2) Object))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Object) (instance ?ROW2 Object)) (=> (penetrates ?ROW1 ?ROW2) (connected ?ROW1 ?ROW2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Object) (instance ?ROW2 Object)) (=> (penetrates ?ROW1 ?ROW2) (equal (ListLengthFn (ListFn ?ROW1 ?ROW2)) 2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Object) (instance ?ROW2 Object)) (=> (penetrates ?ROW1 ?ROW2) (meetsSpatially ?ROW1 ?ROW2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Object) (instance ?ROW2 Object)) (=> (penetrates ?ROW1 ?ROW2) (traverses ?ROW1 ?ROW2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Object) (instance ?ROW2 Object)) (=> (properPart ?ROW1 ?ROW2) (equal (ListLengthFn (ListFn ?ROW1 ?ROW2)) 2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Object) (instance ?ROW2 Object)) (=> (properPart ?ROW1 ?ROW2) (part ?ROW1 ?ROW2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Object) (instance ?ROW2 Object)) (=> (smaller ?ROW1 ?ROW2) (equal (ListLengthFn (ListFn ?ROW1 ?ROW2)) 2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Object) (instance ?ROW2 Object)) (=> (smaller ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 1) Object))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Object) (instance ?ROW2 Object)) (=> (smaller ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 2) Object))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Object) (instance ?ROW2 Object)) (=> (superficialPart ?ROW1 ?ROW2) (equal (ListLengthFn (ListFn ?ROW1 ?ROW2)) 2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Object) (instance ?ROW2 Object)) (=> (superficialPart ?ROW1 ?ROW2) (part ?ROW1 ?ROW2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Object) (instance ?ROW2 Object)) (=> (traverses ?ROW1 ?ROW2) (equal (ListLengthFn (ListFn ?ROW1 ?ROW2)) 2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Object) (instance ?ROW2 Object)) (=> (traverses ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 1) Object))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Object) (instance ?ROW2 Object)) (=> (traverses ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 2) Object))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Object) (instance ?ROW2 PhysicalQuantity)) (=> (measure ?ROW1 ?ROW2) (equal (ListLengthFn (ListFn ?ROW1 ?ROW2)) 2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Object) (instance ?ROW2 PhysicalQuantity)) (=> (measure ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 1) Object))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Object) (instance ?ROW2 PhysicalQuantity)) (=> (measure ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 2) PhysicalQuantity))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Object) (instance ?ROW2 TimeDuration)) (=> (age ?ROW1 ?ROW2) (equal (ListLengthFn (ListFn ?ROW1 ?ROW2)) 2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Object) (instance ?ROW2 TimeDuration)) (=> (age ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 2) TimeDuration))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Object) (instance ?ROW2 TimeDuration)) (=> (age ?ROW1 ?ROW2) (measure ?ROW1 ?ROW2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 OneDimensionalFigure) (instance ?ROW2 LengthMeasure)) (=> (lineMeasure ?ROW1 ?ROW2) (equal (ListLengthFn (ListFn ?ROW1 ?ROW2)) 2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 OneDimensionalFigure) (instance ?ROW2 LengthMeasure)) (=> (lineMeasure ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 1) OneDimensionalFigure))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 OneDimensionalFigure) (instance ?ROW2 LengthMeasure)) (=> (lineMeasure ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 2) LengthMeasure))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 OneDimensionalFigure) (instance ?ROW2 OneDimensionalFigure)) (=> (parallel ?ROW1 ?ROW2) (equal (ListLengthFn (ListFn ?ROW1 ?ROW2)) 2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 OneDimensionalFigure) (instance ?ROW2 OneDimensionalFigure)) (=> (parallel ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 1) OneDimensionalFigure))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 OneDimensionalFigure) (instance ?ROW2 OneDimensionalFigure)) (=> (parallel ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 2) OneDimensionalFigure))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 OrganicObject) (instance ?ROW2 DevelopmentalAttribute)) (=> (developmentalForm ?ROW1 ?ROW2) (attribute ?ROW1 ?ROW2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 OrganicObject) (instance ?ROW2 DevelopmentalAttribute)) (=> (developmentalForm ?ROW1 ?ROW2) (equal (ListLengthFn (ListFn ?ROW1 ?ROW2)) 2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 OrganicObject) (instance ?ROW2 DevelopmentalAttribute)) (=> (developmentalForm ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 1) OrganicObject))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 OrganicObject) (instance ?ROW2 DevelopmentalAttribute)) (=> (developmentalForm ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 2) DevelopmentalAttribute))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 OrganicObject) (instance ?ROW2 DevelopmentalAttribute)) (=> (developmentalForm ?ROW1 ?ROW2) (property ?ROW1 ?ROW2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Organism) (instance ?ROW2 Object)) (=> (inhabits ?ROW1 ?ROW2) (equal (ListLengthFn (ListFn ?ROW1 ?ROW2)) 2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Organism) (instance ?ROW2 Object)) (=> (inhabits ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 1) Organism))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Organism) (instance ?ROW2 Object)) (=> (inhabits ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 2) Object))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Organism) (instance ?ROW2 Organism)) (=> (ancestor ?ROW1 ?ROW2) (equal (ListLengthFn (ListFn ?ROW1 ?ROW2)) 2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Organism) (instance ?ROW2 Organism)) (=> (ancestor ?ROW1 ?ROW2) (familyRelation ?ROW1 ?ROW2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Organism) (instance ?ROW2 Organism)) (=> (ancestor ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 1) Organism))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Organism) (instance ?ROW2 Organism)) (=> (ancestor ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 2) Organism))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Organism) (instance ?ROW2 Organism)) (=> (familyRelation ?ROW1 ?ROW2) (equal (ListLengthFn (ListFn ?ROW1 ?ROW2)) 2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Organism) (instance ?ROW2 Organism)) (=> (familyRelation ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 1) Organism))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Organism) (instance ?ROW2 Organism)) (=> (familyRelation ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 2) Organism))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Organism) (instance ?ROW2 Organism)) (=> (father ?ROW1 ?ROW2) (ancestor ?ROW1 ?ROW2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Organism) (instance ?ROW2 Organism)) (=> (father ?ROW1 ?ROW2) (equal (ListLengthFn (ListFn ?ROW1 ?ROW2)) 2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Organism) (instance ?ROW2 Organism)) (=> (father ?ROW1 ?ROW2) (familyRelation ?ROW1 ?ROW2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Organism) (instance ?ROW2 Organism)) (=> (father ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 1) Organism))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Organism) (instance ?ROW2 Organism)) (=> (father ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 2) Organism))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Organism) (instance ?ROW2 Organism)) (=> (father ?ROW1 ?ROW2) (parent ?ROW1 ?ROW2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Organism) (instance ?ROW2 Organism)) (=> (mother ?ROW1 ?ROW2) (ancestor ?ROW1 ?ROW2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Organism) (instance ?ROW2 Organism)) (=> (mother ?ROW1 ?ROW2) (equal (ListLengthFn (ListFn ?ROW1 ?ROW2)) 2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Organism) (instance ?ROW2 Organism)) (=> (mother ?ROW1 ?ROW2) (familyRelation ?ROW1 ?ROW2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Organism) (instance ?ROW2 Organism)) (=> (mother ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 1) Organism))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Organism) (instance ?ROW2 Organism)) (=> (mother ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 2) Organism))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Organism) (instance ?ROW2 Organism)) (=> (mother ?ROW1 ?ROW2) (parent ?ROW1 ?ROW2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Organism) (instance ?ROW2 Organism)) (=> (parent ?ROW1 ?ROW2) (ancestor ?ROW1 ?ROW2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Organism) (instance ?ROW2 Organism)) (=> (parent ?ROW1 ?ROW2) (equal (ListLengthFn (ListFn ?ROW1 ?ROW2)) 2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Organism) (instance ?ROW2 Organism)) (=> (parent ?ROW1 ?ROW2) (familyRelation ?ROW1 ?ROW2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Organism) (instance ?ROW2 Organism)) (=> (parent ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 1) Organism))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Organism) (instance ?ROW2 Organism)) (=> (parent ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 2) Organism))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Organism) (instance ?ROW2 Organism)) (=> (sibling ?ROW1 ?ROW2) (equal (ListLengthFn (ListFn ?ROW1 ?ROW2)) 2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Organism) (instance ?ROW2 Organism)) (=> (sibling ?ROW1 ?ROW2) (familyRelation ?ROW1 ?ROW2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Organism) (instance ?ROW2 Organism)) (=> (sibling ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 1) Organism))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Organism) (instance ?ROW2 Organism)) (=> (sibling ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 2) Organism))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Organization) (instance ?ROW2 CognitiveAgent)) (=> (employs ?ROW1 ?ROW2) (equal (ListLengthFn (ListFn ?ROW1 ?ROW2)) 2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Organization) (instance ?ROW2 CognitiveAgent)) (=> (employs ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 1) Organization))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Organization) (instance ?ROW2 CognitiveAgent)) (=> (employs ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 2) CognitiveAgent))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Organization) (instance ?ROW2 Organization)) (=> (subOrganization ?ROW1 ?ROW2) (equal (ListLengthFn (ListFn ?ROW1 ?ROW2)) 2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Organization) (instance ?ROW2 Organization)) (=> (subOrganization ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 1) Organization))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Organization) (instance ?ROW2 Organization)) (=> (subOrganization ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 2) Organization))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Organization) (instance ?ROW2 Organization)) (=> (subOrganization ?ROW1 ?ROW2) (subCollection ?ROW1 ?ROW2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Organization) (subclass ?ROW2 Text)) (=> (publishes ?ROW1 ?ROW2) (equal (ListLengthFn (ListFn ?ROW1 ?ROW2)) 2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Organization) (subclass ?ROW2 Text)) (=> (publishes ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 1) Organization))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Organization) (subclass ?ROW2 Text)) (=> (publishes ?ROW1 ?ROW2) (subclass (ListOrderFn (ListFn ?ROW1 ?ROW2) 2) Text))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Physical) (instance ?ROW2 CurrencyMeasure)) (=> (monetaryValue ?ROW1 ?ROW2) (equal (ListLengthFn (ListFn ?ROW1 ?ROW2)) 2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Physical) (instance ?ROW2 CurrencyMeasure)) (=> (monetaryValue ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 1) Physical))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Physical) (instance ?ROW2 CurrencyMeasure)) (=> (monetaryValue ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 2) CurrencyMeasure))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Physical) (instance ?ROW2 Day)) (=> (date ?ROW1 ?ROW2) (equal (ListLengthFn (ListFn ?ROW1 ?ROW2)) 2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Physical) (instance ?ROW2 Day)) (=> (date ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 1) Physical))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Physical) (instance ?ROW2 Day)) (=> (date ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 2) Day))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Physical) (instance ?ROW2 Day)) (=> (date ?ROW1 ?ROW2) (time ?ROW1 ?ROW2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Physical) (instance ?ROW2 Formula)) (=> (hasPurpose ?ROW1 ?ROW2) (equal (ListLengthFn (ListFn ?ROW1 ?ROW2)) 2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Physical) (instance ?ROW2 Formula)) (=> (hasPurpose ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 1) Physical))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Physical) (instance ?ROW2 Formula)) (=> (hasPurpose ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 2) Formula))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Physical) (instance ?ROW2 Object)) (=> (completelyFills ?ROW1 ?ROW2) (equal (ListLengthFn (ListFn ?ROW1 ?ROW2)) 2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Physical) (instance ?ROW2 Object)) (=> (completelyFills ?ROW1 ?ROW2) (located ?ROW1 ?ROW2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Physical) (instance ?ROW2 Object)) (=> (completelyFills ?ROW1 ?ROW2) (partlyLocated ?ROW1 ?ROW2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Physical) (instance ?ROW2 Object)) (=> (exactlyLocated ?ROW1 ?ROW2) (equal (ListLengthFn (ListFn ?ROW1 ?ROW2)) 2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Physical) (instance ?ROW2 Object)) (=> (exactlyLocated ?ROW1 ?ROW2) (located ?ROW1 ?ROW2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Physical) (instance ?ROW2 Object)) (=> (exactlyLocated ?ROW1 ?ROW2) (partlyLocated ?ROW1 ?ROW2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Physical) (instance ?ROW2 Object)) (=> (located ?ROW1 ?ROW2) (equal (ListLengthFn (ListFn ?ROW1 ?ROW2)) 2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Physical) (instance ?ROW2 Object)) (=> (located ?ROW1 ?ROW2) (partlyLocated ?ROW1 ?ROW2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Physical) (instance ?ROW2 Object)) (=> (partlyLocated ?ROW1 ?ROW2) (equal (ListLengthFn (ListFn ?ROW1 ?ROW2)) 2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Physical) (instance ?ROW2 Object)) (=> (partlyLocated ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 1) Physical))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Physical) (instance ?ROW2 Object)) (=> (partlyLocated ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 2) Object))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Physical) (instance ?ROW2 Physical)) (=> (cooccur ?ROW1 ?ROW2) (equal (ListLengthFn (ListFn ?ROW1 ?ROW2)) 2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Physical) (instance ?ROW2 Physical)) (=> (cooccur ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 1) Physical))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Physical) (instance ?ROW2 Physical)) (=> (cooccur ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 2) Physical))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Physical) (instance ?ROW2 TimePosition)) (=> (time ?ROW1 ?ROW2) (equal (ListLengthFn (ListFn ?ROW1 ?ROW2)) 2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Physical) (instance ?ROW2 TimePosition)) (=> (time ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 1) Physical))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Physical) (instance ?ROW2 TimePosition)) (=> (time ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 2) TimePosition))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Plan) (instance ?ROW2 Plan)) (=> (subPlan ?ROW1 ?ROW2) (equal (ListLengthFn (ListFn ?ROW1 ?ROW2)) 2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Plan) (instance ?ROW2 Plan)) (=> (subPlan ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 1) Plan))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Plan) (instance ?ROW2 Plan)) (=> (subPlan ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 2) Plan))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Plan) (instance ?ROW2 Plan)) (=> (subPlan ?ROW1 ?ROW2) (subProposition ?ROW1 ?ROW2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Process) (instance ?ROW2 Agent)) (=> (agent ?ROW1 ?ROW2) (equal (ListLengthFn (ListFn ?ROW1 ?ROW2)) 2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Process) (instance ?ROW2 Agent)) (=> (agent ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 1) Process))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Process) (instance ?ROW2 Agent)) (=> (agent ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 2) Agent))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Process) (instance ?ROW2 Agent)) (=> (experiencer ?ROW1 ?ROW2) (equal (ListLengthFn (ListFn ?ROW1 ?ROW2)) 2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Process) (instance ?ROW2 Agent)) (=> (experiencer ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 1) Process))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Process) (instance ?ROW2 Agent)) (=> (experiencer ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 2) Agent))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Process) (instance ?ROW2 Attribute)) (=> (manner ?ROW1 ?ROW2) (equal (ListLengthFn (ListFn ?ROW1 ?ROW2)) 2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Process) (instance ?ROW2 Attribute)) (=> (manner ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 1) Process))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Process) (instance ?ROW2 Attribute)) (=> (manner ?ROW1 ?ROW2) (property ?ROW1 ?ROW2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Process) (instance ?ROW2 DirectionalAttribute)) (=> (direction ?ROW1 ?ROW2) (equal (ListLengthFn (ListFn ?ROW1 ?ROW2)) 2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Process) (instance ?ROW2 DirectionalAttribute)) (=> (direction ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 1) Process))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Process) (instance ?ROW2 DirectionalAttribute)) (=> (direction ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 2) DirectionalAttribute))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Process) (instance ?ROW2 Object)) (=> (instrument ?ROW1 ?ROW2) (equal (ListLengthFn (ListFn ?ROW1 ?ROW2)) 2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Process) (instance ?ROW2 Object)) (=> (instrument ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 1) Process))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Process) (instance ?ROW2 Object)) (=> (instrument ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 2) Object))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Process) (instance ?ROW2 Object)) (=> (instrument ?ROW1 ?ROW2) (patient ?ROW1 ?ROW2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Process) (instance ?ROW2 Object)) (=> (origin ?ROW1 ?ROW2) (equal (ListLengthFn (ListFn ?ROW1 ?ROW2)) 2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Process) (instance ?ROW2 Object)) (=> (origin ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 1) Process))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Process) (instance ?ROW2 Object)) (=> (origin ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 2) Object))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Process) (instance ?ROW2 Object)) (=> (origin ?ROW1 ?ROW2) (involvedInEvent ?ROW1 ?ROW2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Process) (instance ?ROW2 Object)) (=> (resource ?ROW1 ?ROW2) (equal (ListLengthFn (ListFn ?ROW1 ?ROW2)) 2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Process) (instance ?ROW2 Object)) (=> (resource ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 1) Process))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Process) (instance ?ROW2 Object)) (=> (resource ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 2) Object))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Process) (instance ?ROW2 Object)) (=> (resource ?ROW1 ?ROW2) (patient ?ROW1 ?ROW2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Process) (instance ?ROW2 Process)) (=> (causes ?ROW1 ?ROW2) (equal (ListLengthFn (ListFn ?ROW1 ?ROW2)) 2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Process) (instance ?ROW2 Process)) (=> (causes ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 1) Process))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Process) (instance ?ROW2 Process)) (=> (causes ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 2) Process))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Process) (instance ?ROW2 Process)) (=> (subProcess ?ROW1 ?ROW2) (equal (ListLengthFn (ListFn ?ROW1 ?ROW2)) 2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Process) (instance ?ROW2 Process)) (=> (subProcess ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 1) Process))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Process) (instance ?ROW2 Process)) (=> (subProcess ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 2) Process))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Process) (instance ?ROW2 Proposition)) (=> (realization ?ROW1 ?ROW2) (equal (ListLengthFn (ListFn ?ROW1 ?ROW2)) 2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Process) (instance ?ROW2 Proposition)) (=> (realization ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 1) Process))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Process) (instance ?ROW2 Proposition)) (=> (realization ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 2) Proposition))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Process) (instance ?ROW2 Proposition)) (=> (realization ?ROW1 ?ROW2) (refers ?ROW1 ?ROW2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Process) (instance ?ROW2 Proposition)) (=> (realization ?ROW1 ?ROW2) (represents ?ROW1 ?ROW2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Proposition) (instance ?ROW2 Proposition)) (=> (consistent ?ROW1 ?ROW2) (equal (ListLengthFn (ListFn ?ROW1 ?ROW2)) 2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Proposition) (instance ?ROW2 Proposition)) (=> (consistent ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 1) Proposition))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Proposition) (instance ?ROW2 Proposition)) (=> (consistent ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 2) Proposition))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Proposition) (instance ?ROW2 Proposition)) (=> (subProposition ?ROW1 ?ROW2) (equal (ListLengthFn (ListFn ?ROW1 ?ROW2)) 2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Proposition) (instance ?ROW2 Proposition)) (=> (subProposition ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 1) Proposition))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Proposition) (instance ?ROW2 Proposition)) (=> (subProposition ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 2) Proposition))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Quantity) (instance ?ROW2 Quantity)) (=> (greaterThan ?ROW1 ?ROW2) (equal (ListLengthFn (ListFn ?ROW1 ?ROW2)) 2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Quantity) (instance ?ROW2 Quantity)) (=> (greaterThan ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 1) Quantity))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Quantity) (instance ?ROW2 Quantity)) (=> (greaterThan ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 2) Quantity))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Quantity) (instance ?ROW2 Quantity)) (=> (greaterThanOrEqualTo ?ROW1 ?ROW2) (equal (ListLengthFn (ListFn ?ROW1 ?ROW2)) 2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Quantity) (instance ?ROW2 Quantity)) (=> (greaterThanOrEqualTo ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 1) Quantity))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Quantity) (instance ?ROW2 Quantity)) (=> (greaterThanOrEqualTo ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 2) Quantity))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Quantity) (instance ?ROW2 Quantity)) (=> (lessThan ?ROW1 ?ROW2) (equal (ListLengthFn (ListFn ?ROW1 ?ROW2)) 2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Quantity) (instance ?ROW2 Quantity)) (=> (lessThan ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 1) Quantity))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Quantity) (instance ?ROW2 Quantity)) (=> (lessThan ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 2) Quantity))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Quantity) (instance ?ROW2 Quantity)) (=> (lessThanOrEqualTo ?ROW1 ?ROW2) (equal (ListLengthFn (ListFn ?ROW1 ?ROW2)) 2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Quantity) (instance ?ROW2 Quantity)) (=> (lessThanOrEqualTo ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 1) Quantity))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Quantity) (instance ?ROW2 Quantity)) (=> (lessThanOrEqualTo ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 2) Quantity))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Relation) (instance ?ROW2 PositiveInteger)) (=> (valence ?ROW1 ?ROW2) (equal (ListLengthFn (ListFn ?ROW1 ?ROW2)) 2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Relation) (instance ?ROW2 PositiveInteger)) (=> (valence ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 1) Relation))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Relation) (instance ?ROW2 PositiveInteger)) (=> (valence ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 2) PositiveInteger))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Relation) (instance ?ROW2 Relation)) (=> (disjointRelation ?ROW1 ?ROW2) (equal (ListLengthFn (ListFn ?ROW1 ?ROW2)) 2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Relation) (instance ?ROW2 Relation)) (=> (disjointRelation ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 1) Relation))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Relation) (instance ?ROW2 Relation)) (=> (disjointRelation ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 2) Relation))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Relation) (instance ?ROW2 Relation)) (=> (subrelation ?ROW1 ?ROW2) (equal (ListLengthFn (ListFn ?ROW1 ?ROW2)) 2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Relation) (instance ?ROW2 Relation)) (=> (subrelation ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 1) Relation))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Relation) (instance ?ROW2 Relation)) (=> (subrelation ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 2) Relation))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 SelfConnectedObject) (instance ?ROW2 Collection)) (=> (member ?ROW1 ?ROW2) (equal (ListLengthFn (ListFn ?ROW1 ?ROW2)) 2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 SelfConnectedObject) (instance ?ROW2 Collection)) (=> (member ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 1) SelfConnectedObject))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 SelfConnectedObject) (instance ?ROW2 Collection)) (=> (member ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 2) Collection))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 SelfConnectedObject) (instance ?ROW2 Collection)) (=> (member ?ROW1 ?ROW2) (part ?ROW1 ?ROW2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 SelfConnectedObject) (instance ?ROW2 LengthMeasure)) (=> (height ?ROW1 ?ROW2) (equal (ListLengthFn (ListFn ?ROW1 ?ROW2)) 2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 SelfConnectedObject) (instance ?ROW2 LengthMeasure)) (=> (height ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 1) SelfConnectedObject))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 SelfConnectedObject) (instance ?ROW2 LengthMeasure)) (=> (height ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 2) LengthMeasure))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 SelfConnectedObject) (instance ?ROW2 LengthMeasure)) (=> (height ?ROW1 ?ROW2) (length ?ROW1 ?ROW2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 SelfConnectedObject) (instance ?ROW2 LengthMeasure)) (=> (height ?ROW1 ?ROW2) (measure ?ROW1 ?ROW2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 SelfConnectedObject) (instance ?ROW2 MassMeasure)) (=> (weight ?ROW1 ?ROW2) (equal (ListLengthFn (ListFn ?ROW1 ?ROW2)) 2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 SelfConnectedObject) (instance ?ROW2 MassMeasure)) (=> (weight ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 1) SelfConnectedObject))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 SelfConnectedObject) (instance ?ROW2 MassMeasure)) (=> (weight ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 2) MassMeasure))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 SelfConnectedObject) (instance ?ROW2 MassMeasure)) (=> (weight ?ROW1 ?ROW2) (measure ?ROW1 ?ROW2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 SelfConnectedObject) (instance ?ROW2 Object)) (=> (contains ?ROW1 ?ROW2) (equal (ListLengthFn (ListFn ?ROW1 ?ROW2)) 2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 SelfConnectedObject) (instance ?ROW2 Object)) (=> (contains ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 1) SelfConnectedObject))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 SelfConnectedObject) (instance ?ROW2 Object)) (=> (contains ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 2) Object))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 SelfConnectedObject) (instance ?ROW2 Object)) (=> (contains ?ROW1 ?ROW2) (partlyLocated ?ROW1 ?ROW2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 SelfConnectedObject) (instance ?ROW2 SelfConnectedObject)) (=> (bottom ?ROW1 ?ROW2) (equal (ListLengthFn (ListFn ?ROW1 ?ROW2)) 2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 SelfConnectedObject) (instance ?ROW2 SelfConnectedObject)) (=> (bottom ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 1) SelfConnectedObject))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 SelfConnectedObject) (instance ?ROW2 SelfConnectedObject)) (=> (bottom ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 2) SelfConnectedObject))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 SelfConnectedObject) (instance ?ROW2 SelfConnectedObject)) (=> (bottom ?ROW1 ?ROW2) (part ?ROW1 ?ROW2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 SelfConnectedObject) (instance ?ROW2 SelfConnectedObject)) (=> (bottom ?ROW1 ?ROW2) (superficialPart ?ROW1 ?ROW2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 SelfConnectedObject) (instance ?ROW2 SelfConnectedObject)) (=> (side ?ROW1 ?ROW2) (equal (ListLengthFn (ListFn ?ROW1 ?ROW2)) 2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 SelfConnectedObject) (instance ?ROW2 SelfConnectedObject)) (=> (side ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 1) SelfConnectedObject))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 SelfConnectedObject) (instance ?ROW2 SelfConnectedObject)) (=> (side ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 2) SelfConnectedObject))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 SelfConnectedObject) (instance ?ROW2 SelfConnectedObject)) (=> (side ?ROW1 ?ROW2) (part ?ROW1 ?ROW2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 SelfConnectedObject) (instance ?ROW2 SelfConnectedObject)) (=> (side ?ROW1 ?ROW2) (superficialPart ?ROW1 ?ROW2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 SelfConnectedObject) (instance ?ROW2 SelfConnectedObject)) (=> (surface ?ROW1 ?ROW2) (equal (ListLengthFn (ListFn ?ROW1 ?ROW2)) 2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 SelfConnectedObject) (instance ?ROW2 SelfConnectedObject)) (=> (surface ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 1) SelfConnectedObject))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 SelfConnectedObject) (instance ?ROW2 SelfConnectedObject)) (=> (surface ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 2) SelfConnectedObject))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 SelfConnectedObject) (instance ?ROW2 SelfConnectedObject)) (=> (surface ?ROW1 ?ROW2) (part ?ROW1 ?ROW2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 SelfConnectedObject) (instance ?ROW2 SelfConnectedObject)) (=> (surface ?ROW1 ?ROW2) (superficialPart ?ROW1 ?ROW2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 SelfConnectedObject) (instance ?ROW2 SelfConnectedObject)) (=> (top ?ROW1 ?ROW2) (equal (ListLengthFn (ListFn ?ROW1 ?ROW2)) 2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 SelfConnectedObject) (instance ?ROW2 SelfConnectedObject)) (=> (top ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 1) SelfConnectedObject))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 SelfConnectedObject) (instance ?ROW2 SelfConnectedObject)) (=> (top ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 2) SelfConnectedObject))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 SelfConnectedObject) (instance ?ROW2 SelfConnectedObject)) (=> (top ?ROW1 ?ROW2) (part ?ROW1 ?ROW2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 SelfConnectedObject) (instance ?ROW2 SelfConnectedObject)) (=> (top ?ROW1 ?ROW2) (superficialPart ?ROW1 ?ROW2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Sentence) (instance ?ROW2 TruthValue)) (=> (truth ?ROW1 ?ROW2) (equal (ListLengthFn (ListFn ?ROW1 ?ROW2)) 2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Sentence) (instance ?ROW2 TruthValue)) (=> (truth ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 1) Sentence))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Sentence) (instance ?ROW2 TruthValue)) (=> (truth ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 2) TruthValue))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Sentence) (instance ?ROW2 TruthValue)) (=> (truth ?ROW1 ?ROW2) (property ?ROW1 ?ROW2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Set) (instance ?ROW2 Set)) (=> (subset ?ROW1 ?ROW2) (equal (ListLengthFn (ListFn ?ROW1 ?ROW2)) 2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Set) (instance ?ROW2 Set)) (=> (subset ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 1) Set))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Set) (instance ?ROW2 Set)) (=> (subset ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 2) Set))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Set) (instance ?ROW2 Set)) (=> (subset ?ROW1 ?ROW2) (subclass ?ROW1 ?ROW2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 SetOrClass) (instance ?ROW2 SetOrClass)) (=> (disjoint ?ROW1 ?ROW2) (equal (ListLengthFn (ListFn ?ROW1 ?ROW2)) 2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 SetOrClass) (instance ?ROW2 SetOrClass)) (=> (disjoint ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 1) SetOrClass))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 SetOrClass) (instance ?ROW2 SetOrClass)) (=> (disjoint ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 2) SetOrClass))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 SetOrClass) (instance ?ROW2 SetOrClass)) (=> (immediateSubclass ?ROW1 ?ROW2) (equal (ListLengthFn (ListFn ?ROW1 ?ROW2)) 2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 SetOrClass) (instance ?ROW2 SetOrClass)) (=> (immediateSubclass ?ROW1 ?ROW2) (subclass ?ROW1 ?ROW2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 SetOrClass) (instance ?ROW2 SetOrClass)) (=> (subclass ?ROW1 ?ROW2) (equal (ListLengthFn (ListFn ?ROW1 ?ROW2)) 2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 SetOrClass) (instance ?ROW2 SetOrClass)) (=> (subclass ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 1) SetOrClass))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 SetOrClass) (instance ?ROW2 SetOrClass)) (=> (subclass ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 2) SetOrClass))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Substance) (instance ?ROW2 Substance)) (=> (piece ?ROW1 ?ROW2) (equal (ListLengthFn (ListFn ?ROW1 ?ROW2)) 2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Substance) (instance ?ROW2 Substance)) (=> (piece ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 1) Substance))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Substance) (instance ?ROW2 Substance)) (=> (piece ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 2) Substance))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Substance) (instance ?ROW2 Substance)) (=> (piece ?ROW1 ?ROW2) (part ?ROW1 ?ROW2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 TimeInterval) (instance ?ROW2 TimeDuration)) (=> (duration ?ROW1 ?ROW2) (equal (ListLengthFn (ListFn ?ROW1 ?ROW2)) 2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 TimeInterval) (instance ?ROW2 TimeDuration)) (=> (duration ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 1) TimeInterval))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 TimeInterval) (instance ?ROW2 TimeDuration)) (=> (duration ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 2) TimeDuration))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 TimeInterval) (instance ?ROW2 TimeInterval)) (=> (during ?ROW1 ?ROW2) (equal (ListLengthFn (ListFn ?ROW1 ?ROW2)) 2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 TimeInterval) (instance ?ROW2 TimeInterval)) (=> (during ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 1) TimeInterval))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 TimeInterval) (instance ?ROW2 TimeInterval)) (=> (during ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 2) TimeInterval))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 TimeInterval) (instance ?ROW2 TimeInterval)) (=> (during ?ROW1 ?ROW2) (overlapsTemporally ?ROW1 ?ROW2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 TimeInterval) (instance ?ROW2 TimeInterval)) (=> (during ?ROW1 ?ROW2) (temporalPart ?ROW1 ?ROW2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 TimeInterval) (instance ?ROW2 TimeInterval)) (=> (earlier ?ROW1 ?ROW2) (equal (ListLengthFn (ListFn ?ROW1 ?ROW2)) 2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 TimeInterval) (instance ?ROW2 TimeInterval)) (=> (earlier ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 1) TimeInterval))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 TimeInterval) (instance ?ROW2 TimeInterval)) (=> (earlier ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 2) TimeInterval))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 TimeInterval) (instance ?ROW2 TimeInterval)) (=> (finishes ?ROW1 ?ROW2) (equal (ListLengthFn (ListFn ?ROW1 ?ROW2)) 2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 TimeInterval) (instance ?ROW2 TimeInterval)) (=> (finishes ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 1) TimeInterval))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 TimeInterval) (instance ?ROW2 TimeInterval)) (=> (finishes ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 2) TimeInterval))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 TimeInterval) (instance ?ROW2 TimeInterval)) (=> (finishes ?ROW1 ?ROW2) (temporalPart ?ROW1 ?ROW2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 TimeInterval) (instance ?ROW2 TimeInterval)) (=> (meetsTemporally ?ROW1 ?ROW2) (equal (ListLengthFn (ListFn ?ROW1 ?ROW2)) 2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 TimeInterval) (instance ?ROW2 TimeInterval)) (=> (meetsTemporally ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 1) TimeInterval))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 TimeInterval) (instance ?ROW2 TimeInterval)) (=> (meetsTemporally ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 2) TimeInterval))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 TimeInterval) (instance ?ROW2 TimeInterval)) (=> (overlapsTemporally ?ROW1 ?ROW2) (equal (ListLengthFn (ListFn ?ROW1 ?ROW2)) 2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 TimeInterval) (instance ?ROW2 TimeInterval)) (=> (overlapsTemporally ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 1) TimeInterval))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 TimeInterval) (instance ?ROW2 TimeInterval)) (=> (overlapsTemporally ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 2) TimeInterval))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 TimeInterval) (instance ?ROW2 TimeInterval)) (=> (starts ?ROW1 ?ROW2) (equal (ListLengthFn (ListFn ?ROW1 ?ROW2)) 2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 TimeInterval) (instance ?ROW2 TimeInterval)) (=> (starts ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 1) TimeInterval))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 TimeInterval) (instance ?ROW2 TimeInterval)) (=> (starts ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 2) TimeInterval))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 TimeInterval) (instance ?ROW2 TimeInterval)) (=> (starts ?ROW1 ?ROW2) (temporalPart ?ROW1 ?ROW2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 TimePoint) (instance ?ROW2 TimePoint)) (=> (before ?ROW1 ?ROW2) (beforeOrEqual ?ROW1 ?ROW2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 TimePoint) (instance ?ROW2 TimePoint)) (=> (before ?ROW1 ?ROW2) (equal (ListLengthFn (ListFn ?ROW1 ?ROW2)) 2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 TimePoint) (instance ?ROW2 TimePoint)) (=> (before ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 1) TimePoint))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 TimePoint) (instance ?ROW2 TimePoint)) (=> (before ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 2) TimePoint))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 TimePoint) (instance ?ROW2 TimePoint)) (=> (beforeOrEqual ?ROW1 ?ROW2) (equal (ListLengthFn (ListFn ?ROW1 ?ROW2)) 2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 TimePoint) (instance ?ROW2 TimePoint)) (=> (beforeOrEqual ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 1) TimePoint))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 TimePoint) (instance ?ROW2 TimePoint)) (=> (beforeOrEqual ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 2) TimePoint))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 TimePosition) (instance ?ROW2 Formula)) (=> (holdsDuring ?ROW1 ?ROW2) (equal (ListLengthFn (ListFn ?ROW1 ?ROW2)) 2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 TimePosition) (instance ?ROW2 Formula)) (=> (holdsDuring ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 1) TimePosition))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 TimePosition) (instance ?ROW2 Formula)) (=> (holdsDuring ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 2) Formula))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 TimePosition) (instance ?ROW2 TimePosition)) (=> (temporalPart ?ROW1 ?ROW2) (equal (ListLengthFn (ListFn ?ROW1 ?ROW2)) 2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 TimePosition) (instance ?ROW2 TimePosition)) (=> (temporalPart ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 1) TimePosition))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 TimePosition) (instance ?ROW2 TimePosition)) (=> (temporalPart ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 2) TimePosition))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 TwoDimensionalAngle) (instance ?ROW2 GeometricFigure)) (=> (angleOfFigure ?ROW1 ?ROW2) (equal (ListLengthFn (ListFn ?ROW1 ?ROW2)) 2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 TwoDimensionalAngle) (instance ?ROW2 GeometricFigure)) (=> (angleOfFigure ?ROW1 ?ROW2) (geometricPart ?ROW1 ?ROW2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 TwoDimensionalAngle) (instance ?ROW2 GeometricFigure)) (=> (angleOfFigure ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 1) TwoDimensionalAngle))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 TwoDimensionalAngle) (instance ?ROW2 GeometricFigure)) (=> (angleOfFigure ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 2) GeometricFigure))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 TwoDimensionalAngle) (instance ?ROW2 PlaneAngleMeasure)) (=> (angularMeasure ?ROW1 ?ROW2) (equal (ListLengthFn (ListFn ?ROW1 ?ROW2)) 2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 TwoDimensionalAngle) (instance ?ROW2 PlaneAngleMeasure)) (=> (angularMeasure ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 1) TwoDimensionalAngle))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 TwoDimensionalAngle) (instance ?ROW2 PlaneAngleMeasure)) (=> (angularMeasure ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 2) PlaneAngleMeasure))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Woman) (instance ?ROW2 Human)) (=> (daughter ?ROW1 ?ROW2) (ancestor ?ROW1 ?ROW2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Woman) (instance ?ROW2 Human)) (=> (daughter ?ROW1 ?ROW2) (equal (ListLengthFn (ListFn ?ROW1 ?ROW2)) 2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Woman) (instance ?ROW2 Human)) (=> (daughter ?ROW1 ?ROW2) (familyRelation ?ROW1 ?ROW2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Woman) (instance ?ROW2 Human)) (=> (daughter ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 1) Woman))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Woman) (instance ?ROW2 Human)) (=> (daughter ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 2) Human))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Woman) (instance ?ROW2 Human)) (=> (daughter ?ROW1 ?ROW2) (parent ?ROW1 ?ROW2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Woman) (instance ?ROW2 Human)) (=> (sister ?ROW1 ?ROW2) (equal (ListLengthFn (ListFn ?ROW1 ?ROW2)) 2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Woman) (instance ?ROW2 Human)) (=> (sister ?ROW1 ?ROW2) (familyRelation ?ROW1 ?ROW2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Woman) (instance ?ROW2 Human)) (=> (sister ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 1) Woman))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Woman) (instance ?ROW2 Human)) (=> (sister ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 2) Human))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Woman) (instance ?ROW2 Human)) (=> (sister ?ROW1 ?ROW2) (sibling ?ROW1 ?ROW2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Woman) (instance ?ROW2 Man)) (=> (wife ?ROW1 ?ROW2) (equal (ListLengthFn (ListFn ?ROW1 ?ROW2)) 2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Woman) (instance ?ROW2 Man)) (=> (wife ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 1) Woman))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Woman) (instance ?ROW2 Man)) (=> (wife ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 2) Man))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Woman) (instance ?ROW2 Man)) (=> (wife ?ROW1 ?ROW2) (legalRelation ?ROW1 ?ROW2))))

(forall (?ROW1 ?ROW2) (=> (and (instance ?ROW1 Woman) (instance ?ROW2 Man)) (=> (wife ?ROW1 ?ROW2) (spouse ?ROW1 ?ROW2))))

(forall (?ROW1 ?ROW2) (=> (and (subclass ?ROW1 Artifact) (subclass ?ROW2 Artifact)) (=> (version ?ROW1 ?ROW2) (equal (ListLengthFn (ListFn ?ROW1 ?ROW2)) 2))))

(forall (?ROW1 ?ROW2) (=> (and (subclass ?ROW1 Artifact) (subclass ?ROW2 Artifact)) (=> (version ?ROW1 ?ROW2) (subclass (ListOrderFn (ListFn ?ROW1 ?ROW2) 1) Artifact))))

(forall (?ROW1 ?ROW2) (=> (and (subclass ?ROW1 Artifact) (subclass ?ROW2 Artifact)) (=> (version ?ROW1 ?ROW2) (subclass (ListOrderFn (ListFn ?ROW1 ?ROW2) 2) Artifact))))

(forall (?ROW1 ?ROW2) (=> (and (subclass ?ROW1 Attribute) (subclass ?ROW2 Attribute)) (=> (exhaustiveAttribute ?ROW1 ?ROW2) (subclass (ListOrderFn (ListFn ?ROW1 ?ROW2) 1) Attribute))))

(forall (?ROW1 ?ROW2) (=> (and (subclass ?ROW1 ContentBearingObject) (subclass ?ROW2 ContentBearingObject)) (=> (equivalentContentClass ?ROW1 ?ROW2) (equal (ListLengthFn (ListFn ?ROW1 ?ROW2)) 2))))

(forall (?ROW1 ?ROW2) (=> (and (subclass ?ROW1 ContentBearingObject) (subclass ?ROW2 ContentBearingObject)) (=> (equivalentContentClass ?ROW1 ?ROW2) (subclass (ListOrderFn (ListFn ?ROW1 ?ROW2) 1) ContentBearingObject))))

(forall (?ROW1 ?ROW2) (=> (and (subclass ?ROW1 ContentBearingObject) (subclass ?ROW2 ContentBearingObject)) (=> (equivalentContentClass ?ROW1 ?ROW2) (subclass (ListOrderFn (ListFn ?ROW1 ?ROW2) 2) ContentBearingObject))))

(forall (?ROW1 ?ROW2) (=> (and (subclass ?ROW1 ContentBearingObject) (subclass ?ROW2 ContentBearingObject)) (=> (equivalentContentClass ?ROW1 ?ROW2) (subsumesContentClass ?ROW1 ?ROW2))))

(forall (?ROW1 ?ROW2) (=> (and (subclass ?ROW1 ContentBearingObject) (subclass ?ROW2 ContentBearingObject)) (=> (subsumesContentClass ?ROW1 ?ROW2) (equal (ListLengthFn (ListFn ?ROW1 ?ROW2)) 2))))

(forall (?ROW1 ?ROW2) (=> (and (subclass ?ROW1 ContentBearingObject) (subclass ?ROW2 ContentBearingObject)) (=> (subsumesContentClass ?ROW1 ?ROW2) (subclass (ListOrderFn (ListFn ?ROW1 ?ROW2) 1) ContentBearingObject))))

(forall (?ROW1 ?ROW2) (=> (and (subclass ?ROW1 ContentBearingObject) (subclass ?ROW2 ContentBearingObject)) (=> (subsumesContentClass ?ROW1 ?ROW2) (subclass (ListOrderFn (ListFn ?ROW1 ?ROW2) 2) ContentBearingObject))))

(forall (?ROW1 ?ROW2) (=> (and (subclass ?ROW1 Process) (instance ?ROW2 Agent)) (=> (hasSkill ?ROW1 ?ROW2) (equal (ListLengthFn (ListFn ?ROW1 ?ROW2)) 2))))

(forall (?ROW1 ?ROW2) (=> (and (subclass ?ROW1 Process) (instance ?ROW2 Agent)) (=> (hasSkill ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 2) Agent))))

(forall (?ROW1 ?ROW2) (=> (and (subclass ?ROW1 Process) (instance ?ROW2 Agent)) (=> (hasSkill ?ROW1 ?ROW2) (subclass (ListOrderFn (ListFn ?ROW1 ?ROW2) 1) Process))))

(forall (?ROW1 ?ROW2) (=> (and (subclass ?ROW1 Process) (instance ?ROW2 TimeDuration)) (=> (frequency ?ROW1 ?ROW2) (equal (ListLengthFn (ListFn ?ROW1 ?ROW2)) 2))))

(forall (?ROW1 ?ROW2) (=> (and (subclass ?ROW1 Process) (instance ?ROW2 TimeDuration)) (=> (frequency ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 2) TimeDuration))))

(forall (?ROW1 ?ROW2) (=> (and (subclass ?ROW1 Process) (instance ?ROW2 TimeDuration)) (=> (frequency ?ROW1 ?ROW2) (subclass (ListOrderFn (ListFn ?ROW1 ?ROW2) 1) Process))))

(forall (?ROW1 ?ROW2) (=> (and (subclass ?ROW1 Process) (subclass ?ROW2 Process)) (=> (causesSubclass ?ROW1 ?ROW2) (equal (ListLengthFn (ListFn ?ROW1 ?ROW2)) 2))))

(forall (?ROW1 ?ROW2) (=> (and (subclass ?ROW1 Process) (subclass ?ROW2 Process)) (=> (causesSubclass ?ROW1 ?ROW2) (subclass (ListOrderFn (ListFn ?ROW1 ?ROW2) 1) Process))))

(forall (?ROW1 ?ROW2) (=> (and (subclass ?ROW1 Process) (subclass ?ROW2 Process)) (=> (causesSubclass ?ROW1 ?ROW2) (subclass (ListOrderFn (ListFn ?ROW1 ?ROW2) 2) Process))))

(forall (?ROW1 ?ROW2) (=> (and (subclass ?ROW1 Process) (subclass ?ROW2 Process)) (=> (inhibits ?ROW1 ?ROW2) (equal (ListLengthFn (ListFn ?ROW1 ?ROW2)) 2))))

(forall (?ROW1 ?ROW2) (=> (and (subclass ?ROW1 Process) (subclass ?ROW2 Process)) (=> (inhibits ?ROW1 ?ROW2) (subclass (ListOrderFn (ListFn ?ROW1 ?ROW2) 1) Process))))

(forall (?ROW1 ?ROW2) (=> (and (subclass ?ROW1 Process) (subclass ?ROW2 Process)) (=> (inhibits ?ROW1 ?ROW2) (subclass (ListOrderFn (ListFn ?ROW1 ?ROW2) 2) Process))))

(forall (?ROW1 ?ROW2) (=> (and (subclass ?ROW1 Process) (subclass ?ROW2 Process)) (=> (precondition ?ROW1 ?ROW2) (equal (ListLengthFn (ListFn ?ROW1 ?ROW2)) 2))))

(forall (?ROW1 ?ROW2) (=> (and (subclass ?ROW1 Process) (subclass ?ROW2 Process)) (=> (precondition ?ROW1 ?ROW2) (subclass (ListOrderFn (ListFn ?ROW1 ?ROW2) 1) Process))))

(forall (?ROW1 ?ROW2) (=> (and (subclass ?ROW1 Process) (subclass ?ROW2 Process)) (=> (precondition ?ROW1 ?ROW2) (subclass (ListOrderFn (ListFn ?ROW1 ?ROW2) 2) Process))))

(forall (?ROW1 ?ROW2) (=> (and (subclass ?ROW1 Process) (subclass ?ROW2 Process)) (=> (prevents ?ROW1 ?ROW2) (equal (ListLengthFn (ListFn ?ROW1 ?ROW2)) 2))))

(forall (?ROW1 ?ROW2) (=> (and (subclass ?ROW1 Process) (subclass ?ROW2 Process)) (=> (prevents ?ROW1 ?ROW2) (subclass (ListOrderFn (ListFn ?ROW1 ?ROW2) 1) Process))))

(forall (?ROW1 ?ROW2) (=> (and (subclass ?ROW1 Process) (subclass ?ROW2 Process)) (=> (prevents ?ROW1 ?ROW2) (subclass (ListOrderFn (ListFn ?ROW1 ?ROW2) 2) Process))))

(forall (?ROW1 ?ROW2) (=> (and (subclass ?ROW1 Substance) (instance ?ROW2 CorpuscularObject)) (=> (material ?ROW1 ?ROW2) (equal (ListLengthFn (ListFn ?ROW1 ?ROW2)) 2))))

(forall (?ROW1 ?ROW2) (=> (and (subclass ?ROW1 Substance) (instance ?ROW2 CorpuscularObject)) (=> (material ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 2) CorpuscularObject))))

(forall (?ROW1 ?ROW2) (=> (and (subclass ?ROW1 Substance) (instance ?ROW2 CorpuscularObject)) (=> (material ?ROW1 ?ROW2) (subclass (ListOrderFn (ListFn ?ROW1 ?ROW2) 1) Substance))))

(forall (?ROW1 ?ROW2) (=> (equal ?ROW1 ?ROW2) (equal (ListLengthFn (ListFn ?ROW1 ?ROW2)) 2)))

(forall (?ROW1 ?ROW2) (=> (equal ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 1) Entity)))

(forall (?ROW1 ?ROW2) (=> (equal ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 2) Entity)))

(forall (?ROW1 ?ROW2) (=> (instance ?ROW1 BinaryFunction) (=> (identityElement ?ROW1 ?ROW2) (equal (ListLengthFn (ListFn ?ROW1 ?ROW2)) 2))))

(forall (?ROW1 ?ROW2) (=> (instance ?ROW1 BinaryFunction) (=> (identityElement ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 1) BinaryFunction))))

(forall (?ROW1 ?ROW2) (=> (instance ?ROW1 BinaryFunction) (=> (identityElement ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 2) Entity))))

(forall (?ROW1 ?ROW2) (=> (instance ?ROW1 CognitiveAgent) (=> (inScopeOfInterest ?ROW1 ?ROW2) (equal (ListLengthFn (ListFn ?ROW1 ?ROW2)) 2))))

(forall (?ROW1 ?ROW2) (=> (instance ?ROW1 CognitiveAgent) (=> (inScopeOfInterest ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 1) CognitiveAgent))))

(forall (?ROW1 ?ROW2) (=> (instance ?ROW1 CognitiveAgent) (=> (inScopeOfInterest ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 2) Entity))))

(forall (?ROW1 ?ROW2) (=> (instance ?ROW1 Process) (=> (destination ?ROW1 ?ROW2) (equal (ListLengthFn (ListFn ?ROW1 ?ROW2)) 2))))

(forall (?ROW1 ?ROW2) (=> (instance ?ROW1 Process) (=> (destination ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 1) Process))))

(forall (?ROW1 ?ROW2) (=> (instance ?ROW1 Process) (=> (destination ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 2) Entity))))

(forall (?ROW1 ?ROW2) (=> (instance ?ROW1 Process) (=> (patient ?ROW1 ?ROW2) (equal (ListLengthFn (ListFn ?ROW1 ?ROW2)) 2))))

(forall (?ROW1 ?ROW2) (=> (instance ?ROW1 Process) (=> (patient ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 1) Process))))

(forall (?ROW1 ?ROW2) (=> (instance ?ROW1 Process) (=> (patient ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 2) Entity))))

(forall (?ROW1 ?ROW2) (=> (instance ?ROW1 Process) (=> (result ?ROW1 ?ROW2) (equal (ListLengthFn (ListFn ?ROW1 ?ROW2)) 2))))

(forall (?ROW1 ?ROW2) (=> (instance ?ROW1 Process) (=> (result ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 1) Process))))

(forall (?ROW1 ?ROW2) (=> (instance ?ROW1 Process) (=> (result ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 2) Entity))))

(forall (?ROW1 ?ROW2) (=> (instance ?ROW1 Process) (=> (result ?ROW1 ?ROW2) (patient ?ROW1 ?ROW2))))

(forall (?ROW1 ?ROW2) (=> (instance ?ROW1 SymbolicString) (=> (names ?ROW1 ?ROW2) (equal (ListLengthFn (ListFn ?ROW1 ?ROW2)) 2))))

(forall (?ROW1 ?ROW2) (=> (instance ?ROW1 SymbolicString) (=> (names ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 1) SymbolicString))))

(forall (?ROW1 ?ROW2) (=> (instance ?ROW1 SymbolicString) (=> (names ?ROW1 ?ROW2) (refers ?ROW1 ?ROW2))))

(forall (?ROW1 ?ROW2) (=> (instance ?ROW1 SymbolicString) (=> (uniqueIdentifier ?ROW1 ?ROW2) (equal (ListLengthFn (ListFn ?ROW1 ?ROW2)) 2))))

(forall (?ROW1 ?ROW2) (=> (instance ?ROW1 SymbolicString) (=> (uniqueIdentifier ?ROW1 ?ROW2) (names ?ROW1 ?ROW2))))

(forall (?ROW1 ?ROW2) (=> (instance ?ROW1 SymbolicString) (=> (uniqueIdentifier ?ROW1 ?ROW2) (refers ?ROW1 ?ROW2))))

(forall (?ROW1 ?ROW2) (=> (instance ?ROW2 Attribute) (=> (property ?ROW1 ?ROW2) (equal (ListLengthFn (ListFn ?ROW1 ?ROW2)) 2))))

(forall (?ROW1 ?ROW2) (=> (instance ?ROW2 Attribute) (=> (property ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 1) Entity))))

(forall (?ROW1 ?ROW2) (=> (instance ?ROW2 Attribute) (=> (property ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 2) Attribute))))

(forall (?ROW1 ?ROW2) (=> (instance ?ROW2 List) (=> (inList ?ROW1 ?ROW2) (equal (ListLengthFn (ListFn ?ROW1 ?ROW2)) 2))))

(forall (?ROW1 ?ROW2) (=> (instance ?ROW2 List) (=> (inList ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 1) Entity))))

(forall (?ROW1 ?ROW2) (=> (instance ?ROW2 List) (=> (inList ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 2) List))))

(forall (?ROW1 ?ROW2) (=> (instance ?ROW2 Set) (=> (element ?ROW1 ?ROW2) (equal (ListLengthFn (ListFn ?ROW1 ?ROW2)) 2))))

(forall (?ROW1 ?ROW2) (=> (instance ?ROW2 Set) (=> (element ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 1) Entity))))

(forall (?ROW1 ?ROW2) (=> (instance ?ROW2 Set) (=> (element ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 2) Set))))

(forall (?ROW1 ?ROW2) (=> (instance ?ROW2 Set) (=> (element ?ROW1 ?ROW2) (instance ?ROW1 ?ROW2))))

(forall (?ROW1 ?ROW2) (=> (instance ?ROW2 SetOrClass) (=> (immediateInstance ?ROW1 ?ROW2) (equal (ListLengthFn (ListFn ?ROW1 ?ROW2)) 2))))

(forall (?ROW1 ?ROW2) (=> (instance ?ROW2 SetOrClass) (=> (immediateInstance ?ROW1 ?ROW2) (instance ?ROW1 ?ROW2))))

(forall (?ROW1 ?ROW2) (=> (instance ?ROW2 SetOrClass) (=> (instance ?ROW1 ?ROW2) (equal (ListLengthFn (ListFn ?ROW1 ?ROW2)) 2))))

(forall (?ROW1 ?ROW2) (=> (instance ?ROW2 SetOrClass) (=> (instance ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 1) Entity))))

(forall (?ROW1 ?ROW2) (=> (instance ?ROW2 SetOrClass) (=> (instance ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 2) SetOrClass))))

(forall (?ROW1 ?ROW2) (=> (instance ?ROW2 SymbolicString) (=> (documentation ?ROW1 ?ROW2) (equal (ListLengthFn (ListFn ?ROW1 ?ROW2)) 2))))

(forall (?ROW1 ?ROW2) (=> (instance ?ROW2 SymbolicString) (=> (documentation ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 1) Entity))))

(forall (?ROW1 ?ROW2) (=> (instance ?ROW2 SymbolicString) (=> (documentation ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 2) SymbolicString))))

(forall (?ROW1 ?ROW2) (=> (refers ?ROW1 ?ROW2) (equal (ListLengthFn (ListFn ?ROW1 ?ROW2)) 2)))

(forall (?ROW1 ?ROW2) (=> (refers ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 1) Entity)))

(forall (?ROW1 ?ROW2) (=> (refers ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 2) Entity)))

(forall (?ROW1 ?ROW2) (=> (relatedInternalConcept ?ROW1 ?ROW2) (equal (ListLengthFn (ListFn ?ROW1 ?ROW2)) 2)))

(forall (?ROW1 ?ROW2) (=> (relatedInternalConcept ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 1) Entity)))

(forall (?ROW1 ?ROW2) (=> (relatedInternalConcept ?ROW1 ?ROW2) (instance (ListOrderFn (ListFn ?ROW1 ?ROW2) 2) Entity)))

(forall (?ROW1 ?ROW2) (=> (represents ?ROW1 ?ROW2) (equal (ListLengthFn (ListFn ?ROW1 ?ROW2)) 2)))

(forall (?ROW1 ?ROW2) (=> (represents ?ROW1 ?ROW2) (refers ?ROW1 ?ROW2)))

(forall (?ROW1) (=> (instance ?ROW1 Argument) (exists (?VALENCE) (and (instance ?VALENCE Quantity) (instance conclusion Relation) (=> (forall (?NUMBER ?ELEMENT ?CLASS) (=> (and (instance ?NUMBER PositiveInteger) (instance ?CLASS SetOrClass)) (=> (and (lessThan ?NUMBER ?VALENCE) (equal ?ELEMENT (ListOrderFn (ListFn ?ROW1) ?NUMBER))) (instance ?ELEMENT ?CLASS)))) (exists (?ITEM) (and (instance ?ITEM Proposition) (conclusion ?ROW1 ?ITEM))))))))

(forall (?ROW1) (=> (instance ?ROW1 Argument) (exists (?VALENCE) (and (instance ?VALENCE Quantity) (instance premise Relation) (=> (forall (?NUMBER ?ELEMENT ?CLASS) (=> (and (instance ?NUMBER PositiveInteger) (instance ?CLASS SetOrClass)) (=> (and (lessThan ?NUMBER ?VALENCE) (equal ?ELEMENT (ListOrderFn (ListFn ?ROW1) ?NUMBER))) (instance ?ELEMENT ?CLASS)))) (exists (?ITEM) (and (instance ?ITEM Proposition) (premise ?ROW1 ?ITEM))))))))

(forall (?ROW1) (=> (instance ?ROW1 Class) (<=> (partition ?ROW1) (and (exhaustiveDecomposition ?ROW1) (disjointDecomposition ?ROW1)))))

(forall (?ROW1) (=> (instance ?ROW1 Class) (=> (disjointDecomposition ?ROW1) (instance (ListOrderFn (ListFn ?ROW1) 1) Class))))

(forall (?ROW1) (=> (instance ?ROW1 Class) (=> (exhaustiveDecomposition ?ROW1) (instance (ListOrderFn (ListFn ?ROW1) 1) Class))))

(forall (?ROW1) (=> (instance ?ROW1 Class) (=> (partition ?ROW1) (instance (ListOrderFn (ListFn ?ROW1) 1) Class))))

(forall (?ROW1) (=> (instance ?ROW1 FinancialTransaction) (exists (?VALENCE) (and (instance ?VALENCE Quantity) (instance transactionAmount Relation) (=> (forall (?NUMBER ?ELEMENT ?CLASS) (=> (and (instance ?NUMBER PositiveInteger) (instance ?CLASS SetOrClass)) (=> (and (lessThan ?NUMBER ?VALENCE) (equal ?ELEMENT (ListOrderFn (ListFn ?ROW1) ?NUMBER))) (instance ?ELEMENT ?CLASS)))) (exists (?ITEM) (and (instance ?ITEM CurrencyMeasure) (transactionAmount ?ROW1 ?ITEM))))))))

(forall (?ROW1) (=> (instance ?ROW1 OneDimensionalFigure) (exists (?VALENCE) (and (instance ?VALENCE Quantity) (instance lineMeasure Relation) (=> (forall (?NUMBER ?ELEMENT ?CLASS) (=> (and (instance ?NUMBER PositiveInteger) (instance ?CLASS SetOrClass)) (=> (and (lessThan ?NUMBER ?VALENCE) (equal ?ELEMENT (ListOrderFn (ListFn ?ROW1) ?NUMBER))) (instance ?ELEMENT ?CLASS)))) (exists (?ITEM) (and (instance ?ITEM LengthMeasure) (lineMeasure ?ROW1 ?ITEM))))))))

(forall (?ROW1) (=> (instance ?ROW1 TimeInterval) (exists (?VALENCE) (and (instance ?VALENCE Quantity) (instance duration Relation) (=> (forall (?NUMBER ?ELEMENT ?CLASS) (=> (and (instance ?NUMBER PositiveInteger) (instance ?CLASS SetOrClass)) (=> (and (lessThan ?NUMBER ?VALENCE) (equal ?ELEMENT (ListOrderFn (ListFn ?ROW1) ?NUMBER))) (instance ?ELEMENT ?CLASS)))) (exists (?ITEM) (and (instance ?ITEM TimeDuration) (duration ?ROW1 ?ITEM))))))))

(forall (?ROW1) (=> (instance ?ROW1 TwoDimensionalAngle) (exists (?VALENCE) (and (instance ?VALENCE Quantity) (instance angularMeasure Relation) (=> (forall (?NUMBER ?ELEMENT ?CLASS) (=> (and (instance ?NUMBER PositiveInteger) (instance ?CLASS SetOrClass)) (=> (and (lessThan ?NUMBER ?VALENCE) (equal ?ELEMENT (ListOrderFn (ListFn ?ROW1) ?NUMBER))) (instance ?ELEMENT ?CLASS)))) (exists (?ITEM) (and (instance ?ITEM PlaneAngleMeasure) (angularMeasure ?ROW1 ?ITEM))))))))

(forall (?ROW1) (=> (subclass ?ROW1 Attribute) (=> (exhaustiveAttribute ?ROW1) (subclass (ListOrderFn (ListFn ?ROW1) 1) Attribute))))

(forall (?ROW11 ?ROW12 ?ROW13 ?ROW14 ?ROW15 ?ROW16 ?ROW17 ?ROW21 ?ROW22 ?ROW23 ?ROW24 ?ROW25 ?ROW26 ?ROW27) (=> (and (contraryAttribute ?ROW11 ?ROW12 ?ROW13 ?ROW14 ?ROW15 ?ROW16 ?ROW17) (identicalListItems (ListFn ?ROW11 ?ROW12 ?ROW13 ?ROW14 ?ROW15 ?ROW16 ?ROW17) (ListFn ?ROW21 ?ROW22 ?ROW23 ?ROW24 ?ROW25 ?ROW26 ?ROW27))) (contraryAttribute ?ROW21 ?ROW22 ?ROW23 ?ROW24 ?ROW25 ?ROW26 ?ROW27)))

(forall (?ROW11 ?ROW12 ?ROW13 ?ROW14 ?ROW15 ?ROW16 ?ROW17 ?ROW21 ?ROW22 ?ROW23 ?ROW24 ?ROW25 ?ROW26) (=> (and (contraryAttribute ?ROW11 ?ROW12 ?ROW13 ?ROW14 ?ROW15 ?ROW16 ?ROW17) (identicalListItems (ListFn ?ROW11 ?ROW12 ?ROW13 ?ROW14 ?ROW15 ?ROW16 ?ROW17) (ListFn ?ROW21 ?ROW22 ?ROW23 ?ROW24 ?ROW25 ?ROW26))) (contraryAttribute ?ROW21 ?ROW22 ?ROW23 ?ROW24 ?ROW25 ?ROW26)))

(forall (?ROW11 ?ROW12 ?ROW13 ?ROW14 ?ROW15 ?ROW16 ?ROW17 ?ROW21 ?ROW22 ?ROW23 ?ROW24 ?ROW25) (=> (and (contraryAttribute ?ROW11 ?ROW12 ?ROW13 ?ROW14 ?ROW15 ?ROW16 ?ROW17) (identicalListItems (ListFn ?ROW11 ?ROW12 ?ROW13 ?ROW14 ?ROW15 ?ROW16 ?ROW17) (ListFn ?ROW21 ?ROW22 ?ROW23 ?ROW24 ?ROW25))) (contraryAttribute ?ROW21 ?ROW22 ?ROW23 ?ROW24 ?ROW25)))

(forall (?ROW11 ?ROW12 ?ROW13 ?ROW14 ?ROW15 ?ROW16 ?ROW17 ?ROW21 ?ROW22 ?ROW23 ?ROW24) (=> (and (contraryAttribute ?ROW11 ?ROW12 ?ROW13 ?ROW14 ?ROW15 ?ROW16 ?ROW17) (identicalListItems (ListFn ?ROW11 ?ROW12 ?ROW13 ?ROW14 ?ROW15 ?ROW16 ?ROW17) (ListFn ?ROW21 ?ROW22 ?ROW23 ?ROW24))) (contraryAttribute ?ROW21 ?ROW22 ?ROW23 ?ROW24)))

(forall (?ROW11 ?ROW12 ?ROW13 ?ROW14 ?ROW15 ?ROW16 ?ROW17 ?ROW21 ?ROW22 ?ROW23) (=> (and (contraryAttribute ?ROW11 ?ROW12 ?ROW13 ?ROW14 ?ROW15 ?ROW16 ?ROW17) (identicalListItems (ListFn ?ROW11 ?ROW12 ?ROW13 ?ROW14 ?ROW15 ?ROW16 ?ROW17) (ListFn ?ROW21 ?ROW22 ?ROW23))) (contraryAttribute ?ROW21 ?ROW22 ?ROW23)))

(forall (?ROW11 ?ROW12 ?ROW13 ?ROW14 ?ROW15 ?ROW16 ?ROW17 ?ROW21 ?ROW22) (=> (and (contraryAttribute ?ROW11 ?ROW12 ?ROW13 ?ROW14 ?ROW15 ?ROW16 ?ROW17) (identicalListItems (ListFn ?ROW11 ?ROW12 ?ROW13 ?ROW14 ?ROW15 ?ROW16 ?ROW17) (ListFn ?ROW21 ?ROW22))) (contraryAttribute ?ROW21 ?ROW22)))

(forall (?ROW11 ?ROW12 ?ROW13 ?ROW14 ?ROW15 ?ROW16 ?ROW17 ?ROW21) (=> (and (contraryAttribute ?ROW11 ?ROW12 ?ROW13 ?ROW14 ?ROW15 ?ROW16 ?ROW17) (identicalListItems (ListFn ?ROW11 ?ROW12 ?ROW13 ?ROW14 ?ROW15 ?ROW16 ?ROW17) (ListFn ?ROW21))) (contraryAttribute ?ROW21)))

(forall (?ROW11 ?ROW12 ?ROW13 ?ROW14 ?ROW15 ?ROW16 ?ROW21 ?ROW22 ?ROW23 ?ROW24 ?ROW25 ?ROW26 ?ROW27) (=> (and (contraryAttribute ?ROW11 ?ROW12 ?ROW13 ?ROW14 ?ROW15 ?ROW16) (identicalListItems (ListFn ?ROW11 ?ROW12 ?ROW13 ?ROW14 ?ROW15 ?ROW16) (ListFn ?ROW21 ?ROW22 ?ROW23 ?ROW24 ?ROW25 ?ROW26 ?ROW27))) (contraryAttribute ?ROW21 ?ROW22 ?ROW23 ?ROW24 ?ROW25 ?ROW26 ?ROW27)))

(forall (?ROW11 ?ROW12 ?ROW13 ?ROW14 ?ROW15 ?ROW16 ?ROW21 ?ROW22 ?ROW23 ?ROW24 ?ROW25 ?ROW26) (=> (and (contraryAttribute ?ROW11 ?ROW12 ?ROW13 ?ROW14 ?ROW15 ?ROW16) (identicalListItems (ListFn ?ROW11 ?ROW12 ?ROW13 ?ROW14 ?ROW15 ?ROW16) (ListFn ?ROW21 ?ROW22 ?ROW23 ?ROW24 ?ROW25 ?ROW26))) (contraryAttribute ?ROW21 ?ROW22 ?ROW23 ?ROW24 ?ROW25 ?ROW26)))

(forall (?ROW11 ?ROW12 ?ROW13 ?ROW14 ?ROW15 ?ROW16 ?ROW21 ?ROW22 ?ROW23 ?ROW24 ?ROW25) (=> (and (contraryAttribute ?ROW11 ?ROW12 ?ROW13 ?ROW14 ?ROW15 ?ROW16) (identicalListItems (ListFn ?ROW11 ?ROW12 ?ROW13 ?ROW14 ?ROW15 ?ROW16) (ListFn ?ROW21 ?ROW22 ?ROW23 ?ROW24 ?ROW25))) (contraryAttribute ?ROW21 ?ROW22 ?ROW23 ?ROW24 ?ROW25)))

(forall (?ROW11 ?ROW12 ?ROW13 ?ROW14 ?ROW15 ?ROW16 ?ROW21 ?ROW22 ?ROW23 ?ROW24) (=> (and (contraryAttribute ?ROW11 ?ROW12 ?ROW13 ?ROW14 ?ROW15 ?ROW16) (identicalListItems (ListFn ?ROW11 ?ROW12 ?ROW13 ?ROW14 ?ROW15 ?ROW16) (ListFn ?ROW21 ?ROW22 ?ROW23 ?ROW24))) (contraryAttribute ?ROW21 ?ROW22 ?ROW23 ?ROW24)))

(forall (?ROW11 ?ROW12 ?ROW13 ?ROW14 ?ROW15 ?ROW16 ?ROW21 ?ROW22 ?ROW23) (=> (and (contraryAttribute ?ROW11 ?ROW12 ?ROW13 ?ROW14 ?ROW15 ?ROW16) (identicalListItems (ListFn ?ROW11 ?ROW12 ?ROW13 ?ROW14 ?ROW15 ?ROW16) (ListFn ?ROW21 ?ROW22 ?ROW23))) (contraryAttribute ?ROW21 ?ROW22 ?ROW23)))

(forall (?ROW11 ?ROW12 ?ROW13 ?ROW14 ?ROW15 ?ROW16 ?ROW21 ?ROW22) (=> (and (contraryAttribute ?ROW11 ?ROW12 ?ROW13 ?ROW14 ?ROW15 ?ROW16) (identicalListItems (ListFn ?ROW11 ?ROW12 ?ROW13 ?ROW14 ?ROW15 ?ROW16) (ListFn ?ROW21 ?ROW22))) (contraryAttribute ?ROW21 ?ROW22)))

(forall (?ROW11 ?ROW12 ?ROW13 ?ROW14 ?ROW15 ?ROW16 ?ROW21) (=> (and (contraryAttribute ?ROW11 ?ROW12 ?ROW13 ?ROW14 ?ROW15 ?ROW16) (identicalListItems (ListFn ?ROW11 ?ROW12 ?ROW13 ?ROW14 ?ROW15 ?ROW16) (ListFn ?ROW21))) (contraryAttribute ?ROW21)))

(forall (?ROW11 ?ROW12 ?ROW13 ?ROW14 ?ROW15 ?ROW21 ?ROW22 ?ROW23 ?ROW24 ?ROW25 ?ROW26 ?ROW27) (=> (and (contraryAttribute ?ROW11 ?ROW12 ?ROW13 ?ROW14 ?ROW15) (identicalListItems (ListFn ?ROW11 ?ROW12 ?ROW13 ?ROW14 ?ROW15) (ListFn ?ROW21 ?ROW22 ?ROW23 ?ROW24 ?ROW25 ?ROW26 ?ROW27))) (contraryAttribute ?ROW21 ?ROW22 ?ROW23 ?ROW24 ?ROW25 ?ROW26 ?ROW27)))

(forall (?ROW11 ?ROW12 ?ROW13 ?ROW14 ?ROW15 ?ROW21 ?ROW22 ?ROW23 ?ROW24 ?ROW25 ?ROW26) (=> (and (contraryAttribute ?ROW11 ?ROW12 ?ROW13 ?ROW14 ?ROW15) (identicalListItems (ListFn ?ROW11 ?ROW12 ?ROW13 ?ROW14 ?ROW15) (ListFn ?ROW21 ?ROW22 ?ROW23 ?ROW24 ?ROW25 ?ROW26))) (contraryAttribute ?ROW21 ?ROW22 ?ROW23 ?ROW24 ?ROW25 ?ROW26)))

(forall (?ROW11 ?ROW12 ?ROW13 ?ROW14 ?ROW15 ?ROW21 ?ROW22 ?ROW23 ?ROW24 ?ROW25) (=> (and (contraryAttribute ?ROW11 ?ROW12 ?ROW13 ?ROW14 ?ROW15) (identicalListItems (ListFn ?ROW11 ?ROW12 ?ROW13 ?ROW14 ?ROW15) (ListFn ?ROW21 ?ROW22 ?ROW23 ?ROW24 ?ROW25))) (contraryAttribute ?ROW21 ?ROW22 ?ROW23 ?ROW24 ?ROW25)))

(forall (?ROW11 ?ROW12 ?ROW13 ?ROW14 ?ROW15 ?ROW21 ?ROW22 ?ROW23 ?ROW24) (=> (and (contraryAttribute ?ROW11 ?ROW12 ?ROW13 ?ROW14 ?ROW15) (identicalListItems (ListFn ?ROW11 ?ROW12 ?ROW13 ?ROW14 ?ROW15) (ListFn ?ROW21 ?ROW22 ?ROW23 ?ROW24))) (contraryAttribute ?ROW21 ?ROW22 ?ROW23 ?ROW24)))

(forall (?ROW11 ?ROW12 ?ROW13 ?ROW14 ?ROW15 ?ROW21 ?ROW22 ?ROW23) (=> (and (contraryAttribute ?ROW11 ?ROW12 ?ROW13 ?ROW14 ?ROW15) (identicalListItems (ListFn ?ROW11 ?ROW12 ?ROW13 ?ROW14 ?ROW15) (ListFn ?ROW21 ?ROW22 ?ROW23))) (contraryAttribute ?ROW21 ?ROW22 ?ROW23)))

(forall (?ROW11 ?ROW12 ?ROW13 ?ROW14 ?ROW15 ?ROW21 ?ROW22) (=> (and (contraryAttribute ?ROW11 ?ROW12 ?ROW13 ?ROW14 ?ROW15) (identicalListItems (ListFn ?ROW11 ?ROW12 ?ROW13 ?ROW14 ?ROW15) (ListFn ?ROW21 ?ROW22))) (contraryAttribute ?ROW21 ?ROW22)))

(forall (?ROW11 ?ROW12 ?ROW13 ?ROW14 ?ROW15 ?ROW21) (=> (and (contraryAttribute ?ROW11 ?ROW12 ?ROW13 ?ROW14 ?ROW15) (identicalListItems (ListFn ?ROW11 ?ROW12 ?ROW13 ?ROW14 ?ROW15) (ListFn ?ROW21))) (contraryAttribute ?ROW21)))

(forall (?ROW11 ?ROW12 ?ROW13 ?ROW14 ?ROW21 ?ROW22 ?ROW23 ?ROW24 ?ROW25 ?ROW26 ?ROW27) (=> (and (contraryAttribute ?ROW11 ?ROW12 ?ROW13 ?ROW14) (identicalListItems (ListFn ?ROW11 ?ROW12 ?ROW13 ?ROW14) (ListFn ?ROW21 ?ROW22 ?ROW23 ?ROW24 ?ROW25 ?ROW26 ?ROW27))) (contraryAttribute ?ROW21 ?ROW22 ?ROW23 ?ROW24 ?ROW25 ?ROW26 ?ROW27)))

(forall (?ROW11 ?ROW12 ?ROW13 ?ROW14 ?ROW21 ?ROW22 ?ROW23 ?ROW24 ?ROW25 ?ROW26) (=> (and (contraryAttribute ?ROW11 ?ROW12 ?ROW13 ?ROW14) (identicalListItems (ListFn ?ROW11 ?ROW12 ?ROW13 ?ROW14) (ListFn ?ROW21 ?ROW22 ?ROW23 ?ROW24 ?ROW25 ?ROW26))) (contraryAttribute ?ROW21 ?ROW22 ?ROW23 ?ROW24 ?ROW25 ?ROW26)))

(forall (?ROW11 ?ROW12 ?ROW13 ?ROW14 ?ROW21 ?ROW22 ?ROW23 ?ROW24 ?ROW25) (=> (and (contraryAttribute ?ROW11 ?ROW12 ?ROW13 ?ROW14) (identicalListItems (ListFn ?ROW11 ?ROW12 ?ROW13 ?ROW14) (ListFn ?ROW21 ?ROW22 ?ROW23 ?ROW24 ?ROW25))) (contraryAttribute ?ROW21 ?ROW22 ?ROW23 ?ROW24 ?ROW25)))

(forall (?ROW11 ?ROW12 ?ROW13 ?ROW14 ?ROW21 ?ROW22 ?ROW23 ?ROW24) (=> (and (contraryAttribute ?ROW11 ?ROW12 ?ROW13 ?ROW14) (identicalListItems (ListFn ?ROW11 ?ROW12 ?ROW13 ?ROW14) (ListFn ?ROW21 ?ROW22 ?ROW23 ?ROW24))) (contraryAttribute ?ROW21 ?ROW22 ?ROW23 ?ROW24)))

(forall (?ROW11 ?ROW12 ?ROW13 ?ROW14 ?ROW21 ?ROW22 ?ROW23) (=> (and (contraryAttribute ?ROW11 ?ROW12 ?ROW13 ?ROW14) (identicalListItems (ListFn ?ROW11 ?ROW12 ?ROW13 ?ROW14) (ListFn ?ROW21 ?ROW22 ?ROW23))) (contraryAttribute ?ROW21 ?ROW22 ?ROW23)))

(forall (?ROW11 ?ROW12 ?ROW13 ?ROW14 ?ROW21 ?ROW22) (=> (and (contraryAttribute ?ROW11 ?ROW12 ?ROW13 ?ROW14) (identicalListItems (ListFn ?ROW11 ?ROW12 ?ROW13 ?ROW14) (ListFn ?ROW21 ?ROW22))) (contraryAttribute ?ROW21 ?ROW22)))

(forall (?ROW11 ?ROW12 ?ROW13 ?ROW14 ?ROW21) (=> (and (contraryAttribute ?ROW11 ?ROW12 ?ROW13 ?ROW14) (identicalListItems (ListFn ?ROW11 ?ROW12 ?ROW13 ?ROW14) (ListFn ?ROW21))) (contraryAttribute ?ROW21)))

(forall (?ROW11 ?ROW12 ?ROW13 ?ROW21 ?ROW22 ?ROW23 ?ROW24 ?ROW25 ?ROW26 ?ROW27) (=> (and (contraryAttribute ?ROW11 ?ROW12 ?ROW13) (identicalListItems (ListFn ?ROW11 ?ROW12 ?ROW13) (ListFn ?ROW21 ?ROW22 ?ROW23 ?ROW24 ?ROW25 ?ROW26 ?ROW27))) (contraryAttribute ?ROW21 ?ROW22 ?ROW23 ?ROW24 ?ROW25 ?ROW26 ?ROW27)))

(forall (?ROW11 ?ROW12 ?ROW13 ?ROW21 ?ROW22 ?ROW23 ?ROW24 ?ROW25 ?ROW26) (=> (and (contraryAttribute ?ROW11 ?ROW12 ?ROW13) (identicalListItems (ListFn ?ROW11 ?ROW12 ?ROW13) (ListFn ?ROW21 ?ROW22 ?ROW23 ?ROW24 ?ROW25 ?ROW26))) (contraryAttribute ?ROW21 ?ROW22 ?ROW23 ?ROW24 ?ROW25 ?ROW26)))

(forall (?ROW11 ?ROW12 ?ROW13 ?ROW21 ?ROW22 ?ROW23 ?ROW24 ?ROW25) (=> (and (contraryAttribute ?ROW11 ?ROW12 ?ROW13) (identicalListItems (ListFn ?ROW11 ?ROW12 ?ROW13) (ListFn ?ROW21 ?ROW22 ?ROW23 ?ROW24 ?ROW25))) (contraryAttribute ?ROW21 ?ROW22 ?ROW23 ?ROW24 ?ROW25)))

(forall (?ROW11 ?ROW12 ?ROW13 ?ROW21 ?ROW22 ?ROW23 ?ROW24) (=> (and (contraryAttribute ?ROW11 ?ROW12 ?ROW13) (identicalListItems (ListFn ?ROW11 ?ROW12 ?ROW13) (ListFn ?ROW21 ?ROW22 ?ROW23 ?ROW24))) (contraryAttribute ?ROW21 ?ROW22 ?ROW23 ?ROW24)))

(forall (?ROW11 ?ROW12 ?ROW13 ?ROW21 ?ROW22 ?ROW23) (=> (and (contraryAttribute ?ROW11 ?ROW12 ?ROW13) (identicalListItems (ListFn ?ROW11 ?ROW12 ?ROW13) (ListFn ?ROW21 ?ROW22 ?ROW23))) (contraryAttribute ?ROW21 ?ROW22 ?ROW23)))

(forall (?ROW11 ?ROW12 ?ROW13 ?ROW21 ?ROW22) (=> (and (contraryAttribute ?ROW11 ?ROW12 ?ROW13) (identicalListItems (ListFn ?ROW11 ?ROW12 ?ROW13) (ListFn ?ROW21 ?ROW22))) (contraryAttribute ?ROW21 ?ROW22)))

(forall (?ROW11 ?ROW12 ?ROW13 ?ROW21) (=> (and (contraryAttribute ?ROW11 ?ROW12 ?ROW13) (identicalListItems (ListFn ?ROW11 ?ROW12 ?ROW13) (ListFn ?ROW21))) (contraryAttribute ?ROW21)))

(forall (?ROW11 ?ROW12 ?ROW21 ?ROW22 ?ROW23 ?ROW24 ?ROW25 ?ROW26 ?ROW27) (=> (and (contraryAttribute ?ROW11 ?ROW12) (identicalListItems (ListFn ?ROW11 ?ROW12) (ListFn ?ROW21 ?ROW22 ?ROW23 ?ROW24 ?ROW25 ?ROW26 ?ROW27))) (contraryAttribute ?ROW21 ?ROW22 ?ROW23 ?ROW24 ?ROW25 ?ROW26 ?ROW27)))

(forall (?ROW11 ?ROW12 ?ROW21 ?ROW22 ?ROW23 ?ROW24 ?ROW25 ?ROW26) (=> (and (contraryAttribute ?ROW11 ?ROW12) (identicalListItems (ListFn ?ROW11 ?ROW12) (ListFn ?ROW21 ?ROW22 ?ROW23 ?ROW24 ?ROW25 ?ROW26))) (contraryAttribute ?ROW21 ?ROW22 ?ROW23 ?ROW24 ?ROW25 ?ROW26)))

(forall (?ROW11 ?ROW12 ?ROW21 ?ROW22 ?ROW23 ?ROW24 ?ROW25) (=> (and (contraryAttribute ?ROW11 ?ROW12) (identicalListItems (ListFn ?ROW11 ?ROW12) (ListFn ?ROW21 ?ROW22 ?ROW23 ?ROW24 ?ROW25))) (contraryAttribute ?ROW21 ?ROW22 ?ROW23 ?ROW24 ?ROW25)))

(forall (?ROW11 ?ROW12 ?ROW21 ?ROW22 ?ROW23 ?ROW24) (=> (and (contraryAttribute ?ROW11 ?ROW12) (identicalListItems (ListFn ?ROW11 ?ROW12) (ListFn ?ROW21 ?ROW22 ?ROW23 ?ROW24))) (contraryAttribute ?ROW21 ?ROW22 ?ROW23 ?ROW24)))

(forall (?ROW11 ?ROW12 ?ROW21 ?ROW22 ?ROW23) (=> (and (contraryAttribute ?ROW11 ?ROW12) (identicalListItems (ListFn ?ROW11 ?ROW12) (ListFn ?ROW21 ?ROW22 ?ROW23))) (contraryAttribute ?ROW21 ?ROW22 ?ROW23)))

(forall (?ROW11 ?ROW12 ?ROW21 ?ROW22) (=> (and (contraryAttribute ?ROW11 ?ROW12) (identicalListItems (ListFn ?ROW11 ?ROW12) (ListFn ?ROW21 ?ROW22))) (contraryAttribute ?ROW21 ?ROW22)))

(forall (?ROW11 ?ROW12 ?ROW21) (=> (and (contraryAttribute ?ROW11 ?ROW12) (identicalListItems (ListFn ?ROW11 ?ROW12) (ListFn ?ROW21))) (contraryAttribute ?ROW21)))

(forall (?ROW11 ?ROW21 ?ROW22 ?ROW23 ?ROW24 ?ROW25 ?ROW26 ?ROW27) (=> (and (contraryAttribute ?ROW11) (identicalListItems (ListFn ?ROW11) (ListFn ?ROW21 ?ROW22 ?ROW23 ?ROW24 ?ROW25 ?ROW26 ?ROW27))) (contraryAttribute ?ROW21 ?ROW22 ?ROW23 ?ROW24 ?ROW25 ?ROW26 ?ROW27)))

(forall (?ROW11 ?ROW21 ?ROW22 ?ROW23 ?ROW24 ?ROW25 ?ROW26) (=> (and (contraryAttribute ?ROW11) (identicalListItems (ListFn ?ROW11) (ListFn ?ROW21 ?ROW22 ?ROW23 ?ROW24 ?ROW25 ?ROW26))) (contraryAttribute ?ROW21 ?ROW22 ?ROW23 ?ROW24 ?ROW25 ?ROW26)))

(forall (?ROW11 ?ROW21 ?ROW22 ?ROW23 ?ROW24 ?ROW25) (=> (and (contraryAttribute ?ROW11) (identicalListItems (ListFn ?ROW11) (ListFn ?ROW21 ?ROW22 ?ROW23 ?ROW24 ?ROW25))) (contraryAttribute ?ROW21 ?ROW22 ?ROW23 ?ROW24 ?ROW25)))

(forall (?ROW11 ?ROW21 ?ROW22 ?ROW23 ?ROW24) (=> (and (contraryAttribute ?ROW11) (identicalListItems (ListFn ?ROW11) (ListFn ?ROW21 ?ROW22 ?ROW23 ?ROW24))) (contraryAttribute ?ROW21 ?ROW22 ?ROW23 ?ROW24)))

(forall (?ROW11 ?ROW21 ?ROW22 ?ROW23) (=> (and (contraryAttribute ?ROW11) (identicalListItems (ListFn ?ROW11) (ListFn ?ROW21 ?ROW22 ?ROW23))) (contraryAttribute ?ROW21 ?ROW22 ?ROW23)))

(forall (?ROW11 ?ROW21 ?ROW22) (=> (and (contraryAttribute ?ROW11) (identicalListItems (ListFn ?ROW11) (ListFn ?ROW21 ?ROW22))) (contraryAttribute ?ROW21 ?ROW22)))

(forall (?ROW11 ?ROW21) (=> (and (contraryAttribute ?ROW11) (identicalListItems (ListFn ?ROW11) (ListFn ?ROW21))) (contraryAttribute ?ROW21)))

(forall (?ROW21 ?ROW22 ?ROW23) (=> (and (instance ?ROW21 SymbolicString) (instance ?ROW23 Language)) (=> (and (not (equal subsumedExternalConcept subsumingExternalConcept)) (subsumedExternalConcept ?ROW21 ?ROW22 ?ROW23)) (not (subsumingExternalConcept ?ROW21 ?ROW22 ?ROW23)))))

(forall (?ROW21 ?ROW22 ?ROW23) (=> (and (instance ?ROW21 SymbolicString) (instance ?ROW23 Language)) (=> (and (not (equal synonymousExternalConcept subsumedExternalConcept)) (synonymousExternalConcept ?ROW21 ?ROW22 ?ROW23)) (not (subsumedExternalConcept ?ROW21 ?ROW22 ?ROW23)))))

(forall (?ROW21 ?ROW22 ?ROW23) (=> (and (instance ?ROW21 SymbolicString) (instance ?ROW23 Language)) (=> (and (not (equal synonymousExternalConcept subsumingExternalConcept)) (synonymousExternalConcept ?ROW21 ?ROW22 ?ROW23)) (not (subsumingExternalConcept ?ROW21 ?ROW22 ?ROW23)))))

(forall (?ROW21 ?ROW22 ?ROW23) (=> (and (instance ?ROW22 Formula) (instance ?ROW23 ObjectiveNorm)) (=> (and (not (equal deprivesNorm confersNorm)) (deprivesNorm ?ROW21 ?ROW22 ?ROW23)) (not (confersNorm ?ROW21 ?ROW22 ?ROW23)))))

(forall (?ROW21 ?ROW22) (=> (and (instance ?ROW21 Attribute) (instance ?ROW22 Attribute)) (=> (and (not (equal subAttribute successorAttribute)) (subAttribute ?ROW21 ?ROW22)) (not (successorAttribute ?ROW21 ?ROW22)))))

(forall (?ROW21 ?ROW22) (=> (and (instance ?ROW21 Formula) (instance ?ROW22 Formula)) (=> (and (not (equal decreasesLikelihood independentProbability)) (decreasesLikelihood ?ROW21 ?ROW22)) (not (independentProbability ?ROW21 ?ROW22)))))

(forall (?ROW21 ?ROW22) (=> (and (instance ?ROW21 Formula) (instance ?ROW22 Formula)) (=> (and (not (equal increasesLikelihood decreasesLikelihood)) (increasesLikelihood ?ROW21 ?ROW22)) (not (decreasesLikelihood ?ROW21 ?ROW22)))))

(forall (?ROW21 ?ROW22) (=> (and (instance ?ROW21 Formula) (instance ?ROW22 Formula)) (=> (and (not (equal increasesLikelihood independentProbability)) (increasesLikelihood ?ROW21 ?ROW22)) (not (independentProbability ?ROW21 ?ROW22)))))

(forall (?ROW21 ?ROW22) (=> (and (instance ?ROW21 Human) (instance ?ROW22 TemporaryResidence) (instance ?ROW22 PermanentResidence)) (=> (and (not (equal stays home)) (stays ?ROW21 ?ROW22)) (not (home ?ROW21 ?ROW22)))))

(forall (?ROW21 ?ROW22) (=> (and (instance ?ROW21 Object) (instance ?ROW22 Object)) (=> (and (not (equal crosses connected)) (crosses ?ROW21 ?ROW22)) (not (connected ?ROW21 ?ROW22)))))

(forall (?ROW21 ?ROW22) (=> (and (instance ?ROW21 Object) (instance ?ROW22 Object)) (=> (and (not (equal meetsSpatially overlapsSpatially)) (meetsSpatially ?ROW21 ?ROW22)) (not (overlapsSpatially ?ROW21 ?ROW22)))))

(forall (?ROW21 ?ROW22) (=> (and (instance ?ROW21 Process) (instance ?ROW21 Object) (instance ?ROW22 Attribute)) (=> (and (not (equal manner attribute)) (manner ?ROW21 ?ROW22)) (not (attribute ?ROW21 ?ROW22)))))

(forall (?ROW21 ?ROW22) (=> (and (instance ?ROW21 Process) (instance ?ROW22 Object)) (=> (and (not (equal resource instrument)) (resource ?ROW21 ?ROW22)) (not (instrument ?ROW21 ?ROW22)))))

(forall (?ROW21 ?ROW22) (=> (and (instance ?ROW21 Process) (instance ?ROW22 Object)) (=> (and (not (equal resource result)) (resource ?ROW21 ?ROW22)) (not (result ?ROW21 ?ROW22)))))

(forall (?ROW21 ?ROW22) (=> (and (instance ?ROW21 Process) (instance ?ROW22 Object)) (=> (and (not (equal result instrument)) (result ?ROW21 ?ROW22)) (not (instrument ?ROW21 ?ROW22)))))

(forall (?ROW21 ?ROW22) (=> (and (instance ?ROW21 SelfConnectedObject) (instance ?ROW22 Object)) (=> (and (not (equal contains part)) (contains ?ROW21 ?ROW22)) (not (part ?ROW21 ?ROW22)))))

(forall (?SECOND ?NUMBER ?MINUTE) (=> (and (instance ?SECOND Second) (instance ?NUMBER PositiveRealNumber) (subclass ?MINUTE Minute)) (=> (instance ?SECOND (SecondFn ?NUMBER ?MINUTE)) (lessThan ?NUMBER 60))))

(forall (?SECOND) (=> (instance ?SECOND TimeInterval) (=> (instance ?SECOND Second) (duration ?SECOND (MeasureFn 1 SecondDuration)))))

(forall (?SECOND1 ?NUMBER1 ?MINUTE ?SECOND2 ?NUMBER2) (=> (and (instance ?SECOND1 Second) (instance ?NUMBER1 PositiveRealNumber) (subclass ?MINUTE Minute) (instance ?SECOND2 Second) (instance ?NUMBER2 PositiveRealNumber)) (=> (and (instance ?SECOND1 (SecondFn ?NUMBER1 ?MINUTE)) (instance ?SECOND2 (SecondFn ?NUMBER2 ?MINUTE)) (equal (SubtractionFn ?NUMBER2 ?NUMBER1) 1)) (meetsTemporally ?SECOND1 ?SECOND2))))

(forall (?SEE ?AGENT ?OBJ) (=> (and (instance ?SEE Process) (instance ?AGENT CognitiveAgent) (instance ?OBJ Object)) (=> (and (instance ?SEE Seeing) (agent ?SEE ?AGENT) (patient ?SEE ?OBJ)) (and (attribute ?OBJ Illuminated) (exists (?PROP) (and (instance ?PROP Attribute) (instance ?PROP ColorAttribute) (knows ?AGENT `(attribute ?OBJ ?PROP))))))))

(forall (?SEED) (=> (instance ?SEED Object) (=> (instance ?SEED Seed) (exists (?PLANT ?TIME) (and (instance ?PLANT Object) (instance ?TIME TimePosition) (instance ?PLANT FloweringPlant) (holdsDuring ?TIME `(part ?SEED ?PLANT)))))))

(forall (?SELL ?AGENT) (=> (and (instance ?SELL Process) (instance ?AGENT Agent)) (=> (and (instance ?SELL Selling) (agent ?SELL ?AGENT)) (origin ?SELL ?AGENT))))

(forall (?SENT) (=> (instance ?SENT ContentBearingPhysical) (=> (instance ?SENT Sentence) (exists (?PROP) (and (instance ?PROP Proposition) (containsInformation ?SENT ?PROP))))))

(forall (?SENT) (=> (instance ?SENT Object) (=> (instance ?SENT Sentence) (exists (?NOUN ?VERB) (and (instance ?NOUN Object) (instance ?VERB Object) (instance ?NOUN NounPhrase) (instance ?VERB VerbPhrase) (part ?NOUN ?SENT) (part ?VERB ?SENT))))))

(forall (?SENTENCE) (=> (instance ?SENTENCE Object) (=> (instance ?SENTENCE Sentence) (exists (?PHRASE1 ?PHRASE2) (and (instance ?PHRASE1 Object) (instance ?PHRASE2 Object) (instance ?PHRASE1 NounPhrase) (instance ?PHRASE2 VerbPhrase) (part ?PHRASE1 ?SENTENCE) (part ?PHRASE2 ?SENTENCE))))))

(forall (?SEPARATE) (=> (instance ?SEPARATE Process) (=> (instance ?SEPARATE Separating) (exists (?OBJ) (and (instance ?OBJ SelfConnectedObject) (patient ?SEPARATE ?OBJ))))))

(forall (?SEQ ?CLASS) (=> (and (instance ?SEQ Function) (instance ?CLASS SetOrClass)) (=> (and (instance ?SEQ SequenceFunction) (range ?SEQ ?CLASS)) (subclass ?CLASS Integer))))

(forall (?SERIES ?NUMBER ?VOLUME) (=> (and (subclass ?SERIES Series) (subclass ?SERIES ContentBearingObject) (instance ?NUMBER PositiveInteger) (subclass ?VOLUME Text) (subclass ?VOLUME ContentBearingObject)) (=> (equal (SeriesVolumeFn ?SERIES ?NUMBER) ?VOLUME) (subsumesContentClass ?SERIES ?VOLUME))))

(forall (?SERIES) (=> (instance ?SERIES ContentBearingObject) (=> (instance ?SERIES Series) (exists (?BOOK1 ?BOOK2) (and (instance ?BOOK1 ContentBearingObject) (instance ?BOOK2 ContentBearingObject) (instance ?BOOK1 Book) (instance ?BOOK2 Book) (subsumesContentInstance ?SERIES ?BOOK1) (subsumesContentInstance ?SERIES ?BOOK2) (not (equal ?BOOK1 ?BOOK2)))))))

(forall (?SET) (=> (instance ?SET (UnionFn SetOrClass Collection)) (=> (instance ?SET FiniteSet) (exists (?NUMBER) (and (instance ?NUMBER Number) (instance ?NUMBER NonnegativeInteger) (equal ?NUMBER (CardinalityFn ?SET)))))))

(forall (?SET) (=> (instance ?SET SetOrClass) (=> (instance ?SET NonNullSet) (exists (?INST) (instance ?INST ?SET)))))

(forall (?SET) (=> (instance ?SET SetOrClass) (=> (instance ?SET NullSet) (not (exists (?INST) (instance ?INST ?SET))))))

(forall (?SET1 ?SET2) (=> (and (instance ?SET1 Set) (instance ?SET2 Set)) (=> (forall (?ELEMENT) (<=> (element ?ELEMENT ?SET1) (element ?ELEMENT ?SET2))) (equal ?SET1 ?SET2))))

(forall (?SIDE ?OBJECT ?PART) (=> (and (instance ?SIDE SelfConnectedObject) (instance ?OBJECT SelfConnectedObject) (instance ?PART Object)) (=> (and (side ?SIDE ?OBJECT) (part ?PART ?OBJECT) (not (connected ?PART ?SIDE))) (exists (?DIRECT) (and (instance ?DIRECT PositionalAttribute) (orientation ?SIDE ?PART ?DIRECT))))))

(forall (?SMELL ?OBJ) (=> (and (instance ?SMELL Process) (instance ?OBJ Object)) (=> (and (instance ?SMELL Smelling) (patient ?SMELL ?OBJ)) (exists (?ATTR) (and (instance ?ATTR Attribute) (instance ?ATTR OlfactoryAttribute) (attribute ?OBJ ?ATTR))))))

(forall (?SMOKE) (=> (instance ?SMOKE Smoke) (exists (?BURNING) (and (instance ?BURNING Process) (instance ?BURNING Combustion) (result ?BURNING ?SMOKE)))))

(forall (?SOUND ?OBJ) (=> (and (instance ?SOUND Process) (instance ?SOUND Object) (instance ?OBJ Agent)) (=> (and (instance ?SOUND RadiatingSound) (agent ?SOUND ?OBJ) (attribute ?SOUND Audible)) (exists (?HUMAN) (and (instance ?HUMAN Agent) (instance ?HUMAN Human) (capability (KappaFn ?HEAR `(and (instance ?HEAR Hearing) (agent ?HEAR ?HUMAN) (destination ?HEAR ?HUMAN) (origin ?HEAR ?OBJ))) agent ?HUMAN))))))

(forall (?SPORE) (=> (instance ?SPORE Object) (=> (instance ?SPORE Spore) (exists (?PLANT ?TIME) (and (instance ?PLANT Object) (instance ?TIME TimePosition) (instance ?PLANT NonFloweringPlant) (holdsDuring ?TIME `(part ?SPORE ?PLANT)))))))

(forall (?STATE ?AGENT ?FORMULA) (=> (and (instance ?STATE Process) (instance ?AGENT CognitiveAgent)) (=> (and (instance ?STATE Stating) (agent ?STATE ?AGENT) (patient ?STATE ?FORMULA) (instance ?FORMULA Formula)) (holdsDuring (WhenFn ?STATE) `(believes ?AGENT ?FORMULA)))))

(forall (?STATE) (=> (instance ?STATE Object) (=> (instance ?STATE County) (exists (?LAND) (and (instance ?LAND Object) (instance ?LAND StateOrProvince) (properPart ?STATE ?LAND))))))

(forall (?STATE) (=> (instance ?STATE Object) (=> (instance ?STATE StateOrProvince) (exists (?LAND) (and (instance ?LAND Object) (instance ?LAND Nation) (properPart ?STATE ?LAND))))))

(forall (?STRING) (=> (instance ?STRING Object) (=> (instance ?STRING SymbolicString) (exists (?PART) (and (instance ?PART Object) (part ?PART ?STRING) (instance ?PART Character))))))

(forall (?STRUCTURE ?ANIMAL) (=> (and (instance ?STRUCTURE Object) (instance ?ANIMAL Object)) (=> (and (instance ?STRUCTURE AnimalAnatomicalStructure) (instance ?ANIMAL Organism) (part ?STRUCTURE ?ANIMAL)) (instance ?ANIMAL Animal))))

(forall (?STRUCTURE ?PLANT) (=> (and (instance ?STRUCTURE Object) (instance ?PLANT Object)) (=> (and (instance ?STRUCTURE PlantAnatomicalStructure) (instance ?PLANT Organism) (part ?STRUCTURE ?PLANT)) (instance ?PLANT Plant))))

(forall (?STRUCTURE) (=> (instance ?STRUCTURE AbnormalAnatomicalStructure) (exists (?PROC) (and (instance ?PROC Process) (instance ?PROC PathologicProcess) (result ?PROC ?STRUCTURE)))))

(forall (?STUFF) (=> (instance ?STUFF Object) (=> (instance ?STUFF Tissue) (exists (?ORGANISM) (and (instance ?ORGANISM Object) (instance ?ORGANISM Organism) (part ?STUFF ?ORGANISM))))))

(forall (?STUFF) (=> (instance ?STUFF Object) (=> (instance ?STUFF Tissue) (exists (?PART) (and (instance ?PART Object) (instance ?PART Cell) (part ?PART ?STUFF))))))

(forall (?SUB ?AREA) (=> (and (instance ?SUB GeopoliticalArea) (instance ?AREA GeopoliticalArea)) (=> (geopoliticalSubdivision ?SUB ?AREA) (not (instance ?SUB Nation)))))

(forall (?SUB) (=> (instance ?SUB Process) (=> (instance ?SUB Substituting) (exists (?PUT ?REMOVE ?OBJ1 ?OBJ2 ?PLACE) (and (instance ?PUT Process) (instance ?REMOVE Process) (instance ?PLACE Object) (instance ?PUT Putting) (instance ?REMOVE Removing) (subProcess ?PUT ?SUB) (subProcess ?REMOVE ?SUB) (patient ?REMOVE ?OBJ1) (origin ?REMOVE ?PLACE) (patient ?PUT ?OBJ2) (destination ?PUT ?PLACE) (not (equal ?OBJ1 ?OBJ2)))))))

(forall (?SUBPROC ?PROC) (=> (and (instance ?SUBPROC Process) (instance ?PROC Process)) (=> (subProcess ?SUBPROC ?PROC) (forall (?REGION) (=> (instance ?REGION Object) (=> (located ?PROC ?REGION) (located ?SUBPROC ?REGION)))))))

(forall (?SUBPROC ?PROC) (=> (and (instance ?SUBPROC Process) (instance ?PROC Process)) (=> (subProcess ?SUBPROC ?PROC) (temporalPart (WhenFn ?SUBPROC) (WhenFn ?PROC)))))

(forall (?SUBSET ?SET) (=> (and (instance ?SUBSET Set) (instance ?SET Set)) (=> (subset ?SUBSET ?SET) (forall (?ELEMENT) (=> (element ?ELEMENT ?SUBSET) (element ?ELEMENT ?SET))))))

(forall (?SUBSTANCE ?ANIMAL) (=> (and (instance ?SUBSTANCE Object) (instance ?ANIMAL Object)) (=> (and (instance ?SUBSTANCE AnimalSubstance) (instance ?ANIMAL Organism) (part ?SUBSTANCE ?ANIMAL)) (instance ?ANIMAL Animal))))

(forall (?SUBSTANCE ?PLANT) (=> (and (instance ?SUBSTANCE Object) (instance ?PLANT Object)) (=> (and (instance ?SUBSTANCE PlantSubstance) (instance ?PLANT Organism) (part ?SUBSTANCE ?PLANT)) (instance ?PLANT Plant))))

(forall (?SUBSTANCE) (<=> (instance ?SUBSTANCE SyntheticSubstance) (exists (?PROCESS) (and (instance ?PROCESS Process) (instance ?PROCESS IntentionalProcess) (result ?PROCESS ?SUBSTANCE) (instance ?SUBSTANCE Substance)))))

(forall (?SUBSTANCE1 ?SUBSTANCE2) (=> (and (instance ?SUBSTANCE1 Substance) (instance ?SUBSTANCE2 Substance)) (=> (piece ?SUBSTANCE1 ?SUBSTANCE2) (forall (?CLASS) (=> (instance ?CLASS SetOrClass) (=> (instance ?SUBSTANCE1 ?CLASS) (instance ?SUBSTANCE2 ?CLASS)))))))

(forall (?SUPERCLASS) (=> (instance ?SUPERCLASS SetOrClass) (=> (instance ?SUPERCLASS PairwiseDisjointClass) (forall (?CLASS1 ?CLASS2) (=> (and (instance ?CLASS1 SetOrClass) (instance ?CLASS2 SetOrClass)) (=> (and (instance ?CLASS1 ?SUPERCLASS) (instance ?CLASS2 ?SUPERCLASS)) (or (equal ?CLASS1 ?CLASS2) (disjoint ?CLASS1 ?CLASS2))))))))

(forall (?SWIM ?AGENT) (=> (and (instance ?SWIM Process) (instance ?AGENT Agent)) (=> (and (instance ?SWIM Swimming) (agent ?SWIM ?AGENT)) (exists (?AREA) (and (instance ?AREA Object) (instance ?AREA WaterArea) (located ?AGENT ?AREA))))))

(forall (?T1 ?ORGANISM ?OBJ) (=> (and (instance ?T1 TimePosition) (instance ?ORGANISM Organism) (instance ?OBJ Object)) (=> (holdsDuring ?T1 `(inhabits ?ORGANISM ?OBJ)) (exists (?TIME) (and (instance ?TIME TimePosition) (instance ?TIME TimeInterval) (temporalPart ?TIME ?T1) (holdsDuring ?TIME `(located ?ORGANISM ?OBJ)))))))

(forall (?T1 ?P1 ?P2) (=> (and (instance ?P1 Human) (instance ?P2 Human)) (=> (and (holdsDuring ?T1 `(spouse ?P1 ?P2)) (instance ?T1 TimeInterval)) (exists (?WED) (and (instance ?WED Process) (instance ?WED Wedding) (patient ?WED ?P1) (patient ?WED ?P2) (earlier (WhenFn ?WED) ?T1))))))

(forall (?T1 ?T2 ?O1 ?D1 ?D2 ?P) (=> (and (instance ?T1 Process) (instance ?T2 Process) (instance ?O1 Object) (instance ?D1 Object) (instance ?P Agent)) (=> (and (instance ?T1 Translocation) (instance ?T2 Translocation) (origin ?T1 ?O1) (origin ?T2 ?D1) (destination ?T1 ?D1) (destination ?T2 ?D2) (experiencer ?T1 ?P) (experiencer ?T2 ?P)) (exists (?T) (and (instance ?T Process) (instance ?T Translocation) (origin ?T ?O1) (destination ?T ?D2) (subProcess ?T1 ?T) (subProcess ?T2 ?T) (experiencer ?T ?P) (starts (WhenFn ?T1) (WhenFn ?T)) (finishes (WhenFn ?T2) (WhenFn ?T)))))))

(forall (?T2 ?SIT2 ?T1 ?SIT1) (=> (and (instance ?SIT2 Formula) (instance ?SIT1 Formula)) (=> (and (holdsDuring ?T2 ?SIT2) (holdsDuring ?T1 ?SIT1) (instance ?T1 TimeInterval) (instance ?T2 TimeInterval) (causesProposition ?SIT1 ?SIT2)) (beforeOrEqual (BeginFn ?T1) (BeginFn ?T2)))))

(forall (?TACTILE) (=> (instance ?TACTILE Process) (=> (instance ?TACTILE TactilePerception) (exists (?TOUCH) (and (instance ?TOUCH Process) (instance ?TOUCH Touching) (subProcess ?TOUCH ?TACTILE))))))

(forall (?TASTE ?OBJ) (=> (and (instance ?TASTE Process) (instance ?OBJ Object)) (=> (and (instance ?TASTE Tasting) (patient ?TASTE ?OBJ)) (exists (?ATTR) (and (instance ?ATTR Attribute) (instance ?ATTR TasteAttribute) (attribute ?OBJ ?ATTR))))))

(forall (?TEXT ?AGENT ?CONTENT) (=> (and (instance ?TEXT ContentBearingObject) (subclass ?TEXT Text) (instance ?AGENT CognitiveAgent) (instance ?CONTENT ContentBearingObject)) (=> (and (instance ?TEXT FactualText) (authors ?AGENT ?TEXT) (subsumesContentInstance ?TEXT ?CONTENT) (instance ?CONTENT Formula)) (believes ?AGENT ?CONTENT))))

(forall (?TEXT ?AGENT) (=> (and (instance ?TEXT ContentBearingObject) (subclass ?TEXT Text) (instance ?AGENT CognitiveAgent)) (=> (and (instance ?TEXT FactualText) (authors ?AGENT ?TEXT)) (exists (?CONTENT) (and (instance ?CONTENT ContentBearingObject) (subsumesContentInstance ?TEXT ?CONTENT) (instance ?CONTENT Formula) (not (believes ?AGENT ?CONTENT)))))))

(forall (?TEXT ?INT1 ?EDITION1 ?INT2 ?EDITION2 ?PUB1 ?PUB2 ?DATE1 ?DATE2) (=> (and (subclass ?TEXT ContentBearingObject) (instance ?INT1 PositiveInteger) (subclass ?EDITION1 ContentBearingObject) (instance ?INT2 PositiveInteger) (subclass ?EDITION2 ContentBearingObject) (instance ?PUB1 Process) (instance ?PUB2 Process) (instance ?DATE1 Day) (instance ?DATE2 Day)) (=> (and (equal (EditionFn ?TEXT ?INT1) ?EDITION1) (equal (EditionFn ?TEXT ?INT2) ?EDITION2) (greaterThan ?INT2 ?INT1) (instance ?PUB1 Publication) (instance ?PUB2 Publication) (patient ?PUB1 ?EDITION1) (patient ?PUB2 ?EDITION2) (date ?PUB1 ?DATE1) (date ?PUB2 ?DATE2)) (before (EndFn ?DATE1) (EndFn ?DATE2)))))

(forall (?TEXT ?INT1 ?VOLUME1 ?INT2 ?VOLUME2 ?PUB1 ?PUB2 ?DATE1 ?DATE2) (=> (and (instance ?TEXT SetOrClass) (subclass ?TEXT Series) (instance ?INT1 PositiveInteger) (subclass ?VOLUME1 Text) (instance ?INT2 PositiveInteger) (subclass ?VOLUME2 Text) (instance ?PUB1 Process) (instance ?PUB2 Process) (instance ?DATE1 Day) (instance ?DATE2 Day)) (=> (and (subclass ?TEXT Periodical) (equal (SeriesVolumeFn ?TEXT ?INT1) ?VOLUME1) (equal (SeriesVolumeFn ?TEXT ?INT2) ?VOLUME2) (greaterThan ?INT2 ?INT1) (instance ?PUB1 Publication) (instance ?PUB2 Publication) (patient ?PUB1 ?VOLUME1) (patient ?PUB2 ?VOLUME2) (date ?PUB1 ?DATE1) (date ?PUB2 ?DATE2)) (before (EndFn ?DATE1) (EndFn ?DATE2)))))

(forall (?TEXT) (=> (instance ?TEXT ContentBearingObject) (=> (instance ?TEXT Summary) (exists (?TEXT2) (and (instance ?TEXT2 ContentBearingObject) (instance ?TEXT2 Text) (subsumesContentInstance ?TEXT2 ?TEXT))))))

(forall (?TEXT) (=> (instance ?TEXT Object) (=> (instance ?TEXT Text) (exists (?PART) (and (instance ?PART Object) (part ?PART ?TEXT) (instance ?PART LinguisticExpression))))))

(forall (?TEXT) (=> (instance ?TEXT Text) (exists (?WRITE) (and (instance ?WRITE Process) (instance ?WRITE Writing) (result ?WRITE ?TEXT)))))

(forall (?TEXT1 ?NUMBER ?TEXT2) (=> (and (subclass ?TEXT1 ContentBearingObject) (instance ?NUMBER PositiveInteger) (subclass ?TEXT2 ContentBearingObject)) (=> (equal (EditionFn ?TEXT1 ?NUMBER) ?TEXT2) (subsumesContentClass ?TEXT1 ?TEXT2))))

(forall (?THING ?ATTR) (=> (and (instance ?THING Agent) (instance ?THING Process) (instance ?ATTR Attribute)) (=> (and (property ?THING ?ATTR) (instance ?ATTR ContestAttribute)) (exists (?CONTEST) (and (instance ?CONTEST Process) (instance ?CONTEST Contest) (or (agent ?CONTEST ?THING) (patient ?CONTEST ?THING) (subProcess ?THING ?CONTEST)))))))

(forall (?THING ?PURPOSE) (=> (and (instance ?THING Physical) (instance ?PURPOSE Formula)) (=> (hasPurpose ?THING ?PURPOSE) (exists (?AGENT) (and (instance ?AGENT CognitiveAgent) (hasPurposeForAgent ?THING ?PURPOSE ?AGENT))))))

(forall (?THING ?TIME ?REGION) (=> (and (instance ?THING Physical) (instance ?TIME TimePoint) (instance ?REGION Region)) (<=> (equal (WhereFn ?THING ?TIME) ?REGION) (holdsDuring ?TIME `(exactlyLocated ?THING ?REGION)))))

(forall (?THING) (instance ?THING Entity))

(forall (?THING1 ?THING2) (=> (equal ?THING1 ?THING2) (forall (?ATTR) (=> (instance ?ATTR Attribute) (<=> (property ?THING1 ?ATTR) (property ?THING2 ?ATTR))))))

(forall (?THING1 ?THING2) (=> (equal ?THING1 ?THING2) (forall (?CLASS) (=> (instance ?CLASS SetOrClass) (<=> (instance ?THING1 ?CLASS) (instance ?THING2 ?CLASS))))))

(forall (?TIME ?AGENT1 ?OBJ ?AGENT2) (=> (and (instance ?AGENT1 Agent) (instance ?OBJ Object) (instance ?AGENT2 Agent)) (=> (and (instance ?TIME TimePosition) (holdsDuring ?TIME `(possesses ?AGENT1 ?OBJ)) (holdsDuring ?TIME `(possesses ?AGENT2 ?OBJ))) (equal ?AGENT1 ?AGENT2))))

(forall (?TIME ?ENTITY ?FORMULA ?NORM) (=> (and (instance ?TIME TimePosition) (instance ?FORMULA Formula) (instance ?NORM ObjectiveNorm)) (=> (holdsDuring ?TIME `(confersNorm ?ENTITY ?FORMULA ?NORM)) (and (holdsDuring (ImmediatePastFn ?TIME) `(not (modalAttribute ?FORMULA ?NORM))) (holdsDuring (ImmediateFutureFn ?TIME) `(modalAttribute ?FORMULA ?NORM))))))

(forall (?TIME ?ENTITY ?FORMULA ?NORM) (=> (and (instance ?TIME TimePosition) (instance ?FORMULA Formula) (instance ?NORM ObjectiveNorm)) (=> (holdsDuring ?TIME `(deprivesNorm ?ENTITY ?FORMULA ?NORM)) (and (holdsDuring (ImmediatePastFn ?TIME) `(modalAttribute ?FORMULA ?NORM)) (holdsDuring (ImmediateFutureFn ?TIME) `(not (modalAttribute ?FORMULA ?NORM)))))))

(forall (?TIME ?OBJ ?DURATION) (=> (and (instance ?OBJ Object) (instance ?DURATION TimeDuration)) (=> (and (instance ?TIME TimePoint) (holdsDuring ?TIME `(age ?OBJ ?DURATION))) (duration (TimeIntervalFn (BeginFn (WhenFn ?OBJ)) ?TIME) ?DURATION))))

(forall (?TIME ?ORG) (=> (and (instance ?TIME TimePosition) (instance ?ORG Agent)) (=> (holdsDuring ?TIME `(attribute ?ORG Embryonic)) (holdsDuring ?TIME `(not (exists (?BIRTH) (and (instance ?BIRTH Process) (instance ?BIRTH Birth) (experiencer ?BIRTH ?ORG))))))))

(forall (?TIME ?ORG) (=> (and (instance ?TIME TimePosition) (instance ?ORG Agent)) (=> (holdsDuring ?TIME `(attribute ?ORG Larval)) (holdsDuring (PastFn ?TIME) `(exists (?BIRTH) (and (instance ?BIRTH Process) (instance ?BIRTH Birth) (experiencer ?BIRTH ?ORG)))))))

(forall (?TIME ?PROC ?ATTR1) (=> (and (instance ?TIME TimePosition) (instance ?PROC Object) (instance ?ATTR1 DirectionalAttribute)) (=> (holdsDuring ?TIME `(faces ?PROC ?ATTR1)) (forall (?ATTR2) (=> (instance ?ATTR2 DirectionalAttribute) (=> (holdsDuring ?TIME `(faces ?PROC ?ATTR2)) (equal ?ATTR2 ?ATTR1)))))))

(forall (?TIME ?PROC ?ATTR1) (=> (and (instance ?TIME TimePosition) (instance ?PROC Process) (instance ?ATTR1 DirectionalAttribute)) (=> (holdsDuring ?TIME `(direction ?PROC ?ATTR1)) (forall (?ATTR2) (=> (instance ?ATTR2 DirectionalAttribute) (=> (holdsDuring ?TIME `(direction ?PROC ?ATTR2)) (equal ?ATTR2 ?ATTR1)))))))

(forall (?TIME ?SITUATION) (=> (and (instance ?TIME TimePosition) (instance ?SITUATION Formula)) (=> (holdsDuring ?TIME `(not ?SITUATION)) (not (holdsDuring ?TIME ?SITUATION)))))

(forall (?TIME ?SITUATION1 ?SITUATION2) (=> (and (instance ?TIME TimePosition) (instance ?SITUATION1 Formula) (instance ?SITUATION2 Formula)) (=> (and (holdsDuring ?TIME ?SITUATION1) (entails ?SITUATION1 ?SITUATION2)) (holdsDuring ?TIME ?SITUATION2))))

(forall (?TIME1 ?OBJ ?ATTR1 ?ATTR2) (=> (and (instance ?TIME1 TimeInterval) (instance ?OBJ OrganicObject) (instance ?ATTR1 DevelopmentalAttribute) (instance ?ATTR2 DevelopmentalAttribute)) (=> (and (holdsDuring ?TIME1 `(developmentalForm ?OBJ ?ATTR1)) (successorAttributeClosure ?ATTR2 ?ATTR1)) (exists (?TIME2) (and (instance ?TIME2 TimeInterval) (earlier ?TIME2 ?TIME1) (holdsDuring ?TIME2 `(developmentalForm ?OBJ ?ATTR2)))))))

(forall (?TIME1 ?SITUATION ?TIME2) (=> (and (instance ?TIME1 TimePosition) (instance ?SITUATION Formula) (instance ?TIME2 TimePosition)) (=> (and (holdsDuring ?TIME1 ?SITUATION) (temporalPart ?TIME2 ?TIME1)) (holdsDuring ?TIME2 ?SITUATION))))

(forall (?TIME1 ?TIME2) (=> (and (instance ?TIME1 TimePosition) (instance ?TIME2 TimePosition)) (=> (equal (RelativeTimeFn ?TIME1 CentralTimeZone) ?TIME2) (equal ?TIME2 (AdditionFn ?TIME1 6)))))

(forall (?TIME1 ?TIME2) (=> (and (instance ?TIME1 TimePosition) (instance ?TIME2 TimePosition)) (=> (equal (RelativeTimeFn ?TIME1 EasternTimeZone) ?TIME2) (equal ?TIME2 (AdditionFn ?TIME1 5)))))

(forall (?TIME1 ?TIME2) (=> (and (instance ?TIME1 TimePosition) (instance ?TIME2 TimePosition)) (=> (equal (RelativeTimeFn ?TIME1 MountainTimeZone) ?TIME2) (equal ?TIME2 (AdditionFn ?TIME1 7)))))

(forall (?TIME1 ?TIME2) (=> (and (instance ?TIME1 TimePosition) (instance ?TIME2 TimePosition)) (=> (equal (RelativeTimeFn ?TIME1 PacificTimeZone) ?TIME2) (equal ?TIME2 (AdditionFn ?TIME1 8)))))

(forall (?TOP ?OBJECT ?PART) (=> (and (instance ?TOP SelfConnectedObject) (instance ?OBJECT SelfConnectedObject) (instance ?PART Object)) (=> (and (top ?TOP ?OBJECT) (part ?PART ?OBJECT) (not (connected ?PART ?TOP))) (orientation ?PART ?TOP Below))))

(forall (?TOUCH ?OBJ1 ?OBJ2) (=> (and (instance ?TOUCH Process) (instance ?OBJ1 Agent) (instance ?OBJ2 Object)) (=> (and (instance ?TOUCH Touching) (agent ?TOUCH ?OBJ1) (patient ?TOUCH ?OBJ2)) (and (holdsDuring (BeginFn (WhenFn ?TOUCH)) `(not (connected ?OBJ1 ?OBJ2))) (holdsDuring (EndFn (WhenFn ?TOUCH)) `(connected ?OBJ1 ?OBJ2))))))

(forall (?TRANS ?AMOUNT) (=> (and (instance ?TRANS FinancialTransaction) (instance ?AMOUNT CurrencyMeasure)) (=> (transactionAmount ?TRANS ?AMOUNT) (exists (?OBJ) (and (instance ?OBJ Physical) (patient ?TRANS ?OBJ) (monetaryValue ?OBJ ?AMOUNT))))))

(forall (?TRANS) (=> (instance ?TRANS Process) (=> (instance ?TRANS FinancialTransaction) (exists (?OBJ) (and (patient ?TRANS ?OBJ) (instance ?OBJ Currency))))))

(forall (?TRANS) (=> (instance ?TRANS Process) (=> (instance ?TRANS Transaction) (exists (?AGENT1 ?AGENT2 ?GIVE1 ?GIVE2 ?OBJ1 ?OBJ2) (and (instance ?AGENT1 Agent) (instance ?AGENT2 Agent) (instance ?GIVE1 Process) (instance ?GIVE2 Process) (instance ?GIVE1 Giving) (instance ?GIVE2 Giving) (subProcess ?GIVE1 ?TRANS) (subProcess ?GIVE2 ?TRANS) (agent ?GIVE1 ?AGENT1) (agent ?GIVE2 ?AGENT2) (patient ?GIVE1 ?OBJ1) (patient ?GIVE2 ?OBJ2) (destination ?GIVE1 ?AGENT2) (destination ?GIVE2 ?AGENT1) (not (equal ?AGENT1 ?AGENT2)) (not (equal ?OBJ1 ?OBJ2)))))))

(forall (?TRANS) (=> (instance ?TRANS Process) (=> (instance ?TRANS Transportation) (exists (?DEVICE) (and (instance ?DEVICE Object) (instance ?DEVICE TransportationDevice) (instrument ?TRANS ?DEVICE))))))

(forall (?TRANSFER ?AGENT ?PATIENT) (=> (and (instance ?TRANSFER Process) (instance ?AGENT Agent)) (=> (and (instance ?TRANSFER Transfer) (agent ?TRANSFER ?AGENT) (patient ?TRANSFER ?PATIENT)) (not (equal ?AGENT ?PATIENT)))))

(forall (?TRANSLATE ?EXPRESSION1 ?EXPRESSION2) (=> (and (instance ?TRANSLATE Process) (instance ?EXPRESSION1 LinguisticExpression) (instance ?EXPRESSION2 LinguisticExpression)) (=> (and (instance ?TRANSLATE Translating) (patient ?TRANSLATE ?EXPRESSION1) (result ?TRANSLATE ?EXPRESSION2)) (exists (?LANGUAGE1 ?LANGUAGE2 ?ENTITY) (and (instance ?LANGUAGE1 Language) (instance ?LANGUAGE2 Language) (representsInLanguage ?EXPRESSION1 ?ENTITY ?LANGUAGE1) (representsInLanguage ?EXPRESSION2 ?ENTITY ?LANGUAGE2) (not (equal ?LANGUAGE1 ?LANGUAGE2)))))))

(forall (?TRANSPORT ?MOVE ?FROM) (=> (and (instance ?TRANSPORT Object) (instance ?MOVE Process) (instance ?FROM Object)) (=> (and (instance ?TRANSPORT Vehicle) (instance ?MOVE Translocation) (instrument ?MOVE ?TRANSPORT) (origin ?MOVE ?FROM)) (holdsDuring (BeginFn (WhenFn ?MOVE)) `(located ?TRANSPORT ?FROM)))))

(forall (?TRANSPORT ?MOVE ?TO) (=> (and (instance ?TRANSPORT Object) (instance ?MOVE Process) (instance ?TO Object)) (=> (and (instance ?TRANSPORT Vehicle) (instance ?MOVE Translocation) (instrument ?MOVE ?TRANSPORT) (destination ?MOVE ?TO)) (holdsDuring (BeginFn (WhenFn ?MOVE)) `(located ?TRANSPORT ?TO)))))

(forall (?UNIT ?MEMBER) (=> (and (instance ?UNIT Collection) (instance ?MEMBER Human)) (=> (instance ?UNIT SocialUnit) (exists (?HOME) (and (instance ?HOME PermanentResidence) (=> (member ?MEMBER ?UNIT) (home ?MEMBER ?HOME)))))))

(forall (?UNIT) (=> (instance ?UNIT UnitOfMeasure) (equal (GigaFn ?UNIT) (MeasureFn 1000000000 ?UNIT))))

(forall (?UNIT) (=> (instance ?UNIT UnitOfMeasure) (equal (KiloFn ?UNIT) (MeasureFn 1000 ?UNIT))))

(forall (?UNIT) (=> (instance ?UNIT UnitOfMeasure) (equal (MegaFn ?UNIT) (MeasureFn 1000000 ?UNIT))))

(forall (?UNIT) (=> (instance ?UNIT UnitOfMeasure) (equal (MicroFn ?UNIT) (MeasureFn 0.000001 ?UNIT))))

(forall (?UNIT) (=> (instance ?UNIT UnitOfMeasure) (equal (MilliFn ?UNIT) (MeasureFn 0.001 ?UNIT))))

(forall (?UNIT) (=> (instance ?UNIT UnitOfMeasure) (equal (NanoFn ?UNIT) (MeasureFn 0.000000001 ?UNIT))))

(forall (?UNIT) (=> (instance ?UNIT UnitOfMeasure) (equal (PicoFn ?UNIT) (MeasureFn 0.000000000001 ?UNIT))))

(forall (?UNIT) (=> (instance ?UNIT UnitOfMeasure) (equal (TeraFn ?UNIT) (MeasureFn 1000000000000 ?UNIT))))

(forall (?VIRUS ?OBJ) (=> (and (instance ?VIRUS Organism) (instance ?OBJ Object)) (=> (and (instance ?VIRUS Virus) (inhabits ?VIRUS ?OBJ)) (instance ?OBJ Organism))))

(forall (?VIRUS ?PROC) (=> (and (instance ?VIRUS Agent) (instance ?PROC Process)) (=> (and (instance ?VIRUS Virus) (instance ?PROC Replication) (agent ?PROC ?VIRUS)) (exists (?CELL) (and (instance ?CELL Object) (located ?PROC ?CELL) (instance ?CELL Cell))))))

(forall (?VOCAL) (=> (instance ?VOCAL Process) (=> (instance ?VOCAL Vocalizing) (exists (?HUMAN) (and (instance ?HUMAN Agent) (instance ?HUMAN Human) (agent ?VOCAL ?HUMAN) (instrument ?VOCAL ?HUMAN))))))

(forall (?VOTE) (=> (instance ?VOTE Process) (=> (instance ?VOTE Voting) (exists (?ELECT) (and (instance ?ELECT Process) (instance ?ELECT Election) (subProcess ?VOTE ?ELECT))))))

(forall (?WALK ?RUN ?AGENT ?LENGTH1 ?TIME ?LENGTH2) (=> (and (instance ?WALK Process) (instance ?RUN Process) (instance ?AGENT Agent) (instance ?LENGTH1 LengthMeasure) (instance ?TIME TimeDuration) (instance ?LENGTH2 LengthMeasure)) (=> (and (instance ?WALK Walking) (instance ?RUN Running) (agent ?WALK ?AGENT) (agent ?RUN ?AGENT) (holdsDuring (WhenFn ?WALK) `(measure ?AGENT (SpeedFn ?LENGTH1 ?TIME))) (holdsDuring (WhenFn ?RUN) `(measure ?AGENT (SpeedFn ?LENGTH2 ?TIME)))) (greaterThan ?LENGTH2 ?LENGTH1))))

(forall (?WAR ?AGENT) (=> (and (instance ?WAR Process) (instance ?AGENT Agent) (instance ?AGENT Collection)) (=> (and (instance ?WAR War) (agent ?WAR ?AGENT)) (or (instance ?AGENT GeopoliticalArea) (and (instance ?AGENT Organization) (forall (?MEMBER) (=> (instance ?MEMBER SelfConnectedObject) (=> (member ?MEMBER ?AGENT) (instance ?MEMBER GeopoliticalArea)))))))))

(forall (?WAR) (=> (instance ?WAR Process) (=> (instance ?WAR War) (exists (?BATTLE) (and (instance ?BATTLE Process) (instance ?BATTLE Battle) (subProcess ?BATTLE ?WAR))))))

(forall (?WAY) (=> (instance ?WAY Object) (=> (instance ?WAY Transitway) (hasPurpose `(exists (?TRANSPORT) (and (instance ?TRANSPORT Motion) (instance ?TRANSPORT Transportation) (path ?TRANSPORT ?WAY)))))))

(forall (?WEAPON) (=> (instance ?WEAPON Object) (=> (instance ?WEAPON Weapon) (capability Damaging instrument ?WEAPON))))

(forall (?WEAPON) (=> (instance ?WEAPON Physical) (=> (instance ?WEAPON Weapon) (hasPurpose ?WEAPON `(exists (?DEST ?PATIENT) (and (instance ?DEST Process) (instance ?PATIENT Object) (instance ?DEST Damaging) (patient ?DEST ?PATIENT) (or (instance ?PATIENT StationaryArtifact) (instance ?PATIENT Animal) (exists (?ANIMAL) (and (instance ?ANIMAL Organism) (instance ?ANIMAL Animal) (inhabits ?ANIMAL ?PATIENT))))))))))

(forall (?WED) (=> (instance ?WED Physical) (=> (instance ?WED Wedding) (exists (?PERSON1 ?PERSON2) (and (instance ?PERSON1 Human) (instance ?PERSON2 Human) (holdsDuring (ImmediateFutureFn (WhenFn ?WED)) `(spouse ?PERSON1 ?PERSON2)))))))

(forall (?WEEK) (=> (instance ?WEEK TimeInterval) (=> (instance ?WEEK Week) (duration ?WEEK (MeasureFn 1 WeekDuration)))))

(forall (?WEEK) (=> (instance ?WEEK TimeInterval) (=> (instance ?WEEK Week) (equal (CardinalityFn (TemporalCompositionFn ?WEEK Day)) 7))))

(forall (?WET) (=> (instance ?WET Process) (=> (instance ?WET Wetting) (exists (?OBJ) (and (instance ?OBJ Object) (attribute ?OBJ Liquid) (patient ?WET ?OBJ))))))

(forall (?WET) (=> (instance ?WET Process) (=> (instance ?WET Wetting) (exists (?OBJ) (and (instance ?OBJ Object) (patient ?WET ?OBJ) (holdsDuring (BeginFn (WhenFn ?WET)) `(not (attribute ?OBJ Damp))) (holdsDuring (EndFn (WhenFn ?WET)) `(attribute ?OBJ Damp)))))))

(forall (?WIND) (=> (instance ?WIND Process) (=> (instance ?WIND Wind) (exists (?AIR) (and (patient ?WIND ?AIR) (instance ?AIR Air))))))

(forall (?WOMAN) (=> (instance ?WOMAN Object) (=> (instance ?WOMAN Woman) (attribute ?WOMAN Female))))

(forall (?WORD) (=> (instance ?WORD Object) (=> (instance ?WORD Word) (exists (?PART) (and (instance ?PART Object) (part ?PART ?WORD) (instance ?PART Morpheme))))))

(forall (?X ?Y ?Z) (=> (and (instance ?X SetOrClass) (instance ?Y SetOrClass)) (=> (and (subclass ?X ?Y) (instance ?Z ?X)) (instance ?Z ?Y))))

(forall (?X ?Y) (=> (and (instance ?X Agent) (instance ?Y Human)) (=> (leader ?X ?Y) (attribute ?Y Living))))

(forall (?X ?Y) (=> (subclass ?X ?Y) (and (instance ?X SetOrClass) (instance ?Y SetOrClass))))

(forall (?X) (=> (instance ?X Object) (=> (attribute ?X Flammable) (capability Combustion patient ?X))))

(forall (?YEAR ?MONTH) (=> (and (subclass ?YEAR Year) (instance ?MONTH TimeInterval) (subclass ?MONTH Month)) (=> (and (equal (MonthFn February ?YEAR) ?MONTH) (instance ?YEAR LeapYear)) (duration ?MONTH (MeasureFn 29 DayDuration)))))

(forall (?YEAR ?MONTH) (=> (and (subclass ?YEAR Year) (instance ?MONTH TimeInterval) (subclass ?MONTH Month)) (=> (and (equal (MonthFn February ?YEAR) ?MONTH) (not (instance ?YEAR LeapYear))) (duration ?MONTH (MeasureFn 28 DayDuration)))))

(forall (?YEAR) (=> (instance ?YEAR TimeInterval) (=> (instance ?YEAR Year) (duration ?YEAR (MeasureFn 1 YearDuration)))))

(forall (?YEAR) (=> (instance ?YEAR TimeInterval) (=> (instance ?YEAR Year) (equal (CardinalityFn (TemporalCompositionFn ?YEAR Month)) 12))))

(forall (?YEAR1 ?YEAR2) (=> (and (instance ?YEAR1 TimeInterval) (instance ?YEAR2 TimeInterval)) (=> (and (instance ?YEAR1 Year) (instance ?YEAR2 Year) (equal (SubtractionFn ?YEAR2 ?YEAR1) 1)) (meetsTemporally ?YEAR1 ?YEAR2))))

(format en AbsoluteValueFn "the &%absolute &%value of %1")

(format en AbstractionFn "the &%description of %1")

(format en AdditionFn "the &%sum of %1 &%plus %2")

(format en AssignmentFn "%1(%*{2-}[, ])")

(format en BackFn "the &%back of %1")

(format en BeginFn "the &%beginning of %1")

(format en BeginNodeFn "the &%beginning of %1")

(format en CardinalityFn "the number of &%instances in %1")

(format en CeilingFn "the &%ceiling of %1")

(format en ComplementFn "the &%complement of %1")

(format en CosineFn "the &%cosine of %1")

(format en CutSetFn "the &%set of paths that partition %1 into two separate graphs")

(format en DayFn "the &%day %1")

(format en DenominatorFn "the &%denominator of %1")

(format en DensityFn "%1 &%per %2")

(format en DivisionFn "the &%quotient of %1 &%divided by %2")

(format en EditionFn "&%edition %2 of %1")

(format en EndFn "the &%end of %1")

(format en EndNodeFn "the &%end of %1")

(format en ExponentiationFn "%1 raised to the &%power %2")

(format en ExtensionFn "the &%class corresponding to %1")

(format en FloorFn "the &%largest integer less than or equal to %1")

(format en FrontFn "the &%front of %1")

(format en FutureFn "&%after %1")

(format en GeneralizedIntersectionFn "the &%intersection of all the elements of %1")

(format en GeneralizedUnionFn "the &%union of all the elements of %1")

(format en GigaFn "1 &%billion %1s")

(format en GovernmentFn "the &%government of %1")

(format en GraphPathFn "the &%set of paths between %1 and %2")

(format en GreatestCommonDivisorFn "the &%greatest common divisor of %*[ and ]")

(format en HoleHostFn "the &%host of the hole %1")

(format en HoleSkinFn "the &%surface of the hole %1")

(format en HourFn "the &%hour %1")

(format en ImaginaryPartFn "the &%imaginary part of %1")

(format en ImmediateFutureFn "immediately &%after %1")

(format en ImmediatePastFn "immediately &%before %1")

(format en InitialNodeFn "the &%starting node of %1")

(format en IntegerSquareRootFn "the &%integer square root of %1")

(format en IntersectionFn "the &%union of %1 and %2")

(format en IntervalFn "the &%interval from %1 to %2")

(format en KappaFn "the &%class described by %1")

(format en KiloFn "1 &%thousand %1s")

(format en LeastCommonMultipleFn "the &%least common multiple of %*[ and ]")

(format en ListConcatenateFn "the &%list composed of %1 and %2")

(format en ListFn "(%*[, ])")

(format en ListLengthFn "&%length of %1")

(format en ListOrderFn "%2th &%element of %1")

(format en LogFn "the &%log of %1")

(format en MagnitudeFn "the &%magnitude of %1")

(format en MaxFn "the &%larger of %1 and %2")

(format en MaximalWeightedPathFn "the &%highest &%cost &%path between %1 and %2")

(format en MeasureFn "%1 %2(s)")

(format en MegaFn "1 &%million %1s")

(format en MereologicalDifferenceFn "the &%difference between the parts of %1 and %2")

(format en MereologicalProductFn "the &%intersection of the parts of %1 and %2")

(format en MereologicalSumFn "the &%union of the parts of %1 and %2")

(format en MicroFn "one &%millionth of a %1")

(format en MilliFn "one &%thousandth of a %1")

(format en MinFn "the &%smaller of %1 and %2")

(format en MinimalCutSetFn "the &%set of minimal paths that partition %1 into two separate graphs")

(format en MinimalWeightedPathFn "the &%lowest &%cost &%path between %1 and %2")

(format en MinuteFn "the &%minute %1")

(format en MonthFn "the &%month %1")

(format en MultiplicationFn "the &%product of %1 &%multiplied by %2")

(format en NanoFn "one &%billionth of a %1")

(format en NumeratorFn "the &%numerator of %1")

(format en PastFn "&%before %1")

(format en PathWeightFn "the &%value of %1")

(format en PeriodicalIssueFn "the &%periodical number %2 of %1")

(format en PicoFn "one &%trillionth of a %1")

(format en PowerSetFn "all &%subclasses of %1")

(format en PredecessorFn "(%1+2)")

(format en PremisesFn "the &%premises of argument %1")

(format en ProbabilityFn "the &%probability of %1")

(format en PropertyFn "&%belongings of %1")

(format en RationalNumberFn "the &%rational representation of %1")

(format en RealNumberFn "the &%real part of %1")

(format en ReciprocalFn "the &%reciprocal of %1")

(format en RecurrentTimeIntervalFn "the &%recurring &%period from %1 to %2")

(format en RelativeComplementFn "the &%difference between %1 and %2")

(format en RelativeTimeFn "the time %1 in zone %2")

(format en RemainderFn "%1 &%mod %2")

(format en RoundFn "%1 &%rounded")

(format en SecondFn "the &%second %1")

(format en SeriesVolumeFn "volume %2 in the &%series %1")

(format en SignumFn "the &%sign of %1")

(format en SineFn "the &%sine of %1")

(format en SpeedFn "%1 &%per %2")

(format en SquareRootFn "the &%square root of %1")

(format en SubtractionFn "the &%result of %1 &%minus %2")

(format en SuccessorFn "(%1+1)")

(format en TangentFn "the &%tangent of %1")

(format en TemporalCompositionFn "&%decomposition of %1 into %3 %2s")

(format en TeraFn "1 &%trillion %1s")

(format en TerminalNodeFn "the &%terminal node of %1")

(format en TimeIntervalFn "&%interval between %1 and %2")

(format en UnionFn "the &%union of %1 and %2")

(format en VelocityFn "%1 &%per %2 in %3 in the direction %4")

(format en WealthFn "&%value of belongings of %1")

(format en WhenFn "the &%time of existence of %1")

(format en WhereFn "the place &%where %1 was at %2")

(format en YearFn "the &%year %1")

(format en age "the &%age of %1 is %n %2")

(format en agent "%2 is %n an &%agent of %1")

(format en altitude "the &%altitude of %1 is %n %2")

(format en arcWeight "the &%value of %1 is %n %2")

(format en attribute "%2 is %n an &%attribute of %1")

(format en authors "%1 is %n the &%author of %2")

(format en before "%1 %n{doesn't} happen%p{s} &%before %2")

(format en beforeOrEqual "%1 %n{doesn't} &%happen%{s} before or at %2")

(format en believes "%1 %n{doesn't} &%believe%p{s} %2")

(format en between "%2 is %n &%between %1 and %3")

(format en bottom "the &%bottom of %2 is %n %1")

(format en capability "%3 is %n &%capable to do %1 in role %2")

(format en causes "%1 %n{doesn't} &%cause%p{s} %2")

(format en citizen "%1 is %n a &%citizen of %2")

(format en closedOn "%1 is %n &%closed on %2")

(format en completelyFills "%1 %n{doesn't} &%completely &%fill%p{s} %2")

(format en component "%1 is %n a &%component of %2")

(format en conclusion "the &%conclusion of argument %1 is %n %2")

(format en conditionalProbability "&%probability of %1 provided that %2 holds is %n %3")

(format en confersObligation "%2 %n{doesn't} &%obligate%p{s} %3 to perform task of the type %1")

(format en confersRight "%2 %n{doesn't} &%allow%p{s} %3 to perform task of the type %1")

(format en connected "%1 is %n &%connected to %2")

(format en connectedEngineeringComponents "%1 is %n &%connected to %2")

(format en connects "%1 %n{doesn't} &%connect%p{s} %2 and %3")

(format en connectsEngineeringComponents "%1 %n{doesn't} &%connect%p{s} %2 and %3")

(format en considers "%1 %n{doesn't} &%consider%p{s} %2")

(format en contains "%1 %n{doesn't} &%contain%p{s} %2")

(format en containsInformation "%1 %n{doesn't} &%contain%p{s} information %2")

(format en contraryAttribute "%1 is %n &%opposed to %2")

(format en cooccur "%1 %n{doesn't} &%occur%p{s} at the same time as %2")

(format en copy "%1 is %n an exact &%copy of %2")

(format en crosses "%1 %n{doesn't} &%crosse%p{s} %2")

(format en date "&%date of %1 is %n %2")

(format en decreasesLikelihood "%1 %n{doesn't} &%decrease%p{s} likelihood of %2")

(format en desires "%1 %n{doesn't} &%desire%p{s} %2")

(format en destination "%1 %n{doesn't} %n &%end%p{s} at %2")

(format en developmentalForm "the &%developmental &%form of %1 is %n %2")

(format en diameter "the &%diameter of %1 is %n %2")

(format en direction "entities in the process %1 are %n &%moving %2")

(format en disjoint "%1 is %n &%disjoint from %2")

(format en disjointDecomposition "%1 is %n &%disjointly &%decomposed into %*{2-}[, ]")

(format en disjointRelation "%1 and %2 are %n &%disjoint")

(format en distance "the &%distance between %1 and %2 is %n %3")

(format en distributes "%1 is %n &%distributive over %2")

(format en documentation "%n %2")

(format en domain "the number %2 argument of %1 is %n an &%instance of %3")

(format en domainSubclass "the number %2 argument of %1 is %n a &%subclass of %3")

(format en duration "&%duration of %1 is %n %2")

(format en during "%1 %n{doesn't} take%p{s} place &%during %2")

(format en earlier "%1 %n{doesn't} happen%p{s} &%earlier than %2")

(format en editor "%1 is %n the &%editor of %2")

(format en element "%1 is %n an &%element of %2")

(format en employs "%1 %n{doesn't} &%employ%p{s} %2")

(format en engineeringSubcomponent "%1 is %n a &%component of %2")

(format en entails "%1 %n{doesn't} &%entail%p{s} %2")

(format en equal "%1 is %n &%equal to %2")

(format en equivalenceRelationOn "%1 is %n &%equivalence relation on %2")

(format en equivalentContentClass "%1 is %n &%equivalent to %2")

(format en equivalentContentInstance "%1 is %n &%equivalent to %2")

(format en exactlyLocated "%1 is %n &%exactly located in %2")

(format en exhaustiveDecomposition "%1 is %n &%covered by %*{2-}[, ]")

(format en experiencer "%2 %n{doesn't} &%experience%p{s} %1")

(format en exploits "%1 %n{doesn't} &%exploit%p{s} %2")

(format en expressedInLanguage "%1 is %n &%expressed in language %2")

(format en faces "%1 %n{doesn't} &%face%p{s} %2")

(format en familyRelation "%1 and %2 are %n &%related")

(format en father "%2 is %n a &%father of %1")

(format en fills "%1 %n{doesn't} &%fill%p{s} %2")

(format en finishes "%1 %n{doesn't} &%finish%p{es} %2")

(format en frequency "%1 %n{doesn't} &%occur%p{s} every %2")

(format en geopoliticalSubdivision "%1 is %n a &%geopolitical part of %2")

(format en graphPart "%1 is %n a &%part of %2")

(format en grasps "%1 %n{doesn't} &%grasp%p{s} %2")

(format en greaterThan "%1 is %n &%greater than %2")

(format en greaterThanOrEqualTo "%1 is %n &%greater than or equal to %2")

(format en hasPurpose "%1 has %n &%purpose %2")

(format en hasPurposeForAgent "%1 has %n &%purpose %2 for %3")

(format en hasSkill "%2 has %n &%skill to do %1")

(format en height "the &%height of %1 is %n %2")

(format en holds "%1(%*{2-}[, ]) %n{doesn't} &%hold%p{s}")

(format en holdsDuring "%2 %n{doesn't} hold%p{s} &%during %1")

(format en holdsObligation "%2 is %n &%obliged to perform tasks of type %1")

(format en holdsRight "%2 %p{has} %n{doesn't have} the &%right to perform %1")

(format en hole "%1 is %n a &%hole in %2")

(format en home "the &%home of %1 is %n %2")

(format en identityElement "%2 is %n an &%identity element of %1")

(format en immediateInstance "%1 is %n an &%immediate instance of %2")

(format en immediateSubclass "%1 is %n an &%immediate subclass of %2")

(format en inList "%1 is %n a &%member of %2")

(format en inScopeOfInterest "%1 is %n &%interested in %2")

(format en increasesLikelihood "%1 %n{doesn't} &%increase%p{s} likelihood of %2")

(format en independentProbability "probability of %1 and %2 is %n &%independent")

(format en inhabits "%1 %n{doesn't} &%live%p{s} in %2")

(format en inhibits "%1 %n{doesn't} &%inhibit%p{s} %2")

(format en initialList "%1 %n{doesn't} &%start%p{s} %2")

(format en instance "%1 is %n an &%instance of %2")

(format en instrument "%2 is %n an &%instrument for %1")

(format en interiorPart "%1 is %n a &%interior part of %2")

(format en inverse "%1 is %n an &%inverse of %2")

(format en irreflexiveOn "%1 is %n &%irreflexive on %2")

(format en knows "%1 %n{doesn't} &%know%p{s} %2")

(format en larger "%1 is %n &%larger than %2")

(format en legalRelation "there is %n a &%legal &%relation between %1 and %2")

(format en length "the &%length of %1 is %n %2")

(format en lessThan "%1 is %n &%less than %2")

(format en lessThanOrEqualTo "%1 is %n &%less than or equal to %2")

(format en links "%3 %n{doesn't} &%link%p{s} %1 and %2")

(format en located "%1 is %n &%located at %2")

(format en manner "%1 is %n performed in the manner %2")

(format en material "%1 is %n &%made of %2")

(format en measure "the &%measure of %1 is %n %2")

(format en meetsSpatially "%1 %n{doesn't} &%meet%p{s} %2")

(format en meetsTemporally "%1 %n{doesn't} &%meet%p{s} %2")

(format en member "%1 is %n a &%member of %2")

(format en modalAttribute "the statement %1 %n{doesn't have} %p{has} the &%modal &%force of %2")

(format en monetaryValue "&%value of %1 is %n %2")

(format en mother "%2 is %n a &%mother of %1")

(format en names "%2 %n{doesn't have} %p(has) &%name %1")

(format en needs "%1 %n{doesn't} &%need%p{s} %2")

(format en occupiesPosition "%1 %n{doesn't} hold%p{s} the &%position of %2 in %3")

(format en orientation "%1 is %n %3 to %2")

(format en origin "%1 %n{doesn't} &%origin%p{s} at %2")

(format en overlapsPartially "%1 %n{doesn't} &%partially &%overlap%p{s} with %2")

(format en overlapsSpatially "%1 %n{doesn't} &%overlap%p{s} with %2")

(format en overlapsTemporally "%2 %n{doesn't} &%overlap%p{s} %1")

(format en parent "%2 is %n a &%parent of %1")

(format en part "%1 is %n a &%part of %2")

(format en partialOrderingOn "%1 is %n &%partial ordering on %2")

(format en partiallyFills "%1 %n{doesn't} &%partially &%fill%p{s} %2")

(format en partition "%1 is %n &%exhaustively &%partitioned into %*{2-}[, ]")

(format en partlyLocated "%1 is %n &%partly located in %2")

(format en path "%2 is %n &%path along with %1 occurs")

(format en pathLength "the &%length of %1 is %n %2")

(format en patient "%2 is %n a &%patient of %1")

(format en penetrates "%1 %n{doesn't} &%penetrate%p{s} %2")

(format en piece "%1 is %n a &%piece of %2")

(format en pointOfFigure "%1 is %n a &%vertex of %2")

(format en possesses "%1 %n{doesn't} &%posess%p{es} %2")

(format en precondition "%1 is%n{n't} a &%precondition of %2")

(format en prefers "%1 %n{doesn't} &%prefer%p{s} %2 over %3")

(format en prevents "%1 %n{doesn't} &%prevent%p{s} the occurrence of %2")

(format en properPart "%1 is %n a &%proper &%part of %2")

(format en properlyFills "%1 %n{doesn't} &%properly &%fill%p{s} %2")

(format en property "%1 has %n an &%attribute %2")

(format en publishes "%1 %n{doesn't} &%publishe%p{s} %2")

(format en radius "the &%radius of %1 is %n %2")

(format en range "&%range of %1 is %n an instance of %2")

(format en rangeSubclass "the values returned by %1 are %n &%subclasses of %2")

(format en realization "%1 %n{doesn't} &%express%p{es} the content of %2")

(format en refers "%1 %n{doesn't} include%p{s} a &%reference to %2")

(format en reflexiveOn "%1 is %n &%reflexive on %2")

(format en relatedExternalConcept "the concept of %1 in language %3 is %n &%related to the concept of %2")

(format en relatedInternalConcept "%1 is %n &%internally related to %2")

(format en represents "%1 %n{doesn't} &%express%p{es} %2")

(format en representsForAgent "%3 %n{doesn't} &%use%p{s} %1 to stand for %2")

(format en representsInLanguage "%1 %n{doesn't} &%represent%p{s} %2 in the language %3")

(format en resource "%2 is %n a &%resource for %1")

(format en result "%2 is %n a &%result of %1")

(format en sibling "%1 is %n a &%sibling of %2")

(format en side "a &%side of %2 is %n %1")

(format en sideOfFigure "the &%size of %2 is %n %1")

(format en smaller "%1 is %n &%smaller than %2")

(format en starts "%1 %n{doesn't} &%start%p{s} %2")

(format en subAttribute "%1 is %n a &%subattribute of %2")

(format en subCollection "%1 is %n a proper &%sub-collection of %2")

(format en subGraph "%1 is %n a &%subgraph of %2")

(format en subList "%1 is %n a &%sublist of %2")

(format en subOrganization "%1 is %n a &%part of the organization %2")

(format en subOrganization "%1 is %n a part of the organization %2")

(format en subPlan "%1 is %n a &%sub-plan of %2")

(format en subProcess "%1 is %n a &%subprocess of %2")

(format en subProposition "%1 is %n a &%sub-proposition of %2")

(format en subclass "%1 is %n a &%subclass of %2")

(format en subrelation "%1 is %n a &%subrelation of %2")

(format en subset "%1 is %n a &%subset of %2")

(format en subsumedExternalConcept "the concept of %1 in language %3 is %n &%subsumed by the concept of %2")

(format en subsumesContentClass "%1 %n{doesn't} &%subsume%p{s} the content of %2")

(format en subsumesContentInstance "%1 %n{doesn't} &%subsume%p{s} the content of %2")

(format en subsumingExternalConcept "the concept of %1 in language %3 %n{doesn't} &%subsume%p{s} the concept of %2")

(format en successorAttribute "%1 is %n an immediate &%successor &%attribute of %2")

(format en successorAttributeClosure "%1 is %n a &%successor &%attribute of %2")

(format en superficialPart "%1 is %n a &%superficial part of %2")

(format en surface "%1 is %n a &%surface of %2")

(format en synonymousExternalConcept "the concept of %1 in language %3 is %n &%synonymous with the concept of %2")

(format en tangent "a &%tangent of %2 is %n %1")

(format en temporalPart "%1 is %n a &%part of %2")

(format en temporallyBetween "%2 is %n &%between %1 and %3")

(format en temporallyBetweenOrEqual "%2 is %n &%between or at %1 and %3")

(format en time "%1 %n{doesn't} exist%p{s} &%during %2")

(format en top "the &%top of %2 is %n %1")

(format en totalOrderingOn "%1 is %n &%total &%ordering on %2")

(format en traverses "%1 %n{doesn't} &%traverse%p{s} %2")

(format en trichotomizingOn "%1 is %n &%trichotomizing on %2")

(format en truth "%1 &%is %n %2")

(format en uniqueIdentifier "the &%unique identifier of %1 is %n %2")

(format en uses "%2 %n{doesn't} &%use%p{s} %1")

(format en valence "%1 %p{&%has} %n{doesn't &%have} %2 &%argument(s)")

(format en version "%1 is %n a &%version of %2")

(format en wants "%1 %n{doesn't} &%want%p{s} %2")

(format en wears "%1 %n{doesn't} &%wear%p{s} %2")

(format en width "the &%width of %1 is %n %2")

(identityElement AdditionFn 0)

(identityElement DivisionFn 1)

(identityElement MultiplicationFn 1)

(identityElement SubtractionFn 0)

(instance Above Abstract)

(instance Above Attribute)

(instance Above Entity)

(instance Above PositionalAttribute)

(instance Above RelationalAttribute)

(instance AbsoluteValueFn Abstract)

(instance AbsoluteValueFn BinaryRelation)

(instance AbsoluteValueFn Entity)

(instance AbsoluteValueFn Function)

(instance AbsoluteValueFn Relation)

(instance AbsoluteValueFn SingleValuedRelation)

(instance AbsoluteValueFn TotalValuedRelation)

(instance AbsoluteValueFn UnaryFunction)

(instance AbstractionFn Abstract)

(instance AbstractionFn BinaryRelation)

(instance AbstractionFn Entity)

(instance AbstractionFn Function)

(instance AbstractionFn PartialValuedRelation)

(instance AbstractionFn Relation)

(instance AbstractionFn SingleValuedRelation)

(instance AbstractionFn UnaryFunction)

(instance AdditionFn Abstract)

(instance AdditionFn AssociativeFunction)

(instance AdditionFn BinaryFunction)

(instance AdditionFn BinaryRelation)

(instance AdditionFn CommutativeFunction)

(instance AdditionFn Entity)

(instance AdditionFn Function)

(instance AdditionFn Relation)

(instance AdditionFn RelationExtendedToQuantities)

(instance AdditionFn SingleValuedRelation)

(instance AdditionFn TernaryRelation)

(instance AdditionFn TotalValuedRelation)

(instance Adjacent Abstract)

(instance Adjacent Attribute)

(instance Adjacent Entity)

(instance Adjacent PositionalAttribute)

(instance Adjacent RelationalAttribute)

(instance Ampere Abstract)

(instance Ampere Entity)

(instance Ampere PhysicalQuantity)

(instance Ampere Quantity)

(instance Ampere SystemeInternationalUnit)

(instance Ampere UnitOfMeasure)

(instance Amu Abstract)

(instance Amu Entity)

(instance Amu PhysicalQuantity)

(instance Amu Quantity)

(instance Amu UnitOfMeasure)

(instance Angstrom Abstract)

(instance Angstrom Entity)

(instance Angstrom PhysicalQuantity)

(instance Angstrom Quantity)

(instance Angstrom UnitOfMeasure)

(instance AngularDegree Abstract)

(instance AngularDegree Entity)

(instance AngularDegree PhysicalQuantity)

(instance AngularDegree Quantity)

(instance AngularDegree UnitOfMeasure)

(instance Asleep Abstract)

(instance Asleep Attribute)

(instance Asleep BiologicalAttribute)

(instance Asleep ConsciousnessAttribute)

(instance Asleep Entity)

(instance Asleep InternalAttribute)

(instance Asleep PsychologicalAttribute)

(instance Asleep StateOfMind)

(instance AssignmentFn Abstract)

(instance AssignmentFn Entity)

(instance AssignmentFn Function)

(instance AssignmentFn Relation)

(instance AssignmentFn SingleValuedRelation)

(instance AssignmentFn VariableArityRelation)

(instance AtomGram Abstract)

(instance AtomGram Entity)

(instance AtomGram PhysicalQuantity)

(instance AtomGram Quantity)

(instance AtomGram UnitOfMeasure)

(instance Audible Abstract)

(instance Audible Attribute)

(instance Audible Entity)

(instance Audible RelationalAttribute)

(instance Audible SoundAttribute)

(instance Awake Abstract)

(instance Awake Attribute)

(instance Awake BiologicalAttribute)

(instance Awake ConsciousnessAttribute)

(instance Awake Entity)

(instance Awake InternalAttribute)

(instance Awake PsychologicalAttribute)

(instance Awake StateOfMind)

(instance BackFn Abstract)

(instance BackFn AntisymmetricRelation)

(instance BackFn AsymmetricRelation)

(instance BackFn BinaryRelation)

(instance BackFn Entity)

(instance BackFn Function)

(instance BackFn IrreflexiveRelation)

(instance BackFn PartialValuedRelation)

(instance BackFn Relation)

(instance BackFn SingleValuedRelation)

(instance BackFn SpatialRelation)

(instance BackFn UnaryFunction)

(instance Becquerel Abstract)

(instance Becquerel Entity)

(instance Becquerel PhysicalQuantity)

(instance Becquerel Quantity)

(instance Becquerel SystemeInternationalUnit)

(instance Becquerel UnitOfMeasure)

(instance BeginFn Abstract)

(instance BeginFn BinaryRelation)

(instance BeginFn Entity)

(instance BeginFn Function)

(instance BeginFn Relation)

(instance BeginFn SingleValuedRelation)

(instance BeginFn TemporalRelation)

(instance BeginFn TotalValuedRelation)

(instance BeginFn UnaryFunction)

(instance BeginNodeFn Abstract)

(instance BeginNodeFn BinaryRelation)

(instance BeginNodeFn Entity)

(instance BeginNodeFn Function)

(instance BeginNodeFn Relation)

(instance BeginNodeFn SingleValuedRelation)

(instance BeginNodeFn TotalValuedRelation)

(instance BeginNodeFn UnaryFunction)

(instance Below Abstract)

(instance Below Attribute)

(instance Below Entity)

(instance Below PositionalAttribute)

(instance Below RelationalAttribute)

(instance BinaryFunction InheritableRelation)

(instance BinaryPredicate InheritableRelation)

(instance BinaryRelation InheritableRelation)

(instance Bit Abstract)

(instance Bit Entity)

(instance Bit PhysicalQuantity)

(instance Bit Quantity)

(instance Bit UnitOfMeasure)

(instance Black Abstract)

(instance Black Attribute)

(instance Black ColorAttribute)

(instance Black Entity)

(instance Black InternalAttribute)

(instance Black PrimaryColor)

(instance Blue Abstract)

(instance Blue Attribute)

(instance Blue ColorAttribute)

(instance Blue Entity)

(instance Blue InternalAttribute)

(instance Blue PrimaryColor)

(instance BritishThermalUnit Abstract)

(instance BritishThermalUnit Entity)

(instance BritishThermalUnit PhysicalQuantity)

(instance BritishThermalUnit Quantity)

(instance BritishThermalUnit UnitOfMeasure)

(instance Byte Abstract)

(instance Byte Entity)

(instance Byte PhysicalQuantity)

(instance Byte Quantity)

(instance Byte UnitOfMeasure)

(instance Calorie Abstract)

(instance Calorie Entity)

(instance Calorie PhysicalQuantity)

(instance Calorie Quantity)

(instance Calorie UnitOfMeasure)

(instance Candela Abstract)

(instance Candela Entity)

(instance Candela PhysicalQuantity)

(instance Candela Quantity)

(instance Candela SystemeInternationalUnit)

(instance Candela UnitOfMeasure)

(instance CardinalityFn Abstract)

(instance CardinalityFn AntisymmetricRelation)

(instance CardinalityFn AsymmetricRelation)

(instance CardinalityFn BinaryRelation)

(instance CardinalityFn Entity)

(instance CardinalityFn Function)

(instance CardinalityFn IrreflexiveRelation)

(instance CardinalityFn Relation)

(instance CardinalityFn SingleValuedRelation)

(instance CardinalityFn TotalValuedRelation)

(instance CardinalityFn UnaryFunction)

(instance CaseRole InheritableRelation)

(instance CeilingFn Abstract)

(instance CeilingFn BinaryRelation)

(instance CeilingFn Entity)

(instance CeilingFn Function)

(instance CeilingFn Relation)

(instance CeilingFn SingleValuedRelation)

(instance CeilingFn TotalValuedRelation)

(instance CeilingFn UnaryFunction)

(instance CelsiusDegree Abstract)

(instance CelsiusDegree Entity)

(instance CelsiusDegree PhysicalQuantity)

(instance CelsiusDegree Quantity)

(instance CelsiusDegree SystemeInternationalUnit)

(instance CelsiusDegree UnitOfMeasure)

(instance Centimeter Abstract)

(instance Centimeter Entity)

(instance Centimeter PhysicalQuantity)

(instance Centimeter Quantity)

(instance Centimeter UnitOfMeasure)

(instance CentralTimeZone Abstract)

(instance CentralTimeZone Attribute)

(instance CentralTimeZone Entity)

(instance CentralTimeZone RelationalAttribute)

(instance CentralTimeZone TimeZone)

(instance ComplementFn Abstract)

(instance ComplementFn BinaryRelation)

(instance ComplementFn Entity)

(instance ComplementFn Function)

(instance ComplementFn Relation)

(instance ComplementFn SingleValuedRelation)

(instance ComplementFn TotalValuedRelation)

(instance ComplementFn UnaryFunction)

(instance CoordinatedUniversalTimeZone Abstract)

(instance CoordinatedUniversalTimeZone Attribute)

(instance CoordinatedUniversalTimeZone Entity)

(instance CoordinatedUniversalTimeZone RelationalAttribute)

(instance CoordinatedUniversalTimeZone TimeZone)

(instance CosineFn Abstract)

(instance CosineFn BinaryRelation)

(instance CosineFn Entity)

(instance CosineFn Function)

(instance CosineFn Relation)

(instance CosineFn SingleValuedRelation)

(instance CosineFn TotalValuedRelation)

(instance CosineFn UnaryFunction)

(instance Coulomb Abstract)

(instance Coulomb Entity)

(instance Coulomb PhysicalQuantity)

(instance Coulomb Quantity)

(instance Coulomb SystemeInternationalUnit)

(instance Coulomb UnitOfMeasure)

(instance Cup Abstract)

(instance Cup Entity)

(instance Cup PhysicalQuantity)

(instance Cup Quantity)

(instance Cup UnitOfMeasure)

(instance CutSetFn Abstract)

(instance CutSetFn BinaryRelation)

(instance CutSetFn Entity)

(instance CutSetFn Function)

(instance CutSetFn Relation)

(instance CutSetFn SingleValuedRelation)

(instance CutSetFn UnaryFunction)

(instance Damp Abstract)

(instance Damp Attribute)

(instance Damp Entity)

(instance Damp InternalAttribute)

(instance Damp SaturationAttribute)

(instance DayDuration Abstract)

(instance DayDuration Entity)

(instance DayDuration PhysicalQuantity)

(instance DayDuration Quantity)

(instance DayDuration UnitOfMeasure)

(instance DayFn Abstract)

(instance DayFn BinaryFunction)

(instance DayFn BinaryRelation)

(instance DayFn Entity)

(instance DayFn Function)

(instance DayFn Relation)

(instance DayFn SingleValuedRelation)

(instance DayFn TemporalRelation)

(instance DayFn TernaryRelation)

(instance Dead Abstract)

(instance Dead AnimacyAttribute)

(instance Dead Attribute)

(instance Dead BiologicalAttribute)

(instance Dead Entity)

(instance Dead InternalAttribute)

(instance DenominatorFn Abstract)

(instance DenominatorFn BinaryRelation)

(instance DenominatorFn Entity)

(instance DenominatorFn Function)

(instance DenominatorFn Relation)

(instance DenominatorFn SingleValuedRelation)

(instance DenominatorFn TotalValuedRelation)

(instance DenominatorFn UnaryFunction)

(instance DensityFn Abstract)

(instance DensityFn BinaryRelation)

(instance DensityFn Entity)

(instance DensityFn Function)

(instance DensityFn Relation)

(instance DensityFn SingleValuedRelation)

(instance DensityFn TotalValuedRelation)

(instance DivisionFn Abstract)

(instance DivisionFn AssociativeFunction)

(instance DivisionFn BinaryFunction)

(instance DivisionFn BinaryRelation)

(instance DivisionFn Entity)

(instance DivisionFn Function)

(instance DivisionFn PartialValuedRelation)

(instance DivisionFn Relation)

(instance DivisionFn RelationExtendedToQuantities)

(instance DivisionFn SingleValuedRelation)

(instance DivisionFn TernaryRelation)

(instance Dry Abstract)

(instance Dry Attribute)

(instance Dry Entity)

(instance Dry InternalAttribute)

(instance Dry SaturationAttribute)

(instance East Abstract)

(instance East Attribute)

(instance East DirectionalAttribute)

(instance East Entity)

(instance East PositionalAttribute)

(instance East RelationalAttribute)

(instance EasternTimeZone Abstract)

(instance EasternTimeZone Attribute)

(instance EasternTimeZone Entity)

(instance EasternTimeZone RelationalAttribute)

(instance EasternTimeZone TimeZone)

(instance EditionFn Abstract)

(instance EditionFn BinaryFunction)

(instance EditionFn BinaryRelation)

(instance EditionFn Entity)

(instance EditionFn Function)

(instance EditionFn PartialValuedRelation)

(instance EditionFn Relation)

(instance EditionFn SingleValuedRelation)

(instance EditionFn TernaryRelation)

(instance ElectronVolt Abstract)

(instance ElectronVolt Entity)

(instance ElectronVolt PhysicalQuantity)

(instance ElectronVolt Quantity)

(instance ElectronVolt UnitOfMeasure)

(instance EndFn Abstract)

(instance EndFn BinaryRelation)

(instance EndFn Entity)

(instance EndFn Function)

(instance EndFn Relation)

(instance EndFn SingleValuedRelation)

(instance EndFn TemporalRelation)

(instance EndFn TotalValuedRelation)

(instance EndFn UnaryFunction)

(instance EndNodeFn Abstract)

(instance EndNodeFn BinaryRelation)

(instance EndNodeFn Entity)

(instance EndNodeFn Function)

(instance EndNodeFn Relation)

(instance EndNodeFn SingleValuedRelation)

(instance EndNodeFn TotalValuedRelation)

(instance EndNodeFn UnaryFunction)

(instance EuroCent Abstract)

(instance EuroCent Entity)

(instance EuroCent PhysicalQuantity)

(instance EuroCent Quantity)

(instance EuroCent UnitOfMeasure)

(instance EuroDollar Abstract)

(instance EuroDollar Entity)

(instance EuroDollar PhysicalQuantity)

(instance EuroDollar Quantity)

(instance EuroDollar UnitOfMeasure)

(instance ExponentiationFn Abstract)

(instance ExponentiationFn BinaryFunction)

(instance ExponentiationFn BinaryRelation)

(instance ExponentiationFn Entity)

(instance ExponentiationFn Function)

(instance ExponentiationFn Relation)

(instance ExponentiationFn RelationExtendedToQuantities)

(instance ExponentiationFn SingleValuedRelation)

(instance ExponentiationFn TernaryRelation)

(instance ExponentiationFn TotalValuedRelation)

(instance ExtensionFn Abstract)

(instance ExtensionFn BinaryRelation)

(instance ExtensionFn Entity)

(instance ExtensionFn Function)

(instance ExtensionFn PartialValuedRelation)

(instance ExtensionFn Relation)

(instance ExtensionFn SingleValuedRelation)

(instance ExtensionFn UnaryFunction)

(instance FahrenheitDegree Abstract)

(instance FahrenheitDegree Entity)

(instance FahrenheitDegree PhysicalQuantity)

(instance FahrenheitDegree Quantity)

(instance FahrenheitDegree UnitOfMeasure)

(instance False Abstract)

(instance False Attribute)

(instance False Entity)

(instance False RelationalAttribute)

(instance False TruthValue)

(instance Farad Abstract)

(instance Farad Entity)

(instance Farad PhysicalQuantity)

(instance Farad Quantity)

(instance Farad SystemeInternationalUnit)

(instance Farad UnitOfMeasure)

(instance Female Abstract)

(instance Female Attribute)

(instance Female BiologicalAttribute)

(instance Female Entity)

(instance Female InternalAttribute)

(instance Female SexAttribute)

(instance Fillable Abstract)

(instance Fillable Attribute)

(instance Fillable Entity)

(instance Fillable InternalAttribute)

(instance Fillable ShapeAttribute)

(instance Flammable PhysicalAttribute)

(instance FloorFn Abstract)

(instance FloorFn BinaryRelation)

(instance FloorFn Entity)

(instance FloorFn Function)

(instance FloorFn Relation)

(instance FloorFn SingleValuedRelation)

(instance FloorFn TotalValuedRelation)

(instance FloorFn UnaryFunction)

(instance Fluid Abstract)

(instance Fluid Attribute)

(instance Fluid Entity)

(instance Fluid InternalAttribute)

(instance Fluid PhysicalState)

(instance FootLength Abstract)

(instance FootLength Entity)

(instance FootLength PhysicalQuantity)

(instance FootLength Quantity)

(instance FootLength UnitOfMeasure)

(instance FrontFn Abstract)

(instance FrontFn AntisymmetricRelation)

(instance FrontFn AsymmetricRelation)

(instance FrontFn BinaryRelation)

(instance FrontFn Entity)

(instance FrontFn Function)

(instance FrontFn IrreflexiveRelation)

(instance FrontFn PartialValuedRelation)

(instance FrontFn Relation)

(instance FrontFn SingleValuedRelation)

(instance FrontFn SpatialRelation)

(instance FrontFn UnaryFunction)

(instance FullyFormed Abstract)

(instance FullyFormed Attribute)

(instance FullyFormed BiologicalAttribute)

(instance FullyFormed DevelopmentalAttribute)

(instance FullyFormed Entity)

(instance FullyFormed InternalAttribute)

(instance Function InheritableRelation)

(instance FutureFn Abstract)

(instance FutureFn BinaryRelation)

(instance FutureFn Entity)

(instance FutureFn Function)

(instance FutureFn Relation)

(instance FutureFn SingleValuedRelation)

(instance FutureFn TemporalRelation)

(instance FutureFn TotalValuedRelation)

(instance FutureFn UnaryFunction)

(instance Gas Abstract)

(instance Gas Attribute)

(instance Gas Entity)

(instance Gas InternalAttribute)

(instance Gas PhysicalState)

(instance GeneralizedIntersectionFn Abstract)

(instance GeneralizedIntersectionFn BinaryRelation)

(instance GeneralizedIntersectionFn Entity)

(instance GeneralizedIntersectionFn Function)

(instance GeneralizedIntersectionFn Relation)

(instance GeneralizedIntersectionFn SingleValuedRelation)

(instance GeneralizedIntersectionFn TotalValuedRelation)

(instance GeneralizedIntersectionFn UnaryFunction)

(instance GeneralizedUnionFn Abstract)

(instance GeneralizedUnionFn BinaryRelation)

(instance GeneralizedUnionFn Entity)

(instance GeneralizedUnionFn Function)

(instance GeneralizedUnionFn Relation)

(instance GeneralizedUnionFn SingleValuedRelation)

(instance GeneralizedUnionFn TotalValuedRelation)

(instance GeneralizedUnionFn UnaryFunction)

(instance GigaFn Abstract)

(instance GigaFn BinaryRelation)

(instance GigaFn Entity)

(instance GigaFn Function)

(instance GigaFn Relation)

(instance GigaFn SingleValuedRelation)

(instance GigaFn TotalValuedRelation)

(instance GigaFn UnaryFunction)

(instance GovernmentFn Abstract)

(instance GovernmentFn BinaryRelation)

(instance GovernmentFn Entity)

(instance GovernmentFn Function)

(instance GovernmentFn Relation)

(instance GovernmentFn SingleValuedRelation)

(instance GovernmentFn UnaryFunction)

(instance Gram Abstract)

(instance Gram Entity)

(instance Gram PhysicalQuantity)

(instance Gram Quantity)

(instance Gram SystemeInternationalUnit)

(instance Gram UnitOfMeasure)

(instance GraphPathFn Abstract)

(instance GraphPathFn BinaryFunction)

(instance GraphPathFn BinaryRelation)

(instance GraphPathFn Entity)

(instance GraphPathFn Function)

(instance GraphPathFn Relation)

(instance GraphPathFn SingleValuedRelation)

(instance GraphPathFn TernaryRelation)

(instance GraphPathFn TotalValuedRelation)

(instance Gray Abstract)

(instance Gray Entity)

(instance Gray PhysicalQuantity)

(instance Gray Quantity)

(instance Gray SystemeInternationalUnit)

(instance Gray UnitOfMeasure)

(instance GreatestCommonDivisorFn Abstract)

(instance GreatestCommonDivisorFn Entity)

(instance GreatestCommonDivisorFn Function)

(instance GreatestCommonDivisorFn PartialValuedRelation)

(instance GreatestCommonDivisorFn Relation)

(instance GreatestCommonDivisorFn SingleValuedRelation)

(instance GreatestCommonDivisorFn VariableArityRelation)

(instance Henry Abstract)

(instance Henry Entity)

(instance Henry PhysicalQuantity)

(instance Henry Quantity)

(instance Henry SystemeInternationalUnit)

(instance Henry UnitOfMeasure)

(instance Hertz Abstract)

(instance Hertz Entity)

(instance Hertz PhysicalQuantity)

(instance Hertz Quantity)

(instance Hertz SystemeInternationalUnit)

(instance Hertz UnitOfMeasure)

(instance HoleHostFn Abstract)

(instance HoleHostFn AntisymmetricRelation)

(instance HoleHostFn AsymmetricRelation)

(instance HoleHostFn BinaryRelation)

(instance HoleHostFn Entity)

(instance HoleHostFn Function)

(instance HoleHostFn IrreflexiveRelation)

(instance HoleHostFn Relation)

(instance HoleHostFn SingleValuedRelation)

(instance HoleHostFn SpatialRelation)

(instance HoleHostFn TotalValuedRelation)

(instance HoleHostFn UnaryFunction)

(instance HoleSkinFn Abstract)

(instance HoleSkinFn AntisymmetricRelation)

(instance HoleSkinFn AsymmetricRelation)

(instance HoleSkinFn BinaryRelation)

(instance HoleSkinFn Entity)

(instance HoleSkinFn Function)

(instance HoleSkinFn IrreflexiveRelation)

(instance HoleSkinFn Relation)

(instance HoleSkinFn SingleValuedRelation)

(instance HoleSkinFn SpatialRelation)

(instance HoleSkinFn TotalValuedRelation)

(instance HoleSkinFn UnaryFunction)

(instance Horizontal Abstract)

(instance Horizontal Attribute)

(instance Horizontal Entity)

(instance Horizontal PositionalAttribute)

(instance Horizontal RelationalAttribute)

(instance HourDuration Abstract)

(instance HourDuration Entity)

(instance HourDuration PhysicalQuantity)

(instance HourDuration Quantity)

(instance HourDuration UnitOfMeasure)

(instance HourFn Abstract)

(instance HourFn BinaryFunction)

(instance HourFn BinaryRelation)

(instance HourFn Entity)

(instance HourFn Function)

(instance HourFn Relation)

(instance HourFn SingleValuedRelation)

(instance HourFn TemporalRelation)

(instance HourFn TernaryRelation)

(instance Illuminated Abstract)

(instance Illuminated Attribute)

(instance Illuminated Entity)

(instance Illuminated InternalAttribute)

(instance Illuminated PerceptualAttribute)

(instance Illuminated VisualAttribute)

(instance ImaginaryPartFn Abstract)

(instance ImaginaryPartFn BinaryRelation)

(instance ImaginaryPartFn Entity)

(instance ImaginaryPartFn Function)

(instance ImaginaryPartFn Relation)

(instance ImaginaryPartFn SingleValuedRelation)

(instance ImaginaryPartFn TotalValuedRelation)

(instance ImaginaryPartFn UnaryFunction)

(instance ImmediateFamilyFn Abstract)

(instance ImmediateFamilyFn BinaryRelation)

(instance ImmediateFamilyFn Entity)

(instance ImmediateFamilyFn Function)

(instance ImmediateFamilyFn Relation)

(instance ImmediateFamilyFn SingleValuedRelation)

(instance ImmediateFamilyFn UnaryFunction)

(instance ImmediateFutureFn Abstract)

(instance ImmediateFutureFn BinaryRelation)

(instance ImmediateFutureFn Entity)

(instance ImmediateFutureFn Function)

(instance ImmediateFutureFn Relation)

(instance ImmediateFutureFn SingleValuedRelation)

(instance ImmediateFutureFn TemporalRelation)

(instance ImmediateFutureFn TotalValuedRelation)

(instance ImmediateFutureFn UnaryFunction)

(instance ImmediatePastFn Abstract)

(instance ImmediatePastFn BinaryRelation)

(instance ImmediatePastFn Entity)

(instance ImmediatePastFn Function)

(instance ImmediatePastFn Relation)

(instance ImmediatePastFn SingleValuedRelation)

(instance ImmediatePastFn TemporalRelation)

(instance ImmediatePastFn TotalValuedRelation)

(instance ImmediatePastFn UnaryFunction)

(instance Inch Abstract)

(instance Inch Entity)

(instance Inch PhysicalQuantity)

(instance Inch Quantity)

(instance Inch UnitOfMeasure)

(instance InheritableRelation Abstract)

(instance InheritableRelation Class)

(instance InheritableRelation Entity)

(instance InheritableRelation SetOrClass)

(instance InitialNodeFn Abstract)

(instance InitialNodeFn BinaryRelation)

(instance InitialNodeFn Entity)

(instance InitialNodeFn Function)

(instance InitialNodeFn PartialValuedRelation)

(instance InitialNodeFn Relation)

(instance InitialNodeFn SingleValuedRelation)

(instance InitialNodeFn UnaryFunction)

(instance IntegerSquareRootFn Abstract)

(instance IntegerSquareRootFn BinaryRelation)

(instance IntegerSquareRootFn Entity)

(instance IntegerSquareRootFn Function)

(instance IntegerSquareRootFn PartialValuedRelation)

(instance IntegerSquareRootFn Relation)

(instance IntegerSquareRootFn SingleValuedRelation)

(instance IntegerSquareRootFn UnaryFunction)

(instance IntentionalRelation InheritableRelation)

(instance IntersectionFn Abstract)

(instance IntersectionFn BinaryFunction)

(instance IntersectionFn BinaryRelation)

(instance IntersectionFn Entity)

(instance IntersectionFn Function)

(instance IntersectionFn Relation)

(instance IntersectionFn SingleValuedRelation)

(instance IntersectionFn TernaryRelation)

(instance IntersectionFn TotalValuedRelation)

(instance IntervalFn Abstract)

(instance IntervalFn BinaryFunction)

(instance IntervalFn BinaryRelation)

(instance IntervalFn Entity)

(instance IntervalFn Function)

(instance IntervalFn Relation)

(instance IntervalFn SingleValuedRelation)

(instance IntervalFn TernaryRelation)

(instance Joule Abstract)

(instance Joule Entity)

(instance Joule PhysicalQuantity)

(instance Joule Quantity)

(instance Joule SystemeInternationalUnit)

(instance Joule UnitOfMeasure)

(instance KappaFn Abstract)

(instance KappaFn BinaryFunction)

(instance KappaFn BinaryRelation)

(instance KappaFn Entity)

(instance KappaFn Function)

(instance KappaFn Relation)

(instance KappaFn SingleValuedRelation)

(instance KappaFn TernaryRelation)

(instance KelvinDegree Abstract)

(instance KelvinDegree Entity)

(instance KelvinDegree PhysicalQuantity)

(instance KelvinDegree Quantity)

(instance KelvinDegree SystemeInternationalUnit)

(instance KelvinDegree UnitOfMeasure)

(instance KiloByte Abstract)

(instance KiloByte Entity)

(instance KiloByte PhysicalQuantity)

(instance KiloByte Quantity)

(instance KiloByte UnitOfMeasure)

(instance KiloFn Abstract)

(instance KiloFn BinaryRelation)

(instance KiloFn Entity)

(instance KiloFn Function)

(instance KiloFn Relation)

(instance KiloFn SingleValuedRelation)

(instance KiloFn TotalValuedRelation)

(instance KiloFn UnaryFunction)

(instance Kilogram Abstract)

(instance Kilogram Entity)

(instance Kilogram PhysicalQuantity)

(instance Kilogram Quantity)

(instance Kilogram SystemeInternationalUnit)

(instance Kilogram UnitOfMeasure)

(instance Kilometer Abstract)

(instance Kilometer Entity)

(instance Kilometer PhysicalQuantity)

(instance Kilometer Quantity)

(instance Kilometer UnitOfMeasure)

(instance LeastCommonMultipleFn Abstract)

(instance LeastCommonMultipleFn Entity)

(instance LeastCommonMultipleFn Function)

(instance LeastCommonMultipleFn PartialValuedRelation)

(instance LeastCommonMultipleFn Relation)

(instance LeastCommonMultipleFn SingleValuedRelation)

(instance LeastCommonMultipleFn VariableArityRelation)

(instance Left Abstract)

(instance Left Attribute)

(instance Left Entity)

(instance Left PositionalAttribute)

(instance Left RelationalAttribute)

(instance Likely Abstract)

(instance Likely Attribute)

(instance Likely Entity)

(instance Likely NormativeAttribute)

(instance Likely ObjectiveNorm)

(instance Likely ProbabilityAttribute)

(instance Likely RelationalAttribute)

(instance Liquid Abstract)

(instance Liquid Attribute)

(instance Liquid Entity)

(instance Liquid InternalAttribute)

(instance Liquid PhysicalState)

(instance ListConcatenateFn Abstract)

(instance ListConcatenateFn BinaryFunction)

(instance ListConcatenateFn BinaryRelation)

(instance ListConcatenateFn Entity)

(instance ListConcatenateFn Function)

(instance ListConcatenateFn Relation)

(instance ListConcatenateFn SingleValuedRelation)

(instance ListConcatenateFn TernaryRelation)

(instance ListConcatenateFn TotalValuedRelation)

(instance ListFn Abstract)

(instance ListFn Entity)

(instance ListFn Function)

(instance ListFn Relation)

(instance ListFn SingleValuedRelation)

(instance ListFn VariableArityRelation)

(instance ListLengthFn Abstract)

(instance ListLengthFn BinaryRelation)

(instance ListLengthFn Entity)

(instance ListLengthFn Function)

(instance ListLengthFn Relation)

(instance ListLengthFn SingleValuedRelation)

(instance ListLengthFn TotalValuedRelation)

(instance ListLengthFn UnaryFunction)

(instance ListOrderFn Abstract)

(instance ListOrderFn BinaryFunction)

(instance ListOrderFn BinaryRelation)

(instance ListOrderFn Entity)

(instance ListOrderFn Function)

(instance ListOrderFn PartialValuedRelation)

(instance ListOrderFn Relation)

(instance ListOrderFn SingleValuedRelation)

(instance ListOrderFn TernaryRelation)

(instance Liter Abstract)

(instance Liter Entity)

(instance Liter PhysicalQuantity)

(instance Liter Quantity)

(instance Liter UnitOfMeasure)

(instance Living Abstract)

(instance Living AnimacyAttribute)

(instance Living Attribute)

(instance Living BiologicalAttribute)

(instance Living Entity)

(instance Living InternalAttribute)

(instance LogFn Abstract)

(instance LogFn BinaryFunction)

(instance LogFn BinaryRelation)

(instance LogFn Entity)

(instance LogFn Function)

(instance LogFn Relation)

(instance LogFn SingleValuedRelation)

(instance LogFn TernaryRelation)

(instance Lumen Abstract)

(instance Lumen Entity)

(instance Lumen PhysicalQuantity)

(instance Lumen Quantity)

(instance Lumen SystemeInternationalUnit)

(instance Lumen UnitOfMeasure)

(instance Lux Abstract)

(instance Lux Entity)

(instance Lux PhysicalQuantity)

(instance Lux Quantity)

(instance Lux SystemeInternationalUnit)

(instance Lux UnitOfMeasure)

(instance MagnitudeFn Abstract)

(instance MagnitudeFn BinaryRelation)

(instance MagnitudeFn Entity)

(instance MagnitudeFn Function)

(instance MagnitudeFn Relation)

(instance MagnitudeFn SingleValuedRelation)

(instance MagnitudeFn UnaryFunction)

(instance Male Abstract)

(instance Male Attribute)

(instance Male BiologicalAttribute)

(instance Male Entity)

(instance Male InternalAttribute)

(instance Male SexAttribute)

(instance MaxFn Abstract)

(instance MaxFn AssociativeFunction)

(instance MaxFn BinaryFunction)

(instance MaxFn BinaryRelation)

(instance MaxFn CommutativeFunction)

(instance MaxFn Entity)

(instance MaxFn Function)

(instance MaxFn Relation)

(instance MaxFn RelationExtendedToQuantities)

(instance MaxFn SingleValuedRelation)

(instance MaxFn TernaryRelation)

(instance MaxFn TotalValuedRelation)

(instance MaximalWeightedPathFn Abstract)

(instance MaximalWeightedPathFn BinaryFunction)

(instance MaximalWeightedPathFn BinaryRelation)

(instance MaximalWeightedPathFn Entity)

(instance MaximalWeightedPathFn Function)

(instance MaximalWeightedPathFn Relation)

(instance MaximalWeightedPathFn SingleValuedRelation)

(instance MaximalWeightedPathFn TernaryRelation)

(instance MeasureFn Abstract)

(instance MeasureFn BinaryFunction)

(instance MeasureFn BinaryRelation)

(instance MeasureFn Entity)

(instance MeasureFn Function)

(instance MeasureFn Relation)

(instance MeasureFn SingleValuedRelation)

(instance MeasureFn TernaryRelation)

(instance MeasureFn TotalValuedRelation)

(instance MegaByte Abstract)

(instance MegaByte Entity)

(instance MegaByte PhysicalQuantity)

(instance MegaByte Quantity)

(instance MegaByte UnitOfMeasure)

(instance MegaFn Abstract)

(instance MegaFn BinaryRelation)

(instance MegaFn Entity)

(instance MegaFn Function)

(instance MegaFn Relation)

(instance MegaFn SingleValuedRelation)

(instance MegaFn TotalValuedRelation)

(instance MegaFn UnaryFunction)

(instance MereologicalDifferenceFn Abstract)

(instance MereologicalDifferenceFn BinaryFunction)

(instance MereologicalDifferenceFn BinaryRelation)

(instance MereologicalDifferenceFn Entity)

(instance MereologicalDifferenceFn Function)

(instance MereologicalDifferenceFn Relation)

(instance MereologicalDifferenceFn SingleValuedRelation)

(instance MereologicalDifferenceFn SpatialRelation)

(instance MereologicalDifferenceFn TernaryRelation)

(instance MereologicalDifferenceFn TotalValuedRelation)

(instance MereologicalProductFn Abstract)

(instance MereologicalProductFn BinaryFunction)

(instance MereologicalProductFn BinaryRelation)

(instance MereologicalProductFn Entity)

(instance MereologicalProductFn Function)

(instance MereologicalProductFn Relation)

(instance MereologicalProductFn SingleValuedRelation)

(instance MereologicalProductFn SpatialRelation)

(instance MereologicalProductFn TernaryRelation)

(instance MereologicalProductFn TotalValuedRelation)

(instance MereologicalSumFn Abstract)

(instance MereologicalSumFn BinaryFunction)

(instance MereologicalSumFn BinaryRelation)

(instance MereologicalSumFn Entity)

(instance MereologicalSumFn Function)

(instance MereologicalSumFn Relation)

(instance MereologicalSumFn SingleValuedRelation)

(instance MereologicalSumFn SpatialRelation)

(instance MereologicalSumFn TernaryRelation)

(instance MereologicalSumFn TotalValuedRelation)

(instance Meter Abstract)

(instance Meter Entity)

(instance Meter PhysicalQuantity)

(instance Meter Quantity)

(instance Meter SystemeInternationalUnit)

(instance Meter UnitOfMeasure)

(instance MicroFn Abstract)

(instance MicroFn BinaryRelation)

(instance MicroFn Entity)

(instance MicroFn Function)

(instance MicroFn Relation)

(instance MicroFn SingleValuedRelation)

(instance MicroFn TotalValuedRelation)

(instance MicroFn UnaryFunction)

(instance Mile Abstract)

(instance Mile Entity)

(instance Mile PhysicalQuantity)

(instance Mile Quantity)

(instance Mile UnitOfMeasure)

(instance MilliFn Abstract)

(instance MilliFn BinaryRelation)

(instance MilliFn Entity)

(instance MilliFn Function)

(instance MilliFn Relation)

(instance MilliFn SingleValuedRelation)

(instance MilliFn TotalValuedRelation)

(instance MilliFn UnaryFunction)

(instance Millimeter Abstract)

(instance Millimeter Entity)

(instance Millimeter PhysicalQuantity)

(instance Millimeter Quantity)

(instance Millimeter UnitOfMeasure)

(instance MinFn Abstract)

(instance MinFn AssociativeFunction)

(instance MinFn BinaryFunction)

(instance MinFn BinaryRelation)

(instance MinFn CommutativeFunction)

(instance MinFn Entity)

(instance MinFn Function)

(instance MinFn Relation)

(instance MinFn RelationExtendedToQuantities)

(instance MinFn SingleValuedRelation)

(instance MinFn TernaryRelation)

(instance MinFn TotalValuedRelation)

(instance MinimalCutSetFn Abstract)

(instance MinimalCutSetFn BinaryRelation)

(instance MinimalCutSetFn Entity)

(instance MinimalCutSetFn Function)

(instance MinimalCutSetFn Relation)

(instance MinimalCutSetFn SingleValuedRelation)

(instance MinimalCutSetFn UnaryFunction)

(instance MinimalWeightedPathFn Abstract)

(instance MinimalWeightedPathFn BinaryFunction)

(instance MinimalWeightedPathFn BinaryRelation)

(instance MinimalWeightedPathFn Entity)

(instance MinimalWeightedPathFn Function)

(instance MinimalWeightedPathFn Relation)

(instance MinimalWeightedPathFn SingleValuedRelation)

(instance MinimalWeightedPathFn TernaryRelation)

(instance MinuteDuration Abstract)

(instance MinuteDuration Entity)

(instance MinuteDuration PhysicalQuantity)

(instance MinuteDuration Quantity)

(instance MinuteDuration UnitOfMeasure)

(instance MinuteFn Abstract)

(instance MinuteFn BinaryFunction)

(instance MinuteFn BinaryRelation)

(instance MinuteFn Entity)

(instance MinuteFn Function)

(instance MinuteFn Relation)

(instance MinuteFn SingleValuedRelation)

(instance MinuteFn TemporalRelation)

(instance MinuteFn TernaryRelation)

(instance Mole Abstract)

(instance Mole Entity)

(instance Mole PhysicalQuantity)

(instance Mole Quantity)

(instance Mole SystemeInternationalUnit)

(instance Mole UnitOfMeasure)

(instance Monochromatic Abstract)

(instance Monochromatic Attribute)

(instance Monochromatic ColorAttribute)

(instance Monochromatic Entity)

(instance Monochromatic InternalAttribute)

(instance MonthDuration Abstract)

(instance MonthDuration Entity)

(instance MonthDuration PhysicalQuantity)

(instance MonthDuration Quantity)

(instance MonthDuration UnitOfMeasure)

(instance MonthFn Abstract)

(instance MonthFn BinaryFunction)

(instance MonthFn BinaryRelation)

(instance MonthFn Entity)

(instance MonthFn Function)

(instance MonthFn Relation)

(instance MonthFn SingleValuedRelation)

(instance MonthFn TemporalRelation)

(instance MonthFn TernaryRelation)

(instance MountainTimeZone Abstract)

(instance MountainTimeZone Attribute)

(instance MountainTimeZone Entity)

(instance MountainTimeZone RelationalAttribute)

(instance MountainTimeZone TimeZone)

(instance MultiplicationFn Abstract)

(instance MultiplicationFn AssociativeFunction)

(instance MultiplicationFn BinaryFunction)

(instance MultiplicationFn BinaryRelation)

(instance MultiplicationFn CommutativeFunction)

(instance MultiplicationFn Entity)

(instance MultiplicationFn Function)

(instance MultiplicationFn Relation)

(instance MultiplicationFn RelationExtendedToQuantities)

(instance MultiplicationFn SingleValuedRelation)

(instance MultiplicationFn TernaryRelation)

(instance MultiplicationFn TotalValuedRelation)

(instance NanoFn Abstract)

(instance NanoFn BinaryRelation)

(instance NanoFn Entity)

(instance NanoFn Function)

(instance NanoFn Relation)

(instance NanoFn SingleValuedRelation)

(instance NanoFn TotalValuedRelation)

(instance NanoFn UnaryFunction)

(instance Near Abstract)

(instance Near Attribute)

(instance Near Entity)

(instance Near PositionalAttribute)

(instance Near RelationalAttribute)

(instance Necessity Abstract)

(instance Necessity AlethicAttribute)

(instance Necessity Attribute)

(instance Necessity Entity)

(instance Necessity NormativeAttribute)

(instance Necessity ObjectiveNorm)

(instance Necessity RelationalAttribute)

(instance NegativeInfinity Abstract)

(instance NegativeInfinity ConstantQuantity)

(instance NegativeInfinity Entity)

(instance NegativeInfinity PhysicalQuantity)

(instance NegativeInfinity Quantity)

(instance NegativeInfinity TimeMeasure)

(instance NegativeInfinity TimePoint)

(instance NegativeInfinity TimePosition)

(instance Newton Abstract)

(instance Newton Entity)

(instance Newton PhysicalQuantity)

(instance Newton Quantity)

(instance Newton SystemeInternationalUnit)

(instance Newton UnitOfMeasure)

(instance NonFullyFormed Abstract)

(instance NonFullyFormed Attribute)

(instance NonFullyFormed BiologicalAttribute)

(instance NonFullyFormed DevelopmentalAttribute)

(instance NonFullyFormed Entity)

(instance NonFullyFormed InternalAttribute)

(instance North Abstract)

(instance North Attribute)

(instance North DirectionalAttribute)

(instance North Entity)

(instance North PositionalAttribute)

(instance North RelationalAttribute)

(instance NullList Abstract)

(instance NullList Entity)

(instance NullList List)

(instance NullList Relation)

(instance NumberE Abstract)

(instance NumberE Entity)

(instance NumberE NonnegativeRealNumber)

(instance NumberE Number)

(instance NumberE PositiveRealNumber)

(instance NumberE Quantity)

(instance NumberE RealNumber)

(instance NumeratorFn Abstract)

(instance NumeratorFn BinaryRelation)

(instance NumeratorFn Entity)

(instance NumeratorFn Function)

(instance NumeratorFn Relation)

(instance NumeratorFn SingleValuedRelation)

(instance NumeratorFn TotalValuedRelation)

(instance NumeratorFn UnaryFunction)

(instance ObjectAttitude InheritableRelation)

(instance Obligation Abstract)

(instance Obligation Attribute)

(instance Obligation DeonticAttribute)

(instance Obligation Entity)

(instance Obligation NormativeAttribute)

(instance Obligation ObjectiveNorm)

(instance Obligation RelationalAttribute)

(instance Ohm Abstract)

(instance Ohm Entity)

(instance Ohm PhysicalQuantity)

(instance Ohm Quantity)

(instance Ohm SystemeInternationalUnit)

(instance Ohm UnitOfMeasure)

(instance On Abstract)

(instance On Attribute)

(instance On Entity)

(instance On PositionalAttribute)

(instance On RelationalAttribute)

(instance Ounce Abstract)

(instance Ounce Entity)

(instance Ounce PhysicalQuantity)

(instance Ounce Quantity)

(instance Ounce UnitOfMeasure)

(instance PacificTimeZone Abstract)

(instance PacificTimeZone Attribute)

(instance PacificTimeZone Entity)

(instance PacificTimeZone RelationalAttribute)

(instance PacificTimeZone TimeZone)

(instance Pascal Abstract)

(instance Pascal Entity)

(instance Pascal PhysicalQuantity)

(instance Pascal Quantity)

(instance Pascal SystemeInternationalUnit)

(instance Pascal UnitOfMeasure)

(instance PastFn Abstract)

(instance PastFn BinaryRelation)

(instance PastFn Entity)

(instance PastFn Function)

(instance PastFn Relation)

(instance PastFn SingleValuedRelation)

(instance PastFn TemporalRelation)

(instance PastFn TotalValuedRelation)

(instance PastFn UnaryFunction)

(instance PathWeightFn Abstract)

(instance PathWeightFn BinaryRelation)

(instance PathWeightFn Entity)

(instance PathWeightFn Function)

(instance PathWeightFn Relation)

(instance PathWeightFn SingleValuedRelation)

(instance PathWeightFn UnaryFunction)

(instance PerFn Abstract)

(instance PerFn BinaryFunction)

(instance PerFn BinaryRelation)

(instance PerFn Entity)

(instance PerFn Function)

(instance PerFn Relation)

(instance PerFn SingleValuedRelation)

(instance PerFn TernaryRelation)

(instance PerFn TotalValuedRelation)

(instance PeriodicalIssueFn Abstract)

(instance PeriodicalIssueFn BinaryFunction)

(instance PeriodicalIssueFn BinaryRelation)

(instance PeriodicalIssueFn Entity)

(instance PeriodicalIssueFn Function)

(instance PeriodicalIssueFn PartialValuedRelation)

(instance PeriodicalIssueFn Relation)

(instance PeriodicalIssueFn SingleValuedRelation)

(instance PeriodicalIssueFn TernaryRelation)

(instance Permission Abstract)

(instance Permission Attribute)

(instance Permission DeonticAttribute)

(instance Permission Entity)

(instance Permission NormativeAttribute)

(instance Permission ObjectiveNorm)

(instance Permission RelationalAttribute)

(instance Pi Abstract)

(instance Pi Entity)

(instance Pi NonnegativeRealNumber)

(instance Pi Number)

(instance Pi PositiveRealNumber)

(instance Pi Quantity)

(instance Pi RealNumber)

(instance PicoFn Abstract)

(instance PicoFn BinaryRelation)

(instance PicoFn Entity)

(instance PicoFn Function)

(instance PicoFn Relation)

(instance PicoFn SingleValuedRelation)

(instance PicoFn TotalValuedRelation)

(instance PicoFn UnaryFunction)

(instance Pint Abstract)

(instance Pint Entity)

(instance Pint PhysicalQuantity)

(instance Pint Quantity)

(instance Pint UnitOfMeasure)

(instance Plasma Abstract)

(instance Plasma Attribute)

(instance Plasma Entity)

(instance Plasma InternalAttribute)

(instance Plasma PhysicalState)

(instance Pliable Abstract)

(instance Pliable Attribute)

(instance Pliable Entity)

(instance Pliable InternalAttribute)

(instance Polychromatic Abstract)

(instance Polychromatic Attribute)

(instance Polychromatic ColorAttribute)

(instance Polychromatic Entity)

(instance Polychromatic InternalAttribute)

(instance PositiveInfinity Abstract)

(instance PositiveInfinity ConstantQuantity)

(instance PositiveInfinity Entity)

(instance PositiveInfinity PhysicalQuantity)

(instance PositiveInfinity Quantity)

(instance PositiveInfinity TimeMeasure)

(instance PositiveInfinity TimePoint)

(instance PositiveInfinity TimePosition)

(instance Possibility Abstract)

(instance Possibility AlethicAttribute)

(instance Possibility Attribute)

(instance Possibility Entity)

(instance Possibility NormativeAttribute)

(instance Possibility ObjectiveNorm)

(instance Possibility RelationalAttribute)

(instance PoundForce Abstract)

(instance PoundForce Entity)

(instance PoundForce PhysicalQuantity)

(instance PoundForce Quantity)

(instance PoundForce UnitOfMeasure)

(instance PoundMass Abstract)

(instance PoundMass Entity)

(instance PoundMass PhysicalQuantity)

(instance PoundMass Quantity)

(instance PoundMass UnitOfMeasure)

(instance PowerSetFn Abstract)

(instance PowerSetFn BinaryRelation)

(instance PowerSetFn Entity)

(instance PowerSetFn Function)

(instance PowerSetFn Relation)

(instance PowerSetFn SingleValuedRelation)

(instance PowerSetFn TotalValuedRelation)

(instance PowerSetFn UnaryFunction)

(instance PredecessorFn Abstract)

(instance PredecessorFn BinaryRelation)

(instance PredecessorFn Entity)

(instance PredecessorFn Function)

(instance PredecessorFn Relation)

(instance PredecessorFn SingleValuedRelation)

(instance PredecessorFn TotalValuedRelation)

(instance PredecessorFn UnaryFunction)

(instance Predicate InheritableRelation)

(instance PremisesFn Abstract)

(instance PremisesFn BinaryRelation)

(instance PremisesFn Entity)

(instance PremisesFn Function)

(instance PremisesFn Relation)

(instance PremisesFn SingleValuedRelation)

(instance PremisesFn UnaryFunction)

(instance ProbabilityFn Abstract)

(instance ProbabilityFn AntisymmetricRelation)

(instance ProbabilityFn AsymmetricRelation)

(instance ProbabilityFn BinaryRelation)

(instance ProbabilityFn Entity)

(instance ProbabilityFn Function)

(instance ProbabilityFn IrreflexiveRelation)

(instance ProbabilityFn ProbabilityRelation)

(instance ProbabilityFn Relation)

(instance ProbabilityFn SingleValuedRelation)

(instance ProbabilityFn TotalValuedRelation)

(instance ProbabilityFn UnaryFunction)

(instance ProbabilityRelation InheritableRelation)

(instance Prohibition Abstract)

(instance Prohibition Attribute)

(instance Prohibition DeonticAttribute)

(instance Prohibition Entity)

(instance Prohibition NormativeAttribute)

(instance Prohibition ObjectiveNorm)

(instance Prohibition RelationalAttribute)

(instance PropertyFn Abstract)

(instance PropertyFn BinaryRelation)

(instance PropertyFn Entity)

(instance PropertyFn Function)

(instance PropertyFn Relation)

(instance PropertyFn SingleValuedRelation)

(instance PropertyFn TotalValuedRelation)

(instance PropertyFn UnaryFunction)

(instance PropositionalAttitude InheritableRelation)

(instance Prostrate Abstract)

(instance Prostrate Attribute)

(instance Prostrate BiologicalAttribute)

(instance Prostrate BodyPosition)

(instance Prostrate Entity)

(instance Prostrate InternalAttribute)

(instance Quart Abstract)

(instance Quart Entity)

(instance Quart PhysicalQuantity)

(instance Quart Quantity)

(instance Quart UnitOfMeasure)

(instance QuaternaryFunction InheritableRelation)

(instance QuaternaryPredicate InheritableRelation)

(instance QuaternaryRelation InheritableRelation)

(instance QuintaryPredicate InheritableRelation)

(instance QuintaryRelation InheritableRelation)

(instance Radian Abstract)

(instance Radian Entity)

(instance Radian PhysicalQuantity)

(instance Radian Quantity)

(instance Radian SystemeInternationalUnit)

(instance Radian UnitOfMeasure)

(instance RankineDegree Abstract)

(instance RankineDegree Entity)

(instance RankineDegree PhysicalQuantity)

(instance RankineDegree Quantity)

(instance RankineDegree UnitOfMeasure)

(instance RationalNumberFn Abstract)

(instance RationalNumberFn BinaryRelation)

(instance RationalNumberFn Entity)

(instance RationalNumberFn Function)

(instance RationalNumberFn Relation)

(instance RationalNumberFn SingleValuedRelation)

(instance RationalNumberFn UnaryFunction)

(instance RealNumberFn Abstract)

(instance RealNumberFn BinaryRelation)

(instance RealNumberFn Entity)

(instance RealNumberFn Function)

(instance RealNumberFn Relation)

(instance RealNumberFn SingleValuedRelation)

(instance RealNumberFn UnaryFunction)

(instance ReciprocalFn Abstract)

(instance ReciprocalFn BinaryRelation)

(instance ReciprocalFn Entity)

(instance ReciprocalFn Function)

(instance ReciprocalFn Relation)

(instance ReciprocalFn RelationExtendedToQuantities)

(instance ReciprocalFn SingleValuedRelation)

(instance ReciprocalFn TotalValuedRelation)

(instance ReciprocalFn UnaryFunction)

(instance RecurrentTimeIntervalFn Abstract)

(instance RecurrentTimeIntervalFn BinaryFunction)

(instance RecurrentTimeIntervalFn BinaryRelation)

(instance RecurrentTimeIntervalFn Entity)

(instance RecurrentTimeIntervalFn Function)

(instance RecurrentTimeIntervalFn Relation)

(instance RecurrentTimeIntervalFn SingleValuedRelation)

(instance RecurrentTimeIntervalFn TemporalRelation)

(instance RecurrentTimeIntervalFn TernaryRelation)

(instance Red Abstract)

(instance Red Attribute)

(instance Red ColorAttribute)

(instance Red Entity)

(instance Red InternalAttribute)

(instance Red PrimaryColor)

(instance RelationExtendedToQuantities InheritableRelation)

(instance RelativeComplementFn Abstract)

(instance RelativeComplementFn BinaryFunction)

(instance RelativeComplementFn BinaryRelation)

(instance RelativeComplementFn Entity)

(instance RelativeComplementFn Function)

(instance RelativeComplementFn Relation)

(instance RelativeComplementFn SingleValuedRelation)

(instance RelativeComplementFn TernaryRelation)

(instance RelativeComplementFn TotalValuedRelation)

(instance RelativeTimeFn Abstract)

(instance RelativeTimeFn BinaryFunction)

(instance RelativeTimeFn BinaryRelation)

(instance RelativeTimeFn Entity)

(instance RelativeTimeFn Function)

(instance RelativeTimeFn Relation)

(instance RelativeTimeFn SingleValuedRelation)

(instance RelativeTimeFn TemporalRelation)

(instance RelativeTimeFn TernaryRelation)

(instance RelativeTimeFn TotalValuedRelation)

(instance RemainderFn Abstract)

(instance RemainderFn BinaryFunction)

(instance RemainderFn BinaryRelation)

(instance RemainderFn Entity)

(instance RemainderFn Function)

(instance RemainderFn PartialValuedRelation)

(instance RemainderFn Relation)

(instance RemainderFn RelationExtendedToQuantities)

(instance RemainderFn SingleValuedRelation)

(instance RemainderFn TernaryRelation)

(instance Right Abstract)

(instance Right Attribute)

(instance Right Entity)

(instance Right PositionalAttribute)

(instance Right RelationalAttribute)

(instance Rigid Abstract)

(instance Rigid Attribute)

(instance Rigid Entity)

(instance Rigid InternalAttribute)

(instance Rough Abstract)

(instance Rough Attribute)

(instance Rough Entity)

(instance Rough InternalAttribute)

(instance Rough PerceptualAttribute)

(instance Rough TextureAttribute)

(instance RoundFn Abstract)

(instance RoundFn BinaryRelation)

(instance RoundFn Entity)

(instance RoundFn Function)

(instance RoundFn Relation)

(instance RoundFn RelationExtendedToQuantities)

(instance RoundFn SingleValuedRelation)

(instance RoundFn TotalValuedRelation)

(instance RoundFn UnaryFunction)

(instance SecondDuration Abstract)

(instance SecondDuration Entity)

(instance SecondDuration PhysicalQuantity)

(instance SecondDuration Quantity)

(instance SecondDuration SystemeInternationalUnit)

(instance SecondDuration UnitOfMeasure)

(instance SecondFn Abstract)

(instance SecondFn BinaryFunction)

(instance SecondFn BinaryRelation)

(instance SecondFn Entity)

(instance SecondFn Function)

(instance SecondFn Relation)

(instance SecondFn SingleValuedRelation)

(instance SecondFn TemporalRelation)

(instance SecondFn TernaryRelation)

(instance SeriesVolumeFn Abstract)

(instance SeriesVolumeFn BinaryFunction)

(instance SeriesVolumeFn BinaryRelation)

(instance SeriesVolumeFn Entity)

(instance SeriesVolumeFn Function)

(instance SeriesVolumeFn PartialValuedRelation)

(instance SeriesVolumeFn Relation)

(instance SeriesVolumeFn SingleValuedRelation)

(instance SeriesVolumeFn TernaryRelation)

(instance Siemens Abstract)

(instance Siemens Entity)

(instance Siemens PhysicalQuantity)

(instance Siemens Quantity)

(instance Siemens SystemeInternationalUnit)

(instance Siemens UnitOfMeasure)

(instance Sievert Abstract)

(instance Sievert Entity)

(instance Sievert PhysicalQuantity)

(instance Sievert Quantity)

(instance Sievert SystemeInternationalUnit)

(instance Sievert UnitOfMeasure)

(instance SignumFn Abstract)

(instance SignumFn BinaryRelation)

(instance SignumFn Entity)

(instance SignumFn Function)

(instance SignumFn Relation)

(instance SignumFn SingleValuedRelation)

(instance SignumFn TotalValuedRelation)

(instance SignumFn UnaryFunction)

(instance SineFn Abstract)

(instance SineFn BinaryRelation)

(instance SineFn Entity)

(instance SineFn Function)

(instance SineFn Relation)

(instance SineFn SingleValuedRelation)

(instance SineFn TotalValuedRelation)

(instance SineFn UnaryFunction)

(instance SingleValuedRelation InheritableRelation)

(instance Sitting Abstract)

(instance Sitting Attribute)

(instance Sitting BiologicalAttribute)

(instance Sitting BodyPosition)

(instance Sitting Entity)

(instance Sitting InternalAttribute)

(instance Slug Abstract)

(instance Slug Entity)

(instance Slug PhysicalQuantity)

(instance Slug Quantity)

(instance Slug UnitOfMeasure)

(instance Smooth Abstract)

(instance Smooth Attribute)

(instance Smooth Entity)

(instance Smooth InternalAttribute)

(instance Smooth PerceptualAttribute)

(instance Smooth TextureAttribute)

(instance Solid Abstract)

(instance Solid Attribute)

(instance Solid Entity)

(instance Solid InternalAttribute)

(instance Solid PhysicalState)

(instance South Abstract)

(instance South Attribute)

(instance South DirectionalAttribute)

(instance South Entity)

(instance South PositionalAttribute)

(instance South RelationalAttribute)

(instance SpatialRelation InheritableRelation)

(instance SpeedFn Abstract)

(instance SpeedFn BinaryRelation)

(instance SpeedFn Entity)

(instance SpeedFn Function)

(instance SpeedFn Relation)

(instance SpeedFn SingleValuedRelation)

(instance SpeedFn TotalValuedRelation)

(instance SquareRootFn Abstract)

(instance SquareRootFn BinaryRelation)

(instance SquareRootFn Entity)

(instance SquareRootFn Function)

(instance SquareRootFn Relation)

(instance SquareRootFn SingleValuedRelation)

(instance SquareRootFn UnaryFunction)

(instance Standing Abstract)

(instance Standing Attribute)

(instance Standing BiologicalAttribute)

(instance Standing BodyPosition)

(instance Standing Entity)

(instance Standing InternalAttribute)

(instance Steradian Abstract)

(instance Steradian Entity)

(instance Steradian PhysicalQuantity)

(instance Steradian Quantity)

(instance Steradian SystemeInternationalUnit)

(instance Steradian UnitOfMeasure)

(instance SubtractionFn Abstract)

(instance SubtractionFn AssociativeFunction)

(instance SubtractionFn BinaryFunction)

(instance SubtractionFn BinaryRelation)

(instance SubtractionFn Entity)

(instance SubtractionFn Function)

(instance SubtractionFn Relation)

(instance SubtractionFn RelationExtendedToQuantities)

(instance SubtractionFn SingleValuedRelation)

(instance SubtractionFn TernaryRelation)

(instance SubtractionFn TotalValuedRelation)

(instance SuccessorFn Abstract)

(instance SuccessorFn BinaryRelation)

(instance SuccessorFn Entity)

(instance SuccessorFn Function)

(instance SuccessorFn Relation)

(instance SuccessorFn SingleValuedRelation)

(instance SuccessorFn TotalValuedRelation)

(instance SuccessorFn UnaryFunction)

(instance TangentFn Abstract)

(instance TangentFn BinaryRelation)

(instance TangentFn Entity)

(instance TangentFn Function)

(instance TangentFn Relation)

(instance TangentFn SingleValuedRelation)

(instance TangentFn TotalValuedRelation)

(instance TangentFn UnaryFunction)

(instance TemporalCompositionFn Abstract)

(instance TemporalCompositionFn BinaryFunction)

(instance TemporalCompositionFn BinaryRelation)

(instance TemporalCompositionFn Entity)

(instance TemporalCompositionFn Function)

(instance TemporalCompositionFn Relation)

(instance TemporalCompositionFn SingleValuedRelation)

(instance TemporalCompositionFn TemporalRelation)

(instance TemporalCompositionFn TernaryRelation)

(instance TemporalRelation InheritableRelation)

(instance TeraFn Abstract)

(instance TeraFn BinaryRelation)

(instance TeraFn Entity)

(instance TeraFn Function)

(instance TeraFn Relation)

(instance TeraFn SingleValuedRelation)

(instance TeraFn TotalValuedRelation)

(instance TeraFn UnaryFunction)

(instance TerminalNodeFn Abstract)

(instance TerminalNodeFn BinaryRelation)

(instance TerminalNodeFn Entity)

(instance TerminalNodeFn Function)

(instance TerminalNodeFn PartialValuedRelation)

(instance TerminalNodeFn Relation)

(instance TerminalNodeFn SingleValuedRelation)

(instance TerminalNodeFn UnaryFunction)

(instance TernaryFunction InheritableRelation)

(instance TernaryPredicate InheritableRelation)

(instance TernaryRelation InheritableRelation)

(instance Tesla Abstract)

(instance Tesla Entity)

(instance Tesla PhysicalQuantity)

(instance Tesla Quantity)

(instance Tesla SystemeInternationalUnit)

(instance Tesla UnitOfMeasure)

(instance TimeIntervalFn Abstract)

(instance TimeIntervalFn BinaryFunction)

(instance TimeIntervalFn BinaryRelation)

(instance TimeIntervalFn Entity)

(instance TimeIntervalFn Function)

(instance TimeIntervalFn Relation)

(instance TimeIntervalFn SingleValuedRelation)

(instance TimeIntervalFn TemporalRelation)

(instance TimeIntervalFn TernaryRelation)

(instance TotalValuedRelation InheritableRelation)

(instance True Abstract)

(instance True Attribute)

(instance True Entity)

(instance True RelationalAttribute)

(instance True TruthValue)

(instance UnaryFunction InheritableRelation)

(instance Unconscious Abstract)

(instance Unconscious Attribute)

(instance Unconscious BiologicalAttribute)

(instance Unconscious ConsciousnessAttribute)

(instance Unconscious Entity)

(instance Unconscious InternalAttribute)

(instance Unconscious PsychologicalAttribute)

(instance Unconscious StateOfMind)

(instance Unemployed Abstract)

(instance Unemployed Attribute)

(instance Unemployed Entity)

(instance Unemployed RelationalAttribute)

(instance Unemployed SocialRole)

(instance Unilluminated Abstract)

(instance Unilluminated Attribute)

(instance Unilluminated Entity)

(instance Unilluminated InternalAttribute)

(instance Unilluminated PerceptualAttribute)

(instance Unilluminated VisualAttribute)

(instance UnionFn Abstract)

(instance UnionFn BinaryFunction)

(instance UnionFn BinaryRelation)

(instance UnionFn Entity)

(instance UnionFn Function)

(instance UnionFn Relation)

(instance UnionFn SingleValuedRelation)

(instance UnionFn TernaryRelation)

(instance UnionFn TotalValuedRelation)

(instance UnitedKingdomGallon Abstract)

(instance UnitedKingdomGallon Entity)

(instance UnitedKingdomGallon PhysicalQuantity)

(instance UnitedKingdomGallon Quantity)

(instance UnitedKingdomGallon UnitOfMeasure)

(instance UnitedStatesCent Abstract)

(instance UnitedStatesCent Entity)

(instance UnitedStatesCent PhysicalQuantity)

(instance UnitedStatesCent Quantity)

(instance UnitedStatesCent UnitOfMeasure)

(instance UnitedStatesDollar Abstract)

(instance UnitedStatesDollar Entity)

(instance UnitedStatesDollar PhysicalQuantity)

(instance UnitedStatesDollar Quantity)

(instance UnitedStatesDollar UnitOfMeasure)

(instance UnitedStatesGallon Abstract)

(instance UnitedStatesGallon Entity)

(instance UnitedStatesGallon PhysicalQuantity)

(instance UnitedStatesGallon Quantity)

(instance UnitedStatesGallon UnitOfMeasure)

(instance Unlikely Abstract)

(instance Unlikely Attribute)

(instance Unlikely Entity)

(instance Unlikely NormativeAttribute)

(instance Unlikely ObjectiveNorm)

(instance Unlikely ProbabilityAttribute)

(instance Unlikely RelationalAttribute)

(instance VelocityFn Abstract)

(instance VelocityFn Entity)

(instance VelocityFn Function)

(instance VelocityFn QuaternaryFunction)

(instance VelocityFn QuaternaryRelation)

(instance VelocityFn QuintaryRelation)

(instance VelocityFn Relation)

(instance VelocityFn SingleValuedRelation)

(instance VelocityFn TotalValuedRelation)

(instance Vertical Abstract)

(instance Vertical Attribute)

(instance Vertical Entity)

(instance Vertical PositionalAttribute)

(instance Vertical RelationalAttribute)

(instance Volt Abstract)

(instance Volt Entity)

(instance Volt PhysicalQuantity)

(instance Volt Quantity)

(instance Volt SystemeInternationalUnit)

(instance Volt UnitOfMeasure)

(instance Watt Abstract)

(instance Watt Entity)

(instance Watt PhysicalQuantity)

(instance Watt Quantity)

(instance Watt SystemeInternationalUnit)

(instance Watt UnitOfMeasure)

(instance WealthFn Abstract)

(instance WealthFn BinaryRelation)

(instance WealthFn Entity)

(instance WealthFn Function)

(instance WealthFn Relation)

(instance WealthFn SingleValuedRelation)

(instance WealthFn UnaryFunction)

(instance Weber Abstract)

(instance Weber Entity)

(instance Weber PhysicalQuantity)

(instance Weber Quantity)

(instance Weber SystemeInternationalUnit)

(instance Weber UnitOfMeasure)

(instance WeekDuration Abstract)

(instance WeekDuration Entity)

(instance WeekDuration PhysicalQuantity)

(instance WeekDuration Quantity)

(instance WeekDuration UnitOfMeasure)

(instance West Abstract)

(instance West Attribute)

(instance West DirectionalAttribute)

(instance West Entity)

(instance West PositionalAttribute)

(instance West RelationalAttribute)

(instance Wet Abstract)

(instance Wet Attribute)

(instance Wet Entity)

(instance Wet InternalAttribute)

(instance Wet SaturationAttribute)

(instance WhenFn Abstract)

(instance WhenFn BinaryRelation)

(instance WhenFn Entity)

(instance WhenFn Function)

(instance WhenFn Relation)

(instance WhenFn SingleValuedRelation)

(instance WhenFn TemporalRelation)

(instance WhenFn TotalValuedRelation)

(instance WhenFn UnaryFunction)

(instance WhereFn Abstract)

(instance WhereFn BinaryFunction)

(instance WhereFn BinaryRelation)

(instance WhereFn Entity)

(instance WhereFn Function)

(instance WhereFn Relation)

(instance WhereFn SingleValuedRelation)

(instance WhereFn SpatialRelation)

(instance WhereFn TernaryRelation)

(instance WhereFn TotalValuedRelation)

(instance White Abstract)

(instance White Attribute)

(instance White ColorAttribute)

(instance White Entity)

(instance White InternalAttribute)

(instance White PrimaryColor)

(instance YearDuration Abstract)

(instance YearDuration Entity)

(instance YearDuration PhysicalQuantity)

(instance YearDuration Quantity)

(instance YearDuration UnitOfMeasure)

(instance YearFn Abstract)

(instance YearFn BinaryRelation)

(instance YearFn Entity)

(instance YearFn Function)

(instance YearFn Relation)

(instance YearFn SingleValuedRelation)

(instance YearFn TemporalRelation)

(instance YearFn UnaryFunction)

(instance Yellow Abstract)

(instance Yellow Attribute)

(instance Yellow ColorAttribute)

(instance Yellow Entity)

(instance Yellow InternalAttribute)

(instance Yellow PrimaryColor)

(instance age Abstract)

(instance age BinaryRelation)

(instance age Entity)

(instance age Predicate)

(instance age Relation)

(instance age SingleValuedRelation)

(instance agent Abstract)

(instance agent AntisymmetricRelation)

(instance agent AsymmetricRelation)

(instance agent BinaryPredicate)

(instance agent BinaryRelation)

(instance agent CaseRole)

(instance agent Entity)

(instance agent IrreflexiveRelation)

(instance agent Predicate)

(instance agent Relation)

(instance altitude Abstract)

(instance altitude Entity)

(instance altitude Predicate)

(instance altitude Relation)

(instance altitude SingleValuedRelation)

(instance altitude TernaryRelation)

(instance ancestor Abstract)

(instance ancestor BinaryRelation)

(instance ancestor Entity)

(instance ancestor IrreflexiveRelation)

(instance ancestor Predicate)

(instance ancestor Relation)

(instance ancestor TransitiveRelation)

(instance angleOfFigure Abstract)

(instance angleOfFigure BinaryRelation)

(instance angleOfFigure Entity)

(instance angleOfFigure Predicate)

(instance angleOfFigure Relation)

(instance angularMeasure Abstract)

(instance angularMeasure BinaryPredicate)

(instance angularMeasure BinaryRelation)

(instance angularMeasure Entity)

(instance angularMeasure Predicate)

(instance angularMeasure Relation)

(instance angularMeasure TotalValuedRelation)

(instance arcWeight Abstract)

(instance arcWeight BinaryPredicate)

(instance arcWeight BinaryRelation)

(instance arcWeight Entity)

(instance arcWeight Predicate)

(instance arcWeight Relation)

(instance arcWeight SingleValuedRelation)

(instance attends Abstract)

(instance attends BinaryRelation)

(instance attends Entity)

(instance attends Predicate)

(instance attends Relation)

(instance attribute Abstract)

(instance attribute AntisymmetricRelation)

(instance attribute AsymmetricRelation)

(instance attribute BinaryRelation)

(instance attribute Entity)

(instance attribute IrreflexiveRelation)

(instance attribute Predicate)

(instance attribute Relation)

(instance authors Abstract)

(instance authors AntisymmetricRelation)

(instance authors AsymmetricRelation)

(instance authors BinaryPredicate)

(instance authors BinaryRelation)

(instance authors Entity)

(instance authors IrreflexiveRelation)

(instance authors Predicate)

(instance authors Relation)

(instance average Abstract)

(instance average BinaryPredicate)

(instance average BinaryRelation)

(instance average Entity)

(instance average PartialValuedRelation)

(instance average Predicate)

(instance average Relation)

(instance average SingleValuedRelation)

(instance before Abstract)

(instance before BinaryRelation)

(instance before Entity)

(instance before IrreflexiveRelation)

(instance before Predicate)

(instance before Relation)

(instance before TemporalRelation)

(instance before TransitiveRelation)

(instance beforeOrEqual Abstract)

(instance beforeOrEqual AntisymmetricRelation)

(instance beforeOrEqual BinaryPredicate)

(instance beforeOrEqual BinaryRelation)

(instance beforeOrEqual Entity)

(instance beforeOrEqual PartialOrderingRelation)

(instance beforeOrEqual Predicate)

(instance beforeOrEqual ReflexiveRelation)

(instance beforeOrEqual Relation)

(instance beforeOrEqual TemporalRelation)

(instance beforeOrEqual TransitiveRelation)

(instance believes Abstract)

(instance believes AntisymmetricRelation)

(instance believes AsymmetricRelation)

(instance believes BinaryPredicate)

(instance believes BinaryRelation)

(instance believes Entity)

(instance believes IntentionalRelation)

(instance believes IrreflexiveRelation)

(instance believes Predicate)

(instance believes PropositionalAttitude)

(instance believes Relation)

(instance between Abstract)

(instance between Entity)

(instance between Predicate)

(instance between Relation)

(instance between SpatialRelation)

(instance between TernaryPredicate)

(instance between TernaryRelation)

(instance bottom Abstract)

(instance bottom BinaryRelation)

(instance bottom Entity)

(instance bottom Predicate)

(instance bottom Relation)

(instance brother Abstract)

(instance brother BinaryRelation)

(instance brother Entity)

(instance brother IrreflexiveRelation)

(instance brother Predicate)

(instance brother Relation)

(instance brother TransitiveRelation)

(instance capability Abstract)

(instance capability Entity)

(instance capability Predicate)

(instance capability Relation)

(instance capability TernaryPredicate)

(instance capability TernaryRelation)

(instance causes Abstract)

(instance causes AntisymmetricRelation)

(instance causes AsymmetricRelation)

(instance causes BinaryPredicate)

(instance causes BinaryRelation)

(instance causes Entity)

(instance causes IrreflexiveRelation)

(instance causes Predicate)

(instance causes Relation)

(instance causesProposition Abstract)

(instance causesProposition AntisymmetricRelation)

(instance causesProposition AsymmetricRelation)

(instance causesProposition BinaryPredicate)

(instance causesProposition BinaryRelation)

(instance causesProposition Entity)

(instance causesProposition IrreflexiveRelation)

(instance causesProposition Predicate)

(instance causesProposition Relation)

(instance causesSubclass Abstract)

(instance causesSubclass AntisymmetricRelation)

(instance causesSubclass AsymmetricRelation)

(instance causesSubclass BinaryPredicate)

(instance causesSubclass BinaryRelation)

(instance causesSubclass Entity)

(instance causesSubclass IrreflexiveRelation)

(instance causesSubclass Predicate)

(instance causesSubclass Relation)

(instance citizen Abstract)

(instance citizen AntisymmetricRelation)

(instance citizen AsymmetricRelation)

(instance citizen BinaryPredicate)

(instance citizen BinaryRelation)

(instance citizen Entity)

(instance citizen IrreflexiveRelation)

(instance citizen Predicate)

(instance citizen Relation)

(instance closedOn Abstract)

(instance closedOn AntisymmetricRelation)

(instance closedOn AsymmetricRelation)

(instance closedOn BinaryPredicate)

(instance closedOn BinaryRelation)

(instance closedOn Entity)

(instance closedOn IrreflexiveRelation)

(instance closedOn Predicate)

(instance closedOn Relation)

(instance completelyFills Abstract)

(instance completelyFills AntisymmetricRelation)

(instance completelyFills AsymmetricRelation)

(instance completelyFills BinaryRelation)

(instance completelyFills Entity)

(instance completelyFills IrreflexiveRelation)

(instance completelyFills Predicate)

(instance completelyFills Relation)

(instance component Abstract)

(instance component BinaryRelation)

(instance component Entity)

(instance component Predicate)

(instance component Relation)

(instance conclusion Abstract)

(instance conclusion BinaryPredicate)

(instance conclusion BinaryRelation)

(instance conclusion Entity)

(instance conclusion Predicate)

(instance conclusion Relation)

(instance conclusion SingleValuedRelation)

(instance conclusion TotalValuedRelation)

(instance conditionalProbability Abstract)

(instance conditionalProbability Entity)

(instance conditionalProbability Predicate)

(instance conditionalProbability ProbabilityRelation)

(instance conditionalProbability Relation)

(instance conditionalProbability TernaryPredicate)

(instance conditionalProbability TernaryRelation)

(instance confersNorm Abstract)

(instance confersNorm Entity)

(instance confersNorm Predicate)

(instance confersNorm Relation)

(instance confersNorm TernaryPredicate)

(instance confersNorm TernaryRelation)

(instance confersObligation Abstract)

(instance confersObligation Entity)

(instance confersObligation Predicate)

(instance confersObligation Relation)

(instance confersObligation TernaryPredicate)

(instance confersObligation TernaryRelation)

(instance confersRight Abstract)

(instance confersRight Entity)

(instance confersRight Predicate)

(instance confersRight Relation)

(instance confersRight TernaryPredicate)

(instance confersRight TernaryRelation)

(instance connected Abstract)

(instance connected BinaryPredicate)

(instance connected BinaryRelation)

(instance connected Entity)

(instance connected Predicate)

(instance connected ReflexiveRelation)

(instance connected Relation)

(instance connected SpatialRelation)

(instance connected SymmetricRelation)

(instance connectedEngineeringComponents Abstract)

(instance connectedEngineeringComponents BinaryRelation)

(instance connectedEngineeringComponents Entity)

(instance connectedEngineeringComponents IrreflexiveRelation)

(instance connectedEngineeringComponents Predicate)

(instance connectedEngineeringComponents Relation)

(instance connectedEngineeringComponents SymmetricRelation)

(instance connects Abstract)

(instance connects Entity)

(instance connects Predicate)

(instance connects Relation)

(instance connects SpatialRelation)

(instance connects TernaryPredicate)

(instance connects TernaryRelation)

(instance connectsEngineeringComponents Abstract)

(instance connectsEngineeringComponents Entity)

(instance connectsEngineeringComponents Predicate)

(instance connectsEngineeringComponents Relation)

(instance connectsEngineeringComponents TernaryRelation)

(instance considers Abstract)

(instance considers AntisymmetricRelation)

(instance considers AsymmetricRelation)

(instance considers BinaryPredicate)

(instance considers BinaryRelation)

(instance considers Entity)

(instance considers IntentionalRelation)

(instance considers IrreflexiveRelation)

(instance considers Predicate)

(instance considers PropositionalAttitude)

(instance considers Relation)

(instance consistent Abstract)

(instance consistent BinaryPredicate)

(instance consistent BinaryRelation)

(instance consistent Entity)

(instance consistent Predicate)

(instance consistent Relation)

(instance consistent SymmetricRelation)

(instance contains Abstract)

(instance contains AntisymmetricRelation)

(instance contains AsymmetricRelation)

(instance contains BinaryRelation)

(instance contains Entity)

(instance contains IrreflexiveRelation)

(instance contains Predicate)

(instance contains Relation)

(instance contains SpatialRelation)

(instance containsInformation Abstract)

(instance containsInformation AntisymmetricRelation)

(instance containsInformation AsymmetricRelation)

(instance containsInformation BinaryPredicate)

(instance containsInformation BinaryRelation)

(instance containsInformation Entity)

(instance containsInformation IrreflexiveRelation)

(instance containsInformation Predicate)

(instance containsInformation Relation)

(instance contraryAttribute Abstract)

(instance contraryAttribute Entity)

(instance contraryAttribute Predicate)

(instance contraryAttribute Relation)

(instance contraryAttribute VariableArityRelation)

(instance cooccur Abstract)

(instance cooccur BinaryPredicate)

(instance cooccur BinaryRelation)

(instance cooccur Entity)

(instance cooccur EquivalenceRelation)

(instance cooccur Predicate)

(instance cooccur ReflexiveRelation)

(instance cooccur Relation)

(instance cooccur SymmetricRelation)

(instance cooccur TemporalRelation)

(instance cooccur TransitiveRelation)

(instance copy Abstract)

(instance copy BinaryPredicate)

(instance copy BinaryRelation)

(instance copy Entity)

(instance copy EquivalenceRelation)

(instance copy Predicate)

(instance copy ReflexiveRelation)

(instance copy Relation)

(instance copy SymmetricRelation)

(instance copy TransitiveRelation)

(instance crosses Abstract)

(instance crosses AntisymmetricRelation)

(instance crosses AsymmetricRelation)

(instance crosses BinaryRelation)

(instance crosses Entity)

(instance crosses IrreflexiveRelation)

(instance crosses Predicate)

(instance crosses Relation)

(instance crosses TransitiveRelation)

(instance date Abstract)

(instance date AntisymmetricRelation)

(instance date AsymmetricRelation)

(instance date BinaryPredicate)

(instance date BinaryRelation)

(instance date Entity)

(instance date IrreflexiveRelation)

(instance date Predicate)

(instance date Relation)

(instance date SingleValuedRelation)

(instance daughter Abstract)

(instance daughter BinaryRelation)

(instance daughter Entity)

(instance daughter Predicate)

(instance daughter Relation)

(instance decreasesLikelihood Abstract)

(instance decreasesLikelihood BinaryPredicate)

(instance decreasesLikelihood BinaryRelation)

(instance decreasesLikelihood Entity)

(instance decreasesLikelihood IrreflexiveRelation)

(instance decreasesLikelihood Predicate)

(instance decreasesLikelihood ProbabilityRelation)

(instance decreasesLikelihood Relation)

(instance deprivesNorm Abstract)

(instance deprivesNorm Entity)

(instance deprivesNorm Predicate)

(instance deprivesNorm Relation)

(instance deprivesNorm TernaryPredicate)

(instance deprivesNorm TernaryRelation)

(instance depth Abstract)

(instance depth Entity)

(instance depth Predicate)

(instance depth Relation)

(instance depth SingleValuedRelation)

(instance depth TernaryRelation)

(instance desires Abstract)

(instance desires AntisymmetricRelation)

(instance desires AsymmetricRelation)

(instance desires BinaryPredicate)

(instance desires BinaryRelation)

(instance desires Entity)

(instance desires IntentionalRelation)

(instance desires IrreflexiveRelation)

(instance desires Predicate)

(instance desires PropositionalAttitude)

(instance desires Relation)

(instance destination Abstract)

(instance destination AntisymmetricRelation)

(instance destination AsymmetricRelation)

(instance destination BinaryPredicate)

(instance destination BinaryRelation)

(instance destination CaseRole)

(instance destination Entity)

(instance destination IrreflexiveRelation)

(instance destination Predicate)

(instance destination Relation)

(instance developmentalForm Abstract)

(instance developmentalForm AntisymmetricRelation)

(instance developmentalForm AsymmetricRelation)

(instance developmentalForm BinaryPredicate)

(instance developmentalForm BinaryRelation)

(instance developmentalForm Entity)

(instance developmentalForm IrreflexiveRelation)

(instance developmentalForm Predicate)

(instance developmentalForm Relation)

(instance developmentalForm TransitiveRelation)

(instance diameter Abstract)

(instance diameter BinaryRelation)

(instance diameter Entity)

(instance diameter Predicate)

(instance diameter Relation)

(instance direction Abstract)

(instance direction AntisymmetricRelation)

(instance direction AsymmetricRelation)

(instance direction BinaryPredicate)

(instance direction BinaryRelation)

(instance direction CaseRole)

(instance direction Entity)

(instance direction IrreflexiveRelation)

(instance direction Predicate)

(instance direction Relation)

(instance disjoint Abstract)

(instance disjoint BinaryPredicate)

(instance disjoint BinaryRelation)

(instance disjoint Entity)

(instance disjoint Predicate)

(instance disjoint Relation)

(instance disjoint SymmetricRelation)

(instance disjointDecomposition Abstract)

(instance disjointDecomposition Entity)

(instance disjointDecomposition Predicate)

(instance disjointDecomposition Relation)

(instance disjointDecomposition VariableArityRelation)

(instance disjointRelation Abstract)

(instance disjointRelation BinaryPredicate)

(instance disjointRelation BinaryRelation)

(instance disjointRelation Entity)

(instance disjointRelation IrreflexiveRelation)

(instance disjointRelation Predicate)

(instance disjointRelation Relation)

(instance distance Abstract)

(instance distance Entity)

(instance distance Predicate)

(instance distance Relation)

(instance distance SingleValuedRelation)

(instance distance SpatialRelation)

(instance distance TernaryPredicate)

(instance distance TernaryRelation)

(instance distributes Abstract)

(instance distributes BinaryPredicate)

(instance distributes BinaryRelation)

(instance distributes Entity)

(instance distributes Predicate)

(instance distributes Relation)

(instance documentation Abstract)

(instance documentation AntisymmetricRelation)

(instance documentation AsymmetricRelation)

(instance documentation BinaryPredicate)

(instance documentation BinaryRelation)

(instance documentation Entity)

(instance documentation IrreflexiveRelation)

(instance documentation Predicate)

(instance documentation Relation)

(instance domain Abstract)

(instance domain Entity)

(instance domain Predicate)

(instance domain Relation)

(instance domain TernaryPredicate)

(instance domain TernaryRelation)

(instance domainSubclass Abstract)

(instance domainSubclass Entity)

(instance domainSubclass Predicate)

(instance domainSubclass Relation)

(instance domainSubclass TernaryPredicate)

(instance domainSubclass TernaryRelation)

(instance duration Abstract)

(instance duration AntisymmetricRelation)

(instance duration AsymmetricRelation)

(instance duration BinaryPredicate)

(instance duration BinaryRelation)

(instance duration Entity)

(instance duration IrreflexiveRelation)

(instance duration Predicate)

(instance duration Relation)

(instance duration TotalValuedRelation)

(instance during Abstract)

(instance during BinaryRelation)

(instance during Entity)

(instance during IrreflexiveRelation)

(instance during Predicate)

(instance during Relation)

(instance during TransitiveRelation)

(instance earlier Abstract)

(instance earlier BinaryPredicate)

(instance earlier BinaryRelation)

(instance earlier Entity)

(instance earlier IrreflexiveRelation)

(instance earlier Predicate)

(instance earlier Relation)

(instance earlier TemporalRelation)

(instance earlier TransitiveRelation)

(instance editor Abstract)

(instance editor AntisymmetricRelation)

(instance editor AsymmetricRelation)

(instance editor BinaryPredicate)

(instance editor BinaryRelation)

(instance editor Entity)

(instance editor IrreflexiveRelation)

(instance editor Predicate)

(instance editor Relation)

(instance element Abstract)

(instance element AntisymmetricRelation)

(instance element AsymmetricRelation)

(instance element BinaryPredicate)

(instance element BinaryRelation)

(instance element Entity)

(instance element IrreflexiveRelation)

(instance element Predicate)

(instance element Relation)

(instance employs Abstract)

(instance employs BinaryPredicate)

(instance employs BinaryRelation)

(instance employs Entity)

(instance employs Predicate)

(instance employs Relation)

(instance engineeringSubcomponent Abstract)

(instance engineeringSubcomponent BinaryRelation)

(instance engineeringSubcomponent Entity)

(instance engineeringSubcomponent Predicate)

(instance engineeringSubcomponent Relation)

(instance entails Abstract)

(instance entails BinaryPredicate)

(instance entails BinaryRelation)

(instance entails Entity)

(instance entails Predicate)

(instance entails Relation)

(instance equal Abstract)

(instance equal BinaryPredicate)

(instance equal BinaryRelation)

(instance equal Entity)

(instance equal EquivalenceRelation)

(instance equal Predicate)

(instance equal ReflexiveRelation)

(instance equal Relation)

(instance equal RelationExtendedToQuantities)

(instance equal SymmetricRelation)

(instance equal TransitiveRelation)

(instance equivalenceRelationOn Abstract)

(instance equivalenceRelationOn AntisymmetricRelation)

(instance equivalenceRelationOn AsymmetricRelation)

(instance equivalenceRelationOn BinaryPredicate)

(instance equivalenceRelationOn BinaryRelation)

(instance equivalenceRelationOn Entity)

(instance equivalenceRelationOn IrreflexiveRelation)

(instance equivalenceRelationOn Predicate)

(instance equivalenceRelationOn Relation)

(instance equivalentContentClass Abstract)

(instance equivalentContentClass BinaryRelation)

(instance equivalentContentClass Entity)

(instance equivalentContentClass EquivalenceRelation)

(instance equivalentContentClass Predicate)

(instance equivalentContentClass ReflexiveRelation)

(instance equivalentContentClass Relation)

(instance equivalentContentClass SymmetricRelation)

(instance equivalentContentClass TransitiveRelation)

(instance equivalentContentInstance Abstract)

(instance equivalentContentInstance BinaryRelation)

(instance equivalentContentInstance Entity)

(instance equivalentContentInstance EquivalenceRelation)

(instance equivalentContentInstance Predicate)

(instance equivalentContentInstance ReflexiveRelation)

(instance equivalentContentInstance Relation)

(instance equivalentContentInstance SymmetricRelation)

(instance equivalentContentInstance TransitiveRelation)

(instance exactlyLocated Abstract)

(instance exactlyLocated BinaryRelation)

(instance exactlyLocated Entity)

(instance exactlyLocated Predicate)

(instance exactlyLocated Relation)

(instance exhaustiveAttribute Abstract)

(instance exhaustiveAttribute Entity)

(instance exhaustiveAttribute Predicate)

(instance exhaustiveAttribute Relation)

(instance exhaustiveAttribute VariableArityRelation)

(instance exhaustiveDecomposition Abstract)

(instance exhaustiveDecomposition Entity)

(instance exhaustiveDecomposition Predicate)

(instance exhaustiveDecomposition Relation)

(instance exhaustiveDecomposition VariableArityRelation)

(instance experiencer Abstract)

(instance experiencer AntisymmetricRelation)

(instance experiencer AsymmetricRelation)

(instance experiencer BinaryPredicate)

(instance experiencer BinaryRelation)

(instance experiencer CaseRole)

(instance experiencer Entity)

(instance experiencer IrreflexiveRelation)

(instance experiencer Predicate)

(instance experiencer Relation)

(instance exploits Abstract)

(instance exploits AntisymmetricRelation)

(instance exploits AsymmetricRelation)

(instance exploits BinaryPredicate)

(instance exploits BinaryRelation)

(instance exploits Entity)

(instance exploits IrreflexiveRelation)

(instance exploits Predicate)

(instance exploits Relation)

(instance expressedInLanguage Abstract)

(instance expressedInLanguage AntisymmetricRelation)

(instance expressedInLanguage AsymmetricRelation)

(instance expressedInLanguage BinaryPredicate)

(instance expressedInLanguage BinaryRelation)

(instance expressedInLanguage Entity)

(instance expressedInLanguage IrreflexiveRelation)

(instance expressedInLanguage Predicate)

(instance expressedInLanguage Relation)

(instance faces Abstract)

(instance faces BinaryPredicate)

(instance faces BinaryRelation)

(instance faces Entity)

(instance faces Predicate)

(instance faces Relation)

(instance familyRelation Abstract)

(instance familyRelation BinaryPredicate)

(instance familyRelation BinaryRelation)

(instance familyRelation Entity)

(instance familyRelation EquivalenceRelation)

(instance familyRelation Predicate)

(instance familyRelation ReflexiveRelation)

(instance familyRelation Relation)

(instance familyRelation SymmetricRelation)

(instance familyRelation TransitiveRelation)

(instance father Abstract)

(instance father BinaryRelation)

(instance father Entity)

(instance father Predicate)

(instance father Relation)

(instance father SingleValuedRelation)

(instance fills Abstract)

(instance fills AntisymmetricRelation)

(instance fills AsymmetricRelation)

(instance fills BinaryRelation)

(instance fills Entity)

(instance fills IrreflexiveRelation)

(instance fills Predicate)

(instance fills Relation)

(instance finishes Abstract)

(instance finishes BinaryRelation)

(instance finishes Entity)

(instance finishes IrreflexiveRelation)

(instance finishes Predicate)

(instance finishes Relation)

(instance finishes TemporalRelation)

(instance finishes TransitiveRelation)

(instance frequency Abstract)

(instance frequency AntisymmetricRelation)

(instance frequency AsymmetricRelation)

(instance frequency BinaryPredicate)

(instance frequency BinaryRelation)

(instance frequency Entity)

(instance frequency IrreflexiveRelation)

(instance frequency Predicate)

(instance frequency Relation)

(instance geographicSubregion Abstract)

(instance geographicSubregion AntisymmetricRelation)

(instance geographicSubregion AsymmetricRelation)

(instance geographicSubregion BinaryPredicate)

(instance geographicSubregion BinaryRelation)

(instance geographicSubregion Entity)

(instance geographicSubregion IrreflexiveRelation)

(instance geographicSubregion Predicate)

(instance geographicSubregion Relation)

(instance geographicSubregion TransitiveRelation)

(instance geometricDistance Abstract)

(instance geometricDistance Entity)

(instance geometricDistance Predicate)

(instance geometricDistance Relation)

(instance geometricDistance SingleValuedRelation)

(instance geometricDistance TernaryPredicate)

(instance geometricDistance TernaryRelation)

(instance geometricDistance TotalValuedRelation)

(instance geometricPart Abstract)

(instance geometricPart AntisymmetricRelation)

(instance geometricPart BinaryPredicate)

(instance geometricPart BinaryRelation)

(instance geometricPart Entity)

(instance geometricPart PartialOrderingRelation)

(instance geometricPart Predicate)

(instance geometricPart ReflexiveRelation)

(instance geometricPart Relation)

(instance geometricPart TransitiveRelation)

(instance geopoliticalSubdivision Abstract)

(instance geopoliticalSubdivision AntisymmetricRelation)

(instance geopoliticalSubdivision AsymmetricRelation)

(instance geopoliticalSubdivision BinaryRelation)

(instance geopoliticalSubdivision Entity)

(instance geopoliticalSubdivision IrreflexiveRelation)

(instance geopoliticalSubdivision Predicate)

(instance geopoliticalSubdivision Relation)

(instance geopoliticalSubdivision TransitiveRelation)

(instance graphPart Abstract)

(instance graphPart AntisymmetricRelation)

(instance graphPart AsymmetricRelation)

(instance graphPart BinaryPredicate)

(instance graphPart BinaryRelation)

(instance graphPart Entity)

(instance graphPart IrreflexiveRelation)

(instance graphPart Predicate)

(instance graphPart Relation)

(instance grasps Abstract)

(instance grasps BinaryRelation)

(instance grasps Entity)

(instance grasps Predicate)

(instance grasps Relation)

(instance greaterThan Abstract)

(instance greaterThan BinaryPredicate)

(instance greaterThan BinaryRelation)

(instance greaterThan Entity)

(instance greaterThan IrreflexiveRelation)

(instance greaterThan Predicate)

(instance greaterThan Relation)

(instance greaterThan RelationExtendedToQuantities)

(instance greaterThan TransitiveRelation)

(instance greaterThanOrEqualTo Abstract)

(instance greaterThanOrEqualTo AntisymmetricRelation)

(instance greaterThanOrEqualTo BinaryPredicate)

(instance greaterThanOrEqualTo BinaryRelation)

(instance greaterThanOrEqualTo Entity)

(instance greaterThanOrEqualTo PartialOrderingRelation)

(instance greaterThanOrEqualTo Predicate)

(instance greaterThanOrEqualTo ReflexiveRelation)

(instance greaterThanOrEqualTo Relation)

(instance greaterThanOrEqualTo RelationExtendedToQuantities)

(instance greaterThanOrEqualTo TransitiveRelation)

(instance hasPurpose Abstract)

(instance hasPurpose AntisymmetricRelation)

(instance hasPurpose AsymmetricRelation)

(instance hasPurpose BinaryPredicate)

(instance hasPurpose BinaryRelation)

(instance hasPurpose Entity)

(instance hasPurpose IrreflexiveRelation)

(instance hasPurpose Predicate)

(instance hasPurpose Relation)

(instance hasPurposeForAgent Abstract)

(instance hasPurposeForAgent Entity)

(instance hasPurposeForAgent Predicate)

(instance hasPurposeForAgent Relation)

(instance hasPurposeForAgent TernaryPredicate)

(instance hasPurposeForAgent TernaryRelation)

(instance hasSkill Abstract)

(instance hasSkill AntisymmetricRelation)

(instance hasSkill AsymmetricRelation)

(instance hasSkill BinaryPredicate)

(instance hasSkill BinaryRelation)

(instance hasSkill Entity)

(instance hasSkill IrreflexiveRelation)

(instance hasSkill Predicate)

(instance hasSkill Relation)

(instance height Abstract)

(instance height BinaryRelation)

(instance height Entity)

(instance height Predicate)

(instance height Relation)

(instance holdsDuring Abstract)

(instance holdsDuring AntisymmetricRelation)

(instance holdsDuring AsymmetricRelation)

(instance holdsDuring BinaryPredicate)

(instance holdsDuring BinaryRelation)

(instance holdsDuring Entity)

(instance holdsDuring IrreflexiveRelation)

(instance holdsDuring Predicate)

(instance holdsDuring Relation)

(instance holdsObligation Abstract)

(instance holdsObligation AntisymmetricRelation)

(instance holdsObligation AsymmetricRelation)

(instance holdsObligation BinaryPredicate)

(instance holdsObligation BinaryRelation)

(instance holdsObligation Entity)

(instance holdsObligation IrreflexiveRelation)

(instance holdsObligation Predicate)

(instance holdsObligation Relation)

(instance holdsRight Abstract)

(instance holdsRight AntisymmetricRelation)

(instance holdsRight AsymmetricRelation)

(instance holdsRight BinaryPredicate)

(instance holdsRight BinaryRelation)

(instance holdsRight Entity)

(instance holdsRight IrreflexiveRelation)

(instance holdsRight Predicate)

(instance holdsRight Relation)

(instance hole Abstract)

(instance hole AntisymmetricRelation)

(instance hole AsymmetricRelation)

(instance hole BinaryPredicate)

(instance hole BinaryRelation)

(instance hole Entity)

(instance hole IrreflexiveRelation)

(instance hole Predicate)

(instance hole Relation)

(instance hole SpatialRelation)

(instance home Abstract)

(instance home BinaryRelation)

(instance home Entity)

(instance home Predicate)

(instance home Relation)

(instance husband Abstract)

(instance husband AntisymmetricRelation)

(instance husband AsymmetricRelation)

(instance husband BinaryRelation)

(instance husband Entity)

(instance husband IrreflexiveRelation)

(instance husband Predicate)

(instance husband Relation)

(instance identicalListItems Abstract)

(instance identicalListItems BinaryPredicate)

(instance identicalListItems BinaryRelation)

(instance identicalListItems Entity)

(instance identicalListItems EquivalenceRelation)

(instance identicalListItems Predicate)

(instance identicalListItems ReflexiveRelation)

(instance identicalListItems Relation)

(instance identicalListItems SymmetricRelation)

(instance identicalListItems TransitiveRelation)

(instance identityElement Abstract)

(instance identityElement AntisymmetricRelation)

(instance identityElement AsymmetricRelation)

(instance identityElement BinaryPredicate)

(instance identityElement BinaryRelation)

(instance identityElement Entity)

(instance identityElement IrreflexiveRelation)

(instance identityElement Predicate)

(instance identityElement Relation)

(instance immediateInstance Abstract)

(instance immediateInstance AntisymmetricRelation)

(instance immediateInstance AsymmetricRelation)

(instance immediateInstance BinaryRelation)

(instance immediateInstance Entity)

(instance immediateInstance IntransitiveRelation)

(instance immediateInstance IrreflexiveRelation)

(instance immediateInstance Predicate)

(instance immediateInstance Relation)

(instance immediateSubclass Abstract)

(instance immediateSubclass AntisymmetricRelation)

(instance immediateSubclass AsymmetricRelation)

(instance immediateSubclass BinaryRelation)

(instance immediateSubclass Entity)

(instance immediateSubclass IntransitiveRelation)

(instance immediateSubclass IrreflexiveRelation)

(instance immediateSubclass Predicate)

(instance immediateSubclass Relation)

(instance inList Abstract)

(instance inList AntisymmetricRelation)

(instance inList AsymmetricRelation)

(instance inList BinaryPredicate)

(instance inList BinaryRelation)

(instance inList Entity)

(instance inList IrreflexiveRelation)

(instance inList Predicate)

(instance inList Relation)

(instance inScopeOfInterest Abstract)

(instance inScopeOfInterest BinaryPredicate)

(instance inScopeOfInterest BinaryRelation)

(instance inScopeOfInterest Entity)

(instance inScopeOfInterest IntentionalRelation)

(instance inScopeOfInterest Predicate)

(instance inScopeOfInterest Relation)

(instance increasesLikelihood Abstract)

(instance increasesLikelihood BinaryPredicate)

(instance increasesLikelihood BinaryRelation)

(instance increasesLikelihood Entity)

(instance increasesLikelihood IrreflexiveRelation)

(instance increasesLikelihood Predicate)

(instance increasesLikelihood ProbabilityRelation)

(instance increasesLikelihood Relation)

(instance independentProbability Abstract)

(instance independentProbability BinaryPredicate)

(instance independentProbability BinaryRelation)

(instance independentProbability Entity)

(instance independentProbability Predicate)

(instance independentProbability ProbabilityRelation)

(instance independentProbability Relation)

(instance independentProbability SymmetricRelation)

(instance inhabits Abstract)

(instance inhabits AntisymmetricRelation)

(instance inhabits AsymmetricRelation)

(instance inhabits BinaryPredicate)

(instance inhabits BinaryRelation)

(instance inhabits Entity)

(instance inhabits IrreflexiveRelation)

(instance inhabits Predicate)

(instance inhabits Relation)

(instance inhibits Abstract)

(instance inhibits BinaryPredicate)

(instance inhibits BinaryRelation)

(instance inhibits Entity)

(instance inhibits IrreflexiveRelation)

(instance inhibits Predicate)

(instance inhibits Relation)

(instance initialList Abstract)

(instance initialList AntisymmetricRelation)

(instance initialList BinaryPredicate)

(instance initialList BinaryRelation)

(instance initialList Entity)

(instance initialList PartialOrderingRelation)

(instance initialList Predicate)

(instance initialList ReflexiveRelation)

(instance initialList Relation)

(instance initialList TransitiveRelation)

(instance instance Abstract)

(instance instance BinaryPredicate)

(instance instance BinaryRelation)

(instance instance Entity)

(instance instance Predicate)

(instance instance Relation)

(instance instrument Abstract)

(instance instrument BinaryRelation)

(instance instrument Entity)

(instance instrument Predicate)

(instance instrument Relation)

(instance interiorPart Abstract)

(instance interiorPart AntisymmetricRelation)

(instance interiorPart AsymmetricRelation)

(instance interiorPart BinaryRelation)

(instance interiorPart Entity)

(instance interiorPart IrreflexiveRelation)

(instance interiorPart Predicate)

(instance interiorPart Relation)

(instance interiorPart TransitiveRelation)

(instance inverse Abstract)

(instance inverse BinaryPredicate)

(instance inverse BinaryRelation)

(instance inverse Entity)

(instance inverse IntransitiveRelation)

(instance inverse IrreflexiveRelation)

(instance inverse Predicate)

(instance inverse Relation)

(instance inverse SymmetricRelation)

(instance involvedInEvent Abstract)

(instance involvedInEvent Entity)

(instance involvedInEvent Predicate)

(instance involvedInEvent Relation)

(instance irreflexiveOn Abstract)

(instance irreflexiveOn AntisymmetricRelation)

(instance irreflexiveOn AsymmetricRelation)

(instance irreflexiveOn BinaryPredicate)

(instance irreflexiveOn BinaryRelation)

(instance irreflexiveOn Entity)

(instance irreflexiveOn IrreflexiveRelation)

(instance irreflexiveOn Predicate)

(instance irreflexiveOn Relation)

(instance knows Abstract)

(instance knows AntisymmetricRelation)

(instance knows AsymmetricRelation)

(instance knows BinaryPredicate)

(instance knows BinaryRelation)

(instance knows Entity)

(instance knows IntentionalRelation)

(instance knows IrreflexiveRelation)

(instance knows Predicate)

(instance knows PropositionalAttitude)

(instance knows Relation)

(instance larger Abstract)

(instance larger BinaryPredicate)

(instance larger BinaryRelation)

(instance larger Entity)

(instance larger IrreflexiveRelation)

(instance larger Predicate)

(instance larger Relation)

(instance larger SpatialRelation)

(instance larger TransitiveRelation)

(instance leader Abstract)

(instance leader AntisymmetricRelation)

(instance leader AsymmetricRelation)

(instance leader BinaryPredicate)

(instance leader BinaryRelation)

(instance leader Entity)

(instance leader IrreflexiveRelation)

(instance leader Predicate)

(instance leader Relation)

(instance leader SingleValuedRelation)

(instance legalRelation Abstract)

(instance legalRelation BinaryPredicate)

(instance legalRelation BinaryRelation)

(instance legalRelation Entity)

(instance legalRelation Predicate)

(instance legalRelation Relation)

(instance legalRelation SymmetricRelation)

(instance length Abstract)

(instance length BinaryRelation)

(instance length Entity)

(instance length Predicate)

(instance length Relation)

(instance lessThan Abstract)

(instance lessThan BinaryPredicate)

(instance lessThan BinaryRelation)

(instance lessThan Entity)

(instance lessThan IrreflexiveRelation)

(instance lessThan Predicate)

(instance lessThan Relation)

(instance lessThan RelationExtendedToQuantities)

(instance lessThan TransitiveRelation)

(instance lessThanOrEqualTo Abstract)

(instance lessThanOrEqualTo AntisymmetricRelation)

(instance lessThanOrEqualTo BinaryPredicate)

(instance lessThanOrEqualTo BinaryRelation)

(instance lessThanOrEqualTo Entity)

(instance lessThanOrEqualTo PartialOrderingRelation)

(instance lessThanOrEqualTo Predicate)

(instance lessThanOrEqualTo ReflexiveRelation)

(instance lessThanOrEqualTo Relation)

(instance lessThanOrEqualTo RelationExtendedToQuantities)

(instance lessThanOrEqualTo TransitiveRelation)

(instance lineMeasure Abstract)

(instance lineMeasure BinaryPredicate)

(instance lineMeasure BinaryRelation)

(instance lineMeasure Entity)

(instance lineMeasure Predicate)

(instance lineMeasure Relation)

(instance lineMeasure TotalValuedRelation)

(instance links Abstract)

(instance links Entity)

(instance links Predicate)

(instance links Relation)

(instance links TernaryPredicate)

(instance links TernaryRelation)

(instance located Abstract)

(instance located AntisymmetricRelation)

(instance located BinaryRelation)

(instance located Entity)

(instance located Predicate)

(instance located Relation)

(instance located TransitiveRelation)

(instance manner Abstract)

(instance manner AntisymmetricRelation)

(instance manner AsymmetricRelation)

(instance manner BinaryRelation)

(instance manner Entity)

(instance manner IrreflexiveRelation)

(instance manner Predicate)

(instance manner Relation)

(instance material Abstract)

(instance material BinaryPredicate)

(instance material BinaryRelation)

(instance material Entity)

(instance material Predicate)

(instance material Relation)

(instance measure Abstract)

(instance measure AntisymmetricRelation)

(instance measure AsymmetricRelation)

(instance measure BinaryPredicate)

(instance measure BinaryRelation)

(instance measure Entity)

(instance measure IrreflexiveRelation)

(instance measure Predicate)

(instance measure Relation)

(instance meetsSpatially Abstract)

(instance meetsSpatially BinaryRelation)

(instance meetsSpatially Entity)

(instance meetsSpatially IrreflexiveRelation)

(instance meetsSpatially Predicate)

(instance meetsSpatially Relation)

(instance meetsSpatially SymmetricRelation)

(instance meetsTemporally Abstract)

(instance meetsTemporally AntisymmetricRelation)

(instance meetsTemporally AsymmetricRelation)

(instance meetsTemporally BinaryPredicate)

(instance meetsTemporally BinaryRelation)

(instance meetsTemporally Entity)

(instance meetsTemporally IntransitiveRelation)

(instance meetsTemporally IrreflexiveRelation)

(instance meetsTemporally Predicate)

(instance meetsTemporally Relation)

(instance meetsTemporally TemporalRelation)

(instance member Abstract)

(instance member AntisymmetricRelation)

(instance member AsymmetricRelation)

(instance member BinaryRelation)

(instance member Entity)

(instance member IntransitiveRelation)

(instance member IrreflexiveRelation)

(instance member Predicate)

(instance member Relation)

(instance modalAttribute Abstract)

(instance modalAttribute AntisymmetricRelation)

(instance modalAttribute AsymmetricRelation)

(instance modalAttribute BinaryPredicate)

(instance modalAttribute BinaryRelation)

(instance modalAttribute Entity)

(instance modalAttribute IrreflexiveRelation)

(instance modalAttribute Predicate)

(instance modalAttribute Relation)

(instance monetaryValue Abstract)

(instance monetaryValue BinaryRelation)

(instance monetaryValue Entity)

(instance monetaryValue Predicate)

(instance monetaryValue Relation)

(instance monetaryValue SingleValuedRelation)

(instance mother Abstract)

(instance mother BinaryRelation)

(instance mother Entity)

(instance mother Predicate)

(instance mother Relation)

(instance mother SingleValuedRelation)

(instance names Abstract)

(instance names BinaryRelation)

(instance names Entity)

(instance names Predicate)

(instance names Relation)

(instance needs Abstract)

(instance needs BinaryPredicate)

(instance needs BinaryRelation)

(instance needs Entity)

(instance needs IntentionalRelation)

(instance needs ObjectAttitude)

(instance needs Predicate)

(instance needs Relation)

(instance occupiesPosition Abstract)

(instance occupiesPosition Entity)

(instance occupiesPosition Predicate)

(instance occupiesPosition Relation)

(instance occupiesPosition TernaryPredicate)

(instance occupiesPosition TernaryRelation)

(instance orientation Abstract)

(instance orientation Entity)

(instance orientation Predicate)

(instance orientation Relation)

(instance orientation SpatialRelation)

(instance orientation TernaryPredicate)

(instance orientation TernaryRelation)

(instance origin Abstract)

(instance origin AntisymmetricRelation)

(instance origin AsymmetricRelation)

(instance origin BinaryPredicate)

(instance origin BinaryRelation)

(instance origin CaseRole)

(instance origin Entity)

(instance origin IrreflexiveRelation)

(instance origin Predicate)

(instance origin Relation)

(instance overlapsPartially Abstract)

(instance overlapsPartially BinaryRelation)

(instance overlapsPartially Entity)

(instance overlapsPartially IrreflexiveRelation)

(instance overlapsPartially Predicate)

(instance overlapsPartially Relation)

(instance overlapsPartially SymmetricRelation)

(instance overlapsSpatially Abstract)

(instance overlapsSpatially BinaryRelation)

(instance overlapsSpatially Entity)

(instance overlapsSpatially Predicate)

(instance overlapsSpatially ReflexiveRelation)

(instance overlapsSpatially Relation)

(instance overlapsSpatially SymmetricRelation)

(instance overlapsTemporally Abstract)

(instance overlapsTemporally BinaryPredicate)

(instance overlapsTemporally BinaryRelation)

(instance overlapsTemporally Entity)

(instance overlapsTemporally Predicate)

(instance overlapsTemporally ReflexiveRelation)

(instance overlapsTemporally Relation)

(instance overlapsTemporally SymmetricRelation)

(instance overlapsTemporally TemporalRelation)

(instance parallel Abstract)

(instance parallel BinaryPredicate)

(instance parallel BinaryRelation)

(instance parallel Entity)

(instance parallel Predicate)

(instance parallel Relation)

(instance parent Abstract)

(instance parent AntisymmetricRelation)

(instance parent AsymmetricRelation)

(instance parent BinaryPredicate)

(instance parent BinaryRelation)

(instance parent Entity)

(instance parent IntransitiveRelation)

(instance parent IrreflexiveRelation)

(instance parent Predicate)

(instance parent Relation)

(instance part Abstract)

(instance part AntisymmetricRelation)

(instance part BinaryRelation)

(instance part Entity)

(instance part PartialOrderingRelation)

(instance part Predicate)

(instance part ReflexiveRelation)

(instance part Relation)

(instance part SpatialRelation)

(instance part TransitiveRelation)

(instance partialOrderingOn Abstract)

(instance partialOrderingOn AntisymmetricRelation)

(instance partialOrderingOn AsymmetricRelation)

(instance partialOrderingOn BinaryPredicate)

(instance partialOrderingOn BinaryRelation)

(instance partialOrderingOn Entity)

(instance partialOrderingOn IrreflexiveRelation)

(instance partialOrderingOn Predicate)

(instance partialOrderingOn Relation)

(instance partiallyFills Abstract)

(instance partiallyFills AntisymmetricRelation)

(instance partiallyFills AsymmetricRelation)

(instance partiallyFills BinaryRelation)

(instance partiallyFills Entity)

(instance partiallyFills IrreflexiveRelation)

(instance partiallyFills Predicate)

(instance partiallyFills Relation)

(instance partiallyFills SpatialRelation)

(instance partition Abstract)

(instance partition Entity)

(instance partition Predicate)

(instance partition Relation)

(instance partition VariableArityRelation)

(instance partlyLocated Abstract)

(instance partlyLocated AntisymmetricRelation)

(instance partlyLocated BinaryPredicate)

(instance partlyLocated BinaryRelation)

(instance partlyLocated Entity)

(instance partlyLocated Predicate)

(instance partlyLocated Relation)

(instance partlyLocated SpatialRelation)

(instance path Abstract)

(instance path AntisymmetricRelation)

(instance path AsymmetricRelation)

(instance path BinaryPredicate)

(instance path BinaryRelation)

(instance path CaseRole)

(instance path Entity)

(instance path IrreflexiveRelation)

(instance path Predicate)

(instance path Relation)

(instance pathLength Abstract)

(instance pathLength AntisymmetricRelation)

(instance pathLength AsymmetricRelation)

(instance pathLength BinaryPredicate)

(instance pathLength BinaryRelation)

(instance pathLength Entity)

(instance pathLength IrreflexiveRelation)

(instance pathLength Predicate)

(instance pathLength Relation)

(instance patient Abstract)

(instance patient AntisymmetricRelation)

(instance patient AsymmetricRelation)

(instance patient BinaryPredicate)

(instance patient BinaryRelation)

(instance patient CaseRole)

(instance patient Entity)

(instance patient IrreflexiveRelation)

(instance patient Predicate)

(instance patient Relation)

(instance penetrates Abstract)

(instance penetrates AntisymmetricRelation)

(instance penetrates AsymmetricRelation)

(instance penetrates BinaryRelation)

(instance penetrates Entity)

(instance penetrates IntransitiveRelation)

(instance penetrates IrreflexiveRelation)

(instance penetrates Predicate)

(instance penetrates Relation)

(instance piece Abstract)

(instance piece BinaryRelation)

(instance piece Entity)

(instance piece Predicate)

(instance piece Relation)

(instance pointOfFigure Abstract)

(instance pointOfFigure BinaryRelation)

(instance pointOfFigure Entity)

(instance pointOfFigure Predicate)

(instance pointOfFigure Relation)

(instance pointOfIntersection Abstract)

(instance pointOfIntersection Entity)

(instance pointOfIntersection Predicate)

(instance pointOfIntersection Relation)

(instance pointOfIntersection TernaryPredicate)

(instance pointOfIntersection TernaryRelation)

(instance possesses Abstract)

(instance possesses AntisymmetricRelation)

(instance possesses AsymmetricRelation)

(instance possesses BinaryPredicate)

(instance possesses BinaryRelation)

(instance possesses Entity)

(instance possesses IrreflexiveRelation)

(instance possesses Predicate)

(instance possesses Relation)

(instance precondition Abstract)

(instance precondition AntisymmetricRelation)

(instance precondition AsymmetricRelation)

(instance precondition BinaryPredicate)

(instance precondition BinaryRelation)

(instance precondition Entity)

(instance precondition IrreflexiveRelation)

(instance precondition Predicate)

(instance precondition Relation)

(instance precondition TransitiveRelation)

(instance prefers Abstract)

(instance prefers Entity)

(instance prefers IntentionalRelation)

(instance prefers Predicate)

(instance prefers Relation)

(instance prefers TernaryPredicate)

(instance prefers TernaryRelation)

(instance premise Abstract)

(instance premise BinaryPredicate)

(instance premise BinaryRelation)

(instance premise Entity)

(instance premise Predicate)

(instance premise Relation)

(instance premise TotalValuedRelation)

(instance prevents Abstract)

(instance prevents BinaryPredicate)

(instance prevents BinaryRelation)

(instance prevents Entity)

(instance prevents IrreflexiveRelation)

(instance prevents Predicate)

(instance prevents Relation)

(instance properPart Abstract)

(instance properPart AntisymmetricRelation)

(instance properPart AsymmetricRelation)

(instance properPart BinaryRelation)

(instance properPart Entity)

(instance properPart IrreflexiveRelation)

(instance properPart Predicate)

(instance properPart Relation)

(instance properPart TransitiveRelation)

(instance properlyFills Abstract)

(instance properlyFills AntisymmetricRelation)

(instance properlyFills AsymmetricRelation)

(instance properlyFills BinaryRelation)

(instance properlyFills Entity)

(instance properlyFills IrreflexiveRelation)

(instance properlyFills Predicate)

(instance properlyFills Relation)

(instance property Abstract)

(instance property BinaryPredicate)

(instance property BinaryRelation)

(instance property Entity)

(instance property Predicate)

(instance property Relation)

(instance publishes Abstract)

(instance publishes AntisymmetricRelation)

(instance publishes AsymmetricRelation)

(instance publishes BinaryPredicate)

(instance publishes BinaryRelation)

(instance publishes Entity)

(instance publishes IrreflexiveRelation)

(instance publishes Predicate)

(instance publishes Relation)

(instance range Abstract)

(instance range AntisymmetricRelation)

(instance range AsymmetricRelation)

(instance range BinaryPredicate)

(instance range BinaryRelation)

(instance range Entity)

(instance range IrreflexiveRelation)

(instance range Predicate)

(instance range Relation)

(instance rangeSubclass Abstract)

(instance rangeSubclass AntisymmetricRelation)

(instance rangeSubclass AsymmetricRelation)

(instance rangeSubclass BinaryPredicate)

(instance rangeSubclass BinaryRelation)

(instance rangeSubclass Entity)

(instance rangeSubclass IrreflexiveRelation)

(instance rangeSubclass Predicate)

(instance rangeSubclass Relation)

(instance realization Abstract)

(instance realization AntisymmetricRelation)

(instance realization AsymmetricRelation)

(instance realization BinaryRelation)

(instance realization Entity)

(instance realization IrreflexiveRelation)

(instance realization Predicate)

(instance realization Relation)

(instance refers Abstract)

(instance refers BinaryPredicate)

(instance refers BinaryRelation)

(instance refers Entity)

(instance refers Predicate)

(instance refers Relation)

(instance reflexiveOn Abstract)

(instance reflexiveOn AntisymmetricRelation)

(instance reflexiveOn AsymmetricRelation)

(instance reflexiveOn BinaryPredicate)

(instance reflexiveOn BinaryRelation)

(instance reflexiveOn Entity)

(instance reflexiveOn IrreflexiveRelation)

(instance reflexiveOn Predicate)

(instance reflexiveOn Relation)

(instance relatedExternalConcept Abstract)

(instance relatedExternalConcept Entity)

(instance relatedExternalConcept Predicate)

(instance relatedExternalConcept Relation)

(instance relatedExternalConcept TernaryPredicate)

(instance relatedExternalConcept TernaryRelation)

(instance relatedInternalConcept Abstract)

(instance relatedInternalConcept BinaryPredicate)

(instance relatedInternalConcept BinaryRelation)

(instance relatedInternalConcept Entity)

(instance relatedInternalConcept EquivalenceRelation)

(instance relatedInternalConcept Predicate)

(instance relatedInternalConcept ReflexiveRelation)

(instance relatedInternalConcept Relation)

(instance relatedInternalConcept SymmetricRelation)

(instance relatedInternalConcept TransitiveRelation)

(instance represents Abstract)

(instance represents BinaryRelation)

(instance represents Entity)

(instance represents Predicate)

(instance represents Relation)

(instance representsForAgent Abstract)

(instance representsForAgent Entity)

(instance representsForAgent Predicate)

(instance representsForAgent Relation)

(instance representsForAgent TernaryPredicate)

(instance representsForAgent TernaryRelation)

(instance representsInLanguage Abstract)

(instance representsInLanguage Entity)

(instance representsInLanguage Predicate)

(instance representsInLanguage Relation)

(instance representsInLanguage TernaryPredicate)

(instance representsInLanguage TernaryRelation)

(instance resource Abstract)

(instance resource BinaryRelation)

(instance resource Entity)

(instance resource Predicate)

(instance resource Relation)

(instance result Abstract)

(instance result BinaryRelation)

(instance result Entity)

(instance result Predicate)

(instance result Relation)

(instance sibling Abstract)

(instance sibling BinaryPredicate)

(instance sibling BinaryRelation)

(instance sibling Entity)

(instance sibling IrreflexiveRelation)

(instance sibling Predicate)

(instance sibling Relation)

(instance sibling SymmetricRelation)

(instance side Abstract)

(instance side BinaryRelation)

(instance side Entity)

(instance side Predicate)

(instance side Relation)

(instance sister Abstract)

(instance sister BinaryRelation)

(instance sister Entity)

(instance sister IrreflexiveRelation)

(instance sister Predicate)

(instance sister Relation)

(instance sister TransitiveRelation)

(instance smaller Abstract)

(instance smaller BinaryPredicate)

(instance smaller BinaryRelation)

(instance smaller Entity)

(instance smaller IrreflexiveRelation)

(instance smaller Predicate)

(instance smaller Relation)

(instance smaller SpatialRelation)

(instance smaller TransitiveRelation)

(instance son Abstract)

(instance son BinaryRelation)

(instance son Entity)

(instance son Predicate)

(instance son Relation)

(instance spouse Abstract)

(instance spouse BinaryRelation)

(instance spouse Entity)

(instance spouse IrreflexiveRelation)

(instance spouse Predicate)

(instance spouse Relation)

(instance spouse SymmetricRelation)

(instance starts Abstract)

(instance starts BinaryRelation)

(instance starts Entity)

(instance starts IrreflexiveRelation)

(instance starts Predicate)

(instance starts Relation)

(instance starts TemporalRelation)

(instance starts TransitiveRelation)

(instance stays Abstract)

(instance stays BinaryRelation)

(instance stays Entity)

(instance stays Predicate)

(instance stays Relation)

(instance subAttribute Abstract)

(instance subAttribute AntisymmetricRelation)

(instance subAttribute BinaryPredicate)

(instance subAttribute BinaryRelation)

(instance subAttribute Entity)

(instance subAttribute PartialOrderingRelation)

(instance subAttribute Predicate)

(instance subAttribute ReflexiveRelation)

(instance subAttribute Relation)

(instance subAttribute TransitiveRelation)

(instance subCollection Abstract)

(instance subCollection AntisymmetricRelation)

(instance subCollection BinaryPredicate)

(instance subCollection BinaryRelation)

(instance subCollection Entity)

(instance subCollection PartialOrderingRelation)

(instance subCollection Predicate)

(instance subCollection ReflexiveRelation)

(instance subCollection Relation)

(instance subCollection TransitiveRelation)

(instance subGraph Abstract)

(instance subGraph BinaryPredicate)

(instance subGraph BinaryRelation)

(instance subGraph Entity)

(instance subGraph Predicate)

(instance subGraph ReflexiveRelation)

(instance subGraph Relation)

(instance subGraph TransitiveRelation)

(instance subList Abstract)

(instance subList AntisymmetricRelation)

(instance subList BinaryPredicate)

(instance subList BinaryRelation)

(instance subList Entity)

(instance subList PartialOrderingRelation)

(instance subList Predicate)

(instance subList ReflexiveRelation)

(instance subList Relation)

(instance subList TransitiveRelation)

(instance subOrganization Abstract)

(instance subOrganization AntisymmetricRelation)

(instance subOrganization BinaryRelation)

(instance subOrganization Entity)

(instance subOrganization PartialOrderingRelation)

(instance subOrganization Predicate)

(instance subOrganization ReflexiveRelation)

(instance subOrganization Relation)

(instance subOrganization TransitiveRelation)

(instance subPlan Abstract)

(instance subPlan BinaryRelation)

(instance subPlan Entity)

(instance subPlan IrreflexiveRelation)

(instance subPlan Predicate)

(instance subPlan Relation)

(instance subPlan TransitiveRelation)

(instance subProcess Abstract)

(instance subProcess AntisymmetricRelation)

(instance subProcess BinaryPredicate)

(instance subProcess BinaryRelation)

(instance subProcess Entity)

(instance subProcess PartialOrderingRelation)

(instance subProcess Predicate)

(instance subProcess ReflexiveRelation)

(instance subProcess Relation)

(instance subProcess TransitiveRelation)

(instance subProposition Abstract)

(instance subProposition BinaryPredicate)

(instance subProposition BinaryRelation)

(instance subProposition Entity)

(instance subProposition IrreflexiveRelation)

(instance subProposition Predicate)

(instance subProposition Relation)

(instance subProposition TransitiveRelation)

(instance subclass Abstract)

(instance subclass AntisymmetricRelation)

(instance subclass BinaryPredicate)

(instance subclass BinaryRelation)

(instance subclass Entity)

(instance subclass PartialOrderingRelation)

(instance subclass Predicate)

(instance subclass ReflexiveRelation)

(instance subclass Relation)

(instance subclass TransitiveRelation)

(instance subrelation Abstract)

(instance subrelation AntisymmetricRelation)

(instance subrelation BinaryPredicate)

(instance subrelation BinaryRelation)

(instance subrelation Entity)

(instance subrelation PartialOrderingRelation)

(instance subrelation Predicate)

(instance subrelation ReflexiveRelation)

(instance subrelation Relation)

(instance subrelation TransitiveRelation)

(instance subset Abstract)

(instance subset BinaryRelation)

(instance subset Entity)

(instance subset Predicate)

(instance subset Relation)

(instance subsumedExternalConcept Abstract)

(instance subsumedExternalConcept Entity)

(instance subsumedExternalConcept Predicate)

(instance subsumedExternalConcept Relation)

(instance subsumedExternalConcept TernaryRelation)

(instance subsumesContentClass Abstract)

(instance subsumesContentClass AntisymmetricRelation)

(instance subsumesContentClass BinaryPredicate)

(instance subsumesContentClass BinaryRelation)

(instance subsumesContentClass Entity)

(instance subsumesContentClass PartialOrderingRelation)

(instance subsumesContentClass Predicate)

(instance subsumesContentClass ReflexiveRelation)

(instance subsumesContentClass Relation)

(instance subsumesContentClass TransitiveRelation)

(instance subsumesContentInstance Abstract)

(instance subsumesContentInstance AntisymmetricRelation)

(instance subsumesContentInstance BinaryPredicate)

(instance subsumesContentInstance BinaryRelation)

(instance subsumesContentInstance Entity)

(instance subsumesContentInstance PartialOrderingRelation)

(instance subsumesContentInstance Predicate)

(instance subsumesContentInstance ReflexiveRelation)

(instance subsumesContentInstance Relation)

(instance subsumesContentInstance TransitiveRelation)

(instance subsumingExternalConcept Abstract)

(instance subsumingExternalConcept Entity)

(instance subsumingExternalConcept Predicate)

(instance subsumingExternalConcept Relation)

(instance subsumingExternalConcept TernaryRelation)

(instance successorAttribute Abstract)

(instance successorAttribute AntisymmetricRelation)

(instance successorAttribute AsymmetricRelation)

(instance successorAttribute BinaryPredicate)

(instance successorAttribute BinaryRelation)

(instance successorAttribute Entity)

(instance successorAttribute IrreflexiveRelation)

(instance successorAttribute Predicate)

(instance successorAttribute Relation)

(instance successorAttributeClosure Abstract)

(instance successorAttributeClosure BinaryPredicate)

(instance successorAttributeClosure BinaryRelation)

(instance successorAttributeClosure Entity)

(instance successorAttributeClosure IrreflexiveRelation)

(instance successorAttributeClosure Predicate)

(instance successorAttributeClosure Relation)

(instance successorAttributeClosure TransitiveRelation)

(instance superficialPart Abstract)

(instance superficialPart BinaryRelation)

(instance superficialPart Entity)

(instance superficialPart IrreflexiveRelation)

(instance superficialPart Predicate)

(instance superficialPart Relation)

(instance superficialPart TransitiveRelation)

(instance surface Abstract)

(instance surface AntisymmetricRelation)

(instance surface AsymmetricRelation)

(instance surface BinaryRelation)

(instance surface Entity)

(instance surface IrreflexiveRelation)

(instance surface Predicate)

(instance surface Relation)

(instance synonymousExternalConcept Abstract)

(instance synonymousExternalConcept Entity)

(instance synonymousExternalConcept Predicate)

(instance synonymousExternalConcept Relation)

(instance synonymousExternalConcept TernaryRelation)

(instance temporalPart Abstract)

(instance temporalPart AntisymmetricRelation)

(instance temporalPart BinaryPredicate)

(instance temporalPart BinaryRelation)

(instance temporalPart Entity)

(instance temporalPart PartialOrderingRelation)

(instance temporalPart Predicate)

(instance temporalPart ReflexiveRelation)

(instance temporalPart Relation)

(instance temporalPart TemporalRelation)

(instance temporalPart TransitiveRelation)

(instance temporallyBetween Abstract)

(instance temporallyBetween Entity)

(instance temporallyBetween Predicate)

(instance temporallyBetween Relation)

(instance temporallyBetween TemporalRelation)

(instance temporallyBetween TernaryPredicate)

(instance temporallyBetween TernaryRelation)

(instance temporallyBetweenOrEqual Abstract)

(instance temporallyBetweenOrEqual Entity)

(instance temporallyBetweenOrEqual Predicate)

(instance temporallyBetweenOrEqual Relation)

(instance temporallyBetweenOrEqual TemporalRelation)

(instance temporallyBetweenOrEqual TernaryPredicate)

(instance temporallyBetweenOrEqual TernaryRelation)

(instance time Abstract)

(instance time AntisymmetricRelation)

(instance time AsymmetricRelation)

(instance time BinaryPredicate)

(instance time BinaryRelation)

(instance time Entity)

(instance time IrreflexiveRelation)

(instance time Predicate)

(instance time Relation)

(instance time TemporalRelation)

(instance top Abstract)

(instance top BinaryRelation)

(instance top Entity)

(instance top Predicate)

(instance top Relation)

(instance totalOrderingOn Abstract)

(instance totalOrderingOn AntisymmetricRelation)

(instance totalOrderingOn AsymmetricRelation)

(instance totalOrderingOn BinaryPredicate)

(instance totalOrderingOn BinaryRelation)

(instance totalOrderingOn Entity)

(instance totalOrderingOn IrreflexiveRelation)

(instance totalOrderingOn Predicate)

(instance totalOrderingOn Relation)

(instance transactionAmount Abstract)

(instance transactionAmount BinaryPredicate)

(instance transactionAmount BinaryRelation)

(instance transactionAmount Entity)

(instance transactionAmount Predicate)

(instance transactionAmount Relation)

(instance transactionAmount SingleValuedRelation)

(instance transactionAmount TotalValuedRelation)

(instance traverses Abstract)

(instance traverses BinaryPredicate)

(instance traverses BinaryRelation)

(instance traverses Entity)

(instance traverses Predicate)

(instance traverses Relation)

(instance traverses SpatialRelation)

(instance trichotomizingOn Abstract)

(instance trichotomizingOn AntisymmetricRelation)

(instance trichotomizingOn AsymmetricRelation)

(instance trichotomizingOn BinaryPredicate)

(instance trichotomizingOn BinaryRelation)

(instance trichotomizingOn Entity)

(instance trichotomizingOn IrreflexiveRelation)

(instance trichotomizingOn Predicate)

(instance trichotomizingOn Relation)

(instance truth Abstract)

(instance truth BinaryRelation)

(instance truth Entity)

(instance truth Predicate)

(instance truth Relation)

(instance uniqueIdentifier Abstract)

(instance uniqueIdentifier BinaryRelation)

(instance uniqueIdentifier Entity)

(instance uniqueIdentifier Predicate)

(instance uniqueIdentifier Relation)

(instance uniqueIdentifier SingleValuedRelation)

(instance uses Abstract)

(instance uses AntisymmetricRelation)

(instance uses AsymmetricRelation)

(instance uses BinaryPredicate)

(instance uses BinaryRelation)

(instance uses Entity)

(instance uses IrreflexiveRelation)

(instance uses Predicate)

(instance uses Relation)

(instance valence Abstract)

(instance valence AntisymmetricRelation)

(instance valence AsymmetricRelation)

(instance valence BinaryPredicate)

(instance valence BinaryRelation)

(instance valence Entity)

(instance valence IrreflexiveRelation)

(instance valence Predicate)

(instance valence Relation)

(instance valence SingleValuedRelation)

(instance version Abstract)

(instance version AntisymmetricRelation)

(instance version AsymmetricRelation)

(instance version BinaryPredicate)

(instance version BinaryRelation)

(instance version Entity)

(instance version IrreflexiveRelation)

(instance version Predicate)

(instance version Relation)

(instance version TransitiveRelation)

(instance wants Abstract)

(instance wants BinaryPredicate)

(instance wants BinaryRelation)

(instance wants Entity)

(instance wants IntentionalRelation)

(instance wants ObjectAttitude)

(instance wants Predicate)

(instance wants Relation)

(instance wears Abstract)

(instance wears BinaryPredicate)

(instance wears BinaryRelation)

(instance wears Entity)

(instance wears Predicate)

(instance wears Relation)

(instance weight Abstract)

(instance weight BinaryPredicate)

(instance weight BinaryRelation)

(instance weight Entity)

(instance weight Predicate)

(instance weight Relation)

(instance width Abstract)

(instance width BinaryRelation)

(instance width Entity)

(instance width Predicate)

(instance width Relation)

(instance width SingleValuedRelation)

(instance wife Abstract)

(instance wife AntisymmetricRelation)

(instance wife AsymmetricRelation)

(instance wife BinaryRelation)

(instance wife Entity)

(instance wife IrreflexiveRelation)

(instance wife Predicate)

(instance wife Relation)

(inverse greaterThan lessThan)

(inverse greaterThanOrEqualTo lessThanOrEqualTo)

(inverse husband wife)

(inverse smaller larger)

(partition Ambulating Walking Running)

(partition AnatomicalStructure AnimalAnatomicalStructure PlantAnatomicalStructure)

(partition AnatomicalStructure BodyPart AbnormalAnatomicalStructure)

(partition Animal Vertebrate Invertebrate)

(partition Argument DeductiveArgument InductiveArgument)

(partition Attribute InternalAttribute RelationalAttribute)

(partition ChemicalProcess ChemicalSynthesis ChemicalDecomposition)

(partition Communication Stating Supposing Directing Committing Expressing Declaring)

(partition Currency CurrencyBill CurrencyCoin)

(partition DeductiveArgument ValidDeductiveArgument InvalidDeductiveArgument)

(partition Entity Physical Abstract)

(partition GeographicArea WaterArea LandArea)

(partition GeometricFigure GeometricPoint OneDimensionalFigure TwoDimensionalFigure ThreeDimensionalFigure)

(partition GraphElement GraphNode GraphArc)

(partition Human Man Woman)

(partition HumanLanguage NaturalLanguage ConstructedLanguage)

(partition HumanLanguage SpokenHumanLanguage ManualHumanLanguage)

(partition Integer NegativeInteger NonnegativeInteger)

(partition Integer OddInteger EvenInteger)

(partition LiquidMixture Solution Suspension)

(partition Number RealNumber ImaginaryNumber ComplexNumber)

(partition OrganicObject Organism AnatomicalStructure)

(partition Organism Animal Plant Microorganism)

(partition Physical Object Process)

(partition PhysicalQuantity ConstantQuantity FunctionQuantity)

(partition PsychologicalAttribute StateOfMind TraitAttribute)

(partition PureSubstance CompoundSubstance ElementalSubstance)

(partition QuantityChange Increasing Decreasing)

(partition RealNumber NegativeRealNumber NonnegativeRealNumber)

(partition RealNumber RationalNumber IrrationalNumber)

(partition Relation Predicate Function List)

(partition Relation TotalValuedRelation PartialValuedRelation)

(partition Residence PermanentResidence TemporaryResidence)

(partition SetOrClass Set Class)

(partition Substance PureSubstance Mixture)

(partition Substance SyntheticSubstance NaturalSubstance)

(partition TimePosition TimeInterval TimePoint)

(partition TwoDimensionalFigure OpenTwoDimensionalFigure ClosedTwoDimensionalFigure)

(partition Word Noun Verb Adjective Adverb ParticleWord)

(range AbsoluteValueFn NonnegativeRealNumber)

(range AbstractionFn Attribute)

(range AdditionFn Quantity)

(range AssignmentFn Entity)

(range BackFn SelfConnectedObject)

(range BeginFn TimePoint)

(range BeginNodeFn GraphNode)

(range CardinalityFn Number)

(range CeilingFn Integer)

(range ComplementFn SetOrClass)

(range CosineFn RealNumber)

(range DenominatorFn Integer)

(range DensityFn FunctionQuantity)

(range DivisionFn Quantity)

(range EndFn TimePoint)

(range EndNodeFn GraphNode)

(range ExponentiationFn Quantity)

(range ExtensionFn Class)

(range FloorFn Integer)

(range FrontFn SelfConnectedObject)

(range FutureFn TimeInterval)

(range GeneralizedIntersectionFn SetOrClass)

(range GeneralizedUnionFn SetOrClass)

(range GigaFn UnitOfMeasure)

(range GovernmentFn Government)

(range GreatestCommonDivisorFn Integer)

(range HoleHostFn Object)

(range HoleSkinFn Object)

(range ImaginaryPartFn ImaginaryNumber)

(range ImmediateFamilyFn FamilyGroup)

(range ImmediateFutureFn TimeInterval)

(range ImmediatePastFn TimeInterval)

(range InitialNodeFn GraphNode)

(range IntegerSquareRootFn NonnegativeInteger)

(range IntersectionFn SetOrClass)

(range KappaFn Class)

(range KiloFn UnitOfMeasure)

(range LeastCommonMultipleFn Integer)

(range ListConcatenateFn List)

(range ListFn List)

(range ListLengthFn NonnegativeInteger)

(range ListOrderFn Entity)

(range LogFn RealNumber)

(range MagnitudeFn RealNumber)

(range MaxFn Quantity)

(range MaximalWeightedPathFn GraphPath)

(range MeasureFn ConstantQuantity)

(range MegaFn UnitOfMeasure)

(range MereologicalDifferenceFn Object)

(range MereologicalProductFn Object)

(range MereologicalSumFn Object)

(range MicroFn UnitOfMeasure)

(range MilliFn UnitOfMeasure)

(range MinFn Quantity)

(range MinimalWeightedPathFn GraphPath)

(range MultiplicationFn Quantity)

(range NanoFn UnitOfMeasure)

(range NumeratorFn Integer)

(range PastFn TimeInterval)

(range PathWeightFn RealNumber)

(range PerFn FunctionQuantity)

(range PicoFn UnitOfMeasure)

(range PredecessorFn Integer)

(range PremisesFn Proposition)

(range ProbabilityFn RealNumber)

(range PropertyFn Set)

(range RationalNumberFn RationalNumber)

(range RealNumberFn RealNumber)

(range ReciprocalFn Quantity)

(range RelativeComplementFn SetOrClass)

(range RelativeTimeFn TimePosition)

(range RemainderFn Quantity)

(range RoundFn Quantity)

(range SignumFn Integer)

(range SineFn RealNumber)

(range SpeedFn FunctionQuantity)

(range SquareRootFn Number)

(range SubtractionFn Quantity)

(range SuccessorFn Integer)

(range TangentFn RealNumber)

(range TeraFn UnitOfMeasure)

(range TerminalNodeFn GraphNode)

(range TimeIntervalFn TimeInterval)

(range UnionFn SetOrClass)

(range VelocityFn FunctionQuantity)

(range WealthFn CurrencyMeasure)

(range WhenFn TimeInterval)

(range WhereFn Region)

(rangeSubclass CutSetFn GraphPath)

(rangeSubclass DayFn Day)

(rangeSubclass EditionFn ContentBearingObject)

(rangeSubclass GraphPathFn GraphPath)

(rangeSubclass HourFn Hour)

(rangeSubclass IntervalFn ConstantQuantity)

(rangeSubclass MinimalCutSetFn GraphPath)

(rangeSubclass MinuteFn Minute)

(rangeSubclass MonthFn Month)

(rangeSubclass PeriodicalIssueFn Periodical)

(rangeSubclass PowerSetFn SetOrClass)

(rangeSubclass RecurrentTimeIntervalFn TimeInterval)

(rangeSubclass SecondFn Second)

(rangeSubclass SeriesVolumeFn Text)

(rangeSubclass TemporalCompositionFn TimeInterval)

(rangeSubclass YearFn Year)

(relatedInternalConcept Attaching Putting)

(relatedInternalConcept BeginNodeFn InitialNodeFn)

(relatedInternalConcept Buying Selling)

(relatedInternalConcept ChangeOfPossession possesses)

(relatedInternalConcept Communication ContentDevelopment)

(relatedInternalConcept ContentBearingObject containsInformation)

(relatedInternalConcept Creation Destruction)

(relatedInternalConcept Day DayDuration)

(relatedInternalConcept Day DayFn)

(relatedInternalConcept Decreasing Removing)

(relatedInternalConcept EndNodeFn TerminalNodeFn)

(relatedInternalConcept Hour HourDuration)

(relatedInternalConcept Hour HourFn)

(relatedInternalConcept Increasing Putting)

(relatedInternalConcept IntervalFn RecurrentTimeIntervalFn)

(relatedInternalConcept MereologicalProductFn MereologicalDifferenceFn)

(relatedInternalConcept MereologicalSumFn MereologicalDifferenceFn)

(relatedInternalConcept MereologicalSumFn MereologicalProductFn)

(relatedInternalConcept MinimalCutSetFn CutSetFn)

(relatedInternalConcept Minute MinuteDuration)

(relatedInternalConcept Minute MinuteFn)

(relatedInternalConcept Month MonthFn)

(relatedInternalConcept Reading Interpreting)

(relatedInternalConcept Repairing Maintaining)

(relatedInternalConcept Second SecondDuration)

(relatedInternalConcept Second SecondFn)

(relatedInternalConcept Transportation TransportationDevice)

(relatedInternalConcept UnilateralGetting UnilateralGiving)

(relatedInternalConcept UnitedStatesGallon UnitedKingdomGallon)

(relatedInternalConcept WhereFn WhenFn)

(relatedInternalConcept Year YearDuration)

(relatedInternalConcept Year YearFn)

(relatedInternalConcept before earlier)

(relatedInternalConcept causes causesSubclass)

(relatedInternalConcept confersObligation confersRight)

(relatedInternalConcept desires wants)

(relatedInternalConcept disjointDecomposition disjoint)

(relatedInternalConcept disjointDecomposition exhaustiveDecomposition)

(relatedInternalConcept disjointRelation disjoint)

(relatedInternalConcept equivalentContentInstance equivalentContentClass)

(relatedInternalConcept exhaustiveDecomposition partition)

(relatedInternalConcept fills Fillable)

(relatedInternalConcept holdsObligation holdsRight)

(relatedInternalConcept member element)

(relatedInternalConcept member instance)

(relatedInternalConcept prevents inhibits)

(relatedInternalConcept realization containsInformation)

(relatedInternalConcept realization equivalentContentInstance)

(relatedInternalConcept relatedExternalConcept relatedInternalConcept)

(relatedInternalConcept subsumesContentInstance subsumesContentClass)

(relatedInternalConcept successorAttributeClosure successorAttribute)

(relatedInternalConcept time holdsDuring)

(relatedInternalConcept time located)

(relatedInternalConcept wants desires)

(subAttribute Contract Contract)

(subAttribute Contract Obligation)

(subAttribute Contract Promise)

(subAttribute Damp Damp)

(subAttribute Dead Dead)

(subAttribute Dead Unconscious)

(subAttribute Embryonic Embryonic)

(subAttribute Embryonic NonFullyFormed)

(subAttribute Fluid Fluid)

(subAttribute Gas Fluid)

(subAttribute Gas Gas)

(subAttribute Larval Larval)

(subAttribute Larval NonFullyFormed)

(subAttribute Law Law)

(subAttribute Law Obligation)

(subAttribute Liquid Fluid)

(subAttribute Liquid Liquid)

(subAttribute NakedPromise NakedPromise)

(subAttribute NakedPromise Obligation)

(subAttribute NakedPromise Promise)

(subAttribute NonFullyFormed NonFullyFormed)

(subAttribute Obligation Obligation)

(subAttribute Plasma Fluid)

(subAttribute Plasma Plasma)

(subAttribute Promise Obligation)

(subAttribute Promise Promise)

(subAttribute PurchaseContract Contract)

(subAttribute PurchaseContract Obligation)

(subAttribute PurchaseContract Promise)

(subAttribute PurchaseContract PurchaseContract)

(subAttribute ServiceContract Contract)

(subAttribute ServiceContract Obligation)

(subAttribute ServiceContract Promise)

(subAttribute ServiceContract ServiceContract)

(subAttribute Unconscious Unconscious)

(subAttribute Warranty Contract)

(subAttribute Warranty Obligation)

(subAttribute Warranty Promise)

(subAttribute Warranty ServiceContract)

(subAttribute Warranty Warranty)

(subAttribute Wet Damp)

(subAttribute Wet Wet)

(subclass AbnormalAnatomicalStructure AbnormalAnatomicalStructure)

(subclass AbnormalAnatomicalStructure AnatomicalStructure)

(subclass AbnormalAnatomicalStructure CorpuscularObject)

(subclass AbnormalAnatomicalStructure Entity)

(subclass AbnormalAnatomicalStructure Object)

(subclass AbnormalAnatomicalStructure OrganicObject)

(subclass AbnormalAnatomicalStructure Physical)

(subclass AbnormalAnatomicalStructure SelfConnectedObject)

(subclass Abstract Abstract)

(subclass Abstract Entity)

(subclass Adjective Adjective)

(subclass Adjective ContentBearingPhysical)

(subclass Adjective Entity)

(subclass Adjective LinguisticExpression)

(subclass Adjective Physical)

(subclass Adjective Word)

(subclass Adverb Adverb)

(subclass Adverb ContentBearingPhysical)

(subclass Adverb Entity)

(subclass Adverb LinguisticExpression)

(subclass Adverb Physical)

(subclass Adverb Word)

(subclass Advertising Advertising)

(subclass Advertising Communication)

(subclass Advertising ContentBearingPhysical)

(subclass Advertising ContentBearingProcess)

(subclass Advertising Disseminating)

(subclass Advertising Entity)

(subclass Advertising IntentionalProcess)

(subclass Advertising Physical)

(subclass Advertising Process)

(subclass Advertising SocialInteraction)

(subclass AgeGroup AgeGroup)

(subclass AgeGroup Agent)

(subclass AgeGroup Collection)

(subclass AgeGroup Entity)

(subclass AgeGroup Group)

(subclass AgeGroup GroupOfPeople)

(subclass AgeGroup Object)

(subclass AgeGroup Physical)

(subclass Agent Agent)

(subclass Agent Entity)

(subclass Agent Object)

(subclass Agent Physical)

(subclass Air Air)

(subclass Air Entity)

(subclass Air GasMixture)

(subclass Air Mixture)

(subclass Air Object)

(subclass Air Physical)

(subclass Air SelfConnectedObject)

(subclass Air Substance)

(subclass AlethicAttribute Abstract)

(subclass AlethicAttribute AlethicAttribute)

(subclass AlethicAttribute Attribute)

(subclass AlethicAttribute Entity)

(subclass AlethicAttribute NormativeAttribute)

(subclass AlethicAttribute ObjectiveNorm)

(subclass AlethicAttribute RelationalAttribute)

(subclass Alga Agent)

(subclass Alga Alga)

(subclass Alga CorpuscularObject)

(subclass Alga Entity)

(subclass Alga NonFloweringPlant)

(subclass Alga Object)

(subclass Alga OrganicObject)

(subclass Alga Organism)

(subclass Alga Physical)

(subclass Alga Plant)

(subclass Alga SelfConnectedObject)

(subclass Ambulating Ambulating)

(subclass Ambulating BodyMotion)

(subclass Ambulating Entity)

(subclass Ambulating Motion)

(subclass Ambulating Physical)

(subclass Ambulating Process)

(subclass Ambulating Translocation)

(subclass Ampere Abstract)

(subclass Ampere Ampere)

(subclass Ampere Entity)

(subclass Ampere FunctionQuantity)

(subclass Ampere PhysicalQuantity)

(subclass Ampere Quantity)

(subclass Amphibian Agent)

(subclass Amphibian Amphibian)

(subclass Amphibian Animal)

(subclass Amphibian ColdBloodedVertebrate)

(subclass Amphibian CorpuscularObject)

(subclass Amphibian Entity)

(subclass Amphibian Object)

(subclass Amphibian OrganicObject)

(subclass Amphibian Organism)

(subclass Amphibian Physical)

(subclass Amphibian SelfConnectedObject)

(subclass Amphibian Vertebrate)

(subclass Amu Abstract)

(subclass Amu Amu)

(subclass Amu ConstantQuantity)

(subclass Amu Entity)

(subclass Amu MassMeasure)

(subclass Amu PhysicalQuantity)

(subclass Amu Quantity)

(subclass AnatomicalStructure AnatomicalStructure)

(subclass AnatomicalStructure CorpuscularObject)

(subclass AnatomicalStructure Entity)

(subclass AnatomicalStructure Object)

(subclass AnatomicalStructure OrganicObject)

(subclass AnatomicalStructure Physical)

(subclass AnatomicalStructure SelfConnectedObject)

(subclass AngleMeasure Abstract)

(subclass AngleMeasure AngleMeasure)

(subclass AngleMeasure ConstantQuantity)

(subclass AngleMeasure Entity)

(subclass AngleMeasure PhysicalQuantity)

(subclass AngleMeasure Quantity)

(subclass Angstrom Abstract)

(subclass Angstrom Angstrom)

(subclass Angstrom ConstantQuantity)

(subclass Angstrom Entity)

(subclass Angstrom LengthMeasure)

(subclass Angstrom PhysicalQuantity)

(subclass Angstrom Quantity)

(subclass AngularDegree Abstract)

(subclass AngularDegree AngleMeasure)

(subclass AngularDegree AngularDegree)

(subclass AngularDegree ConstantQuantity)

(subclass AngularDegree Entity)

(subclass AngularDegree PhysicalQuantity)

(subclass AngularDegree PlaneAngleMeasure)

(subclass AngularDegree Quantity)

(subclass AnimacyAttribute Abstract)

(subclass AnimacyAttribute AnimacyAttribute)

(subclass AnimacyAttribute Attribute)

(subclass AnimacyAttribute BiologicalAttribute)

(subclass AnimacyAttribute Entity)

(subclass AnimacyAttribute InternalAttribute)

(subclass Animal Agent)

(subclass Animal Animal)

(subclass Animal CorpuscularObject)

(subclass Animal Entity)

(subclass Animal Object)

(subclass Animal OrganicObject)

(subclass Animal Organism)

(subclass Animal Physical)

(subclass Animal SelfConnectedObject)

(subclass AnimalAnatomicalStructure AnatomicalStructure)

(subclass AnimalAnatomicalStructure AnimalAnatomicalStructure)

(subclass AnimalAnatomicalStructure CorpuscularObject)

(subclass AnimalAnatomicalStructure Entity)

(subclass AnimalAnatomicalStructure Object)

(subclass AnimalAnatomicalStructure OrganicObject)

(subclass AnimalAnatomicalStructure Physical)

(subclass AnimalAnatomicalStructure SelfConnectedObject)

(subclass AnimalLanguage AnimalLanguage)

(subclass AnimalLanguage ContentBearingPhysical)

(subclass AnimalLanguage Entity)

(subclass AnimalLanguage Language)

(subclass AnimalLanguage LinguisticExpression)

(subclass AnimalLanguage Physical)

(subclass AnimalSubstance AnimalSubstance)

(subclass AnimalSubstance BodySubstance)

(subclass AnimalSubstance Entity)

(subclass AnimalSubstance Mixture)

(subclass AnimalSubstance Object)

(subclass AnimalSubstance Physical)

(subclass AnimalSubstance SelfConnectedObject)

(subclass AnimalSubstance Substance)

(subclass AntisymmetricRelation Abstract)

(subclass AntisymmetricRelation AntisymmetricRelation)

(subclass AntisymmetricRelation BinaryRelation)

(subclass AntisymmetricRelation Entity)

(subclass AntisymmetricRelation Relation)

(subclass Ape Agent)

(subclass Ape Animal)

(subclass Ape Ape)

(subclass Ape CorpuscularObject)

(subclass Ape Entity)

(subclass Ape Mammal)

(subclass Ape Object)

(subclass Ape OrganicObject)

(subclass Ape Organism)

(subclass Ape Physical)

(subclass Ape Primate)

(subclass Ape SelfConnectedObject)

(subclass Ape Vertebrate)

(subclass Ape WarmBloodedVertebrate)

(subclass April Abstract)

(subclass April April)

(subclass April ConstantQuantity)

(subclass April Entity)

(subclass April Month)

(subclass April PhysicalQuantity)

(subclass April Quantity)

(subclass April TimeInterval)

(subclass April TimeMeasure)

(subclass April TimePosition)

(subclass AquaticMammal Agent)

(subclass AquaticMammal Animal)

(subclass AquaticMammal AquaticMammal)

(subclass AquaticMammal CorpuscularObject)

(subclass AquaticMammal Entity)

(subclass AquaticMammal Mammal)

(subclass AquaticMammal Object)

(subclass AquaticMammal OrganicObject)

(subclass AquaticMammal Organism)

(subclass AquaticMammal Physical)

(subclass AquaticMammal SelfConnectedObject)

(subclass AquaticMammal Vertebrate)

(subclass AquaticMammal WarmBloodedVertebrate)

(subclass Arachnid Agent)

(subclass Arachnid Animal)

(subclass Arachnid Arachnid)

(subclass Arachnid Arthropod)

(subclass Arachnid CorpuscularObject)

(subclass Arachnid Entity)

(subclass Arachnid Invertebrate)

(subclass Arachnid Object)

(subclass Arachnid OrganicObject)

(subclass Arachnid Organism)

(subclass Arachnid Physical)

(subclass Arachnid SelfConnectedObject)

(subclass AreaMeasure Abstract)

(subclass AreaMeasure AreaMeasure)

(subclass AreaMeasure ConstantQuantity)

(subclass AreaMeasure Entity)

(subclass AreaMeasure PhysicalQuantity)

(subclass AreaMeasure Quantity)

(subclass Argument Abstract)

(subclass Argument Argument)

(subclass Argument Entity)

(subclass Argument Proposition)

(subclass ArtWork ArtWork)

(subclass ArtWork Artifact)

(subclass ArtWork CorpuscularObject)

(subclass ArtWork Entity)

(subclass ArtWork Object)

(subclass ArtWork Physical)

(subclass ArtWork SelfConnectedObject)

(subclass Arthropod Agent)

(subclass Arthropod Animal)

(subclass Arthropod Arthropod)

(subclass Arthropod CorpuscularObject)

(subclass Arthropod Entity)

(subclass Arthropod Invertebrate)

(subclass Arthropod Object)

(subclass Arthropod OrganicObject)

(subclass Arthropod Organism)

(subclass Arthropod Physical)

(subclass Arthropod SelfConnectedObject)

(subclass Article Article)

(subclass Article Artifact)

(subclass Article ContentBearingPhysical)

(subclass Article CorpuscularObject)

(subclass Article Entity)

(subclass Article LinguisticExpression)

(subclass Article Object)

(subclass Article Physical)

(subclass Article SelfConnectedObject)

(subclass Article Text)

(subclass Artifact Artifact)

(subclass Artifact CorpuscularObject)

(subclass Artifact Entity)

(subclass Artifact Object)

(subclass Artifact Physical)

(subclass Artifact SelfConnectedObject)

(subclass ArtificialLanguage ArtificialLanguage)

(subclass ArtificialLanguage ContentBearingPhysical)

(subclass ArtificialLanguage Entity)

(subclass ArtificialLanguage Language)

(subclass ArtificialLanguage LinguisticExpression)

(subclass ArtificialLanguage Physical)

(subclass AsexualReproduction AsexualReproduction)

(subclass AsexualReproduction BiologicalProcess)

(subclass AsexualReproduction Entity)

(subclass AsexualReproduction InternalChange)

(subclass AsexualReproduction OrganismProcess)

(subclass AsexualReproduction Physical)

(subclass AsexualReproduction PhysiologicProcess)

(subclass AsexualReproduction Process)

(subclass AsexualReproduction Replication)

(subclass AssociativeFunction Abstract)

(subclass AssociativeFunction AssociativeFunction)

(subclass AssociativeFunction BinaryFunction)

(subclass AssociativeFunction Entity)

(subclass AssociativeFunction Function)

(subclass AssociativeFunction Relation)

(subclass AssociativeFunction SingleValuedRelation)

(subclass AssociativeFunction TernaryRelation)

(subclass AstronomicalBody AstronomicalBody)

(subclass AstronomicalBody Entity)

(subclass AstronomicalBody Object)

(subclass AstronomicalBody Physical)

(subclass AstronomicalBody Region)

(subclass AsymmetricRelation Abstract)

(subclass AsymmetricRelation AntisymmetricRelation)

(subclass AsymmetricRelation AsymmetricRelation)

(subclass AsymmetricRelation BinaryRelation)

(subclass AsymmetricRelation Entity)

(subclass AsymmetricRelation IrreflexiveRelation)

(subclass AsymmetricRelation Relation)

(subclass Atom Atom)

(subclass Atom ElementalSubstance)

(subclass Atom Entity)

(subclass Atom Object)

(subclass Atom Physical)

(subclass Atom PureSubstance)

(subclass Atom SelfConnectedObject)

(subclass Atom Substance)

(subclass AtomGram Abstract)

(subclass AtomGram AtomGram)

(subclass AtomGram ConstantQuantity)

(subclass AtomGram Entity)

(subclass AtomGram MassMeasure)

(subclass AtomGram PhysicalQuantity)

(subclass AtomGram Quantity)

(subclass AtomicNucleus AtomicNucleus)

(subclass AtomicNucleus ElementalSubstance)

(subclass AtomicNucleus Entity)

(subclass AtomicNucleus Object)

(subclass AtomicNucleus Physical)

(subclass AtomicNucleus PureSubstance)

(subclass AtomicNucleus SelfConnectedObject)

(subclass AtomicNucleus SubatomicParticle)

(subclass AtomicNucleus Substance)

(subclass Attaching Attaching)

(subclass Attaching DualObjectProcess)

(subclass Attaching Entity)

(subclass Attaching Physical)

(subclass Attaching Process)

(subclass AttachingDevice Artifact)

(subclass AttachingDevice AttachingDevice)

(subclass AttachingDevice CorpuscularObject)

(subclass AttachingDevice Device)

(subclass AttachingDevice Entity)

(subclass AttachingDevice Object)

(subclass AttachingDevice Physical)

(subclass AttachingDevice SelfConnectedObject)

(subclass Attack Attack)

(subclass Attack Entity)

(subclass Attack IntentionalProcess)

(subclass Attack Maneuver)

(subclass Attack Physical)

(subclass Attack Process)

(subclass Attribute Abstract)

(subclass Attribute Attribute)

(subclass Attribute Entity)

(subclass August Abstract)

(subclass August August)

(subclass August ConstantQuantity)

(subclass August Entity)

(subclass August Month)

(subclass August PhysicalQuantity)

(subclass August Quantity)

(subclass August TimeInterval)

(subclass August TimeMeasure)

(subclass August TimePosition)

(subclass AutonomicProcess AutonomicProcess)

(subclass AutonomicProcess BiologicalProcess)

(subclass AutonomicProcess Entity)

(subclass AutonomicProcess InternalChange)

(subclass AutonomicProcess Physical)

(subclass AutonomicProcess PhysiologicProcess)

(subclass AutonomicProcess Process)

(subclass Bacterium Agent)

(subclass Bacterium Bacterium)

(subclass Bacterium CorpuscularObject)

(subclass Bacterium Entity)

(subclass Bacterium Microorganism)

(subclass Bacterium Object)

(subclass Bacterium OrganicObject)

(subclass Bacterium Organism)

(subclass Bacterium Physical)

(subclass Bacterium SelfConnectedObject)

(subclass Battle Battle)

(subclass Battle Contest)

(subclass Battle Entity)

(subclass Battle IntentionalProcess)

(subclass Battle Physical)

(subclass Battle Process)

(subclass Battle SocialInteraction)

(subclass Battle ViolentContest)

(subclass Becquerel Abstract)

(subclass Becquerel Becquerel)

(subclass Becquerel Entity)

(subclass Becquerel FunctionQuantity)

(subclass Becquerel PhysicalQuantity)

(subclass Becquerel Quantity)

(subclass Becquerel TimeDependentQuantity)

(subclass Becquerel UnaryConstantFunctionQuantity)

(subclass BeliefGroup Agent)

(subclass BeliefGroup BeliefGroup)

(subclass BeliefGroup Collection)

(subclass BeliefGroup Entity)

(subclass BeliefGroup Group)

(subclass BeliefGroup GroupOfPeople)

(subclass BeliefGroup Object)

(subclass BeliefGroup Physical)

(subclass Betting Betting)

(subclass Betting ChangeOfPossession)

(subclass Betting DualObjectProcess)

(subclass Betting Entity)

(subclass Betting FinancialTransaction)

(subclass Betting IntentionalProcess)

(subclass Betting Physical)

(subclass Betting Process)

(subclass Betting SocialInteraction)

(subclass Betting Transaction)

(subclass Beverage Beverage)

(subclass Beverage Entity)

(subclass Beverage Food)

(subclass Beverage Object)

(subclass Beverage Physical)

(subclass Beverage SelfConnectedObject)

(subclass BinaryFunction Abstract)

(subclass BinaryFunction BinaryFunction)

(subclass BinaryFunction Entity)

(subclass BinaryFunction Function)

(subclass BinaryFunction Relation)

(subclass BinaryFunction SingleValuedRelation)

(subclass BinaryFunction TernaryRelation)

(subclass BinaryNumber Abstract)

(subclass BinaryNumber BinaryNumber)

(subclass BinaryNumber Entity)

(subclass BinaryNumber Number)

(subclass BinaryNumber Quantity)

(subclass BinaryNumber RealNumber)

(subclass BinaryPredicate Abstract)

(subclass BinaryPredicate BinaryPredicate)

(subclass BinaryPredicate BinaryRelation)

(subclass BinaryPredicate Entity)

(subclass BinaryPredicate Predicate)

(subclass BinaryPredicate Relation)

(subclass BinaryRelation Abstract)

(subclass BinaryRelation BinaryRelation)

(subclass BinaryRelation Entity)

(subclass BinaryRelation Relation)

(subclass BiologicalAttribute Abstract)

(subclass BiologicalAttribute Attribute)

(subclass BiologicalAttribute BiologicalAttribute)

(subclass BiologicalAttribute Entity)

(subclass BiologicalAttribute InternalAttribute)

(subclass BiologicalProcess BiologicalProcess)

(subclass BiologicalProcess Entity)

(subclass BiologicalProcess InternalChange)

(subclass BiologicalProcess Physical)

(subclass BiologicalProcess Process)

(subclass BiologicallyActiveSubstance BiologicallyActiveSubstance)

(subclass BiologicallyActiveSubstance Entity)

(subclass BiologicallyActiveSubstance Object)

(subclass BiologicallyActiveSubstance Physical)

(subclass BiologicallyActiveSubstance SelfConnectedObject)

(subclass BiologicallyActiveSubstance Substance)

(subclass Bird Agent)

(subclass Bird Animal)

(subclass Bird Bird)

(subclass Bird CorpuscularObject)

(subclass Bird Entity)

(subclass Bird Object)

(subclass Bird OrganicObject)

(subclass Bird Organism)

(subclass Bird Physical)

(subclass Bird SelfConnectedObject)

(subclass Bird Vertebrate)

(subclass Bird WarmBloodedVertebrate)

(subclass Birth BiologicalProcess)

(subclass Birth Birth)

(subclass Birth Entity)

(subclass Birth InternalChange)

(subclass Birth OrganismProcess)

(subclass Birth Physical)

(subclass Birth PhysiologicProcess)

(subclass Birth Process)

(subclass Bit Abstract)

(subclass Bit Bit)

(subclass Bit ConstantQuantity)

(subclass Bit Entity)

(subclass Bit InformationMeasure)

(subclass Bit PhysicalQuantity)

(subclass Bit Quantity)

(subclass Blood Blood)

(subclass Blood BodySubstance)

(subclass Blood Entity)

(subclass Blood Mixture)

(subclass Blood Object)

(subclass Blood Physical)

(subclass Blood SelfConnectedObject)

(subclass Blood Substance)

(subclass BodyCavity AnatomicalStructure)

(subclass BodyCavity BodyCavity)

(subclass BodyCavity BodyPart)

(subclass BodyCavity CorpuscularObject)

(subclass BodyCavity Entity)

(subclass BodyCavity Object)

(subclass BodyCavity OrganicObject)

(subclass BodyCavity Physical)

(subclass BodyCavity SelfConnectedObject)

(subclass BodyCovering AnatomicalStructure)

(subclass BodyCovering BodyCovering)

(subclass BodyCovering BodyPart)

(subclass BodyCovering CorpuscularObject)

(subclass BodyCovering Entity)

(subclass BodyCovering Object)

(subclass BodyCovering OrganicObject)

(subclass BodyCovering Physical)

(subclass BodyCovering SelfConnectedObject)

(subclass BodyJunction AnatomicalStructure)

(subclass BodyJunction BodyJunction)

(subclass BodyJunction BodyPart)

(subclass BodyJunction CorpuscularObject)

(subclass BodyJunction Entity)

(subclass BodyJunction Object)

(subclass BodyJunction OrganicObject)

(subclass BodyJunction Physical)

(subclass BodyJunction SelfConnectedObject)

(subclass BodyMotion BodyMotion)

(subclass BodyMotion Entity)

(subclass BodyMotion Motion)

(subclass BodyMotion Physical)

(subclass BodyMotion Process)

(subclass BodyPart AnatomicalStructure)

(subclass BodyPart BodyPart)

(subclass BodyPart CorpuscularObject)

(subclass BodyPart Entity)

(subclass BodyPart Object)

(subclass BodyPart OrganicObject)

(subclass BodyPart Physical)

(subclass BodyPart SelfConnectedObject)

(subclass BodyPosition Abstract)

(subclass BodyPosition Attribute)

(subclass BodyPosition BiologicalAttribute)

(subclass BodyPosition BodyPosition)

(subclass BodyPosition Entity)

(subclass BodyPosition InternalAttribute)

(subclass BodySubstance BodySubstance)

(subclass BodySubstance Entity)

(subclass BodySubstance Mixture)

(subclass BodySubstance Object)

(subclass BodySubstance Physical)

(subclass BodySubstance SelfConnectedObject)

(subclass BodySubstance Substance)

(subclass BodyVessel AnatomicalStructure)

(subclass BodyVessel BodyCavity)

(subclass BodyVessel BodyPart)

(subclass BodyVessel BodyVessel)

(subclass BodyVessel CorpuscularObject)

(subclass BodyVessel Entity)

(subclass BodyVessel Object)

(subclass BodyVessel OrganicObject)

(subclass BodyVessel Physical)

(subclass BodyVessel SelfConnectedObject)

(subclass Boiling Boiling)

(subclass Boiling Entity)

(subclass Boiling InternalChange)

(subclass Boiling Physical)

(subclass Boiling Process)

(subclass Boiling StateChange)

(subclass Bone AnimalSubstance)

(subclass Bone BodySubstance)

(subclass Bone Bone)

(subclass Bone Entity)

(subclass Bone Mixture)

(subclass Bone Object)

(subclass Bone Physical)

(subclass Bone SelfConnectedObject)

(subclass Bone Substance)

(subclass Bone Tissue)

(subclass Book Artifact)

(subclass Book Book)

(subclass Book ContentBearingPhysical)

(subclass Book CorpuscularObject)

(subclass Book Entity)

(subclass Book LinguisticExpression)

(subclass Book Object)

(subclass Book Physical)

(subclass Book SelfConnectedObject)

(subclass Book Text)

(subclass Borrowing Borrowing)

(subclass Borrowing ChangeOfPossession)

(subclass Borrowing Entity)

(subclass Borrowing Getting)

(subclass Borrowing IntentionalProcess)

(subclass Borrowing Physical)

(subclass Borrowing Process)

(subclass Borrowing SocialInteraction)

(subclass Breathing AutonomicProcess)

(subclass Breathing BiologicalProcess)

(subclass Breathing Breathing)

(subclass Breathing Entity)

(subclass Breathing InternalChange)

(subclass Breathing OrganismProcess)

(subclass Breathing Physical)

(subclass Breathing PhysiologicProcess)

(subclass Breathing Process)

(subclass BritishThermalUnit Abstract)

(subclass BritishThermalUnit BritishThermalUnit)

(subclass BritishThermalUnit Entity)

(subclass BritishThermalUnit FunctionQuantity)

(subclass BritishThermalUnit PhysicalQuantity)

(subclass BritishThermalUnit Quantity)

(subclass Building Artifact)

(subclass Building Building)

(subclass Building CorpuscularObject)

(subclass Building Entity)

(subclass Building Object)

(subclass Building Physical)

(subclass Building SelfConnectedObject)

(subclass Building StationaryArtifact)

(subclass Buying Buying)

(subclass Buying ChangeOfPossession)

(subclass Buying DualObjectProcess)

(subclass Buying Entity)

(subclass Buying FinancialTransaction)

(subclass Buying IntentionalProcess)

(subclass Buying Physical)

(subclass Buying Process)

(subclass Buying SocialInteraction)

(subclass Buying Transaction)

(subclass Byte Abstract)

(subclass Byte Byte)

(subclass Byte ConstantQuantity)

(subclass Byte Entity)

(subclass Byte InformationMeasure)

(subclass Byte PhysicalQuantity)

(subclass Byte Quantity)

(subclass Calculating BiologicalProcess)

(subclass Calculating Calculating)

(subclass Calculating Entity)

(subclass Calculating IntentionalProcess)

(subclass Calculating IntentionalPsychologicalProcess)

(subclass Calculating InternalChange)

(subclass Calculating Physical)

(subclass Calculating Process)

(subclass Calculating PsychologicalProcess)

(subclass Calorie Abstract)

(subclass Calorie Calorie)

(subclass Calorie Entity)

(subclass Calorie FunctionQuantity)

(subclass Calorie PhysicalQuantity)

(subclass Calorie Quantity)

(subclass Candela Abstract)

(subclass Candela Candela)

(subclass Candela Entity)

(subclass Candela FunctionQuantity)

(subclass Candela PhysicalQuantity)

(subclass Candela Quantity)

(subclass Canine Agent)

(subclass Canine Animal)

(subclass Canine Canine)

(subclass Canine Carnivore)

(subclass Canine CorpuscularObject)

(subclass Canine Entity)

(subclass Canine Mammal)

(subclass Canine Object)

(subclass Canine OrganicObject)

(subclass Canine Organism)

(subclass Canine Physical)

(subclass Canine SelfConnectedObject)

(subclass Canine Vertebrate)

(subclass Canine WarmBloodedVertebrate)

(subclass Carbohydrate BiologicallyActiveSubstance)

(subclass Carbohydrate Carbohydrate)

(subclass Carbohydrate Entity)

(subclass Carbohydrate Nutrient)

(subclass Carbohydrate Object)

(subclass Carbohydrate Physical)

(subclass Carbohydrate SelfConnectedObject)

(subclass Carbohydrate Substance)

(subclass Carnivore Agent)

(subclass Carnivore Animal)

(subclass Carnivore Carnivore)

(subclass Carnivore CorpuscularObject)

(subclass Carnivore Entity)

(subclass Carnivore Mammal)

(subclass Carnivore Object)

(subclass Carnivore OrganicObject)

(subclass Carnivore Organism)

(subclass Carnivore Physical)

(subclass Carnivore SelfConnectedObject)

(subclass Carnivore Vertebrate)

(subclass Carnivore WarmBloodedVertebrate)

(subclass Carrying Carrying)

(subclass Carrying Entity)

(subclass Carrying Motion)

(subclass Carrying Physical)

(subclass Carrying Process)

(subclass Carrying Transfer)

(subclass Carrying Translocation)

(subclass CaseRole Abstract)

(subclass CaseRole AntisymmetricRelation)

(subclass CaseRole AsymmetricRelation)

(subclass CaseRole BinaryPredicate)

(subclass CaseRole BinaryRelation)

(subclass CaseRole CaseRole)

(subclass CaseRole Entity)

(subclass CaseRole IrreflexiveRelation)

(subclass CaseRole Predicate)

(subclass CaseRole Relation)

(subclass Cell AnatomicalStructure)

(subclass Cell BodyPart)

(subclass Cell Cell)

(subclass Cell CorpuscularObject)

(subclass Cell Entity)

(subclass Cell Object)

(subclass Cell OrganicObject)

(subclass Cell Physical)

(subclass Cell SelfConnectedObject)

(subclass CelsiusDegree Abstract)

(subclass CelsiusDegree CelsiusDegree)

(subclass CelsiusDegree ConstantQuantity)

(subclass CelsiusDegree Entity)

(subclass CelsiusDegree PhysicalQuantity)

(subclass CelsiusDegree Quantity)

(subclass CelsiusDegree TemperatureMeasure)

(subclass Centimeter Abstract)

(subclass Centimeter Centimeter)

(subclass Centimeter ConstantQuantity)

(subclass Centimeter Entity)

(subclass Centimeter LengthMeasure)

(subclass Centimeter PhysicalQuantity)

(subclass Centimeter Quantity)

(subclass Certificate Artifact)

(subclass Certificate Certificate)

(subclass Certificate ContentBearingPhysical)

(subclass Certificate CorpuscularObject)

(subclass Certificate Entity)

(subclass Certificate LinguisticExpression)

(subclass Certificate Object)

(subclass Certificate Physical)

(subclass Certificate SelfConnectedObject)

(subclass Certificate Text)

(subclass ChangeOfPossession ChangeOfPossession)

(subclass ChangeOfPossession Entity)

(subclass ChangeOfPossession IntentionalProcess)

(subclass ChangeOfPossession Physical)

(subclass ChangeOfPossession Process)

(subclass ChangeOfPossession SocialInteraction)

(subclass Character Character)

(subclass Character ContentBearingObject)

(subclass Character ContentBearingPhysical)

(subclass Character CorpuscularObject)

(subclass Character Entity)

(subclass Character Object)

(subclass Character Physical)

(subclass Character SelfConnectedObject)

(subclass Character SymbolicString)

(subclass ChemicalDecomposition ChemicalDecomposition)

(subclass ChemicalDecomposition ChemicalProcess)

(subclass ChemicalDecomposition DualObjectProcess)

(subclass ChemicalDecomposition Entity)

(subclass ChemicalDecomposition InternalChange)

(subclass ChemicalDecomposition Physical)

(subclass ChemicalDecomposition Process)

(subclass ChemicalDecomposition Separating)

(subclass ChemicalProcess ChemicalProcess)

(subclass ChemicalProcess Entity)

(subclass ChemicalProcess InternalChange)

(subclass ChemicalProcess Physical)

(subclass ChemicalProcess Process)

(subclass ChemicalSynthesis ChemicalProcess)

(subclass ChemicalSynthesis ChemicalSynthesis)

(subclass ChemicalSynthesis Combining)

(subclass ChemicalSynthesis DualObjectProcess)

(subclass ChemicalSynthesis Entity)

(subclass ChemicalSynthesis InternalChange)

(subclass ChemicalSynthesis Physical)

(subclass ChemicalSynthesis Process)

(subclass City Agent)

(subclass City City)

(subclass City Entity)

(subclass City GeographicArea)

(subclass City GeopoliticalArea)

(subclass City LandArea)

(subclass City Object)

(subclass City Physical)

(subclass City Region)

(subclass Class Abstract)

(subclass Class Class)

(subclass Class Entity)

(subclass Class SetOrClass)

(subclass Classifying BiologicalProcess)

(subclass Classifying Classifying)

(subclass Classifying Entity)

(subclass Classifying IntentionalProcess)

(subclass Classifying IntentionalPsychologicalProcess)

(subclass Classifying InternalChange)

(subclass Classifying Physical)

(subclass Classifying Process)

(subclass Classifying PsychologicalProcess)

(subclass ClosedTwoDimensionalFigure Abstract)

(subclass ClosedTwoDimensionalFigure Attribute)

(subclass ClosedTwoDimensionalFigure ClosedTwoDimensionalFigure)

(subclass ClosedTwoDimensionalFigure Entity)

(subclass ClosedTwoDimensionalFigure GeometricFigure)

(subclass ClosedTwoDimensionalFigure InternalAttribute)

(subclass ClosedTwoDimensionalFigure ShapeAttribute)

(subclass ClosedTwoDimensionalFigure TwoDimensionalFigure)

(subclass Clothing Artifact)

(subclass Clothing Clothing)

(subclass Clothing CorpuscularObject)

(subclass Clothing Entity)

(subclass Clothing Object)

(subclass Clothing Physical)

(subclass Clothing SelfConnectedObject)

(subclass Clothing WearableItem)

(subclass Cloud Cloud)

(subclass Cloud Entity)

(subclass Cloud GasMixture)

(subclass Cloud Mixture)

(subclass Cloud Object)

(subclass Cloud Physical)

(subclass Cloud SelfConnectedObject)

(subclass Cloud Substance)

(subclass CognitiveAgent Agent)

(subclass CognitiveAgent CognitiveAgent)

(subclass CognitiveAgent Entity)

(subclass CognitiveAgent Object)

(subclass CognitiveAgent Physical)

(subclass CognitiveAgent SentientAgent)

(subclass ColdBloodedVertebrate Agent)

(subclass ColdBloodedVertebrate Animal)

(subclass ColdBloodedVertebrate ColdBloodedVertebrate)

(subclass ColdBloodedVertebrate CorpuscularObject)

(subclass ColdBloodedVertebrate Entity)

(subclass ColdBloodedVertebrate Object)

(subclass ColdBloodedVertebrate OrganicObject)

(subclass ColdBloodedVertebrate Organism)

(subclass ColdBloodedVertebrate Physical)

(subclass ColdBloodedVertebrate SelfConnectedObject)

(subclass ColdBloodedVertebrate Vertebrate)

(subclass Collection Collection)

(subclass Collection Entity)

(subclass Collection Object)

(subclass Collection Physical)

(subclass ColorAttribute Abstract)

(subclass ColorAttribute Attribute)

(subclass ColorAttribute ColorAttribute)

(subclass ColorAttribute Entity)

(subclass ColorAttribute InternalAttribute)

(subclass Coloring Coloring)

(subclass Coloring Entity)

(subclass Coloring InternalChange)

(subclass Coloring Physical)

(subclass Coloring Process)

(subclass Coloring SurfaceChange)

(subclass Combining Combining)

(subclass Combining DualObjectProcess)

(subclass Combining Entity)

(subclass Combining Physical)

(subclass Combining Process)

(subclass Combustion ChemicalDecomposition)

(subclass Combustion ChemicalProcess)

(subclass Combustion Combustion)

(subclass Combustion DualObjectProcess)

(subclass Combustion Entity)

(subclass Combustion InternalChange)

(subclass Combustion Physical)

(subclass Combustion Process)

(subclass Combustion Separating)

(subclass CommercialAgent Agent)

(subclass CommercialAgent CommercialAgent)

(subclass CommercialAgent Entity)

(subclass CommercialAgent Object)

(subclass CommercialAgent Physical)

(subclass CommercialService ChangeOfPossession)

(subclass CommercialService CommercialService)

(subclass CommercialService DualObjectProcess)

(subclass CommercialService Entity)

(subclass CommercialService FinancialTransaction)

(subclass CommercialService IntentionalProcess)

(subclass CommercialService Physical)

(subclass CommercialService Process)

(subclass CommercialService SocialInteraction)

(subclass CommercialService Transaction)

(subclass Committing Committing)

(subclass Committing Communication)

(subclass Committing ContentBearingPhysical)

(subclass Committing ContentBearingProcess)

(subclass Committing Entity)

(subclass Committing IntentionalProcess)

(subclass Committing LinguisticCommunication)

(subclass Committing Physical)

(subclass Committing Process)

(subclass Committing SocialInteraction)

(subclass Communication Communication)

(subclass Communication ContentBearingPhysical)

(subclass Communication ContentBearingProcess)

(subclass Communication Entity)

(subclass Communication IntentionalProcess)

(subclass Communication Physical)

(subclass Communication Process)

(subclass Communication SocialInteraction)

(subclass CommutativeFunction Abstract)

(subclass CommutativeFunction BinaryFunction)

(subclass CommutativeFunction CommutativeFunction)

(subclass CommutativeFunction Entity)

(subclass CommutativeFunction Function)

(subclass CommutativeFunction Relation)

(subclass CommutativeFunction SingleValuedRelation)

(subclass CommutativeFunction TernaryRelation)

(subclass Comparing BiologicalProcess)

(subclass Comparing Comparing)

(subclass Comparing DualObjectProcess)

(subclass Comparing Entity)

(subclass Comparing IntentionalProcess)

(subclass Comparing IntentionalPsychologicalProcess)

(subclass Comparing InternalChange)

(subclass Comparing Physical)

(subclass Comparing Process)

(subclass Comparing PsychologicalProcess)

(subclass ComplexNumber Abstract)

(subclass ComplexNumber ComplexNumber)

(subclass ComplexNumber Entity)

(subclass ComplexNumber Number)

(subclass ComplexNumber Quantity)

(subclass CompoundSubstance CompoundSubstance)

(subclass CompoundSubstance Entity)

(subclass CompoundSubstance Object)

(subclass CompoundSubstance Physical)

(subclass CompoundSubstance PureSubstance)

(subclass CompoundSubstance SelfConnectedObject)

(subclass CompoundSubstance Substance)

(subclass ComputerLanguage ArtificialLanguage)

(subclass ComputerLanguage ComputerLanguage)

(subclass ComputerLanguage ContentBearingPhysical)

(subclass ComputerLanguage Entity)

(subclass ComputerLanguage Language)

(subclass ComputerLanguage LinguisticExpression)

(subclass ComputerLanguage Physical)

(subclass ComputerProgram Abstract)

(subclass ComputerProgram ComputerProgram)

(subclass ComputerProgram Entity)

(subclass ComputerProgram Procedure)

(subclass ComputerProgram Proposition)

(subclass ComputerProgramming ComputerProgramming)

(subclass ComputerProgramming ContentDevelopment)

(subclass ComputerProgramming Entity)

(subclass ComputerProgramming IntentionalProcess)

(subclass ComputerProgramming Physical)

(subclass ComputerProgramming Process)

(subclass Condensing Condensing)

(subclass Condensing Entity)

(subclass Condensing InternalChange)

(subclass Condensing Physical)

(subclass Condensing Process)

(subclass Condensing StateChange)

(subclass Confining Confining)

(subclass Confining Entity)

(subclass Confining IntentionalProcess)

(subclass Confining Keeping)

(subclass Confining Physical)

(subclass Confining Process)

(subclass ConsciousnessAttribute Abstract)

(subclass ConsciousnessAttribute Attribute)

(subclass ConsciousnessAttribute BiologicalAttribute)

(subclass ConsciousnessAttribute ConsciousnessAttribute)

(subclass ConsciousnessAttribute Entity)

(subclass ConsciousnessAttribute InternalAttribute)

(subclass ConsciousnessAttribute PsychologicalAttribute)

(subclass ConsciousnessAttribute StateOfMind)

(subclass ConstantQuantity Abstract)

(subclass ConstantQuantity ConstantQuantity)

(subclass ConstantQuantity Entity)

(subclass ConstantQuantity PhysicalQuantity)

(subclass ConstantQuantity Quantity)

(subclass ConstructedLanguage ArtificialLanguage)

(subclass ConstructedLanguage ConstructedLanguage)

(subclass ConstructedLanguage ContentBearingPhysical)

(subclass ConstructedLanguage Entity)

(subclass ConstructedLanguage HumanLanguage)

(subclass ConstructedLanguage Language)

(subclass ConstructedLanguage LinguisticExpression)

(subclass ConstructedLanguage Physical)

(subclass Constructing Constructing)

(subclass Constructing Creation)

(subclass Constructing Entity)

(subclass Constructing IntentionalProcess)

(subclass Constructing InternalChange)

(subclass Constructing Making)

(subclass Constructing Physical)

(subclass Constructing Process)

(subclass ContentBearingObject ContentBearingObject)

(subclass ContentBearingObject ContentBearingPhysical)

(subclass ContentBearingObject CorpuscularObject)

(subclass ContentBearingObject Entity)

(subclass ContentBearingObject Object)

(subclass ContentBearingObject Physical)

(subclass ContentBearingObject SelfConnectedObject)

(subclass ContentBearingPhysical ContentBearingPhysical)

(subclass ContentBearingPhysical Entity)

(subclass ContentBearingPhysical Physical)

(subclass ContentBearingProcess ContentBearingPhysical)

(subclass ContentBearingProcess ContentBearingProcess)

(subclass ContentBearingProcess Entity)

(subclass ContentBearingProcess Physical)

(subclass ContentDevelopment ContentDevelopment)

(subclass ContentDevelopment Entity)

(subclass ContentDevelopment IntentionalProcess)

(subclass ContentDevelopment Physical)

(subclass ContentDevelopment Process)

(subclass Contest Contest)

(subclass Contest Entity)

(subclass Contest IntentionalProcess)

(subclass Contest Physical)

(subclass Contest Process)

(subclass Contest SocialInteraction)

(subclass ContestAttribute Abstract)

(subclass ContestAttribute Attribute)

(subclass ContestAttribute ContestAttribute)

(subclass ContestAttribute Entity)

(subclass ContestAttribute NormativeAttribute)

(subclass ContestAttribute ObjectiveNorm)

(subclass ContestAttribute RelationalAttribute)

(subclass Continent Continent)

(subclass Continent Entity)

(subclass Continent GeographicArea)

(subclass Continent LandArea)

(subclass Continent Object)

(subclass Continent Physical)

(subclass Continent Region)

(subclass ContinuousFunction Abstract)

(subclass ContinuousFunction ContinuousFunction)

(subclass ContinuousFunction Entity)

(subclass ContinuousFunction Function)

(subclass ContinuousFunction Relation)

(subclass ContinuousFunction SingleValuedRelation)

(subclass Cooking Cooking)

(subclass Cooking Creation)

(subclass Cooking Entity)

(subclass Cooking IntentionalProcess)

(subclass Cooking InternalChange)

(subclass Cooking Making)

(subclass Cooking Physical)

(subclass Cooking Process)

(subclass Cooling Cooling)

(subclass Cooling Decreasing)

(subclass Cooling Entity)

(subclass Cooling InternalChange)

(subclass Cooling Physical)

(subclass Cooling Process)

(subclass Cooling QuantityChange)

(subclass Cooperation Cooperation)

(subclass Cooperation Entity)

(subclass Cooperation IntentionalProcess)

(subclass Cooperation Physical)

(subclass Cooperation Process)

(subclass Cooperation SocialInteraction)

(subclass Corporation Agent)

(subclass Corporation CognitiveAgent)

(subclass Corporation Collection)

(subclass Corporation CommercialAgent)

(subclass Corporation Corporation)

(subclass Corporation Entity)

(subclass Corporation Group)

(subclass Corporation Object)

(subclass Corporation Organization)

(subclass Corporation Physical)

(subclass Corporation SentientAgent)

(subclass CorpuscularObject CorpuscularObject)

(subclass CorpuscularObject Entity)

(subclass CorpuscularObject Object)

(subclass CorpuscularObject Physical)

(subclass CorpuscularObject SelfConnectedObject)

(subclass Coulomb Abstract)

(subclass Coulomb Coulomb)

(subclass Coulomb Entity)

(subclass Coulomb FunctionQuantity)

(subclass Coulomb PhysicalQuantity)

(subclass Coulomb Quantity)

(subclass Coulomb TimeDependentQuantity)

(subclass Coulomb UnaryConstantFunctionQuantity)

(subclass Counting BiologicalProcess)

(subclass Counting Calculating)

(subclass Counting Counting)

(subclass Counting Entity)

(subclass Counting IntentionalProcess)

(subclass Counting IntentionalPsychologicalProcess)

(subclass Counting InternalChange)

(subclass Counting Physical)

(subclass Counting Process)

(subclass Counting PsychologicalProcess)

(subclass County Agent)

(subclass County County)

(subclass County Entity)

(subclass County GeographicArea)

(subclass County GeopoliticalArea)

(subclass County LandArea)

(subclass County Object)

(subclass County Physical)

(subclass County Region)

(subclass Covering Covering)

(subclass Covering Entity)

(subclass Covering Motion)

(subclass Covering Physical)

(subclass Covering Process)

(subclass Covering Putting)

(subclass Covering Transfer)

(subclass Covering Translocation)

(subclass Creation Creation)

(subclass Creation Entity)

(subclass Creation InternalChange)

(subclass Creation Physical)

(subclass Creation Process)

(subclass Crustacean Agent)

(subclass Crustacean Animal)

(subclass Crustacean Arthropod)

(subclass Crustacean CorpuscularObject)

(subclass Crustacean Crustacean)

(subclass Crustacean Entity)

(subclass Crustacean Invertebrate)

(subclass Crustacean Object)

(subclass Crustacean OrganicObject)

(subclass Crustacean Organism)

(subclass Crustacean Physical)

(subclass Crustacean SelfConnectedObject)

(subclass Cup Abstract)

(subclass Cup ConstantQuantity)

(subclass Cup Cup)

(subclass Cup Entity)

(subclass Cup PhysicalQuantity)

(subclass Cup Quantity)

(subclass Cup VolumeMeasure)

(subclass Currency Artifact)

(subclass Currency Certificate)

(subclass Currency ContentBearingPhysical)

(subclass Currency CorpuscularObject)

(subclass Currency Currency)

(subclass Currency Entity)

(subclass Currency FinancialInstrument)

(subclass Currency LinguisticExpression)

(subclass Currency Object)

(subclass Currency Physical)

(subclass Currency SelfConnectedObject)

(subclass Currency Text)

(subclass CurrencyBill Artifact)

(subclass CurrencyBill Certificate)

(subclass CurrencyBill ContentBearingPhysical)

(subclass CurrencyBill CorpuscularObject)

(subclass CurrencyBill Currency)

(subclass CurrencyBill CurrencyBill)

(subclass CurrencyBill Entity)

(subclass CurrencyBill FinancialInstrument)

(subclass CurrencyBill LinguisticExpression)

(subclass CurrencyBill Object)

(subclass CurrencyBill Physical)

(subclass CurrencyBill SelfConnectedObject)

(subclass CurrencyBill Text)

(subclass CurrencyCoin Artifact)

(subclass CurrencyCoin Certificate)

(subclass CurrencyCoin ContentBearingPhysical)

(subclass CurrencyCoin CorpuscularObject)

(subclass CurrencyCoin Currency)

(subclass CurrencyCoin CurrencyCoin)

(subclass CurrencyCoin Entity)

(subclass CurrencyCoin FinancialInstrument)

(subclass CurrencyCoin LinguisticExpression)

(subclass CurrencyCoin Object)

(subclass CurrencyCoin Physical)

(subclass CurrencyCoin SelfConnectedObject)

(subclass CurrencyCoin Text)

(subclass CurrencyMeasure Abstract)

(subclass CurrencyMeasure ConstantQuantity)

(subclass CurrencyMeasure CurrencyMeasure)

(subclass CurrencyMeasure Entity)

(subclass CurrencyMeasure PhysicalQuantity)

(subclass CurrencyMeasure Quantity)

(subclass Cutting Cutting)

(subclass Cutting Entity)

(subclass Cutting IntentionalProcess)

(subclass Cutting Physical)

(subclass Cutting Poking)

(subclass Cutting Process)

(subclass Damaging Damaging)

(subclass Damaging Entity)

(subclass Damaging InternalChange)

(subclass Damaging Physical)

(subclass Damaging Process)

(subclass Dancing BodyMotion)

(subclass Dancing Dancing)

(subclass Dancing Entity)

(subclass Dancing Motion)

(subclass Dancing Physical)

(subclass Dancing Process)

(subclass Day Abstract)

(subclass Day ConstantQuantity)

(subclass Day Day)

(subclass Day Entity)

(subclass Day PhysicalQuantity)

(subclass Day Quantity)

(subclass Day TimeInterval)

(subclass Day TimeMeasure)

(subclass Day TimePosition)

(subclass DayDuration Abstract)

(subclass DayDuration ConstantQuantity)

(subclass DayDuration DayDuration)

(subclass DayDuration Entity)

(subclass DayDuration PhysicalQuantity)

(subclass DayDuration Quantity)

(subclass DayDuration TimeDuration)

(subclass DayDuration TimeMeasure)

(subclass Death BiologicalProcess)

(subclass Death Death)

(subclass Death Entity)

(subclass Death InternalChange)

(subclass Death OrganismProcess)

(subclass Death Physical)

(subclass Death PhysiologicProcess)

(subclass Death Process)

(subclass December Abstract)

(subclass December ConstantQuantity)

(subclass December December)

(subclass December Entity)

(subclass December Month)

(subclass December PhysicalQuantity)

(subclass December Quantity)

(subclass December TimeInterval)

(subclass December TimeMeasure)

(subclass December TimePosition)

(subclass Deciding BiologicalProcess)

(subclass Deciding Deciding)

(subclass Deciding Entity)

(subclass Deciding IntentionalProcess)

(subclass Deciding IntentionalPsychologicalProcess)

(subclass Deciding InternalChange)

(subclass Deciding Physical)

(subclass Deciding Process)

(subclass Deciding PsychologicalProcess)

(subclass Deciding Selecting)

(subclass Declaring Communication)

(subclass Declaring ContentBearingPhysical)

(subclass Declaring ContentBearingProcess)

(subclass Declaring Declaring)

(subclass Declaring Entity)

(subclass Declaring IntentionalProcess)

(subclass Declaring LinguisticCommunication)

(subclass Declaring Physical)

(subclass Declaring Process)

(subclass Declaring SocialInteraction)

(subclass Decoding ContentDevelopment)

(subclass Decoding Decoding)

(subclass Decoding Entity)

(subclass Decoding IntentionalProcess)

(subclass Decoding Physical)

(subclass Decoding Process)

(subclass Decoding Writing)

(subclass Decreasing Decreasing)

(subclass Decreasing Entity)

(subclass Decreasing InternalChange)

(subclass Decreasing Physical)

(subclass Decreasing Process)

(subclass Decreasing QuantityChange)

(subclass DeductiveArgument Abstract)

(subclass DeductiveArgument Argument)

(subclass DeductiveArgument DeductiveArgument)

(subclass DeductiveArgument Entity)

(subclass DeductiveArgument Proposition)

(subclass DefensiveManeuver DefensiveManeuver)

(subclass DefensiveManeuver Entity)

(subclass DefensiveManeuver IntentionalProcess)

(subclass DefensiveManeuver Maneuver)

(subclass DefensiveManeuver Physical)

(subclass DefensiveManeuver Process)

(subclass Demonstrating Communication)

(subclass Demonstrating ContentBearingPhysical)

(subclass Demonstrating ContentBearingProcess)

(subclass Demonstrating Demonstrating)

(subclass Demonstrating Disseminating)

(subclass Demonstrating Entity)

(subclass Demonstrating IntentionalProcess)

(subclass Demonstrating Physical)

(subclass Demonstrating Process)

(subclass Demonstrating SocialInteraction)

(subclass DeonticAttribute Abstract)

(subclass DeonticAttribute Attribute)

(subclass DeonticAttribute DeonticAttribute)

(subclass DeonticAttribute Entity)

(subclass DeonticAttribute NormativeAttribute)

(subclass DeonticAttribute ObjectiveNorm)

(subclass DeonticAttribute RelationalAttribute)

(subclass Designing BiologicalProcess)

(subclass Designing Designing)

(subclass Designing Entity)

(subclass Designing IntentionalProcess)

(subclass Designing IntentionalPsychologicalProcess)

(subclass Designing InternalChange)

(subclass Designing Physical)

(subclass Designing Process)

(subclass Designing PsychologicalProcess)

(subclass Destruction Damaging)

(subclass Destruction Destruction)

(subclass Destruction Entity)

(subclass Destruction InternalChange)

(subclass Destruction Physical)

(subclass Destruction Process)

(subclass Detaching Detaching)

(subclass Detaching DualObjectProcess)

(subclass Detaching Entity)

(subclass Detaching Physical)

(subclass Detaching Process)

(subclass DevelopmentalAttribute Abstract)

(subclass DevelopmentalAttribute Attribute)

(subclass DevelopmentalAttribute BiologicalAttribute)

(subclass DevelopmentalAttribute DevelopmentalAttribute)

(subclass DevelopmentalAttribute Entity)

(subclass DevelopmentalAttribute InternalAttribute)

(subclass Device Artifact)

(subclass Device CorpuscularObject)

(subclass Device Device)

(subclass Device Entity)

(subclass Device Object)

(subclass Device Physical)

(subclass Device SelfConnectedObject)

(subclass DiagnosticProcess BiologicalProcess)

(subclass DiagnosticProcess DiagnosticProcess)

(subclass DiagnosticProcess Entity)

(subclass DiagnosticProcess IntentionalProcess)

(subclass DiagnosticProcess IntentionalPsychologicalProcess)

(subclass DiagnosticProcess InternalChange)

(subclass DiagnosticProcess Investigating)

(subclass DiagnosticProcess Physical)

(subclass DiagnosticProcess Process)

(subclass DiagnosticProcess PsychologicalProcess)

(subclass Digesting AutonomicProcess)

(subclass Digesting BiologicalProcess)

(subclass Digesting Digesting)

(subclass Digesting Entity)

(subclass Digesting InternalChange)

(subclass Digesting OrganismProcess)

(subclass Digesting Physical)

(subclass Digesting PhysiologicProcess)

(subclass Digesting Process)

(subclass DirectedGraph Abstract)

(subclass DirectedGraph DirectedGraph)

(subclass DirectedGraph Entity)

(subclass DirectedGraph Graph)

(subclass Directing Communication)

(subclass Directing ContentBearingPhysical)

(subclass Directing ContentBearingProcess)

(subclass Directing Directing)

(subclass Directing Entity)

(subclass Directing IntentionalProcess)

(subclass Directing LinguisticCommunication)

(subclass Directing Physical)

(subclass Directing Process)

(subclass Directing SocialInteraction)

(subclass DirectionChange DirectionChange)

(subclass DirectionChange Entity)

(subclass DirectionChange Motion)

(subclass DirectionChange Physical)

(subclass DirectionChange Process)

(subclass DirectionalAttribute Abstract)

(subclass DirectionalAttribute Attribute)

(subclass DirectionalAttribute DirectionalAttribute)

(subclass DirectionalAttribute Entity)

(subclass DirectionalAttribute PositionalAttribute)

(subclass DirectionalAttribute RelationalAttribute)

(subclass Disagreeing Communication)

(subclass Disagreeing ContentBearingPhysical)

(subclass Disagreeing ContentBearingProcess)

(subclass Disagreeing Disagreeing)

(subclass Disagreeing Entity)

(subclass Disagreeing IntentionalProcess)

(subclass Disagreeing LinguisticCommunication)

(subclass Disagreeing Physical)

(subclass Disagreeing Process)

(subclass Disagreeing SocialInteraction)

(subclass Disagreeing Stating)

(subclass Discovering BiologicalProcess)

(subclass Discovering Discovering)

(subclass Discovering Entity)

(subclass Discovering IntentionalProcess)

(subclass Discovering IntentionalPsychologicalProcess)

(subclass Discovering InternalChange)

(subclass Discovering Physical)

(subclass Discovering Process)

(subclass Discovering PsychologicalProcess)

(subclass DiseaseOrSyndrome Abstract)

(subclass DiseaseOrSyndrome Attribute)

(subclass DiseaseOrSyndrome BiologicalAttribute)

(subclass DiseaseOrSyndrome DiseaseOrSyndrome)

(subclass DiseaseOrSyndrome Entity)

(subclass DiseaseOrSyndrome InternalAttribute)

(subclass Disseminating Communication)

(subclass Disseminating ContentBearingPhysical)

(subclass Disseminating ContentBearingProcess)

(subclass Disseminating Disseminating)

(subclass Disseminating Entity)

(subclass Disseminating IntentionalProcess)

(subclass Disseminating Physical)

(subclass Disseminating Process)

(subclass Disseminating SocialInteraction)

(subclass Drinking BiologicalProcess)

(subclass Drinking Drinking)

(subclass Drinking Entity)

(subclass Drinking Ingesting)

(subclass Drinking InternalChange)

(subclass Drinking OrganismProcess)

(subclass Drinking Physical)

(subclass Drinking PhysiologicProcess)

(subclass Drinking Process)

(subclass Driving Driving)

(subclass Driving Entity)

(subclass Driving Guiding)

(subclass Driving IntentionalProcess)

(subclass Driving Physical)

(subclass Driving Process)

(subclass Drying Drying)

(subclass Drying Entity)

(subclass Drying Motion)

(subclass Drying Physical)

(subclass Drying Process)

(subclass Drying Removing)

(subclass Drying Transfer)

(subclass Drying Translocation)

(subclass DualObjectProcess DualObjectProcess)

(subclass DualObjectProcess Entity)

(subclass DualObjectProcess Physical)

(subclass DualObjectProcess Process)

(subclass Eating BiologicalProcess)

(subclass Eating Eating)

(subclass Eating Entity)

(subclass Eating Ingesting)

(subclass Eating InternalChange)

(subclass Eating OrganismProcess)

(subclass Eating Physical)

(subclass Eating PhysiologicProcess)

(subclass Eating Process)

(subclass EducationalOrganization Agent)

(subclass EducationalOrganization CognitiveAgent)

(subclass EducationalOrganization Collection)

(subclass EducationalOrganization EducationalOrganization)

(subclass EducationalOrganization Entity)

(subclass EducationalOrganization Group)

(subclass EducationalOrganization Object)

(subclass EducationalOrganization Organization)

(subclass EducationalOrganization Physical)

(subclass EducationalOrganization SentientAgent)

(subclass EducationalProcess EducationalProcess)

(subclass EducationalProcess Entity)

(subclass EducationalProcess Guiding)

(subclass EducationalProcess IntentionalProcess)

(subclass EducationalProcess Physical)

(subclass EducationalProcess Process)

(subclass Egg AnatomicalStructure)

(subclass Egg AnimalAnatomicalStructure)

(subclass Egg BodyPart)

(subclass Egg CorpuscularObject)

(subclass Egg Egg)

(subclass Egg Entity)

(subclass Egg Object)

(subclass Egg OrganicObject)

(subclass Egg Physical)

(subclass Egg ReproductiveBody)

(subclass Egg SelfConnectedObject)

(subclass Election Election)

(subclass Election Entity)

(subclass Election IntentionalProcess)

(subclass Election OrganizationalProcess)

(subclass Election Physical)

(subclass Election Process)

(subclass Electron Electron)

(subclass Electron ElementalSubstance)

(subclass Electron Entity)

(subclass Electron Object)

(subclass Electron Physical)

(subclass Electron PureSubstance)

(subclass Electron SelfConnectedObject)

(subclass Electron SubatomicParticle)

(subclass Electron Substance)

(subclass ElectronVolt Abstract)

(subclass ElectronVolt ElectronVolt)

(subclass ElectronVolt Entity)

(subclass ElectronVolt FunctionQuantity)

(subclass ElectronVolt PhysicalQuantity)

(subclass ElectronVolt Quantity)

(subclass ElementalSubstance ElementalSubstance)

(subclass ElementalSubstance Entity)

(subclass ElementalSubstance Object)

(subclass ElementalSubstance Physical)

(subclass ElementalSubstance PureSubstance)

(subclass ElementalSubstance SelfConnectedObject)

(subclass ElementalSubstance Substance)

(subclass EmotionalState Abstract)

(subclass EmotionalState Attribute)

(subclass EmotionalState BiologicalAttribute)

(subclass EmotionalState EmotionalState)

(subclass EmotionalState Entity)

(subclass EmotionalState InternalAttribute)

(subclass EmotionalState PsychologicalAttribute)

(subclass EmotionalState StateOfMind)

(subclass Encoding ContentDevelopment)

(subclass Encoding Encoding)

(subclass Encoding Entity)

(subclass Encoding IntentionalProcess)

(subclass Encoding Physical)

(subclass Encoding Process)

(subclass Encoding Writing)

(subclass EngineeringComponent Artifact)

(subclass EngineeringComponent CorpuscularObject)

(subclass EngineeringComponent Device)

(subclass EngineeringComponent EngineeringComponent)

(subclass EngineeringComponent Entity)

(subclass EngineeringComponent Object)

(subclass EngineeringComponent Physical)

(subclass EngineeringComponent SelfConnectedObject)

(subclass EngineeringConnection Artifact)

(subclass EngineeringConnection CorpuscularObject)

(subclass EngineeringConnection Device)

(subclass EngineeringConnection EngineeringComponent)

(subclass EngineeringConnection EngineeringConnection)

(subclass EngineeringConnection Entity)

(subclass EngineeringConnection Object)

(subclass EngineeringConnection Physical)

(subclass EngineeringConnection SelfConnectedObject)

(subclass Entity Entity)

(subclass Enzyme BiologicallyActiveSubstance)

(subclass Enzyme Entity)

(subclass Enzyme Enzyme)

(subclass Enzyme Nutrient)

(subclass Enzyme Object)

(subclass Enzyme Physical)

(subclass Enzyme Protein)

(subclass Enzyme SelfConnectedObject)

(subclass Enzyme Substance)

(subclass EquivalenceRelation Abstract)

(subclass EquivalenceRelation BinaryRelation)

(subclass EquivalenceRelation Entity)

(subclass EquivalenceRelation EquivalenceRelation)

(subclass EquivalenceRelation ReflexiveRelation)

(subclass EquivalenceRelation Relation)

(subclass EquivalenceRelation SymmetricRelation)

(subclass EquivalenceRelation TransitiveRelation)

(subclass EthnicGroup Agent)

(subclass EthnicGroup Collection)

(subclass EthnicGroup Entity)

(subclass EthnicGroup EthnicGroup)

(subclass EthnicGroup Group)

(subclass EthnicGroup GroupOfPeople)

(subclass EthnicGroup Object)

(subclass EthnicGroup Physical)

(subclass EuroCent Abstract)

(subclass EuroCent ConstantQuantity)

(subclass EuroCent CurrencyMeasure)

(subclass EuroCent Entity)

(subclass EuroCent EuroCent)

(subclass EuroCent PhysicalQuantity)

(subclass EuroCent Quantity)

(subclass EuroDollar Abstract)

(subclass EuroDollar ConstantQuantity)

(subclass EuroDollar CurrencyMeasure)

(subclass EuroDollar Entity)

(subclass EuroDollar EuroDollar)

(subclass EuroDollar PhysicalQuantity)

(subclass EuroDollar Quantity)

(subclass Evaporating Entity)

(subclass Evaporating Evaporating)

(subclass Evaporating InternalChange)

(subclass Evaporating Physical)

(subclass Evaporating Process)

(subclass Evaporating StateChange)

(subclass EvenInteger Abstract)

(subclass EvenInteger Entity)

(subclass EvenInteger EvenInteger)

(subclass EvenInteger Integer)

(subclass EvenInteger Number)

(subclass EvenInteger Quantity)

(subclass EvenInteger RationalNumber)

(subclass EvenInteger RealNumber)

(subclass Experimenting BiologicalProcess)

(subclass Experimenting Entity)

(subclass Experimenting Experimenting)

(subclass Experimenting IntentionalProcess)

(subclass Experimenting IntentionalPsychologicalProcess)

(subclass Experimenting InternalChange)

(subclass Experimenting Investigating)

(subclass Experimenting Physical)

(subclass Experimenting Process)

(subclass Experimenting PsychologicalProcess)

(subclass Explanation Abstract)

(subclass Explanation Argument)

(subclass Explanation DeductiveArgument)

(subclass Explanation Entity)

(subclass Explanation Explanation)

(subclass Explanation Proposition)

(subclass Expressing Communication)

(subclass Expressing ContentBearingPhysical)

(subclass Expressing ContentBearingProcess)

(subclass Expressing Entity)

(subclass Expressing Expressing)

(subclass Expressing IntentionalProcess)

(subclass Expressing Physical)

(subclass Expressing Process)

(subclass Expressing SocialInteraction)

(subclass Fabric Artifact)

(subclass Fabric CorpuscularObject)

(subclass Fabric Entity)

(subclass Fabric Fabric)

(subclass Fabric Object)

(subclass Fabric Physical)

(subclass Fabric SelfConnectedObject)

(subclass FactualText Artifact)

(subclass FactualText ContentBearingPhysical)

(subclass FactualText CorpuscularObject)

(subclass FactualText Entity)

(subclass FactualText FactualText)

(subclass FactualText LinguisticExpression)

(subclass FactualText Object)

(subclass FactualText Physical)

(subclass FactualText SelfConnectedObject)

(subclass FactualText Text)

(subclass FahrenheitDegree Abstract)

(subclass FahrenheitDegree ConstantQuantity)

(subclass FahrenheitDegree Entity)

(subclass FahrenheitDegree FahrenheitDegree)

(subclass FahrenheitDegree PhysicalQuantity)

(subclass FahrenheitDegree Quantity)

(subclass FahrenheitDegree TemperatureMeasure)

(subclass Falling Entity)

(subclass Falling Falling)

(subclass Falling Motion)

(subclass Falling MotionDownward)

(subclass Falling Physical)

(subclass Falling Process)

(subclass Falling Translocation)

(subclass FamilyGroup Agent)

(subclass FamilyGroup Collection)

(subclass FamilyGroup Entity)

(subclass FamilyGroup FamilyGroup)

(subclass FamilyGroup Group)

(subclass FamilyGroup GroupOfPeople)

(subclass FamilyGroup Object)

(subclass FamilyGroup Physical)

(subclass Farad Abstract)

(subclass Farad Entity)

(subclass Farad Farad)

(subclass Farad FunctionQuantity)

(subclass Farad PhysicalQuantity)

(subclass Farad Quantity)

(subclass FatTissue BodySubstance)

(subclass FatTissue Entity)

(subclass FatTissue FatTissue)

(subclass FatTissue Mixture)

(subclass FatTissue Object)

(subclass FatTissue Physical)

(subclass FatTissue SelfConnectedObject)

(subclass FatTissue Substance)

(subclass FatTissue Tissue)

(subclass February Abstract)

(subclass February ConstantQuantity)

(subclass February Entity)

(subclass February February)

(subclass February Month)

(subclass February PhysicalQuantity)

(subclass February Quantity)

(subclass February TimeInterval)

(subclass February TimeMeasure)

(subclass February TimePosition)

(subclass Feline Agent)

(subclass Feline Animal)

(subclass Feline Carnivore)

(subclass Feline CorpuscularObject)

(subclass Feline Entity)

(subclass Feline Feline)

(subclass Feline Mammal)

(subclass Feline Object)

(subclass Feline OrganicObject)

(subclass Feline Organism)

(subclass Feline Physical)

(subclass Feline SelfConnectedObject)

(subclass Feline Vertebrate)

(subclass Feline WarmBloodedVertebrate)

(subclass Fern Agent)

(subclass Fern CorpuscularObject)

(subclass Fern Entity)

(subclass Fern Fern)

(subclass Fern NonFloweringPlant)

(subclass Fern Object)

(subclass Fern OrganicObject)

(subclass Fern Organism)

(subclass Fern Physical)

(subclass Fern Plant)

(subclass Fern SelfConnectedObject)

(subclass FictionalText Artifact)

(subclass FictionalText ContentBearingPhysical)

(subclass FictionalText CorpuscularObject)

(subclass FictionalText Entity)

(subclass FictionalText FictionalText)

(subclass FictionalText LinguisticExpression)

(subclass FictionalText Object)

(subclass FictionalText Physical)

(subclass FictionalText SelfConnectedObject)

(subclass FictionalText Text)

(subclass FieldOfStudy Abstract)

(subclass FieldOfStudy Entity)

(subclass FieldOfStudy FieldOfStudy)

(subclass FieldOfStudy Proposition)

(subclass FinancialInstrument Artifact)

(subclass FinancialInstrument Certificate)

(subclass FinancialInstrument ContentBearingPhysical)

(subclass FinancialInstrument CorpuscularObject)

(subclass FinancialInstrument Entity)

(subclass FinancialInstrument FinancialInstrument)

(subclass FinancialInstrument LinguisticExpression)

(subclass FinancialInstrument Object)

(subclass FinancialInstrument Physical)

(subclass FinancialInstrument SelfConnectedObject)

(subclass FinancialInstrument Text)

(subclass FinancialTransaction ChangeOfPossession)

(subclass FinancialTransaction DualObjectProcess)

(subclass FinancialTransaction Entity)

(subclass FinancialTransaction FinancialTransaction)

(subclass FinancialTransaction IntentionalProcess)

(subclass FinancialTransaction Physical)

(subclass FinancialTransaction Process)

(subclass FinancialTransaction SocialInteraction)

(subclass FinancialTransaction Transaction)

(subclass FiniteSet Abstract)

(subclass FiniteSet Entity)

(subclass FiniteSet FiniteSet)

(subclass FiniteSet Set)

(subclass FiniteSet SetOrClass)

(subclass Fish Agent)

(subclass Fish Animal)

(subclass Fish ColdBloodedVertebrate)

(subclass Fish CorpuscularObject)

(subclass Fish Entity)

(subclass Fish Fish)

(subclass Fish Object)

(subclass Fish OrganicObject)

(subclass Fish Organism)

(subclass Fish Physical)

(subclass Fish SelfConnectedObject)

(subclass Fish Vertebrate)

(subclass FloweringPlant Agent)

(subclass FloweringPlant CorpuscularObject)

(subclass FloweringPlant Entity)

(subclass FloweringPlant FloweringPlant)

(subclass FloweringPlant Object)

(subclass FloweringPlant OrganicObject)

(subclass FloweringPlant Organism)

(subclass FloweringPlant Physical)

(subclass FloweringPlant Plant)

(subclass FloweringPlant SelfConnectedObject)

(subclass Food Entity)

(subclass Food Food)

(subclass Food Object)

(subclass Food Physical)

(subclass Food SelfConnectedObject)

(subclass FootLength Abstract)

(subclass FootLength ConstantQuantity)

(subclass FootLength Entity)

(subclass FootLength FootLength)

(subclass FootLength LengthMeasure)

(subclass FootLength PhysicalQuantity)

(subclass FootLength Quantity)

(subclass Formula ContentBearingPhysical)

(subclass Formula Entity)

(subclass Formula Formula)

(subclass Formula LinguisticExpression)

(subclass Formula Physical)

(subclass Formula Sentence)

(subclass Freezing Entity)

(subclass Freezing Freezing)

(subclass Freezing InternalChange)

(subclass Freezing Physical)

(subclass Freezing Process)

(subclass Freezing StateChange)

(subclass FreshWaterArea Entity)

(subclass FreshWaterArea FreshWaterArea)

(subclass FreshWaterArea GeographicArea)

(subclass FreshWaterArea Object)

(subclass FreshWaterArea Physical)

(subclass FreshWaterArea Region)

(subclass FreshWaterArea WaterArea)

(subclass Friday Abstract)

(subclass Friday ConstantQuantity)

(subclass Friday Day)

(subclass Friday Entity)

(subclass Friday Friday)

(subclass Friday PhysicalQuantity)

(subclass Friday Quantity)

(subclass Friday TimeInterval)

(subclass Friday TimeMeasure)

(subclass Friday TimePosition)

(subclass FruitOrVegetable AnatomicalStructure)

(subclass FruitOrVegetable BodyPart)

(subclass FruitOrVegetable CorpuscularObject)

(subclass FruitOrVegetable Entity)

(subclass FruitOrVegetable FruitOrVegetable)

(subclass FruitOrVegetable Object)

(subclass FruitOrVegetable OrganicObject)

(subclass FruitOrVegetable Physical)

(subclass FruitOrVegetable PlantAnatomicalStructure)

(subclass FruitOrVegetable ReproductiveBody)

(subclass FruitOrVegetable SelfConnectedObject)

(subclass Function Abstract)

(subclass Function Entity)

(subclass Function Function)

(subclass Function Relation)

(subclass Function SingleValuedRelation)

(subclass FunctionQuantity Abstract)

(subclass FunctionQuantity Entity)

(subclass FunctionQuantity FunctionQuantity)

(subclass FunctionQuantity PhysicalQuantity)

(subclass FunctionQuantity Quantity)

(subclass Funding ChangeOfPossession)

(subclass Funding Entity)

(subclass Funding Funding)

(subclass Funding Giving)

(subclass Funding IntentionalProcess)

(subclass Funding Physical)

(subclass Funding Process)

(subclass Funding SocialInteraction)

(subclass Fungus Agent)

(subclass Fungus CorpuscularObject)

(subclass Fungus Entity)

(subclass Fungus Fungus)

(subclass Fungus Object)

(subclass Fungus OrganicObject)

(subclass Fungus Organism)

(subclass Fungus Physical)

(subclass Fungus SelfConnectedObject)

(subclass Game Contest)

(subclass Game Entity)

(subclass Game Game)

(subclass Game IntentionalProcess)

(subclass Game Physical)

(subclass Game Process)

(subclass Game RecreationOrExercise)

(subclass Game SocialInteraction)

(subclass GasMixture Entity)

(subclass GasMixture GasMixture)

(subclass GasMixture Mixture)

(subclass GasMixture Object)

(subclass GasMixture Physical)

(subclass GasMixture SelfConnectedObject)

(subclass GasMixture Substance)

(subclass GasMotion Entity)

(subclass GasMotion GasMotion)

(subclass GasMotion Motion)

(subclass GasMotion Physical)

(subclass GasMotion Process)

(subclass GeographicArea Entity)

(subclass GeographicArea GeographicArea)

(subclass GeographicArea Object)

(subclass GeographicArea Physical)

(subclass GeographicArea Region)

(subclass GeologicalProcess Entity)

(subclass GeologicalProcess GeologicalProcess)

(subclass GeologicalProcess Motion)

(subclass GeologicalProcess Physical)

(subclass GeologicalProcess Process)

(subclass GeometricFigure Abstract)

(subclass GeometricFigure Attribute)

(subclass GeometricFigure Entity)

(subclass GeometricFigure GeometricFigure)

(subclass GeometricFigure InternalAttribute)

(subclass GeometricFigure ShapeAttribute)

(subclass GeometricPoint Abstract)

(subclass GeometricPoint Attribute)

(subclass GeometricPoint Entity)

(subclass GeometricPoint GeometricFigure)

(subclass GeometricPoint GeometricPoint)

(subclass GeometricPoint InternalAttribute)

(subclass GeometricPoint ShapeAttribute)

(subclass GeopoliticalArea Agent)

(subclass GeopoliticalArea Entity)

(subclass GeopoliticalArea GeographicArea)

(subclass GeopoliticalArea GeopoliticalArea)

(subclass GeopoliticalArea Object)

(subclass GeopoliticalArea Physical)

(subclass GeopoliticalArea Region)

(subclass Gesture BodyMotion)

(subclass Gesture Communication)

(subclass Gesture ContentBearingPhysical)

(subclass Gesture ContentBearingProcess)

(subclass Gesture Entity)

(subclass Gesture Gesture)

(subclass Gesture IntentionalProcess)

(subclass Gesture Motion)

(subclass Gesture Physical)

(subclass Gesture Process)

(subclass Gesture SocialInteraction)

(subclass Getting ChangeOfPossession)

(subclass Getting Entity)

(subclass Getting Getting)

(subclass Getting IntentionalProcess)

(subclass Getting Physical)

(subclass Getting Process)

(subclass Getting SocialInteraction)

(subclass Giving ChangeOfPossession)

(subclass Giving Entity)

(subclass Giving Giving)

(subclass Giving IntentionalProcess)

(subclass Giving Physical)

(subclass Giving Process)

(subclass Giving SocialInteraction)

(subclass GivingBack ChangeOfPossession)

(subclass GivingBack Entity)

(subclass GivingBack Giving)

(subclass GivingBack GivingBack)

(subclass GivingBack IntentionalProcess)

(subclass GivingBack Physical)

(subclass GivingBack Process)

(subclass GivingBack SocialInteraction)

(subclass Gland AnatomicalStructure)

(subclass Gland BodyPart)

(subclass Gland CorpuscularObject)

(subclass Gland Entity)

(subclass Gland Gland)

(subclass Gland Object)

(subclass Gland Organ)

(subclass Gland OrganicObject)

(subclass Gland Physical)

(subclass Gland SelfConnectedObject)

(subclass Government Agent)

(subclass Government CognitiveAgent)

(subclass Government Collection)

(subclass Government Entity)

(subclass Government Government)

(subclass Government GovernmentOrganization)

(subclass Government Group)

(subclass Government Object)

(subclass Government Organization)

(subclass Government Physical)

(subclass Government SentientAgent)

(subclass GovernmentOrganization Agent)

(subclass GovernmentOrganization CognitiveAgent)

(subclass GovernmentOrganization Collection)

(subclass GovernmentOrganization Entity)

(subclass GovernmentOrganization GovernmentOrganization)

(subclass GovernmentOrganization Group)

(subclass GovernmentOrganization Object)

(subclass GovernmentOrganization Organization)

(subclass GovernmentOrganization Physical)

(subclass GovernmentOrganization SentientAgent)

(subclass Grabbing Attaching)

(subclass Grabbing DualObjectProcess)

(subclass Grabbing Entity)

(subclass Grabbing Grabbing)

(subclass Grabbing Motion)

(subclass Grabbing Physical)

(subclass Grabbing Process)

(subclass Grabbing Touching)

(subclass Grabbing Transfer)

(subclass Grabbing Translocation)

(subclass Graduation Entity)

(subclass Graduation Graduation)

(subclass Graduation IntentionalProcess)

(subclass Graduation LeavingAnOrganization)

(subclass Graduation OrganizationalProcess)

(subclass Graduation Physical)

(subclass Graduation Process)

(subclass Gram Abstract)

(subclass Gram ConstantQuantity)

(subclass Gram Entity)

(subclass Gram Gram)

(subclass Gram MassMeasure)

(subclass Gram PhysicalQuantity)

(subclass Gram Quantity)

(subclass Graph Abstract)

(subclass Graph Entity)

(subclass Graph Graph)

(subclass GraphArc Abstract)

(subclass GraphArc Entity)

(subclass GraphArc GraphArc)

(subclass GraphArc GraphElement)

(subclass GraphCircuit Abstract)

(subclass GraphCircuit DirectedGraph)

(subclass GraphCircuit Entity)

(subclass GraphCircuit Graph)

(subclass GraphCircuit GraphCircuit)

(subclass GraphCircuit GraphPath)

(subclass GraphElement Abstract)

(subclass GraphElement Entity)

(subclass GraphElement GraphElement)

(subclass GraphLoop Abstract)

(subclass GraphLoop Entity)

(subclass GraphLoop GraphArc)

(subclass GraphLoop GraphElement)

(subclass GraphLoop GraphLoop)

(subclass GraphNode Abstract)

(subclass GraphNode Entity)

(subclass GraphNode GraphElement)

(subclass GraphNode GraphNode)

(subclass GraphPath Abstract)

(subclass GraphPath DirectedGraph)

(subclass GraphPath Entity)

(subclass GraphPath Graph)

(subclass GraphPath GraphPath)

(subclass Gray Abstract)

(subclass Gray Entity)

(subclass Gray FunctionQuantity)

(subclass Gray Gray)

(subclass Gray PhysicalQuantity)

(subclass Gray Quantity)

(subclass Group Agent)

(subclass Group Collection)

(subclass Group Entity)

(subclass Group Group)

(subclass Group Object)

(subclass Group Physical)

(subclass GroupOfPeople Agent)

(subclass GroupOfPeople Collection)

(subclass GroupOfPeople Entity)

(subclass GroupOfPeople Group)

(subclass GroupOfPeople GroupOfPeople)

(subclass GroupOfPeople Object)

(subclass GroupOfPeople Physical)

(subclass Growth AutonomicProcess)

(subclass Growth BiologicalProcess)

(subclass Growth Entity)

(subclass Growth Growth)

(subclass Growth InternalChange)

(subclass Growth Physical)

(subclass Growth PhysiologicProcess)

(subclass Growth Process)

(subclass Guiding Entity)

(subclass Guiding Guiding)

(subclass Guiding IntentionalProcess)

(subclass Guiding Physical)

(subclass Guiding Process)

(subclass Hearing BiologicalProcess)

(subclass Hearing Entity)

(subclass Hearing Hearing)

(subclass Hearing InternalChange)

(subclass Hearing Perception)

(subclass Hearing Physical)

(subclass Hearing Process)

(subclass Hearing PsychologicalProcess)

(subclass Heating Entity)

(subclass Heating Heating)

(subclass Heating Increasing)

(subclass Heating InternalChange)

(subclass Heating Physical)

(subclass Heating Process)

(subclass Heating QuantityChange)

(subclass Henry Abstract)

(subclass Henry Entity)

(subclass Henry FunctionQuantity)

(subclass Henry Henry)

(subclass Henry PhysicalQuantity)

(subclass Henry Quantity)

(subclass Hertz Abstract)

(subclass Hertz Entity)

(subclass Hertz FunctionQuantity)

(subclass Hertz Hertz)

(subclass Hertz PhysicalQuantity)

(subclass Hertz Quantity)

(subclass Hertz TimeDependentQuantity)

(subclass Hertz UnaryConstantFunctionQuantity)

(subclass Hiring Entity)

(subclass Hiring Hiring)

(subclass Hiring IntentionalProcess)

(subclass Hiring JoiningAnOrganization)

(subclass Hiring OrganizationalProcess)

(subclass Hiring Physical)

(subclass Hiring Process)

(subclass Hole Entity)

(subclass Hole Hole)

(subclass Hole Object)

(subclass Hole Physical)

(subclass Hole Region)

(subclass Hominid Agent)

(subclass Hominid Animal)

(subclass Hominid CorpuscularObject)

(subclass Hominid Entity)

(subclass Hominid Hominid)

(subclass Hominid Mammal)

(subclass Hominid Object)

(subclass Hominid OrganicObject)

(subclass Hominid Organism)

(subclass Hominid Physical)

(subclass Hominid Primate)

(subclass Hominid SelfConnectedObject)

(subclass Hominid Vertebrate)

(subclass Hominid WarmBloodedVertebrate)

(subclass HoofedMammal Agent)

(subclass HoofedMammal Animal)

(subclass HoofedMammal CorpuscularObject)

(subclass HoofedMammal Entity)

(subclass HoofedMammal HoofedMammal)

(subclass HoofedMammal Mammal)

(subclass HoofedMammal Object)

(subclass HoofedMammal OrganicObject)

(subclass HoofedMammal Organism)

(subclass HoofedMammal Physical)

(subclass HoofedMammal SelfConnectedObject)

(subclass HoofedMammal Vertebrate)

(subclass HoofedMammal WarmBloodedVertebrate)

(subclass Hormone BiologicallyActiveSubstance)

(subclass Hormone BodySubstance)

(subclass Hormone Entity)

(subclass Hormone Hormone)

(subclass Hormone Mixture)

(subclass Hormone Object)

(subclass Hormone Physical)

(subclass Hormone SelfConnectedObject)

(subclass Hormone Substance)

(subclass Hotel Agent)

(subclass Hotel Artifact)

(subclass Hotel Building)

(subclass Hotel CommercialAgent)

(subclass Hotel CorpuscularObject)

(subclass Hotel Entity)

(subclass Hotel Hotel)

(subclass Hotel Object)

(subclass Hotel Physical)

(subclass Hotel Residence)

(subclass Hotel ResidentialBuilding)

(subclass Hotel SelfConnectedObject)

(subclass Hotel StationaryArtifact)

(subclass Hotel TemporaryResidence)

(subclass Hour Abstract)

(subclass Hour ConstantQuantity)

(subclass Hour Entity)

(subclass Hour Hour)

(subclass Hour PhysicalQuantity)

(subclass Hour Quantity)

(subclass Hour TimeInterval)

(subclass Hour TimeMeasure)

(subclass Hour TimePosition)

(subclass HourDuration Abstract)

(subclass HourDuration ConstantQuantity)

(subclass HourDuration Entity)

(subclass HourDuration HourDuration)

(subclass HourDuration PhysicalQuantity)

(subclass HourDuration Quantity)

(subclass HourDuration TimeDuration)

(subclass HourDuration TimeMeasure)

(subclass Human Agent)

(subclass Human Animal)

(subclass Human CognitiveAgent)

(subclass Human CorpuscularObject)

(subclass Human Entity)

(subclass Human Hominid)

(subclass Human Human)

(subclass Human Mammal)

(subclass Human Object)

(subclass Human OrganicObject)

(subclass Human Organism)

(subclass Human Physical)

(subclass Human Primate)

(subclass Human SelfConnectedObject)

(subclass Human SentientAgent)

(subclass Human Vertebrate)

(subclass Human WarmBloodedVertebrate)

(subclass HumanLanguage ContentBearingPhysical)

(subclass HumanLanguage Entity)

(subclass HumanLanguage HumanLanguage)

(subclass HumanLanguage Language)

(subclass HumanLanguage LinguisticExpression)

(subclass HumanLanguage Physical)

(subclass Icon ContentBearingPhysical)

(subclass Icon Entity)

(subclass Icon Icon)

(subclass Icon Physical)

(subclass ImaginaryNumber Abstract)

(subclass ImaginaryNumber Entity)

(subclass ImaginaryNumber ImaginaryNumber)

(subclass ImaginaryNumber Number)

(subclass ImaginaryNumber Quantity)

(subclass Impacting Entity)

(subclass Impacting Impacting)

(subclass Impacting Motion)

(subclass Impacting Physical)

(subclass Impacting Process)

(subclass Impacting Touching)

(subclass Impacting Transfer)

(subclass Impacting Translocation)

(subclass Impelling Entity)

(subclass Impelling Impelling)

(subclass Impelling Motion)

(subclass Impelling Physical)

(subclass Impelling Process)

(subclass Impelling Transfer)

(subclass Impelling Translocation)

(subclass Inch Abstract)

(subclass Inch ConstantQuantity)

(subclass Inch Entity)

(subclass Inch Inch)

(subclass Inch LengthMeasure)

(subclass Inch PhysicalQuantity)

(subclass Inch Quantity)

(subclass Increasing Entity)

(subclass Increasing Increasing)

(subclass Increasing InternalChange)

(subclass Increasing Physical)

(subclass Increasing Process)

(subclass Increasing QuantityChange)

(subclass InductiveArgument Abstract)

(subclass InductiveArgument Argument)

(subclass InductiveArgument Entity)

(subclass InductiveArgument InductiveArgument)

(subclass InductiveArgument Proposition)

(subclass InformationMeasure Abstract)

(subclass InformationMeasure ConstantQuantity)

(subclass InformationMeasure Entity)

(subclass InformationMeasure InformationMeasure)

(subclass InformationMeasure PhysicalQuantity)

(subclass InformationMeasure Quantity)

(subclass Ingesting BiologicalProcess)

(subclass Ingesting Entity)

(subclass Ingesting Ingesting)

(subclass Ingesting InternalChange)

(subclass Ingesting OrganismProcess)

(subclass Ingesting Physical)

(subclass Ingesting PhysiologicProcess)

(subclass Ingesting Process)

(subclass Injecting Entity)

(subclass Injecting Injecting)

(subclass Injecting Inserting)

(subclass Injecting Motion)

(subclass Injecting Physical)

(subclass Injecting Process)

(subclass Injecting Putting)

(subclass Injecting Transfer)

(subclass Injecting Translocation)

(subclass Injuring BiologicalProcess)

(subclass Injuring Damaging)

(subclass Injuring Entity)

(subclass Injuring Injuring)

(subclass Injuring InternalChange)

(subclass Injuring PathologicProcess)

(subclass Injuring Physical)

(subclass Injuring Process)

(subclass Insect Agent)

(subclass Insect Animal)

(subclass Insect Arthropod)

(subclass Insect CorpuscularObject)

(subclass Insect Entity)

(subclass Insect Insect)

(subclass Insect Invertebrate)

(subclass Insect Object)

(subclass Insect OrganicObject)

(subclass Insect Organism)

(subclass Insect Physical)

(subclass Insect SelfConnectedObject)

(subclass Inserting Entity)

(subclass Inserting Inserting)

(subclass Inserting Motion)

(subclass Inserting Physical)

(subclass Inserting Process)

(subclass Inserting Putting)

(subclass Inserting Transfer)

(subclass Inserting Translocation)

(subclass Integer Abstract)

(subclass Integer Entity)

(subclass Integer Integer)

(subclass Integer Number)

(subclass Integer Quantity)

(subclass Integer RationalNumber)

(subclass Integer RealNumber)

(subclass IntentionalProcess Entity)

(subclass IntentionalProcess IntentionalProcess)

(subclass IntentionalProcess Physical)

(subclass IntentionalProcess Process)

(subclass IntentionalPsychologicalProcess BiologicalProcess)

(subclass IntentionalPsychologicalProcess Entity)

(subclass IntentionalPsychologicalProcess IntentionalProcess)

(subclass IntentionalPsychologicalProcess IntentionalPsychologicalProcess)

(subclass IntentionalPsychologicalProcess InternalChange)

(subclass IntentionalPsychologicalProcess Physical)

(subclass IntentionalPsychologicalProcess Process)

(subclass IntentionalPsychologicalProcess PsychologicalProcess)

(subclass IntentionalRelation Abstract)

(subclass IntentionalRelation Entity)

(subclass IntentionalRelation IntentionalRelation)

(subclass IntentionalRelation Relation)

(subclass InternalAttribute Abstract)

(subclass InternalAttribute Attribute)

(subclass InternalAttribute Entity)

(subclass InternalAttribute InternalAttribute)

(subclass InternalChange Entity)

(subclass InternalChange InternalChange)

(subclass InternalChange Physical)

(subclass InternalChange Process)

(subclass Interpreting BiologicalProcess)

(subclass Interpreting Entity)

(subclass Interpreting IntentionalProcess)

(subclass Interpreting IntentionalPsychologicalProcess)

(subclass Interpreting InternalChange)

(subclass Interpreting Interpreting)

(subclass Interpreting Physical)

(subclass Interpreting Process)

(subclass Interpreting PsychologicalProcess)

(subclass IntransitiveRelation Abstract)

(subclass IntransitiveRelation BinaryRelation)

(subclass IntransitiveRelation Entity)

(subclass IntransitiveRelation IntransitiveRelation)

(subclass IntransitiveRelation Relation)

(subclass InvalidDeductiveArgument Abstract)

(subclass InvalidDeductiveArgument Argument)

(subclass InvalidDeductiveArgument DeductiveArgument)

(subclass InvalidDeductiveArgument Entity)

(subclass InvalidDeductiveArgument InvalidDeductiveArgument)

(subclass InvalidDeductiveArgument Proposition)

(subclass Invertebrate Agent)

(subclass Invertebrate Animal)

(subclass Invertebrate CorpuscularObject)

(subclass Invertebrate Entity)

(subclass Invertebrate Invertebrate)

(subclass Invertebrate Object)

(subclass Invertebrate OrganicObject)

(subclass Invertebrate Organism)

(subclass Invertebrate Physical)

(subclass Invertebrate SelfConnectedObject)

(subclass Investigating BiologicalProcess)

(subclass Investigating Entity)

(subclass Investigating IntentionalProcess)

(subclass Investigating IntentionalPsychologicalProcess)

(subclass Investigating InternalChange)

(subclass Investigating Investigating)

(subclass Investigating Physical)

(subclass Investigating Process)

(subclass Investigating PsychologicalProcess)

(subclass IrrationalNumber Abstract)

(subclass IrrationalNumber Entity)

(subclass IrrationalNumber IrrationalNumber)

(subclass IrrationalNumber Number)

(subclass IrrationalNumber Quantity)

(subclass IrrationalNumber RealNumber)

(subclass IrreflexiveRelation Abstract)

(subclass IrreflexiveRelation BinaryRelation)

(subclass IrreflexiveRelation Entity)

(subclass IrreflexiveRelation IrreflexiveRelation)

(subclass IrreflexiveRelation Relation)

(subclass Island Entity)

(subclass Island GeographicArea)

(subclass Island Island)

(subclass Island LandArea)

(subclass Island Object)

(subclass Island Physical)

(subclass Island Region)

(subclass January Abstract)

(subclass January ConstantQuantity)

(subclass January Entity)

(subclass January January)

(subclass January Month)

(subclass January PhysicalQuantity)

(subclass January Quantity)

(subclass January TimeInterval)

(subclass January TimeMeasure)

(subclass January TimePosition)

(subclass JoiningAnOrganization Entity)

(subclass JoiningAnOrganization IntentionalProcess)

(subclass JoiningAnOrganization JoiningAnOrganization)

(subclass JoiningAnOrganization OrganizationalProcess)

(subclass JoiningAnOrganization Physical)

(subclass JoiningAnOrganization Process)

(subclass Joule Abstract)

(subclass Joule Entity)

(subclass Joule FunctionQuantity)

(subclass Joule Joule)

(subclass Joule PhysicalQuantity)

(subclass Joule Quantity)

(subclass Judging BiologicalProcess)

(subclass Judging Entity)

(subclass Judging IntentionalProcess)

(subclass Judging IntentionalPsychologicalProcess)

(subclass Judging InternalChange)

(subclass Judging Judging)

(subclass Judging Physical)

(subclass Judging Process)

(subclass Judging PsychologicalProcess)

(subclass Judging Selecting)

(subclass JudicialOrganization Agent)

(subclass JudicialOrganization CognitiveAgent)

(subclass JudicialOrganization Collection)

(subclass JudicialOrganization Entity)

(subclass JudicialOrganization Group)

(subclass JudicialOrganization JudicialOrganization)

(subclass JudicialOrganization Object)

(subclass JudicialOrganization Organization)

(subclass JudicialOrganization Physical)

(subclass JudicialOrganization SentientAgent)

(subclass JudicialProcess Entity)

(subclass JudicialProcess IntentionalProcess)

(subclass JudicialProcess JudicialProcess)

(subclass JudicialProcess OrganizationalProcess)

(subclass JudicialProcess Physical)

(subclass JudicialProcess PoliticalProcess)

(subclass JudicialProcess Process)

(subclass July Abstract)

(subclass July ConstantQuantity)

(subclass July Entity)

(subclass July July)

(subclass July Month)

(subclass July PhysicalQuantity)

(subclass July Quantity)

(subclass July TimeInterval)

(subclass July TimeMeasure)

(subclass July TimePosition)

(subclass June Abstract)

(subclass June ConstantQuantity)

(subclass June Entity)

(subclass June June)

(subclass June Month)

(subclass June PhysicalQuantity)

(subclass June Quantity)

(subclass June TimeInterval)

(subclass June TimeMeasure)

(subclass June TimePosition)

(subclass Keeping Entity)

(subclass Keeping IntentionalProcess)

(subclass Keeping Keeping)

(subclass Keeping Physical)

(subclass Keeping Process)

(subclass KelvinDegree Abstract)

(subclass KelvinDegree ConstantQuantity)

(subclass KelvinDegree Entity)

(subclass KelvinDegree KelvinDegree)

(subclass KelvinDegree PhysicalQuantity)

(subclass KelvinDegree Quantity)

(subclass KelvinDegree TemperatureMeasure)

(subclass Killing Damaging)

(subclass Killing Destruction)

(subclass Killing Entity)

(subclass Killing InternalChange)

(subclass Killing Killing)

(subclass Killing Physical)

(subclass Killing Process)

(subclass KiloByte Abstract)

(subclass KiloByte ConstantQuantity)

(subclass KiloByte Entity)

(subclass KiloByte InformationMeasure)

(subclass KiloByte KiloByte)

(subclass KiloByte PhysicalQuantity)

(subclass KiloByte Quantity)

(subclass Kilogram Abstract)

(subclass Kilogram ConstantQuantity)

(subclass Kilogram Entity)

(subclass Kilogram Kilogram)

(subclass Kilogram MassMeasure)

(subclass Kilogram PhysicalQuantity)

(subclass Kilogram Quantity)

(subclass Kilometer Abstract)

(subclass Kilometer ConstantQuantity)

(subclass Kilometer Entity)

(subclass Kilometer Kilometer)

(subclass Kilometer LengthMeasure)

(subclass Kilometer PhysicalQuantity)

(subclass Kilometer Quantity)

(subclass LandArea Entity)

(subclass LandArea GeographicArea)

(subclass LandArea LandArea)

(subclass LandArea Object)

(subclass LandArea Physical)

(subclass LandArea Region)

(subclass LandTransitway Entity)

(subclass LandTransitway GeographicArea)

(subclass LandTransitway LandArea)

(subclass LandTransitway LandTransitway)

(subclass LandTransitway Object)

(subclass LandTransitway Physical)

(subclass LandTransitway Region)

(subclass LandTransitway SelfConnectedObject)

(subclass LandTransitway Transitway)

(subclass Language ContentBearingPhysical)

(subclass Language Entity)

(subclass Language Language)

(subclass Language LinguisticExpression)

(subclass Language Physical)

(subclass LeapYear Abstract)

(subclass LeapYear ConstantQuantity)

(subclass LeapYear Entity)

(subclass LeapYear LeapYear)

(subclass LeapYear PhysicalQuantity)

(subclass LeapYear Quantity)

(subclass LeapYear TimeInterval)

(subclass LeapYear TimeMeasure)

(subclass LeapYear TimePosition)

(subclass LeapYear Year)

(subclass Learning BiologicalProcess)

(subclass Learning Entity)

(subclass Learning IntentionalProcess)

(subclass Learning IntentionalPsychologicalProcess)

(subclass Learning InternalChange)

(subclass Learning Learning)

(subclass Learning Physical)

(subclass Learning Process)

(subclass Learning PsychologicalProcess)

(subclass LeavingAnOrganization Entity)

(subclass LeavingAnOrganization IntentionalProcess)

(subclass LeavingAnOrganization LeavingAnOrganization)

(subclass LeavingAnOrganization OrganizationalProcess)

(subclass LeavingAnOrganization Physical)

(subclass LeavingAnOrganization Process)

(subclass LegalAction Contest)

(subclass LegalAction Entity)

(subclass LegalAction IntentionalProcess)

(subclass LegalAction LegalAction)

(subclass LegalAction Physical)

(subclass LegalAction Process)

(subclass LegalAction SocialInteraction)

(subclass LegalDecision Communication)

(subclass LegalDecision ContentBearingPhysical)

(subclass LegalDecision ContentBearingProcess)

(subclass LegalDecision Declaring)

(subclass LegalDecision Entity)

(subclass LegalDecision IntentionalProcess)

(subclass LegalDecision JudicialProcess)

(subclass LegalDecision LegalDecision)

(subclass LegalDecision LinguisticCommunication)

(subclass LegalDecision OrganizationalProcess)

(subclass LegalDecision Physical)

(subclass LegalDecision PoliticalProcess)

(subclass LegalDecision Process)

(subclass LegalDecision SocialInteraction)

(subclass Lending ChangeOfPossession)

(subclass Lending Entity)

(subclass Lending Giving)

(subclass Lending IntentionalProcess)

(subclass Lending Lending)

(subclass Lending Physical)

(subclass Lending Process)

(subclass Lending SocialInteraction)

(subclass LengthMeasure Abstract)

(subclass LengthMeasure ConstantQuantity)

(subclass LengthMeasure Entity)

(subclass LengthMeasure LengthMeasure)

(subclass LengthMeasure PhysicalQuantity)

(subclass LengthMeasure Quantity)

(subclass LinguisticCommunication Communication)

(subclass LinguisticCommunication ContentBearingPhysical)

(subclass LinguisticCommunication ContentBearingProcess)

(subclass LinguisticCommunication Entity)

(subclass LinguisticCommunication IntentionalProcess)

(subclass LinguisticCommunication LinguisticCommunication)

(subclass LinguisticCommunication Physical)

(subclass LinguisticCommunication Process)

(subclass LinguisticCommunication SocialInteraction)

(subclass LinguisticExpression ContentBearingPhysical)

(subclass LinguisticExpression Entity)

(subclass LinguisticExpression LinguisticExpression)

(subclass LinguisticExpression Physical)

(subclass LiquidMixture Entity)

(subclass LiquidMixture LiquidMixture)

(subclass LiquidMixture Mixture)

(subclass LiquidMixture Object)

(subclass LiquidMixture Physical)

(subclass LiquidMixture SelfConnectedObject)

(subclass LiquidMixture Substance)

(subclass LiquidMotion Entity)

(subclass LiquidMotion LiquidMotion)

(subclass LiquidMotion Motion)

(subclass LiquidMotion Physical)

(subclass LiquidMotion Process)

(subclass List Abstract)

(subclass List Entity)

(subclass List List)

(subclass List Relation)

(subclass Listening BiologicalProcess)

(subclass Listening Entity)

(subclass Listening Hearing)

(subclass Listening IntentionalProcess)

(subclass Listening InternalChange)

(subclass Listening Listening)

(subclass Listening Perception)

(subclass Listening Physical)

(subclass Listening Process)

(subclass Listening PsychologicalProcess)

(subclass Liter Abstract)

(subclass Liter ConstantQuantity)

(subclass Liter Entity)

(subclass Liter Liter)

(subclass Liter PhysicalQuantity)

(subclass Liter Quantity)

(subclass Liter VolumeMeasure)

(subclass LogicalOperator Abstract)

(subclass LogicalOperator Entity)

(subclass LogicalOperator LogicalOperator)

(subclass LogicalOperator Predicate)

(subclass LogicalOperator Relation)

(subclass Looking BiologicalProcess)

(subclass Looking Entity)

(subclass Looking IntentionalProcess)

(subclass Looking InternalChange)

(subclass Looking Looking)

(subclass Looking Perception)

(subclass Looking Physical)

(subclass Looking Process)

(subclass Looking PsychologicalProcess)

(subclass Looking Seeing)

(subclass Lumen Abstract)

(subclass Lumen Entity)

(subclass Lumen FunctionQuantity)

(subclass Lumen Lumen)

(subclass Lumen PhysicalQuantity)

(subclass Lumen Quantity)

(subclass Lux Abstract)

(subclass Lux Entity)

(subclass Lux FunctionQuantity)

(subclass Lux Lux)

(subclass Lux PhysicalQuantity)

(subclass Lux Quantity)

(subclass Machine Artifact)

(subclass Machine CorpuscularObject)

(subclass Machine Device)

(subclass Machine Entity)

(subclass Machine Machine)

(subclass Machine Object)

(subclass Machine Physical)

(subclass Machine SelfConnectedObject)

(subclass Maintaining Entity)

(subclass Maintaining IntentionalProcess)

(subclass Maintaining Maintaining)

(subclass Maintaining Physical)

(subclass Maintaining Process)

(subclass Making Creation)

(subclass Making Entity)

(subclass Making IntentionalProcess)

(subclass Making InternalChange)

(subclass Making Making)

(subclass Making Physical)

(subclass Making Process)

(subclass Mammal Agent)

(subclass Mammal Animal)

(subclass Mammal CorpuscularObject)

(subclass Mammal Entity)

(subclass Mammal Mammal)

(subclass Mammal Object)

(subclass Mammal OrganicObject)

(subclass Mammal Organism)

(subclass Mammal Physical)

(subclass Mammal SelfConnectedObject)

(subclass Mammal Vertebrate)

(subclass Mammal WarmBloodedVertebrate)

(subclass Man Agent)

(subclass Man Animal)

(subclass Man CognitiveAgent)

(subclass Man CorpuscularObject)

(subclass Man Entity)

(subclass Man Hominid)

(subclass Man Human)

(subclass Man Mammal)

(subclass Man Man)

(subclass Man Object)

(subclass Man OrganicObject)

(subclass Man Organism)

(subclass Man Physical)

(subclass Man Primate)

(subclass Man SelfConnectedObject)

(subclass Man SentientAgent)

(subclass Man Vertebrate)

(subclass Man WarmBloodedVertebrate)

(subclass Managing Entity)

(subclass Managing Guiding)

(subclass Managing IntentionalProcess)

(subclass Managing Managing)

(subclass Managing OrganizationalProcess)

(subclass Managing Physical)

(subclass Managing Process)

(subclass Maneuver Entity)

(subclass Maneuver IntentionalProcess)

(subclass Maneuver Maneuver)

(subclass Maneuver Physical)

(subclass Maneuver Process)

(subclass ManualHumanLanguage ContentBearingPhysical)

(subclass ManualHumanLanguage Entity)

(subclass ManualHumanLanguage HumanLanguage)

(subclass ManualHumanLanguage Language)

(subclass ManualHumanLanguage LinguisticExpression)

(subclass ManualHumanLanguage ManualHumanLanguage)

(subclass ManualHumanLanguage Physical)

(subclass Manufacture Creation)

(subclass Manufacture Entity)

(subclass Manufacture IntentionalProcess)

(subclass Manufacture InternalChange)

(subclass Manufacture Making)

(subclass Manufacture Manufacture)

(subclass Manufacture Physical)

(subclass Manufacture Process)

(subclass Manufacturer Agent)

(subclass Manufacturer CognitiveAgent)

(subclass Manufacturer Collection)

(subclass Manufacturer CommercialAgent)

(subclass Manufacturer Corporation)

(subclass Manufacturer Entity)

(subclass Manufacturer Group)

(subclass Manufacturer Manufacturer)

(subclass Manufacturer Object)

(subclass Manufacturer Organization)

(subclass Manufacturer Physical)

(subclass Manufacturer SentientAgent)

(subclass March Abstract)

(subclass March ConstantQuantity)

(subclass March Entity)

(subclass March March)

(subclass March Month)

(subclass March PhysicalQuantity)

(subclass March Quantity)

(subclass March TimeInterval)

(subclass March TimeMeasure)

(subclass March TimePosition)

(subclass Marsupial Agent)

(subclass Marsupial Animal)

(subclass Marsupial CorpuscularObject)

(subclass Marsupial Entity)

(subclass Marsupial Mammal)

(subclass Marsupial Marsupial)

(subclass Marsupial Object)

(subclass Marsupial OrganicObject)

(subclass Marsupial Organism)

(subclass Marsupial Physical)

(subclass Marsupial SelfConnectedObject)

(subclass Marsupial Vertebrate)

(subclass Marsupial WarmBloodedVertebrate)

(subclass MassMeasure Abstract)

(subclass MassMeasure ConstantQuantity)

(subclass MassMeasure Entity)

(subclass MassMeasure MassMeasure)

(subclass MassMeasure PhysicalQuantity)

(subclass MassMeasure Quantity)

(subclass Matriculation Entity)

(subclass Matriculation IntentionalProcess)

(subclass Matriculation JoiningAnOrganization)

(subclass Matriculation Matriculation)

(subclass Matriculation OrganizationalProcess)

(subclass Matriculation Physical)

(subclass Matriculation Process)

(subclass May Abstract)

(subclass May ConstantQuantity)

(subclass May Entity)

(subclass May May)

(subclass May Month)

(subclass May PhysicalQuantity)

(subclass May Quantity)

(subclass May TimeInterval)

(subclass May TimeMeasure)

(subclass May TimePosition)

(subclass Measuring BiologicalProcess)

(subclass Measuring Calculating)

(subclass Measuring Entity)

(subclass Measuring IntentionalProcess)

(subclass Measuring IntentionalPsychologicalProcess)

(subclass Measuring InternalChange)

(subclass Measuring Measuring)

(subclass Measuring Physical)

(subclass Measuring Process)

(subclass Measuring PsychologicalProcess)

(subclass MeasuringDevice Artifact)

(subclass MeasuringDevice CorpuscularObject)

(subclass MeasuringDevice Device)

(subclass MeasuringDevice Entity)

(subclass MeasuringDevice MeasuringDevice)

(subclass MeasuringDevice Object)

(subclass MeasuringDevice Physical)

(subclass MeasuringDevice SelfConnectedObject)

(subclass Meat Entity)

(subclass Meat Food)

(subclass Meat Meat)

(subclass Meat Object)

(subclass Meat Physical)

(subclass Meat SelfConnectedObject)

(subclass Meeting Entity)

(subclass Meeting IntentionalProcess)

(subclass Meeting Meeting)

(subclass Meeting Physical)

(subclass Meeting Process)

(subclass Meeting SocialInteraction)

(subclass MegaByte Abstract)

(subclass MegaByte ConstantQuantity)

(subclass MegaByte Entity)

(subclass MegaByte InformationMeasure)

(subclass MegaByte MegaByte)

(subclass MegaByte PhysicalQuantity)

(subclass MegaByte Quantity)

(subclass Melting Entity)

(subclass Melting InternalChange)

(subclass Melting Melting)

(subclass Melting Physical)

(subclass Melting Process)

(subclass Melting StateChange)

(subclass MercantileOrganization Agent)

(subclass MercantileOrganization CognitiveAgent)

(subclass MercantileOrganization Collection)

(subclass MercantileOrganization CommercialAgent)

(subclass MercantileOrganization Corporation)

(subclass MercantileOrganization Entity)

(subclass MercantileOrganization Group)

(subclass MercantileOrganization MercantileOrganization)

(subclass MercantileOrganization Object)

(subclass MercantileOrganization Organization)

(subclass MercantileOrganization Physical)

(subclass MercantileOrganization SentientAgent)

(subclass Metal ElementalSubstance)

(subclass Metal Entity)

(subclass Metal Metal)

(subclass Metal Object)

(subclass Metal Physical)

(subclass Metal PureSubstance)

(subclass Metal SelfConnectedObject)

(subclass Metal Substance)

(subclass Meter Abstract)

(subclass Meter ConstantQuantity)

(subclass Meter Entity)

(subclass Meter LengthMeasure)

(subclass Meter Meter)

(subclass Meter PhysicalQuantity)

(subclass Meter Quantity)

(subclass Microorganism Agent)

(subclass Microorganism CorpuscularObject)

(subclass Microorganism Entity)

(subclass Microorganism Microorganism)

(subclass Microorganism Object)

(subclass Microorganism OrganicObject)

(subclass Microorganism Organism)

(subclass Microorganism Physical)

(subclass Microorganism SelfConnectedObject)

(subclass Mile Abstract)

(subclass Mile ConstantQuantity)

(subclass Mile Entity)

(subclass Mile LengthMeasure)

(subclass Mile Mile)

(subclass Mile PhysicalQuantity)

(subclass Mile Quantity)

(subclass MilitaryForce Agent)

(subclass MilitaryForce CognitiveAgent)

(subclass MilitaryForce Collection)

(subclass MilitaryForce Entity)

(subclass MilitaryForce Group)

(subclass MilitaryForce MilitaryForce)

(subclass MilitaryForce Object)

(subclass MilitaryForce Organization)

(subclass MilitaryForce Physical)

(subclass MilitaryForce PoliticalOrganization)

(subclass MilitaryForce SentientAgent)

(subclass MilitaryOrganization Agent)

(subclass MilitaryOrganization CognitiveAgent)

(subclass MilitaryOrganization Collection)

(subclass MilitaryOrganization Entity)

(subclass MilitaryOrganization GovernmentOrganization)

(subclass MilitaryOrganization Group)

(subclass MilitaryOrganization MilitaryForce)

(subclass MilitaryOrganization MilitaryOrganization)

(subclass MilitaryOrganization Object)

(subclass MilitaryOrganization Organization)

(subclass MilitaryOrganization Physical)

(subclass MilitaryOrganization PoliticalOrganization)

(subclass MilitaryOrganization SentientAgent)

(subclass MilitaryProcess Entity)

(subclass MilitaryProcess IntentionalProcess)

(subclass MilitaryProcess MilitaryProcess)

(subclass MilitaryProcess OrganizationalProcess)

(subclass MilitaryProcess Physical)

(subclass MilitaryProcess PoliticalProcess)

(subclass MilitaryProcess Process)

(subclass Millimeter Abstract)

(subclass Millimeter ConstantQuantity)

(subclass Millimeter Entity)

(subclass Millimeter LengthMeasure)

(subclass Millimeter Millimeter)

(subclass Millimeter PhysicalQuantity)

(subclass Millimeter Quantity)

(subclass Mineral Entity)

(subclass Mineral Mineral)

(subclass Mineral Object)

(subclass Mineral Physical)

(subclass Mineral SelfConnectedObject)

(subclass Mineral Substance)

(subclass Minute Abstract)

(subclass Minute ConstantQuantity)

(subclass Minute Entity)

(subclass Minute Minute)

(subclass Minute PhysicalQuantity)

(subclass Minute Quantity)

(subclass Minute TimeInterval)

(subclass Minute TimeMeasure)

(subclass Minute TimePosition)

(subclass MinuteDuration Abstract)

(subclass MinuteDuration ConstantQuantity)

(subclass MinuteDuration Entity)

(subclass MinuteDuration MinuteDuration)

(subclass MinuteDuration PhysicalQuantity)

(subclass MinuteDuration Quantity)

(subclass MinuteDuration TimeDuration)

(subclass MinuteDuration TimeMeasure)

(subclass Mixture Entity)

(subclass Mixture Mixture)

(subclass Mixture Object)

(subclass Mixture Physical)

(subclass Mixture SelfConnectedObject)

(subclass Mixture Substance)

(subclass Mole Abstract)

(subclass Mole ConstantQuantity)

(subclass Mole Entity)

(subclass Mole MassMeasure)

(subclass Mole Mole)

(subclass Mole PhysicalQuantity)

(subclass Mole Quantity)

(subclass Molecule CompoundSubstance)

(subclass Molecule Entity)

(subclass Molecule Molecule)

(subclass Molecule Object)

(subclass Molecule Physical)

(subclass Molecule PureSubstance)

(subclass Molecule SelfConnectedObject)

(subclass Molecule Substance)

(subclass Mollusk Agent)

(subclass Mollusk Animal)

(subclass Mollusk CorpuscularObject)

(subclass Mollusk Entity)

(subclass Mollusk Invertebrate)

(subclass Mollusk Mollusk)

(subclass Mollusk Object)

(subclass Mollusk OrganicObject)

(subclass Mollusk Organism)

(subclass Mollusk Physical)

(subclass Mollusk SelfConnectedObject)

(subclass Monday Abstract)

(subclass Monday ConstantQuantity)

(subclass Monday Day)

(subclass Monday Entity)

(subclass Monday Monday)

(subclass Monday PhysicalQuantity)

(subclass Monday Quantity)

(subclass Monday TimeInterval)

(subclass Monday TimeMeasure)

(subclass Monday TimePosition)

(subclass Monkey Agent)

(subclass Monkey Animal)

(subclass Monkey CorpuscularObject)

(subclass Monkey Entity)

(subclass Monkey Mammal)

(subclass Monkey Monkey)

(subclass Monkey Object)

(subclass Monkey OrganicObject)

(subclass Monkey Organism)

(subclass Monkey Physical)

(subclass Monkey Primate)

(subclass Monkey SelfConnectedObject)

(subclass Monkey Vertebrate)

(subclass Monkey WarmBloodedVertebrate)

(subclass Month Abstract)

(subclass Month ConstantQuantity)

(subclass Month Entity)

(subclass Month Month)

(subclass Month PhysicalQuantity)

(subclass Month Quantity)

(subclass Month TimeInterval)

(subclass Month TimeMeasure)

(subclass Month TimePosition)

(subclass MonthDuration Abstract)

(subclass MonthDuration ConstantQuantity)

(subclass MonthDuration Entity)

(subclass MonthDuration MonthDuration)

(subclass MonthDuration PhysicalQuantity)

(subclass MonthDuration Quantity)

(subclass MonthDuration TimeDuration)

(subclass MonthDuration TimeMeasure)

(subclass Morpheme ContentBearingPhysical)

(subclass Morpheme Entity)

(subclass Morpheme LinguisticExpression)

(subclass Morpheme Morpheme)

(subclass Morpheme Physical)

(subclass Moss Agent)

(subclass Moss CorpuscularObject)

(subclass Moss Entity)

(subclass Moss Moss)

(subclass Moss NonFloweringPlant)

(subclass Moss Object)

(subclass Moss OrganicObject)

(subclass Moss Organism)

(subclass Moss Physical)

(subclass Moss Plant)

(subclass Moss SelfConnectedObject)

(subclass Motion Entity)

(subclass Motion Motion)

(subclass Motion Physical)

(subclass Motion Process)

(subclass MotionDownward MotionDownward)

(subclass MotionPicture Artifact)

(subclass MotionPicture ContentBearingPhysical)

(subclass MotionPicture CorpuscularObject)

(subclass MotionPicture Entity)

(subclass MotionPicture LinguisticExpression)

(subclass MotionPicture MotionPicture)

(subclass MotionPicture Object)

(subclass MotionPicture Physical)

(subclass MotionPicture SelfConnectedObject)

(subclass MotionPicture Text)

(subclass MultiGraph Abstract)

(subclass MultiGraph Entity)

(subclass MultiGraph Graph)

(subclass MultiGraph MultiGraph)

(subclass Muscle AnimalSubstance)

(subclass Muscle BodySubstance)

(subclass Muscle Entity)

(subclass Muscle Mixture)

(subclass Muscle Muscle)

(subclass Muscle Object)

(subclass Muscle Physical)

(subclass Muscle SelfConnectedObject)

(subclass Muscle Substance)

(subclass Muscle Tissue)

(subclass Music Entity)

(subclass Music Motion)

(subclass Music Music)

(subclass Music Physical)

(subclass Music Process)

(subclass Music Radiating)

(subclass Music RadiatingSound)

(subclass MusicalInstrument Artifact)

(subclass MusicalInstrument CorpuscularObject)

(subclass MusicalInstrument Device)

(subclass MusicalInstrument Entity)

(subclass MusicalInstrument MusicalInstrument)

(subclass MusicalInstrument Object)

(subclass MusicalInstrument Physical)

(subclass MusicalInstrument SelfConnectedObject)

(subclass MutuallyDisjointClass Abstract)

(subclass MutuallyDisjointClass Entity)

(subclass MutuallyDisjointClass MutuallyDisjointClass)

(subclass MutuallyDisjointClass SetOrClass)

(subclass Myriapod Agent)

(subclass Myriapod Animal)

(subclass Myriapod Arthropod)

(subclass Myriapod CorpuscularObject)

(subclass Myriapod Entity)

(subclass Myriapod Invertebrate)

(subclass Myriapod Myriapod)

(subclass Myriapod Object)

(subclass Myriapod OrganicObject)

(subclass Myriapod Organism)

(subclass Myriapod Physical)

(subclass Myriapod SelfConnectedObject)

(subclass Naming Communication)

(subclass Naming ContentBearingPhysical)

(subclass Naming ContentBearingProcess)

(subclass Naming Declaring)

(subclass Naming Entity)

(subclass Naming IntentionalProcess)

(subclass Naming LinguisticCommunication)

(subclass Naming Naming)

(subclass Naming Physical)

(subclass Naming Process)

(subclass Naming SocialInteraction)

(subclass Nation Agent)

(subclass Nation Entity)

(subclass Nation GeographicArea)

(subclass Nation GeopoliticalArea)

(subclass Nation LandArea)

(subclass Nation Nation)

(subclass Nation Object)

(subclass Nation Physical)

(subclass Nation Region)

(subclass NaturalLanguage ContentBearingPhysical)

(subclass NaturalLanguage Entity)

(subclass NaturalLanguage HumanLanguage)

(subclass NaturalLanguage Language)

(subclass NaturalLanguage LinguisticExpression)

(subclass NaturalLanguage NaturalLanguage)

(subclass NaturalLanguage Physical)

(subclass NaturalSubstance Entity)

(subclass NaturalSubstance NaturalSubstance)

(subclass NaturalSubstance Object)

(subclass NaturalSubstance Physical)

(subclass NaturalSubstance SelfConnectedObject)

(subclass NaturalSubstance Substance)

(subclass NegativeInteger Abstract)

(subclass NegativeInteger Entity)

(subclass NegativeInteger Integer)

(subclass NegativeInteger NegativeInteger)

(subclass NegativeInteger NegativeRealNumber)

(subclass NegativeInteger Number)

(subclass NegativeInteger Quantity)

(subclass NegativeInteger RationalNumber)

(subclass NegativeInteger RealNumber)

(subclass NegativeRealNumber Abstract)

(subclass NegativeRealNumber Entity)

(subclass NegativeRealNumber NegativeRealNumber)

(subclass NegativeRealNumber Number)

(subclass NegativeRealNumber Quantity)

(subclass NegativeRealNumber RealNumber)

(subclass Neutron ElementalSubstance)

(subclass Neutron Entity)

(subclass Neutron Neutron)

(subclass Neutron Object)

(subclass Neutron Physical)

(subclass Neutron PureSubstance)

(subclass Neutron SelfConnectedObject)

(subclass Neutron SubatomicParticle)

(subclass Neutron Substance)

(subclass Newton Abstract)

(subclass Newton Entity)

(subclass Newton FunctionQuantity)

(subclass Newton Newton)

(subclass Newton PhysicalQuantity)

(subclass Newton Quantity)

(subclass NonFloweringPlant Agent)

(subclass NonFloweringPlant CorpuscularObject)

(subclass NonFloweringPlant Entity)

(subclass NonFloweringPlant NonFloweringPlant)

(subclass NonFloweringPlant Object)

(subclass NonFloweringPlant OrganicObject)

(subclass NonFloweringPlant Organism)

(subclass NonFloweringPlant Physical)

(subclass NonFloweringPlant Plant)

(subclass NonFloweringPlant SelfConnectedObject)

(subclass NonNullSet Abstract)

(subclass NonNullSet Entity)

(subclass NonNullSet NonNullSet)

(subclass NonNullSet SetOrClass)

(subclass NonnegativeInteger Abstract)

(subclass NonnegativeInteger Entity)

(subclass NonnegativeInteger Integer)

(subclass NonnegativeInteger NonnegativeInteger)

(subclass NonnegativeInteger NonnegativeRealNumber)

(subclass NonnegativeInteger Number)

(subclass NonnegativeInteger Quantity)

(subclass NonnegativeInteger RationalNumber)

(subclass NonnegativeInteger RealNumber)

(subclass NonnegativeRealNumber Abstract)

(subclass NonnegativeRealNumber Entity)

(subclass NonnegativeRealNumber NonnegativeRealNumber)

(subclass NonnegativeRealNumber Number)

(subclass NonnegativeRealNumber Quantity)

(subclass NonnegativeRealNumber RealNumber)

(subclass NormativeAttribute Abstract)

(subclass NormativeAttribute Attribute)

(subclass NormativeAttribute Entity)

(subclass NormativeAttribute NormativeAttribute)

(subclass NormativeAttribute RelationalAttribute)

(subclass Noun ContentBearingPhysical)

(subclass Noun Entity)

(subclass Noun LinguisticExpression)

(subclass Noun Noun)

(subclass Noun Physical)

(subclass Noun Word)

(subclass NounPhrase ContentBearingPhysical)

(subclass NounPhrase Entity)

(subclass NounPhrase LinguisticExpression)

(subclass NounPhrase NounPhrase)

(subclass NounPhrase Phrase)

(subclass NounPhrase Physical)

(subclass November Abstract)

(subclass November ConstantQuantity)

(subclass November Entity)

(subclass November Month)

(subclass November November)

(subclass November PhysicalQuantity)

(subclass November Quantity)

(subclass November TimeInterval)

(subclass November TimeMeasure)

(subclass November TimePosition)

(subclass NullSet Abstract)

(subclass NullSet Entity)

(subclass NullSet NullSet)

(subclass NullSet SetOrClass)

(subclass Number Abstract)

(subclass Number Entity)

(subclass Number Number)

(subclass Number Quantity)

(subclass Nutrient BiologicallyActiveSubstance)

(subclass Nutrient Entity)

(subclass Nutrient Nutrient)

(subclass Nutrient Object)

(subclass Nutrient Physical)

(subclass Nutrient SelfConnectedObject)

(subclass Nutrient Substance)

(subclass Object Entity)

(subclass Object Object)

(subclass Object Physical)

(subclass ObjectAttitude Abstract)

(subclass ObjectAttitude Entity)

(subclass ObjectAttitude IntentionalRelation)

(subclass ObjectAttitude ObjectAttitude)

(subclass ObjectAttitude Relation)

(subclass ObjectiveNorm Abstract)

(subclass ObjectiveNorm Attribute)

(subclass ObjectiveNorm Entity)

(subclass ObjectiveNorm NormativeAttribute)

(subclass ObjectiveNorm ObjectiveNorm)

(subclass ObjectiveNorm RelationalAttribute)

(subclass October Abstract)

(subclass October ConstantQuantity)

(subclass October Entity)

(subclass October Month)

(subclass October October)

(subclass October PhysicalQuantity)

(subclass October Quantity)

(subclass October TimeInterval)

(subclass October TimeMeasure)

(subclass October TimePosition)

(subclass OddInteger Abstract)

(subclass OddInteger Entity)

(subclass OddInteger Integer)

(subclass OddInteger Number)

(subclass OddInteger OddInteger)

(subclass OddInteger Quantity)

(subclass OddInteger RationalNumber)

(subclass OddInteger RealNumber)

(subclass Offering Committing)

(subclass Offering Communication)

(subclass Offering ContentBearingPhysical)

(subclass Offering ContentBearingProcess)

(subclass Offering Entity)

(subclass Offering IntentionalProcess)

(subclass Offering LinguisticCommunication)

(subclass Offering Offering)

(subclass Offering Physical)

(subclass Offering Process)

(subclass Offering SocialInteraction)

(subclass Ohm Abstract)

(subclass Ohm Entity)

(subclass Ohm FunctionQuantity)

(subclass Ohm Ohm)

(subclass Ohm PhysicalQuantity)

(subclass Ohm Quantity)

(subclass OlfactoryAttribute Abstract)

(subclass OlfactoryAttribute Attribute)

(subclass OlfactoryAttribute Entity)

(subclass OlfactoryAttribute InternalAttribute)

(subclass OlfactoryAttribute OlfactoryAttribute)

(subclass OlfactoryAttribute PerceptualAttribute)

(subclass OneDimensionalFigure Abstract)

(subclass OneDimensionalFigure Attribute)

(subclass OneDimensionalFigure Entity)

(subclass OneDimensionalFigure GeometricFigure)

(subclass OneDimensionalFigure InternalAttribute)

(subclass OneDimensionalFigure OneDimensionalFigure)

(subclass OneDimensionalFigure ShapeAttribute)

(subclass OneToOneFunction Abstract)

(subclass OneToOneFunction BinaryRelation)

(subclass OneToOneFunction Entity)

(subclass OneToOneFunction Function)

(subclass OneToOneFunction OneToOneFunction)

(subclass OneToOneFunction Relation)

(subclass OneToOneFunction SingleValuedRelation)

(subclass OneToOneFunction UnaryFunction)

(subclass OpenTwoDimensionalFigure Abstract)

(subclass OpenTwoDimensionalFigure Attribute)

(subclass OpenTwoDimensionalFigure Entity)

(subclass OpenTwoDimensionalFigure GeometricFigure)

(subclass OpenTwoDimensionalFigure InternalAttribute)

(subclass OpenTwoDimensionalFigure OpenTwoDimensionalFigure)

(subclass OpenTwoDimensionalFigure ShapeAttribute)

(subclass OpenTwoDimensionalFigure TwoDimensionalFigure)

(subclass Ordering Communication)

(subclass Ordering ContentBearingPhysical)

(subclass Ordering ContentBearingProcess)

(subclass Ordering Directing)

(subclass Ordering Entity)

(subclass Ordering IntentionalProcess)

(subclass Ordering LinguisticCommunication)

(subclass Ordering Ordering)

(subclass Ordering Physical)

(subclass Ordering Process)

(subclass Ordering SocialInteraction)

(subclass Organ AnatomicalStructure)

(subclass Organ BodyPart)

(subclass Organ CorpuscularObject)

(subclass Organ Entity)

(subclass Organ Object)

(subclass Organ Organ)

(subclass Organ OrganicObject)

(subclass Organ Physical)

(subclass Organ SelfConnectedObject)

(subclass OrganOrTissueProcess AutonomicProcess)

(subclass OrganOrTissueProcess BiologicalProcess)

(subclass OrganOrTissueProcess Entity)

(subclass OrganOrTissueProcess InternalChange)

(subclass OrganOrTissueProcess OrganOrTissueProcess)

(subclass OrganOrTissueProcess Physical)

(subclass OrganOrTissueProcess PhysiologicProcess)

(subclass OrganOrTissueProcess Process)

(subclass OrganicObject CorpuscularObject)

(subclass OrganicObject Entity)

(subclass OrganicObject Object)

(subclass OrganicObject OrganicObject)

(subclass OrganicObject Physical)

(subclass OrganicObject SelfConnectedObject)

(subclass Organism Agent)

(subclass Organism CorpuscularObject)

(subclass Organism Entity)

(subclass Organism Object)

(subclass Organism OrganicObject)

(subclass Organism Organism)

(subclass Organism Physical)

(subclass Organism SelfConnectedObject)

(subclass OrganismProcess BiologicalProcess)

(subclass OrganismProcess Entity)

(subclass OrganismProcess InternalChange)

(subclass OrganismProcess OrganismProcess)

(subclass OrganismProcess Physical)

(subclass OrganismProcess PhysiologicProcess)

(subclass OrganismProcess Process)

(subclass Organization Agent)

(subclass Organization CognitiveAgent)

(subclass Organization Collection)

(subclass Organization Entity)

(subclass Organization Group)

(subclass Organization Object)

(subclass Organization Organization)

(subclass Organization Physical)

(subclass Organization SentientAgent)

(subclass OrganizationalProcess Entity)

(subclass OrganizationalProcess IntentionalProcess)

(subclass OrganizationalProcess OrganizationalProcess)

(subclass OrganizationalProcess Physical)

(subclass OrganizationalProcess Process)

(subclass Ounce Abstract)

(subclass Ounce ConstantQuantity)

(subclass Ounce Entity)

(subclass Ounce Ounce)

(subclass Ounce PhysicalQuantity)

(subclass Ounce Quantity)

(subclass Ounce VolumeMeasure)

(subclass PairwiseDisjointClass Abstract)

(subclass PairwiseDisjointClass Entity)

(subclass PairwiseDisjointClass PairwiseDisjointClass)

(subclass PairwiseDisjointClass SetOrClass)

(subclass ParamilitaryOrganization Agent)

(subclass ParamilitaryOrganization CognitiveAgent)

(subclass ParamilitaryOrganization Collection)

(subclass ParamilitaryOrganization Entity)

(subclass ParamilitaryOrganization Group)

(subclass ParamilitaryOrganization MilitaryForce)

(subclass ParamilitaryOrganization Object)

(subclass ParamilitaryOrganization Organization)

(subclass ParamilitaryOrganization ParamilitaryOrganization)

(subclass ParamilitaryOrganization Physical)

(subclass ParamilitaryOrganization PoliticalOrganization)

(subclass ParamilitaryOrganization SentientAgent)

(subclass PartialOrderingRelation Abstract)

(subclass PartialOrderingRelation AntisymmetricRelation)

(subclass PartialOrderingRelation BinaryRelation)

(subclass PartialOrderingRelation Entity)

(subclass PartialOrderingRelation PartialOrderingRelation)

(subclass PartialOrderingRelation ReflexiveRelation)

(subclass PartialOrderingRelation Relation)

(subclass PartialOrderingRelation TransitiveRelation)

(subclass PartialValuedRelation Abstract)

(subclass PartialValuedRelation Entity)

(subclass PartialValuedRelation PartialValuedRelation)

(subclass PartialValuedRelation Relation)

(subclass ParticleWord ContentBearingPhysical)

(subclass ParticleWord Entity)

(subclass ParticleWord LinguisticExpression)

(subclass ParticleWord ParticleWord)

(subclass ParticleWord Physical)

(subclass ParticleWord Word)

(subclass Pascal Abstract)

(subclass Pascal Entity)

(subclass Pascal FunctionQuantity)

(subclass Pascal Pascal)

(subclass Pascal PhysicalQuantity)

(subclass Pascal Quantity)

(subclass Patent Artifact)

(subclass Patent Certificate)

(subclass Patent ContentBearingPhysical)

(subclass Patent CorpuscularObject)

(subclass Patent Entity)

(subclass Patent LinguisticExpression)

(subclass Patent Object)

(subclass Patent Patent)

(subclass Patent Physical)

(subclass Patent SelfConnectedObject)

(subclass Patent Text)

(subclass PathologicProcess BiologicalProcess)

(subclass PathologicProcess Entity)

(subclass PathologicProcess InternalChange)

(subclass PathologicProcess PathologicProcess)

(subclass PathologicProcess Physical)

(subclass PathologicProcess Process)

(subclass Perception BiologicalProcess)

(subclass Perception Entity)

(subclass Perception InternalChange)

(subclass Perception Perception)

(subclass Perception Physical)

(subclass Perception Process)

(subclass Perception PsychologicalProcess)

(subclass PerceptualAttribute Abstract)

(subclass PerceptualAttribute Attribute)

(subclass PerceptualAttribute Entity)

(subclass PerceptualAttribute InternalAttribute)

(subclass PerceptualAttribute PerceptualAttribute)

(subclass Periodical Artifact)

(subclass Periodical ContentBearingPhysical)

(subclass Periodical CorpuscularObject)

(subclass Periodical Entity)

(subclass Periodical LinguisticExpression)

(subclass Periodical Object)

(subclass Periodical Periodical)

(subclass Periodical Physical)

(subclass Periodical SelfConnectedObject)

(subclass Periodical Series)

(subclass Periodical Text)

(subclass PermanentResidence Artifact)

(subclass PermanentResidence CorpuscularObject)

(subclass PermanentResidence Entity)

(subclass PermanentResidence Object)

(subclass PermanentResidence PermanentResidence)

(subclass PermanentResidence Physical)

(subclass PermanentResidence Residence)

(subclass PermanentResidence SelfConnectedObject)

(subclass PermanentResidence StationaryArtifact)

(subclass Phrase ContentBearingPhysical)

(subclass Phrase Entity)

(subclass Phrase LinguisticExpression)

(subclass Phrase Phrase)

(subclass Phrase Physical)

(subclass Physical Entity)

(subclass Physical Physical)

(subclass PhysicalQuantity Abstract)

(subclass PhysicalQuantity Entity)

(subclass PhysicalQuantity PhysicalQuantity)

(subclass PhysicalQuantity Quantity)

(subclass PhysicalState Abstract)

(subclass PhysicalState Attribute)

(subclass PhysicalState Entity)

(subclass PhysicalState InternalAttribute)

(subclass PhysicalState PhysicalState)

(subclass PhysiologicProcess BiologicalProcess)

(subclass PhysiologicProcess Entity)

(subclass PhysiologicProcess InternalChange)

(subclass PhysiologicProcess Physical)

(subclass PhysiologicProcess PhysiologicProcess)

(subclass PhysiologicProcess Process)

(subclass Pint Abstract)

(subclass Pint ConstantQuantity)

(subclass Pint Entity)

(subclass Pint PhysicalQuantity)

(subclass Pint Pint)

(subclass Pint Quantity)

(subclass Pint VolumeMeasure)

(subclass Plan Abstract)

(subclass Plan Entity)

(subclass Plan Plan)

(subclass Plan Procedure)

(subclass Plan Proposition)

(subclass PlaneAngleMeasure Abstract)

(subclass PlaneAngleMeasure AngleMeasure)

(subclass PlaneAngleMeasure ConstantQuantity)

(subclass PlaneAngleMeasure Entity)

(subclass PlaneAngleMeasure PhysicalQuantity)

(subclass PlaneAngleMeasure PlaneAngleMeasure)

(subclass PlaneAngleMeasure Quantity)

(subclass Planning BiologicalProcess)

(subclass Planning Entity)

(subclass Planning IntentionalProcess)

(subclass Planning IntentionalPsychologicalProcess)

(subclass Planning InternalChange)

(subclass Planning Physical)

(subclass Planning Planning)

(subclass Planning Process)

(subclass Planning PsychologicalProcess)

(subclass Plant Agent)

(subclass Plant CorpuscularObject)

(subclass Plant Entity)

(subclass Plant Object)

(subclass Plant OrganicObject)

(subclass Plant Organism)

(subclass Plant Physical)

(subclass Plant Plant)

(subclass Plant SelfConnectedObject)

(subclass PlantAnatomicalStructure AnatomicalStructure)

(subclass PlantAnatomicalStructure CorpuscularObject)

(subclass PlantAnatomicalStructure Entity)

(subclass PlantAnatomicalStructure Object)

(subclass PlantAnatomicalStructure OrganicObject)

(subclass PlantAnatomicalStructure Physical)

(subclass PlantAnatomicalStructure PlantAnatomicalStructure)

(subclass PlantAnatomicalStructure SelfConnectedObject)

(subclass PlantSubstance BodySubstance)

(subclass PlantSubstance Entity)

(subclass PlantSubstance Mixture)

(subclass PlantSubstance Object)

(subclass PlantSubstance Physical)

(subclass PlantSubstance PlantSubstance)

(subclass PlantSubstance SelfConnectedObject)

(subclass PlantSubstance Substance)

(subclass Poisoning BiologicalProcess)

(subclass Poisoning Damaging)

(subclass Poisoning Entity)

(subclass Poisoning Injuring)

(subclass Poisoning InternalChange)

(subclass Poisoning PathologicProcess)

(subclass Poisoning Physical)

(subclass Poisoning Poisoning)

(subclass Poisoning Process)

(subclass Poking Entity)

(subclass Poking IntentionalProcess)

(subclass Poking Physical)

(subclass Poking Poking)

(subclass Poking Process)

(subclass PoliceOrganization Agent)

(subclass PoliceOrganization CognitiveAgent)

(subclass PoliceOrganization Collection)

(subclass PoliceOrganization Entity)

(subclass PoliceOrganization GovernmentOrganization)

(subclass PoliceOrganization Group)

(subclass PoliceOrganization Object)

(subclass PoliceOrganization Organization)

(subclass PoliceOrganization Physical)

(subclass PoliceOrganization PoliceOrganization)

(subclass PoliceOrganization SentientAgent)

(subclass PoliticalOrganization Agent)

(subclass PoliticalOrganization CognitiveAgent)

(subclass PoliticalOrganization Collection)

(subclass PoliticalOrganization Entity)

(subclass PoliticalOrganization Group)

(subclass PoliticalOrganization Object)

(subclass PoliticalOrganization Organization)

(subclass PoliticalOrganization Physical)

(subclass PoliticalOrganization PoliticalOrganization)

(subclass PoliticalOrganization SentientAgent)

(subclass PoliticalProcess Entity)

(subclass PoliticalProcess IntentionalProcess)

(subclass PoliticalProcess OrganizationalProcess)

(subclass PoliticalProcess Physical)

(subclass PoliticalProcess PoliticalProcess)

(subclass PoliticalProcess Process)

(subclass Pollen AnatomicalStructure)

(subclass Pollen BodyPart)

(subclass Pollen CorpuscularObject)

(subclass Pollen Entity)

(subclass Pollen Object)

(subclass Pollen OrganicObject)

(subclass Pollen Physical)

(subclass Pollen PlantAnatomicalStructure)

(subclass Pollen Pollen)

(subclass Pollen ReproductiveBody)

(subclass Pollen SelfConnectedObject)

(subclass Position Abstract)

(subclass Position Attribute)

(subclass Position Entity)

(subclass Position Position)

(subclass Position RelationalAttribute)

(subclass Position SocialRole)

(subclass PositionalAttribute Abstract)

(subclass PositionalAttribute Attribute)

(subclass PositionalAttribute Entity)

(subclass PositionalAttribute PositionalAttribute)

(subclass PositionalAttribute RelationalAttribute)

(subclass PositiveInteger Abstract)

(subclass PositiveInteger Entity)

(subclass PositiveInteger Integer)

(subclass PositiveInteger NonnegativeInteger)

(subclass PositiveInteger NonnegativeRealNumber)

(subclass PositiveInteger Number)

(subclass PositiveInteger PositiveInteger)

(subclass PositiveInteger PositiveRealNumber)

(subclass PositiveInteger Quantity)

(subclass PositiveInteger RationalNumber)

(subclass PositiveInteger RealNumber)

(subclass PositiveRealNumber Abstract)

(subclass PositiveRealNumber Entity)

(subclass PositiveRealNumber NonnegativeRealNumber)

(subclass PositiveRealNumber Number)

(subclass PositiveRealNumber PositiveRealNumber)

(subclass PositiveRealNumber Quantity)

(subclass PositiveRealNumber RealNumber)

(subclass PoundForce Abstract)

(subclass PoundForce Entity)

(subclass PoundForce FunctionQuantity)

(subclass PoundForce PhysicalQuantity)

(subclass PoundForce PoundForce)

(subclass PoundForce Quantity)

(subclass PoundMass Abstract)

(subclass PoundMass ConstantQuantity)

(subclass PoundMass Entity)

(subclass PoundMass MassMeasure)

(subclass PoundMass PhysicalQuantity)

(subclass PoundMass PoundMass)

(subclass PoundMass Quantity)

(subclass Precipitation Entity)

(subclass Precipitation Falling)

(subclass Precipitation LiquidMotion)

(subclass Precipitation Motion)

(subclass Precipitation MotionDownward)

(subclass Precipitation Physical)

(subclass Precipitation Precipitation)

(subclass Precipitation Process)

(subclass Precipitation Translocation)

(subclass Precipitation WaterMotion)

(subclass Precipitation WeatherProcess)

(subclass Predicate Abstract)

(subclass Predicate Entity)

(subclass Predicate Predicate)

(subclass Predicate Relation)

(subclass Predicting BiologicalProcess)

(subclass Predicting Entity)

(subclass Predicting IntentionalProcess)

(subclass Predicting IntentionalPsychologicalProcess)

(subclass Predicting InternalChange)

(subclass Predicting Physical)

(subclass Predicting Predicting)

(subclass Predicting Process)

(subclass Predicting PsychologicalProcess)

(subclass PrepositionalPhrase ContentBearingPhysical)

(subclass PrepositionalPhrase Entity)

(subclass PrepositionalPhrase LinguisticExpression)

(subclass PrepositionalPhrase Phrase)

(subclass PrepositionalPhrase Physical)

(subclass PrepositionalPhrase PrepositionalPhrase)

(subclass Pretending Entity)

(subclass Pretending IntentionalProcess)

(subclass Pretending Physical)

(subclass Pretending Pretending)

(subclass Pretending Process)

(subclass Pretending SocialInteraction)

(subclass PrimaryColor Abstract)

(subclass PrimaryColor Attribute)

(subclass PrimaryColor ColorAttribute)

(subclass PrimaryColor Entity)

(subclass PrimaryColor InternalAttribute)

(subclass PrimaryColor PrimaryColor)

(subclass Primate Agent)

(subclass Primate Animal)

(subclass Primate CorpuscularObject)

(subclass Primate Entity)

(subclass Primate Mammal)

(subclass Primate Object)

(subclass Primate OrganicObject)

(subclass Primate Organism)

(subclass Primate Physical)

(subclass Primate Primate)

(subclass Primate SelfConnectedObject)

(subclass Primate Vertebrate)

(subclass Primate WarmBloodedVertebrate)

(subclass PrimeNumber Abstract)

(subclass PrimeNumber Entity)

(subclass PrimeNumber Integer)

(subclass PrimeNumber Number)

(subclass PrimeNumber PrimeNumber)

(subclass PrimeNumber Quantity)

(subclass PrimeNumber RationalNumber)

(subclass PrimeNumber RealNumber)

(subclass ProbabilityAttribute Abstract)

(subclass ProbabilityAttribute Attribute)

(subclass ProbabilityAttribute Entity)

(subclass ProbabilityAttribute NormativeAttribute)

(subclass ProbabilityAttribute ObjectiveNorm)

(subclass ProbabilityAttribute ProbabilityAttribute)

(subclass ProbabilityAttribute RelationalAttribute)

(subclass ProbabilityRelation Abstract)

(subclass ProbabilityRelation Entity)

(subclass ProbabilityRelation ProbabilityRelation)

(subclass ProbabilityRelation Relation)

(subclass Procedure Abstract)

(subclass Procedure Entity)

(subclass Procedure Procedure)

(subclass Procedure Proposition)

(subclass Process Entity)

(subclass Process Physical)

(subclass Process Process)

(subclass Product Artifact)

(subclass Product CorpuscularObject)

(subclass Product Entity)

(subclass Product Object)

(subclass Product Physical)

(subclass Product Product)

(subclass Product SelfConnectedObject)

(subclass Proposition Abstract)

(subclass Proposition Entity)

(subclass Proposition Proposition)

(subclass PropositionalAttitude Abstract)

(subclass PropositionalAttitude AntisymmetricRelation)

(subclass PropositionalAttitude AsymmetricRelation)

(subclass PropositionalAttitude BinaryRelation)

(subclass PropositionalAttitude Entity)

(subclass PropositionalAttitude IntentionalRelation)

(subclass PropositionalAttitude IrreflexiveRelation)

(subclass PropositionalAttitude PropositionalAttitude)

(subclass PropositionalAttitude Relation)

(subclass Protein BiologicallyActiveSubstance)

(subclass Protein Entity)

(subclass Protein Nutrient)

(subclass Protein Object)

(subclass Protein Physical)

(subclass Protein Protein)

(subclass Protein SelfConnectedObject)

(subclass Protein Substance)

(subclass Proton ElementalSubstance)

(subclass Proton Entity)

(subclass Proton Object)

(subclass Proton Physical)

(subclass Proton Proton)

(subclass Proton PureSubstance)

(subclass Proton SelfConnectedObject)

(subclass Proton SubatomicParticle)

(subclass Proton Substance)

(subclass PseudoGraph Abstract)

(subclass PseudoGraph Entity)

(subclass PseudoGraph Graph)

(subclass PseudoGraph PseudoGraph)

(subclass PsychologicalAttribute Abstract)

(subclass PsychologicalAttribute Attribute)

(subclass PsychologicalAttribute BiologicalAttribute)

(subclass PsychologicalAttribute Entity)

(subclass PsychologicalAttribute InternalAttribute)

(subclass PsychologicalAttribute PsychologicalAttribute)

(subclass PsychologicalDysfunction Abstract)

(subclass PsychologicalDysfunction Attribute)

(subclass PsychologicalDysfunction BiologicalAttribute)

(subclass PsychologicalDysfunction DiseaseOrSyndrome)

(subclass PsychologicalDysfunction Entity)

(subclass PsychologicalDysfunction InternalAttribute)

(subclass PsychologicalDysfunction PsychologicalAttribute)

(subclass PsychologicalDysfunction PsychologicalDysfunction)

(subclass PsychologicalProcess BiologicalProcess)

(subclass PsychologicalProcess Entity)

(subclass PsychologicalProcess InternalChange)

(subclass PsychologicalProcess Physical)

(subclass PsychologicalProcess Process)

(subclass PsychologicalProcess PsychologicalProcess)

(subclass Publication ContentDevelopment)

(subclass Publication Creation)

(subclass Publication Entity)

(subclass Publication IntentionalProcess)

(subclass Publication InternalChange)

(subclass Publication Making)

(subclass Publication Manufacture)

(subclass Publication Physical)

(subclass Publication Process)

(subclass Publication Publication)

(subclass PureSubstance Entity)

(subclass PureSubstance Object)

(subclass PureSubstance Physical)

(subclass PureSubstance PureSubstance)

(subclass PureSubstance SelfConnectedObject)

(subclass PureSubstance Substance)

(subclass Pursuing Entity)

(subclass Pursuing IntentionalProcess)

(subclass Pursuing Physical)

(subclass Pursuing Process)

(subclass Pursuing Pursuing)

(subclass Putting Entity)

(subclass Putting Motion)

(subclass Putting Physical)

(subclass Putting Process)

(subclass Putting Putting)

(subclass Putting Transfer)

(subclass Putting Translocation)

(subclass Quantity Abstract)

(subclass Quantity Entity)

(subclass Quantity Quantity)

(subclass QuantityChange Entity)

(subclass QuantityChange InternalChange)

(subclass QuantityChange Physical)

(subclass QuantityChange Process)

(subclass QuantityChange QuantityChange)

(subclass Quart Abstract)

(subclass Quart ConstantQuantity)

(subclass Quart Entity)

(subclass Quart PhysicalQuantity)

(subclass Quart Quantity)

(subclass Quart Quart)

(subclass Quart VolumeMeasure)

(subclass QuaternaryFunction Abstract)

(subclass QuaternaryFunction Entity)

(subclass QuaternaryFunction Function)

(subclass QuaternaryFunction QuaternaryFunction)

(subclass QuaternaryFunction QuintaryRelation)

(subclass QuaternaryFunction Relation)

(subclass QuaternaryFunction SingleValuedRelation)

(subclass QuaternaryPredicate Abstract)

(subclass QuaternaryPredicate Entity)

(subclass QuaternaryPredicate Predicate)

(subclass QuaternaryPredicate QuaternaryPredicate)

(subclass QuaternaryPredicate QuaternaryRelation)

(subclass QuaternaryPredicate Relation)

(subclass QuaternaryRelation Abstract)

(subclass QuaternaryRelation Entity)

(subclass QuaternaryRelation QuaternaryRelation)

(subclass QuaternaryRelation Relation)

(subclass Questioning Communication)

(subclass Questioning ContentBearingPhysical)

(subclass Questioning ContentBearingProcess)

(subclass Questioning Directing)

(subclass Questioning Entity)

(subclass Questioning IntentionalProcess)

(subclass Questioning LinguisticCommunication)

(subclass Questioning Physical)

(subclass Questioning Process)

(subclass Questioning Questioning)

(subclass Questioning SocialInteraction)

(subclass QuintaryPredicate Abstract)

(subclass QuintaryPredicate Entity)

(subclass QuintaryPredicate Predicate)

(subclass QuintaryPredicate QuintaryPredicate)

(subclass QuintaryPredicate QuintaryRelation)

(subclass QuintaryPredicate Relation)

(subclass QuintaryRelation Abstract)

(subclass QuintaryRelation Entity)

(subclass QuintaryRelation QuintaryRelation)

(subclass QuintaryRelation Relation)

(subclass Radian Abstract)

(subclass Radian AngleMeasure)

(subclass Radian ConstantQuantity)

(subclass Radian Entity)

(subclass Radian PhysicalQuantity)

(subclass Radian PlaneAngleMeasure)

(subclass Radian Quantity)

(subclass Radian Radian)

(subclass Radiating Entity)

(subclass Radiating Motion)

(subclass Radiating Physical)

(subclass Radiating Process)

(subclass Radiating Radiating)

(subclass RadiatingElectromagnetic Entity)

(subclass RadiatingElectromagnetic Motion)

(subclass RadiatingElectromagnetic Physical)

(subclass RadiatingElectromagnetic Process)

(subclass RadiatingElectromagnetic Radiating)

(subclass RadiatingElectromagnetic RadiatingElectromagnetic)

(subclass RadiatingLight Entity)

(subclass RadiatingLight Motion)

(subclass RadiatingLight Physical)

(subclass RadiatingLight Process)

(subclass RadiatingLight Radiating)

(subclass RadiatingLight RadiatingLight)

(subclass RadiatingNuclear Entity)

(subclass RadiatingNuclear Motion)

(subclass RadiatingNuclear Physical)

(subclass RadiatingNuclear Process)

(subclass RadiatingNuclear Radiating)

(subclass RadiatingNuclear RadiatingNuclear)

(subclass RadiatingSound Entity)

(subclass RadiatingSound Motion)

(subclass RadiatingSound Physical)

(subclass RadiatingSound Process)

(subclass RadiatingSound Radiating)

(subclass RadiatingSound RadiatingSound)

(subclass RankineDegree Abstract)

(subclass RankineDegree ConstantQuantity)

(subclass RankineDegree Entity)

(subclass RankineDegree PhysicalQuantity)

(subclass RankineDegree Quantity)

(subclass RankineDegree RankineDegree)

(subclass RankineDegree TemperatureMeasure)

(subclass RationalNumber Abstract)

(subclass RationalNumber Entity)

(subclass RationalNumber Number)

(subclass RationalNumber Quantity)

(subclass RationalNumber RationalNumber)

(subclass RationalNumber RealNumber)

(subclass Reading ContentDevelopment)

(subclass Reading Entity)

(subclass Reading IntentionalProcess)

(subclass Reading Physical)

(subclass Reading Process)

(subclass Reading Reading)

(subclass RealNumber Abstract)

(subclass RealNumber Entity)

(subclass RealNumber Number)

(subclass RealNumber Quantity)

(subclass RealNumber RealNumber)

(subclass Reasoning BiologicalProcess)

(subclass Reasoning Entity)

(subclass Reasoning IntentionalProcess)

(subclass Reasoning IntentionalPsychologicalProcess)

(subclass Reasoning InternalChange)

(subclass Reasoning Physical)

(subclass Reasoning Process)

(subclass Reasoning PsychologicalProcess)

(subclass Reasoning Reasoning)

(subclass RecreationOrExercise Entity)

(subclass RecreationOrExercise IntentionalProcess)

(subclass RecreationOrExercise Physical)

(subclass RecreationOrExercise Process)

(subclass RecreationOrExercise RecreationOrExercise)

(subclass ReflexiveRelation Abstract)

(subclass ReflexiveRelation BinaryRelation)

(subclass ReflexiveRelation Entity)

(subclass ReflexiveRelation ReflexiveRelation)

(subclass ReflexiveRelation Relation)

(subclass Region Entity)

(subclass Region Object)

(subclass Region Physical)

(subclass Region Region)

(subclass RegulatoryProcess Entity)

(subclass RegulatoryProcess Guiding)

(subclass RegulatoryProcess IntentionalProcess)

(subclass RegulatoryProcess Physical)

(subclass RegulatoryProcess Process)

(subclass RegulatoryProcess RegulatoryProcess)

(subclass Relation Abstract)

(subclass Relation Entity)

(subclass Relation Relation)

(subclass RelationExtendedToQuantities Abstract)

(subclass RelationExtendedToQuantities Entity)

(subclass RelationExtendedToQuantities Relation)

(subclass RelationExtendedToQuantities RelationExtendedToQuantities)

(subclass RelationalAttribute Abstract)

(subclass RelationalAttribute Attribute)

(subclass RelationalAttribute Entity)

(subclass RelationalAttribute RelationalAttribute)

(subclass Releasing Entity)

(subclass Releasing Motion)

(subclass Releasing Physical)

(subclass Releasing Process)

(subclass Releasing Releasing)

(subclass Releasing Transfer)

(subclass Releasing Translocation)

(subclass ReligiousOrganization Agent)

(subclass ReligiousOrganization BeliefGroup)

(subclass ReligiousOrganization CognitiveAgent)

(subclass ReligiousOrganization Collection)

(subclass ReligiousOrganization Entity)

(subclass ReligiousOrganization Group)

(subclass ReligiousOrganization GroupOfPeople)

(subclass ReligiousOrganization Object)

(subclass ReligiousOrganization Organization)

(subclass ReligiousOrganization Physical)

(subclass ReligiousOrganization ReligiousOrganization)

(subclass ReligiousOrganization SentientAgent)

(subclass ReligiousProcess Entity)

(subclass ReligiousProcess IntentionalProcess)

(subclass ReligiousProcess OrganizationalProcess)

(subclass ReligiousProcess Physical)

(subclass ReligiousProcess Process)

(subclass ReligiousProcess ReligiousProcess)

(subclass Remembering BiologicalProcess)

(subclass Remembering Entity)

(subclass Remembering InternalChange)

(subclass Remembering Physical)

(subclass Remembering Process)

(subclass Remembering PsychologicalProcess)

(subclass Remembering Remembering)

(subclass Removing Entity)

(subclass Removing Motion)

(subclass Removing Physical)

(subclass Removing Process)

(subclass Removing Removing)

(subclass Removing Transfer)

(subclass Removing Translocation)

(subclass Repairing Entity)

(subclass Repairing IntentionalProcess)

(subclass Repairing Physical)

(subclass Repairing Process)

(subclass Repairing Repairing)

(subclass Replication BiologicalProcess)

(subclass Replication Entity)

(subclass Replication InternalChange)

(subclass Replication OrganismProcess)

(subclass Replication Physical)

(subclass Replication PhysiologicProcess)

(subclass Replication Process)

(subclass Replication Replication)

(subclass RepresentationalArtWork ArtWork)

(subclass RepresentationalArtWork Artifact)

(subclass RepresentationalArtWork ContentBearingPhysical)

(subclass RepresentationalArtWork CorpuscularObject)

(subclass RepresentationalArtWork Entity)

(subclass RepresentationalArtWork Icon)

(subclass RepresentationalArtWork Object)

(subclass RepresentationalArtWork Physical)

(subclass RepresentationalArtWork RepresentationalArtWork)

(subclass RepresentationalArtWork SelfConnectedObject)

(subclass ReproductiveBody AnatomicalStructure)

(subclass ReproductiveBody BodyPart)

(subclass ReproductiveBody CorpuscularObject)

(subclass ReproductiveBody Entity)

(subclass ReproductiveBody Object)

(subclass ReproductiveBody OrganicObject)

(subclass ReproductiveBody Physical)

(subclass ReproductiveBody ReproductiveBody)

(subclass ReproductiveBody SelfConnectedObject)

(subclass Reptile Agent)

(subclass Reptile Animal)

(subclass Reptile ColdBloodedVertebrate)

(subclass Reptile CorpuscularObject)

(subclass Reptile Entity)

(subclass Reptile Object)

(subclass Reptile OrganicObject)

(subclass Reptile Organism)

(subclass Reptile Physical)

(subclass Reptile Reptile)

(subclass Reptile SelfConnectedObject)

(subclass Reptile Vertebrate)

(subclass Requesting Communication)

(subclass Requesting ContentBearingPhysical)

(subclass Requesting ContentBearingProcess)

(subclass Requesting Directing)

(subclass Requesting Entity)

(subclass Requesting IntentionalProcess)

(subclass Requesting LinguisticCommunication)

(subclass Requesting Physical)

(subclass Requesting Process)

(subclass Requesting Requesting)

(subclass Requesting SocialInteraction)

(subclass Residence Artifact)

(subclass Residence CorpuscularObject)

(subclass Residence Entity)

(subclass Residence Object)

(subclass Residence Physical)

(subclass Residence Residence)

(subclass Residence SelfConnectedObject)

(subclass Residence StationaryArtifact)

(subclass ResidentialBuilding Artifact)

(subclass ResidentialBuilding Building)

(subclass ResidentialBuilding CorpuscularObject)

(subclass ResidentialBuilding Entity)

(subclass ResidentialBuilding Object)

(subclass ResidentialBuilding Physical)

(subclass ResidentialBuilding Residence)

(subclass ResidentialBuilding ResidentialBuilding)

(subclass ResidentialBuilding SelfConnectedObject)

(subclass ResidentialBuilding StationaryArtifact)

(subclass Roadway Entity)

(subclass Roadway GeographicArea)

(subclass Roadway LandArea)

(subclass Roadway LandTransitway)

(subclass Roadway Object)

(subclass Roadway Physical)

(subclass Roadway Region)

(subclass Roadway Roadway)

(subclass Roadway SelfConnectedObject)

(subclass Roadway Transitway)

(subclass Rodent Agent)

(subclass Rodent Animal)

(subclass Rodent CorpuscularObject)

(subclass Rodent Entity)

(subclass Rodent Mammal)

(subclass Rodent Object)

(subclass Rodent OrganicObject)

(subclass Rodent Organism)

(subclass Rodent Physical)

(subclass Rodent Rodent)

(subclass Rodent SelfConnectedObject)

(subclass Rodent Vertebrate)

(subclass Rodent WarmBloodedVertebrate)

(subclass Room Artifact)

(subclass Room CorpuscularObject)

(subclass Room Entity)

(subclass Room Object)

(subclass Room Physical)

(subclass Room Room)

(subclass Room SelfConnectedObject)

(subclass Room StationaryArtifact)

(subclass Running Ambulating)

(subclass Running BodyMotion)

(subclass Running Entity)

(subclass Running Motion)

(subclass Running Physical)

(subclass Running Process)

(subclass Running Running)

(subclass Running Translocation)

(subclass SaltWaterArea Entity)

(subclass SaltWaterArea GeographicArea)

(subclass SaltWaterArea Object)

(subclass SaltWaterArea Physical)

(subclass SaltWaterArea Region)

(subclass SaltWaterArea SaltWaterArea)

(subclass SaltWaterArea WaterArea)

(subclass SaturationAttribute Abstract)

(subclass SaturationAttribute Attribute)

(subclass SaturationAttribute Entity)

(subclass SaturationAttribute InternalAttribute)

(subclass SaturationAttribute SaturationAttribute)

(subclass Saturday Abstract)

(subclass Saturday ConstantQuantity)

(subclass Saturday Day)

(subclass Saturday Entity)

(subclass Saturday PhysicalQuantity)

(subclass Saturday Quantity)

(subclass Saturday Saturday)

(subclass Saturday TimeInterval)

(subclass Saturday TimeMeasure)

(subclass Saturday TimePosition)

(subclass Second Abstract)

(subclass Second ConstantQuantity)

(subclass Second Entity)

(subclass Second PhysicalQuantity)

(subclass Second Quantity)

(subclass Second Second)

(subclass Second TimeInterval)

(subclass Second TimeMeasure)

(subclass Second TimePosition)

(subclass SecondDuration Abstract)

(subclass SecondDuration ConstantQuantity)

(subclass SecondDuration Entity)

(subclass SecondDuration PhysicalQuantity)

(subclass SecondDuration Quantity)

(subclass SecondDuration SecondDuration)

(subclass SecondDuration TimeDuration)

(subclass SecondDuration TimeMeasure)

(subclass Seed AnatomicalStructure)

(subclass Seed BodyPart)

(subclass Seed CorpuscularObject)

(subclass Seed Entity)

(subclass Seed Object)

(subclass Seed OrganicObject)

(subclass Seed Physical)

(subclass Seed PlantAnatomicalStructure)

(subclass Seed ReproductiveBody)

(subclass Seed Seed)

(subclass Seed SelfConnectedObject)

(subclass Seeing BiologicalProcess)

(subclass Seeing Entity)

(subclass Seeing InternalChange)

(subclass Seeing Perception)

(subclass Seeing Physical)

(subclass Seeing Process)

(subclass Seeing PsychologicalProcess)

(subclass Seeing Seeing)

(subclass Selecting BiologicalProcess)

(subclass Selecting Entity)

(subclass Selecting IntentionalProcess)

(subclass Selecting IntentionalPsychologicalProcess)

(subclass Selecting InternalChange)

(subclass Selecting Physical)

(subclass Selecting Process)

(subclass Selecting PsychologicalProcess)

(subclass Selecting Selecting)

(subclass SelfConnectedObject Entity)

(subclass SelfConnectedObject Object)

(subclass SelfConnectedObject Physical)

(subclass SelfConnectedObject SelfConnectedObject)

(subclass Selling ChangeOfPossession)

(subclass Selling DualObjectProcess)

(subclass Selling Entity)

(subclass Selling FinancialTransaction)

(subclass Selling IntentionalProcess)

(subclass Selling Physical)

(subclass Selling Process)

(subclass Selling Selling)

(subclass Selling SocialInteraction)

(subclass Selling Transaction)

(subclass Sentence ContentBearingPhysical)

(subclass Sentence Entity)

(subclass Sentence LinguisticExpression)

(subclass Sentence Physical)

(subclass Sentence Sentence)

(subclass SentientAgent Agent)

(subclass SentientAgent Entity)

(subclass SentientAgent Object)

(subclass SentientAgent Physical)

(subclass SentientAgent SentientAgent)

(subclass Separating DualObjectProcess)

(subclass Separating Entity)

(subclass Separating Physical)

(subclass Separating Process)

(subclass Separating Separating)

(subclass September Abstract)

(subclass September ConstantQuantity)

(subclass September Entity)

(subclass September Month)

(subclass September PhysicalQuantity)

(subclass September Quantity)

(subclass September September)

(subclass September TimeInterval)

(subclass September TimeMeasure)

(subclass September TimePosition)

(subclass SequenceFunction Abstract)

(subclass SequenceFunction BinaryRelation)

(subclass SequenceFunction Entity)

(subclass SequenceFunction Function)

(subclass SequenceFunction OneToOneFunction)

(subclass SequenceFunction Relation)

(subclass SequenceFunction SequenceFunction)

(subclass SequenceFunction SingleValuedRelation)

(subclass SequenceFunction UnaryFunction)

(subclass Series Artifact)

(subclass Series ContentBearingPhysical)

(subclass Series CorpuscularObject)

(subclass Series Entity)

(subclass Series LinguisticExpression)

(subclass Series Object)

(subclass Series Physical)

(subclass Series SelfConnectedObject)

(subclass Series Series)

(subclass Series Text)

(subclass Set Abstract)

(subclass Set Entity)

(subclass Set Set)

(subclass Set SetOrClass)

(subclass SetOrClass Abstract)

(subclass SetOrClass Entity)

(subclass SetOrClass SetOrClass)

(subclass SexAttribute Abstract)

(subclass SexAttribute Attribute)

(subclass SexAttribute BiologicalAttribute)

(subclass SexAttribute Entity)

(subclass SexAttribute InternalAttribute)

(subclass SexAttribute SexAttribute)

(subclass SexualReproduction BiologicalProcess)

(subclass SexualReproduction Entity)

(subclass SexualReproduction InternalChange)

(subclass SexualReproduction OrganismProcess)

(subclass SexualReproduction Physical)

(subclass SexualReproduction PhysiologicProcess)

(subclass SexualReproduction Process)

(subclass SexualReproduction Replication)

(subclass SexualReproduction SexualReproduction)

(subclass ShapeAttribute Abstract)

(subclass ShapeAttribute Attribute)

(subclass ShapeAttribute Entity)

(subclass ShapeAttribute InternalAttribute)

(subclass ShapeAttribute ShapeAttribute)

(subclass ShapeChange Entity)

(subclass ShapeChange InternalChange)

(subclass ShapeChange Physical)

(subclass ShapeChange Process)

(subclass ShapeChange ShapeChange)

(subclass Shooting Entity)

(subclass Shooting Impelling)

(subclass Shooting Motion)

(subclass Shooting Physical)

(subclass Shooting Process)

(subclass Shooting Shooting)

(subclass Shooting Transfer)

(subclass Shooting Translocation)

(subclass ShoreArea Entity)

(subclass ShoreArea GeographicArea)

(subclass ShoreArea LandArea)

(subclass ShoreArea Object)

(subclass ShoreArea Physical)

(subclass ShoreArea Region)

(subclass ShoreArea ShoreArea)

(subclass Siemens Abstract)

(subclass Siemens Entity)

(subclass Siemens FunctionQuantity)

(subclass Siemens PhysicalQuantity)

(subclass Siemens Quantity)

(subclass Siemens Siemens)

(subclass Sievert Abstract)

(subclass Sievert Entity)

(subclass Sievert FunctionQuantity)

(subclass Sievert PhysicalQuantity)

(subclass Sievert Quantity)

(subclass Sievert Sievert)

(subclass Singing BodyMotion)

(subclass Singing Communication)

(subclass Singing ContentBearingPhysical)

(subclass Singing ContentBearingProcess)

(subclass Singing Entity)

(subclass Singing IntentionalProcess)

(subclass Singing LinguisticCommunication)

(subclass Singing Motion)

(subclass Singing Music)

(subclass Singing Physical)

(subclass Singing Process)

(subclass Singing Radiating)

(subclass Singing RadiatingSound)

(subclass Singing Singing)

(subclass Singing SocialInteraction)

(subclass Singing Speaking)

(subclass Singing Vocalizing)

(subclass SingleFamilyResidence Artifact)

(subclass SingleFamilyResidence CorpuscularObject)

(subclass SingleFamilyResidence Entity)

(subclass SingleFamilyResidence Object)

(subclass SingleFamilyResidence PermanentResidence)

(subclass SingleFamilyResidence Physical)

(subclass SingleFamilyResidence Residence)

(subclass SingleFamilyResidence SelfConnectedObject)

(subclass SingleFamilyResidence SingleFamilyResidence)

(subclass SingleFamilyResidence StationaryArtifact)

(subclass SingleValuedRelation Abstract)

(subclass SingleValuedRelation Entity)

(subclass SingleValuedRelation Relation)

(subclass SingleValuedRelation SingleValuedRelation)

(subclass Slug Abstract)

(subclass Slug ConstantQuantity)

(subclass Slug Entity)

(subclass Slug MassMeasure)

(subclass Slug PhysicalQuantity)

(subclass Slug Quantity)

(subclass Slug Slug)

(subclass Smelling BiologicalProcess)

(subclass Smelling Entity)

(subclass Smelling InternalChange)

(subclass Smelling Perception)

(subclass Smelling Physical)

(subclass Smelling Process)

(subclass Smelling PsychologicalProcess)

(subclass Smelling Smelling)

(subclass Smoke Cloud)

(subclass Smoke Entity)

(subclass Smoke GasMixture)

(subclass Smoke Mixture)

(subclass Smoke Object)

(subclass Smoke Physical)

(subclass Smoke SelfConnectedObject)

(subclass Smoke Smoke)

(subclass Smoke Substance)

(subclass SocialInteraction Entity)

(subclass SocialInteraction IntentionalProcess)

(subclass SocialInteraction Physical)

(subclass SocialInteraction Process)

(subclass SocialInteraction SocialInteraction)

(subclass SocialRole Abstract)

(subclass SocialRole Attribute)

(subclass SocialRole Entity)

(subclass SocialRole RelationalAttribute)

(subclass SocialRole SocialRole)

(subclass SocialUnit Agent)

(subclass SocialUnit Collection)

(subclass SocialUnit Entity)

(subclass SocialUnit Group)

(subclass SocialUnit GroupOfPeople)

(subclass SocialUnit Object)

(subclass SocialUnit Physical)

(subclass SocialUnit SocialUnit)

(subclass SolidAngleMeasure Abstract)

(subclass SolidAngleMeasure AngleMeasure)

(subclass SolidAngleMeasure ConstantQuantity)

(subclass SolidAngleMeasure Entity)

(subclass SolidAngleMeasure PhysicalQuantity)

(subclass SolidAngleMeasure Quantity)

(subclass SolidAngleMeasure SolidAngleMeasure)

(subclass Solution Entity)

(subclass Solution LiquidMixture)

(subclass Solution Mixture)

(subclass Solution Object)

(subclass Solution Physical)

(subclass Solution SelfConnectedObject)

(subclass Solution Solution)

(subclass Solution Substance)

(subclass SoundAttribute Abstract)

(subclass SoundAttribute Attribute)

(subclass SoundAttribute Entity)

(subclass SoundAttribute RelationalAttribute)

(subclass SoundAttribute SoundAttribute)

(subclass SpatialRelation Abstract)

(subclass SpatialRelation Entity)

(subclass SpatialRelation Relation)

(subclass SpatialRelation SpatialRelation)

(subclass Speaking BodyMotion)

(subclass Speaking Communication)

(subclass Speaking ContentBearingPhysical)

(subclass Speaking ContentBearingProcess)

(subclass Speaking Entity)

(subclass Speaking IntentionalProcess)

(subclass Speaking LinguisticCommunication)

(subclass Speaking Motion)

(subclass Speaking Physical)

(subclass Speaking Process)

(subclass Speaking Radiating)

(subclass Speaking RadiatingSound)

(subclass Speaking SocialInteraction)

(subclass Speaking Speaking)

(subclass Speaking Vocalizing)

(subclass SpokenHumanLanguage ContentBearingPhysical)

(subclass SpokenHumanLanguage Entity)

(subclass SpokenHumanLanguage HumanLanguage)

(subclass SpokenHumanLanguage Language)

(subclass SpokenHumanLanguage LinguisticExpression)

(subclass SpokenHumanLanguage Physical)

(subclass SpokenHumanLanguage SpokenHumanLanguage)

(subclass Spore AnatomicalStructure)

(subclass Spore BodyPart)

(subclass Spore CorpuscularObject)

(subclass Spore Entity)

(subclass Spore Object)

(subclass Spore OrganicObject)

(subclass Spore Physical)

(subclass Spore PlantAnatomicalStructure)

(subclass Spore ReproductiveBody)

(subclass Spore SelfConnectedObject)

(subclass Spore Spore)

(subclass Sport Contest)

(subclass Sport Entity)

(subclass Sport Game)

(subclass Sport IntentionalProcess)

(subclass Sport Physical)

(subclass Sport Process)

(subclass Sport RecreationOrExercise)

(subclass Sport SocialInteraction)

(subclass Sport Sport)

(subclass StateChange Entity)

(subclass StateChange InternalChange)

(subclass StateChange Physical)

(subclass StateChange Process)

(subclass StateChange StateChange)

(subclass StateOfMind Abstract)

(subclass StateOfMind Attribute)

(subclass StateOfMind BiologicalAttribute)

(subclass StateOfMind Entity)

(subclass StateOfMind InternalAttribute)

(subclass StateOfMind PsychologicalAttribute)

(subclass StateOfMind StateOfMind)

(subclass StateOrProvince Agent)

(subclass StateOrProvince Entity)

(subclass StateOrProvince GeographicArea)

(subclass StateOrProvince GeopoliticalArea)

(subclass StateOrProvince LandArea)

(subclass StateOrProvince Object)

(subclass StateOrProvince Physical)

(subclass StateOrProvince Region)

(subclass StateOrProvince StateOrProvince)

(subclass StaticWaterArea Entity)

(subclass StaticWaterArea GeographicArea)

(subclass StaticWaterArea Object)

(subclass StaticWaterArea Physical)

(subclass StaticWaterArea Region)

(subclass StaticWaterArea StaticWaterArea)

(subclass StaticWaterArea WaterArea)

(subclass Stating Communication)

(subclass Stating ContentBearingPhysical)

(subclass Stating ContentBearingProcess)

(subclass Stating Entity)

(subclass Stating IntentionalProcess)

(subclass Stating LinguisticCommunication)

(subclass Stating Physical)

(subclass Stating Process)

(subclass Stating SocialInteraction)

(subclass Stating Stating)

(subclass StationaryArtifact Artifact)

(subclass StationaryArtifact CorpuscularObject)

(subclass StationaryArtifact Entity)

(subclass StationaryArtifact Object)

(subclass StationaryArtifact Physical)

(subclass StationaryArtifact SelfConnectedObject)

(subclass StationaryArtifact StationaryArtifact)

(subclass Steradian Abstract)

(subclass Steradian AngleMeasure)

(subclass Steradian ConstantQuantity)

(subclass Steradian Entity)

(subclass Steradian PhysicalQuantity)

(subclass Steradian Quantity)

(subclass Steradian SolidAngleMeasure)

(subclass Steradian Steradian)

(subclass StreamWaterArea Entity)

(subclass StreamWaterArea GeographicArea)

(subclass StreamWaterArea Object)

(subclass StreamWaterArea Physical)

(subclass StreamWaterArea Region)

(subclass StreamWaterArea StreamWaterArea)

(subclass StreamWaterArea WaterArea)

(subclass SubatomicParticle ElementalSubstance)

(subclass SubatomicParticle Entity)

(subclass SubatomicParticle Object)

(subclass SubatomicParticle Physical)

(subclass SubatomicParticle PureSubstance)

(subclass SubatomicParticle SelfConnectedObject)

(subclass SubatomicParticle SubatomicParticle)

(subclass SubatomicParticle Substance)

(subclass SubjectiveAssessmentAttribute Abstract)

(subclass SubjectiveAssessmentAttribute Attribute)

(subclass SubjectiveAssessmentAttribute Entity)

(subclass SubjectiveAssessmentAttribute NormativeAttribute)

(subclass SubjectiveAssessmentAttribute RelationalAttribute)

(subclass SubjectiveAssessmentAttribute SubjectiveAssessmentAttribute)

(subclass Substance Entity)

(subclass Substance Object)

(subclass Substance Physical)

(subclass Substance SelfConnectedObject)

(subclass Substance Substance)

(subclass Substituting DualObjectProcess)

(subclass Substituting Entity)

(subclass Substituting Motion)

(subclass Substituting Physical)

(subclass Substituting Process)

(subclass Substituting Substituting)

(subclass Substituting Transfer)

(subclass Substituting Translocation)

(subclass Summary Artifact)

(subclass Summary ContentBearingPhysical)

(subclass Summary CorpuscularObject)

(subclass Summary Entity)

(subclass Summary LinguisticExpression)

(subclass Summary Object)

(subclass Summary Physical)

(subclass Summary SelfConnectedObject)

(subclass Summary Summary)

(subclass Summary Text)

(subclass Sunday Abstract)

(subclass Sunday ConstantQuantity)

(subclass Sunday Day)

(subclass Sunday Entity)

(subclass Sunday PhysicalQuantity)

(subclass Sunday Quantity)

(subclass Sunday Sunday)

(subclass Sunday TimeInterval)

(subclass Sunday TimeMeasure)

(subclass Sunday TimePosition)

(subclass Supposing Communication)

(subclass Supposing ContentBearingPhysical)

(subclass Supposing ContentBearingProcess)

(subclass Supposing Entity)

(subclass Supposing IntentionalProcess)

(subclass Supposing LinguisticCommunication)

(subclass Supposing Physical)

(subclass Supposing Process)

(subclass Supposing SocialInteraction)

(subclass Supposing Supposing)

(subclass SurfaceChange Entity)

(subclass SurfaceChange InternalChange)

(subclass SurfaceChange Physical)

(subclass SurfaceChange Process)

(subclass SurfaceChange SurfaceChange)

(subclass Surgery Entity)

(subclass Surgery IntentionalProcess)

(subclass Surgery Physical)

(subclass Surgery Process)

(subclass Surgery Repairing)

(subclass Surgery Surgery)

(subclass Surgery TherapeuticProcess)

(subclass Suspension Entity)

(subclass Suspension LiquidMixture)

(subclass Suspension Mixture)

(subclass Suspension Object)

(subclass Suspension Physical)

(subclass Suspension SelfConnectedObject)

(subclass Suspension Substance)

(subclass Suspension Suspension)

(subclass Swimming BodyMotion)

(subclass Swimming Entity)

(subclass Swimming Motion)

(subclass Swimming Physical)

(subclass Swimming Process)

(subclass Swimming Swimming)

(subclass SymbolicString ContentBearingObject)

(subclass SymbolicString ContentBearingPhysical)

(subclass SymbolicString CorpuscularObject)

(subclass SymbolicString Entity)

(subclass SymbolicString Object)

(subclass SymbolicString Physical)

(subclass SymbolicString SelfConnectedObject)

(subclass SymbolicString SymbolicString)

(subclass SymmetricRelation Abstract)

(subclass SymmetricRelation BinaryRelation)

(subclass SymmetricRelation Entity)

(subclass SymmetricRelation Relation)

(subclass SymmetricRelation SymmetricRelation)

(subclass SyntheticSubstance Entity)

(subclass SyntheticSubstance Object)

(subclass SyntheticSubstance Physical)

(subclass SyntheticSubstance SelfConnectedObject)

(subclass SyntheticSubstance Substance)

(subclass SyntheticSubstance SyntheticSubstance)

(subclass SystemeInternationalUnit Abstract)

(subclass SystemeInternationalUnit Entity)

(subclass SystemeInternationalUnit PhysicalQuantity)

(subclass SystemeInternationalUnit Quantity)

(subclass SystemeInternationalUnit SystemeInternationalUnit)

(subclass SystemeInternationalUnit UnitOfMeasure)

(subclass TactilePerception BiologicalProcess)

(subclass TactilePerception Entity)

(subclass TactilePerception InternalChange)

(subclass TactilePerception Perception)

(subclass TactilePerception Physical)

(subclass TactilePerception Process)

(subclass TactilePerception PsychologicalProcess)

(subclass TactilePerception TactilePerception)

(subclass TasteAttribute Abstract)

(subclass TasteAttribute Attribute)

(subclass TasteAttribute Entity)

(subclass TasteAttribute InternalAttribute)

(subclass TasteAttribute PerceptualAttribute)

(subclass TasteAttribute TasteAttribute)

(subclass Tasting BiologicalProcess)

(subclass Tasting Entity)

(subclass Tasting InternalChange)

(subclass Tasting Perception)

(subclass Tasting Physical)

(subclass Tasting Process)

(subclass Tasting PsychologicalProcess)

(subclass Tasting Tasting)

(subclass TemperatureMeasure Abstract)

(subclass TemperatureMeasure ConstantQuantity)

(subclass TemperatureMeasure Entity)

(subclass TemperatureMeasure PhysicalQuantity)

(subclass TemperatureMeasure Quantity)

(subclass TemperatureMeasure TemperatureMeasure)

(subclass TemporalRelation Abstract)

(subclass TemporalRelation Entity)

(subclass TemporalRelation Relation)

(subclass TemporalRelation TemporalRelation)

(subclass TemporaryResidence Artifact)

(subclass TemporaryResidence CorpuscularObject)

(subclass TemporaryResidence Entity)

(subclass TemporaryResidence Object)

(subclass TemporaryResidence Physical)

(subclass TemporaryResidence Residence)

(subclass TemporaryResidence SelfConnectedObject)

(subclass TemporaryResidence StationaryArtifact)

(subclass TemporaryResidence TemporaryResidence)

(subclass TerminatingEmployment Entity)

(subclass TerminatingEmployment IntentionalProcess)

(subclass TerminatingEmployment LeavingAnOrganization)

(subclass TerminatingEmployment OrganizationalProcess)

(subclass TerminatingEmployment Physical)

(subclass TerminatingEmployment Process)

(subclass TerminatingEmployment TerminatingEmployment)

(subclass TernaryFunction Abstract)

(subclass TernaryFunction Entity)

(subclass TernaryFunction Function)

(subclass TernaryFunction QuaternaryRelation)

(subclass TernaryFunction Relation)

(subclass TernaryFunction SingleValuedRelation)

(subclass TernaryFunction TernaryFunction)

(subclass TernaryPredicate Abstract)

(subclass TernaryPredicate Entity)

(subclass TernaryPredicate Predicate)

(subclass TernaryPredicate Relation)

(subclass TernaryPredicate TernaryPredicate)

(subclass TernaryPredicate TernaryRelation)

(subclass TernaryRelation Abstract)

(subclass TernaryRelation Entity)

(subclass TernaryRelation Relation)

(subclass TernaryRelation TernaryRelation)

(subclass Tesla Abstract)

(subclass Tesla Entity)

(subclass Tesla FunctionQuantity)

(subclass Tesla PhysicalQuantity)

(subclass Tesla Quantity)

(subclass Tesla Tesla)

(subclass Text Artifact)

(subclass Text ContentBearingPhysical)

(subclass Text CorpuscularObject)

(subclass Text Entity)

(subclass Text LinguisticExpression)

(subclass Text Object)

(subclass Text Physical)

(subclass Text SelfConnectedObject)

(subclass Text Text)

(subclass TextureAttribute Abstract)

(subclass TextureAttribute Attribute)

(subclass TextureAttribute Entity)

(subclass TextureAttribute InternalAttribute)

(subclass TextureAttribute PerceptualAttribute)

(subclass TextureAttribute TextureAttribute)

(subclass TherapeuticProcess Entity)

(subclass TherapeuticProcess IntentionalProcess)

(subclass TherapeuticProcess Physical)

(subclass TherapeuticProcess Process)

(subclass TherapeuticProcess Repairing)

(subclass TherapeuticProcess TherapeuticProcess)

(subclass ThreeDimensionalFigure Abstract)

(subclass ThreeDimensionalFigure Attribute)

(subclass ThreeDimensionalFigure Entity)

(subclass ThreeDimensionalFigure GeometricFigure)

(subclass ThreeDimensionalFigure InternalAttribute)

(subclass ThreeDimensionalFigure ShapeAttribute)

(subclass ThreeDimensionalFigure ThreeDimensionalFigure)

(subclass Thursday Abstract)

(subclass Thursday ConstantQuantity)

(subclass Thursday Day)

(subclass Thursday Entity)

(subclass Thursday PhysicalQuantity)

(subclass Thursday Quantity)

(subclass Thursday Thursday)

(subclass Thursday TimeInterval)

(subclass Thursday TimeMeasure)

(subclass Thursday TimePosition)

(subclass TimeDependentQuantity Abstract)

(subclass TimeDependentQuantity Entity)

(subclass TimeDependentQuantity FunctionQuantity)

(subclass TimeDependentQuantity PhysicalQuantity)

(subclass TimeDependentQuantity Quantity)

(subclass TimeDependentQuantity TimeDependentQuantity)

(subclass TimeDependentQuantity UnaryConstantFunctionQuantity)

(subclass TimeDuration Abstract)

(subclass TimeDuration ConstantQuantity)

(subclass TimeDuration Entity)

(subclass TimeDuration PhysicalQuantity)

(subclass TimeDuration Quantity)

(subclass TimeDuration TimeDuration)

(subclass TimeDuration TimeMeasure)

(subclass TimeInterval Abstract)

(subclass TimeInterval ConstantQuantity)

(subclass TimeInterval Entity)

(subclass TimeInterval PhysicalQuantity)

(subclass TimeInterval Quantity)

(subclass TimeInterval TimeInterval)

(subclass TimeInterval TimeMeasure)

(subclass TimeInterval TimePosition)

(subclass TimeMeasure Abstract)

(subclass TimeMeasure ConstantQuantity)

(subclass TimeMeasure Entity)

(subclass TimeMeasure PhysicalQuantity)

(subclass TimeMeasure Quantity)

(subclass TimeMeasure TimeMeasure)

(subclass TimePoint Abstract)

(subclass TimePoint ConstantQuantity)

(subclass TimePoint Entity)

(subclass TimePoint PhysicalQuantity)

(subclass TimePoint Quantity)

(subclass TimePoint TimeMeasure)

(subclass TimePoint TimePoint)

(subclass TimePoint TimePosition)

(subclass TimePosition Abstract)

(subclass TimePosition ConstantQuantity)

(subclass TimePosition Entity)

(subclass TimePosition PhysicalQuantity)

(subclass TimePosition Quantity)

(subclass TimePosition TimeMeasure)

(subclass TimePosition TimePosition)

(subclass TimeZone Abstract)

(subclass TimeZone Attribute)

(subclass TimeZone Entity)

(subclass TimeZone RelationalAttribute)

(subclass TimeZone TimeZone)

(subclass Tissue BodySubstance)

(subclass Tissue Entity)

(subclass Tissue Mixture)

(subclass Tissue Object)

(subclass Tissue Physical)

(subclass Tissue SelfConnectedObject)

(subclass Tissue Substance)

(subclass Tissue Tissue)

(subclass TotalOrderingRelation Abstract)

(subclass TotalOrderingRelation AntisymmetricRelation)

(subclass TotalOrderingRelation BinaryRelation)

(subclass TotalOrderingRelation Entity)

(subclass TotalOrderingRelation PartialOrderingRelation)

(subclass TotalOrderingRelation ReflexiveRelation)

(subclass TotalOrderingRelation Relation)

(subclass TotalOrderingRelation TotalOrderingRelation)

(subclass TotalOrderingRelation TransitiveRelation)

(subclass TotalOrderingRelation TrichotomizingRelation)

(subclass TotalValuedRelation Abstract)

(subclass TotalValuedRelation Entity)

(subclass TotalValuedRelation Relation)

(subclass TotalValuedRelation TotalValuedRelation)

(subclass Touching Entity)

(subclass Touching Motion)

(subclass Touching Physical)

(subclass Touching Process)

(subclass Touching Touching)

(subclass Touching Transfer)

(subclass Touching Translocation)

(subclass TraitAttribute Abstract)

(subclass TraitAttribute Attribute)

(subclass TraitAttribute BiologicalAttribute)

(subclass TraitAttribute Entity)

(subclass TraitAttribute InternalAttribute)

(subclass TraitAttribute PsychologicalAttribute)

(subclass TraitAttribute TraitAttribute)

(subclass Transaction ChangeOfPossession)

(subclass Transaction DualObjectProcess)

(subclass Transaction Entity)

(subclass Transaction IntentionalProcess)

(subclass Transaction Physical)

(subclass Transaction Process)

(subclass Transaction SocialInteraction)

(subclass Transaction Transaction)

(subclass Transfer Entity)

(subclass Transfer Motion)

(subclass Transfer Physical)

(subclass Transfer Process)

(subclass Transfer Transfer)

(subclass Transfer Translocation)

(subclass TransitiveRelation Abstract)

(subclass TransitiveRelation BinaryRelation)

(subclass TransitiveRelation Entity)

(subclass TransitiveRelation Relation)

(subclass TransitiveRelation TransitiveRelation)

(subclass Transitway Entity)

(subclass Transitway Object)

(subclass Transitway Physical)

(subclass Transitway Region)

(subclass Transitway SelfConnectedObject)

(subclass Transitway Transitway)

(subclass Translating ContentDevelopment)

(subclass Translating DualObjectProcess)

(subclass Translating Entity)

(subclass Translating IntentionalProcess)

(subclass Translating Physical)

(subclass Translating Process)

(subclass Translating Translating)

(subclass Translocation Entity)

(subclass Translocation Motion)

(subclass Translocation Physical)

(subclass Translocation Process)

(subclass Translocation Translocation)

(subclass Transportation Entity)

(subclass Transportation Motion)

(subclass Transportation Physical)

(subclass Transportation Process)

(subclass Transportation Translocation)

(subclass Transportation Transportation)

(subclass TransportationDevice Artifact)

(subclass TransportationDevice CorpuscularObject)

(subclass TransportationDevice Device)

(subclass TransportationDevice Entity)

(subclass TransportationDevice Object)

(subclass TransportationDevice Physical)

(subclass TransportationDevice SelfConnectedObject)

(subclass TransportationDevice TransportationDevice)

(subclass Tree Abstract)

(subclass Tree Entity)

(subclass Tree Graph)

(subclass Tree Tree)

(subclass TrichotomizingRelation Abstract)

(subclass TrichotomizingRelation BinaryRelation)

(subclass TrichotomizingRelation Entity)

(subclass TrichotomizingRelation Relation)

(subclass TrichotomizingRelation TrichotomizingRelation)

(subclass TruthValue Abstract)

(subclass TruthValue Attribute)

(subclass TruthValue Entity)

(subclass TruthValue RelationalAttribute)

(subclass TruthValue TruthValue)

(subclass Tuesday Abstract)

(subclass Tuesday ConstantQuantity)

(subclass Tuesday Day)

(subclass Tuesday Entity)

(subclass Tuesday PhysicalQuantity)

(subclass Tuesday Quantity)

(subclass Tuesday TimeInterval)

(subclass Tuesday TimeMeasure)

(subclass Tuesday TimePosition)

(subclass Tuesday Tuesday)

(subclass TwoDimensionalAngle Abstract)

(subclass TwoDimensionalAngle Attribute)

(subclass TwoDimensionalAngle Entity)

(subclass TwoDimensionalAngle GeometricFigure)

(subclass TwoDimensionalAngle InternalAttribute)

(subclass TwoDimensionalAngle OpenTwoDimensionalFigure)

(subclass TwoDimensionalAngle ShapeAttribute)

(subclass TwoDimensionalAngle TwoDimensionalAngle)

(subclass TwoDimensionalAngle TwoDimensionalFigure)

(subclass TwoDimensionalFigure Abstract)

(subclass TwoDimensionalFigure Attribute)

(subclass TwoDimensionalFigure Entity)

(subclass TwoDimensionalFigure GeometricFigure)

(subclass TwoDimensionalFigure InternalAttribute)

(subclass TwoDimensionalFigure ShapeAttribute)

(subclass TwoDimensionalFigure TwoDimensionalFigure)

(subclass UnaryConstantFunctionQuantity Abstract)

(subclass UnaryConstantFunctionQuantity Entity)

(subclass UnaryConstantFunctionQuantity FunctionQuantity)

(subclass UnaryConstantFunctionQuantity PhysicalQuantity)

(subclass UnaryConstantFunctionQuantity Quantity)

(subclass UnaryConstantFunctionQuantity UnaryConstantFunctionQuantity)

(subclass UnaryFunction Abstract)

(subclass UnaryFunction BinaryRelation)

(subclass UnaryFunction Entity)

(subclass UnaryFunction Function)

(subclass UnaryFunction Relation)

(subclass UnaryFunction SingleValuedRelation)

(subclass UnaryFunction UnaryFunction)

(subclass Uncovering Entity)

(subclass Uncovering Motion)

(subclass Uncovering Physical)

(subclass Uncovering Process)

(subclass Uncovering Removing)

(subclass Uncovering Transfer)

(subclass Uncovering Translocation)

(subclass Uncovering Uncovering)

(subclass Ungrasping Detaching)

(subclass Ungrasping DualObjectProcess)

(subclass Ungrasping Entity)

(subclass Ungrasping Physical)

(subclass Ungrasping Process)

(subclass Ungrasping Ungrasping)

(subclass UnilateralGetting ChangeOfPossession)

(subclass UnilateralGetting Entity)

(subclass UnilateralGetting Getting)

(subclass UnilateralGetting IntentionalProcess)

(subclass UnilateralGetting Physical)

(subclass UnilateralGetting Process)

(subclass UnilateralGetting SocialInteraction)

(subclass UnilateralGetting UnilateralGetting)

(subclass UnilateralGiving ChangeOfPossession)

(subclass UnilateralGiving Entity)

(subclass UnilateralGiving Giving)

(subclass UnilateralGiving IntentionalProcess)

(subclass UnilateralGiving Physical)

(subclass UnilateralGiving Process)

(subclass UnilateralGiving SocialInteraction)

(subclass UnilateralGiving UnilateralGiving)

(subclass UniqueList Abstract)

(subclass UniqueList Entity)

(subclass UniqueList List)

(subclass UniqueList Relation)

(subclass UniqueList UniqueList)

(subclass UnitOfMeasure Abstract)

(subclass UnitOfMeasure Entity)

(subclass UnitOfMeasure PhysicalQuantity)

(subclass UnitOfMeasure Quantity)

(subclass UnitOfMeasure UnitOfMeasure)

(subclass UnitedKingdomGallon Abstract)

(subclass UnitedKingdomGallon ConstantQuantity)

(subclass UnitedKingdomGallon Entity)

(subclass UnitedKingdomGallon PhysicalQuantity)

(subclass UnitedKingdomGallon Quantity)

(subclass UnitedKingdomGallon UnitedKingdomGallon)

(subclass UnitedKingdomGallon VolumeMeasure)

(subclass UnitedStatesCent Abstract)

(subclass UnitedStatesCent ConstantQuantity)

(subclass UnitedStatesCent CurrencyMeasure)

(subclass UnitedStatesCent Entity)

(subclass UnitedStatesCent PhysicalQuantity)

(subclass UnitedStatesCent Quantity)

(subclass UnitedStatesCent UnitedStatesCent)

(subclass UnitedStatesDollar Abstract)

(subclass UnitedStatesDollar ConstantQuantity)

(subclass UnitedStatesDollar CurrencyMeasure)

(subclass UnitedStatesDollar Entity)

(subclass UnitedStatesDollar PhysicalQuantity)

(subclass UnitedStatesDollar Quantity)

(subclass UnitedStatesDollar UnitedStatesDollar)

(subclass UnitedStatesGallon Abstract)

(subclass UnitedStatesGallon ConstantQuantity)

(subclass UnitedStatesGallon Entity)

(subclass UnitedStatesGallon PhysicalQuantity)

(subclass UnitedStatesGallon Quantity)

(subclass UnitedStatesGallon UnitedStatesGallon)

(subclass UnitedStatesGallon VolumeMeasure)

(subclass ValidDeductiveArgument Abstract)

(subclass ValidDeductiveArgument Argument)

(subclass ValidDeductiveArgument DeductiveArgument)

(subclass ValidDeductiveArgument Entity)

(subclass ValidDeductiveArgument Proposition)

(subclass ValidDeductiveArgument ValidDeductiveArgument)

(subclass VariableArityRelation Abstract)

(subclass VariableArityRelation Entity)

(subclass VariableArityRelation Relation)

(subclass VariableArityRelation VariableArityRelation)

(subclass Vehicle Artifact)

(subclass Vehicle CorpuscularObject)

(subclass Vehicle Device)

(subclass Vehicle Entity)

(subclass Vehicle Object)

(subclass Vehicle Physical)

(subclass Vehicle SelfConnectedObject)

(subclass Vehicle TransportationDevice)

(subclass Vehicle Vehicle)

(subclass Verb ContentBearingPhysical)

(subclass Verb Entity)

(subclass Verb LinguisticExpression)

(subclass Verb Physical)

(subclass Verb Verb)

(subclass Verb Word)

(subclass VerbPhrase ContentBearingPhysical)

(subclass VerbPhrase Entity)

(subclass VerbPhrase LinguisticExpression)

(subclass VerbPhrase Phrase)

(subclass VerbPhrase Physical)

(subclass VerbPhrase VerbPhrase)

(subclass Vertebrate Agent)

(subclass Vertebrate Animal)

(subclass Vertebrate CorpuscularObject)

(subclass Vertebrate Entity)

(subclass Vertebrate Object)

(subclass Vertebrate OrganicObject)

(subclass Vertebrate Organism)

(subclass Vertebrate Physical)

(subclass Vertebrate SelfConnectedObject)

(subclass Vertebrate Vertebrate)

(subclass ViolentContest Contest)

(subclass ViolentContest Entity)

(subclass ViolentContest IntentionalProcess)

(subclass ViolentContest Physical)

(subclass ViolentContest Process)

(subclass ViolentContest SocialInteraction)

(subclass ViolentContest ViolentContest)

(subclass Virus Agent)

(subclass Virus CorpuscularObject)

(subclass Virus Entity)

(subclass Virus Microorganism)

(subclass Virus Object)

(subclass Virus OrganicObject)

(subclass Virus Organism)

(subclass Virus Physical)

(subclass Virus SelfConnectedObject)

(subclass Virus Virus)

(subclass VisualAttribute Abstract)

(subclass VisualAttribute Attribute)

(subclass VisualAttribute Entity)

(subclass VisualAttribute InternalAttribute)

(subclass VisualAttribute PerceptualAttribute)

(subclass VisualAttribute VisualAttribute)

(subclass Vitamin BiologicallyActiveSubstance)

(subclass Vitamin Entity)

(subclass Vitamin Nutrient)

(subclass Vitamin Object)

(subclass Vitamin Physical)

(subclass Vitamin SelfConnectedObject)

(subclass Vitamin Substance)

(subclass Vitamin Vitamin)

(subclass Vocalizing BodyMotion)

(subclass Vocalizing Entity)

(subclass Vocalizing Motion)

(subclass Vocalizing Physical)

(subclass Vocalizing Process)

(subclass Vocalizing Radiating)

(subclass Vocalizing RadiatingSound)

(subclass Vocalizing Vocalizing)

(subclass Volt Abstract)

(subclass Volt Entity)

(subclass Volt FunctionQuantity)

(subclass Volt PhysicalQuantity)

(subclass Volt Quantity)

(subclass Volt Volt)

(subclass VolumeMeasure Abstract)

(subclass VolumeMeasure ConstantQuantity)

(subclass VolumeMeasure Entity)

(subclass VolumeMeasure PhysicalQuantity)

(subclass VolumeMeasure Quantity)

(subclass VolumeMeasure VolumeMeasure)

(subclass Voting BiologicalProcess)

(subclass Voting Deciding)

(subclass Voting Entity)

(subclass Voting IntentionalProcess)

(subclass Voting IntentionalPsychologicalProcess)

(subclass Voting InternalChange)

(subclass Voting Physical)

(subclass Voting Process)

(subclass Voting PsychologicalProcess)

(subclass Voting Selecting)

(subclass Voting Voting)

(subclass Walking Ambulating)

(subclass Walking BodyMotion)

(subclass Walking Entity)

(subclass Walking Motion)

(subclass Walking Physical)

(subclass Walking Process)

(subclass Walking Translocation)

(subclass Walking Walking)

(subclass War Contest)

(subclass War Entity)

(subclass War IntentionalProcess)

(subclass War Physical)

(subclass War Process)

(subclass War SocialInteraction)

(subclass War ViolentContest)

(subclass War War)

(subclass WarmBloodedVertebrate Agent)

(subclass WarmBloodedVertebrate Animal)

(subclass WarmBloodedVertebrate CorpuscularObject)

(subclass WarmBloodedVertebrate Entity)

(subclass WarmBloodedVertebrate Object)

(subclass WarmBloodedVertebrate OrganicObject)

(subclass WarmBloodedVertebrate Organism)

(subclass WarmBloodedVertebrate Physical)

(subclass WarmBloodedVertebrate SelfConnectedObject)

(subclass WarmBloodedVertebrate Vertebrate)

(subclass WarmBloodedVertebrate WarmBloodedVertebrate)

(subclass Water CompoundSubstance)

(subclass Water Entity)

(subclass Water Object)

(subclass Water Physical)

(subclass Water PureSubstance)

(subclass Water SelfConnectedObject)

(subclass Water Substance)

(subclass Water Water)

(subclass WaterArea Entity)

(subclass WaterArea GeographicArea)

(subclass WaterArea Object)

(subclass WaterArea Physical)

(subclass WaterArea Region)

(subclass WaterArea WaterArea)

(subclass WaterCloud Cloud)

(subclass WaterCloud Entity)

(subclass WaterCloud GasMixture)

(subclass WaterCloud Mixture)

(subclass WaterCloud Object)

(subclass WaterCloud Physical)

(subclass WaterCloud SelfConnectedObject)

(subclass WaterCloud Substance)

(subclass WaterCloud WaterCloud)

(subclass WaterMotion Entity)

(subclass WaterMotion LiquidMotion)

(subclass WaterMotion Motion)

(subclass WaterMotion Physical)

(subclass WaterMotion Process)

(subclass WaterMotion WaterMotion)

(subclass Watt Abstract)

(subclass Watt Entity)

(subclass Watt FunctionQuantity)

(subclass Watt PhysicalQuantity)

(subclass Watt Quantity)

(subclass Watt Watt)

(subclass Weapon Artifact)

(subclass Weapon CorpuscularObject)

(subclass Weapon Device)

(subclass Weapon Entity)

(subclass Weapon Object)

(subclass Weapon Physical)

(subclass Weapon SelfConnectedObject)

(subclass Weapon Weapon)

(subclass WearableItem Artifact)

(subclass WearableItem CorpuscularObject)

(subclass WearableItem Entity)

(subclass WearableItem Object)

(subclass WearableItem Physical)

(subclass WearableItem SelfConnectedObject)

(subclass WearableItem WearableItem)

(subclass WeatherProcess Entity)

(subclass WeatherProcess Motion)

(subclass WeatherProcess Physical)

(subclass WeatherProcess Process)

(subclass WeatherProcess WeatherProcess)

(subclass Weber Abstract)

(subclass Weber Entity)

(subclass Weber FunctionQuantity)

(subclass Weber PhysicalQuantity)

(subclass Weber Quantity)

(subclass Weber Weber)

(subclass Wedding Communication)

(subclass Wedding ContentBearingPhysical)

(subclass Wedding ContentBearingProcess)

(subclass Wedding Declaring)

(subclass Wedding Entity)

(subclass Wedding IntentionalProcess)

(subclass Wedding LinguisticCommunication)

(subclass Wedding Physical)

(subclass Wedding Process)

(subclass Wedding SocialInteraction)

(subclass Wedding Wedding)

(subclass Wednesday Abstract)

(subclass Wednesday ConstantQuantity)

(subclass Wednesday Day)

(subclass Wednesday Entity)

(subclass Wednesday PhysicalQuantity)

(subclass Wednesday Quantity)

(subclass Wednesday TimeInterval)

(subclass Wednesday TimeMeasure)

(subclass Wednesday TimePosition)

(subclass Wednesday Wednesday)

(subclass Week Abstract)

(subclass Week ConstantQuantity)

(subclass Week Entity)

(subclass Week PhysicalQuantity)

(subclass Week Quantity)

(subclass Week TimeInterval)

(subclass Week TimeMeasure)

(subclass Week TimePosition)

(subclass Week Week)

(subclass WeekDuration Abstract)

(subclass WeekDuration ConstantQuantity)

(subclass WeekDuration Entity)

(subclass WeekDuration PhysicalQuantity)

(subclass WeekDuration Quantity)

(subclass WeekDuration TimeDuration)

(subclass WeekDuration TimeMeasure)

(subclass WeekDuration WeekDuration)

(subclass Wetting Entity)

(subclass Wetting Motion)

(subclass Wetting Physical)

(subclass Wetting Process)

(subclass Wetting Putting)

(subclass Wetting Transfer)

(subclass Wetting Translocation)

(subclass Wetting Wetting)

(subclass Wind Entity)

(subclass Wind GasMotion)

(subclass Wind Motion)

(subclass Wind Physical)

(subclass Wind Process)

(subclass Wind Wind)

(subclass Woman Agent)

(subclass Woman Animal)

(subclass Woman CognitiveAgent)

(subclass Woman CorpuscularObject)

(subclass Woman Entity)

(subclass Woman Hominid)

(subclass Woman Human)

(subclass Woman Mammal)

(subclass Woman Object)

(subclass Woman OrganicObject)

(subclass Woman Organism)

(subclass Woman Physical)

(subclass Woman Primate)

(subclass Woman SelfConnectedObject)

(subclass Woman SentientAgent)

(subclass Woman Vertebrate)

(subclass Woman WarmBloodedVertebrate)

(subclass Woman Woman)

(subclass Word ContentBearingPhysical)

(subclass Word Entity)

(subclass Word LinguisticExpression)

(subclass Word Physical)

(subclass Word Word)

(subclass Worm Agent)

(subclass Worm Animal)

(subclass Worm CorpuscularObject)

(subclass Worm Entity)

(subclass Worm Invertebrate)

(subclass Worm Object)

(subclass Worm OrganicObject)

(subclass Worm Organism)

(subclass Worm Physical)

(subclass Worm SelfConnectedObject)

(subclass Worm Worm)

(subclass Writing ContentDevelopment)

(subclass Writing Entity)

(subclass Writing IntentionalProcess)

(subclass Writing Physical)

(subclass Writing Process)

(subclass Writing Writing)

(subclass Year Abstract)

(subclass Year ConstantQuantity)

(subclass Year Entity)

(subclass Year PhysicalQuantity)

(subclass Year Quantity)

(subclass Year TimeInterval)

(subclass Year TimeMeasure)

(subclass Year TimePosition)

(subclass Year Year)

(subclass YearDuration Abstract)

(subclass YearDuration ConstantQuantity)

(subclass YearDuration Entity)

(subclass YearDuration PhysicalQuantity)

(subclass YearDuration Quantity)

(subclass YearDuration TimeDuration)

(subclass YearDuration TimeMeasure)

(subclass YearDuration YearDuration)

(subrelation DensityFn DensityFn)

(subrelation DensityFn PerFn)

(subrelation PerFn PerFn)

(subrelation SpeedFn PerFn)

(subrelation SpeedFn SpeedFn)

(subrelation age age)

(subrelation age measure)

(subrelation altitude altitude)

(subrelation altitude distance)

(subrelation ancestor ancestor)

(subrelation ancestor familyRelation)

(subrelation angleOfFigure angleOfFigure)

(subrelation angleOfFigure geometricPart)

(subrelation attends attends)

(subrelation attends experiencer)

(subrelation attribute attribute)

(subrelation attribute property)

(subrelation before before)

(subrelation before beforeOrEqual)

(subrelation beforeOrEqual beforeOrEqual)

(subrelation believes believes)

(subrelation believes inScopeOfInterest)

(subrelation bottom bottom)

(subrelation bottom part)

(subrelation bottom superficialPart)

(subrelation brother brother)

(subrelation brother familyRelation)

(subrelation brother sibling)

(subrelation completelyFills completelyFills)

(subrelation completelyFills located)

(subrelation completelyFills partiallyFills)

(subrelation completelyFills partlyLocated)

(subrelation component component)

(subrelation component part)

(subrelation connected connected)

(subrelation connectedEngineeringComponents connected)

(subrelation connectedEngineeringComponents connectedEngineeringComponents)

(subrelation connects connects)

(subrelation connectsEngineeringComponents connects)

(subrelation connectsEngineeringComponents connectsEngineeringComponents)

(subrelation considers considers)

(subrelation considers inScopeOfInterest)

(subrelation contains contains)

(subrelation contains partlyLocated)

(subrelation containsInformation containsInformation)

(subrelation containsInformation refers)

(subrelation containsInformation represents)

(subrelation crosses crosses)

(subrelation crosses traverses)

(subrelation date date)

(subrelation date time)

(subrelation daughter ancestor)

(subrelation daughter daughter)

(subrelation daughter familyRelation)

(subrelation daughter parent)

(subrelation depth depth)

(subrelation depth distance)

(subrelation desires desires)

(subrelation desires inScopeOfInterest)

(subrelation developmentalForm attribute)

(subrelation developmentalForm developmentalForm)

(subrelation developmentalForm property)

(subrelation diameter diameter)

(subrelation diameter length)

(subrelation diameter measure)

(subrelation diameter width)

(subrelation distance distance)

(subrelation during during)

(subrelation during overlapsTemporally)

(subrelation during temporalPart)

(subrelation element element)

(subrelation element instance)

(subrelation engineeringSubcomponent engineeringSubcomponent)

(subrelation engineeringSubcomponent part)

(subrelation engineeringSubcomponent properPart)

(subrelation equivalentContentClass equivalentContentClass)

(subrelation equivalentContentClass subsumesContentClass)

(subrelation equivalentContentInstance equivalentContentInstance)

(subrelation equivalentContentInstance subsumesContentInstance)

(subrelation exactlyLocated exactlyLocated)

(subrelation exactlyLocated located)

(subrelation exactlyLocated partlyLocated)

(subrelation experiencer experiencer)

(subrelation familyRelation familyRelation)

(subrelation father ancestor)

(subrelation father familyRelation)

(subrelation father father)

(subrelation father parent)

(subrelation fills completelyFills)

(subrelation fills fills)

(subrelation fills located)

(subrelation fills partiallyFills)

(subrelation fills partlyLocated)

(subrelation fills properlyFills)

(subrelation finishes finishes)

(subrelation finishes temporalPart)

(subrelation geographicSubregion geographicSubregion)

(subrelation geographicSubregion located)

(subrelation geographicSubregion part)

(subrelation geographicSubregion partlyLocated)

(subrelation geographicSubregion properPart)

(subrelation geometricPart geometricPart)

(subrelation geopoliticalSubdivision geographicSubregion)

(subrelation geopoliticalSubdivision geopoliticalSubdivision)

(subrelation geopoliticalSubdivision located)

(subrelation geopoliticalSubdivision part)

(subrelation geopoliticalSubdivision partlyLocated)

(subrelation geopoliticalSubdivision properPart)

(subrelation grasps connected)

(subrelation grasps grasps)

(subrelation grasps meetsSpatially)

(subrelation height height)

(subrelation height length)

(subrelation height measure)

(subrelation home home)

(subrelation home inhabits)

(subrelation husband husband)

(subrelation husband legalRelation)

(subrelation husband spouse)

(subrelation immediateInstance immediateInstance)

(subrelation immediateInstance instance)

(subrelation immediateSubclass immediateSubclass)

(subrelation immediateSubclass subclass)

(subrelation inScopeOfInterest inScopeOfInterest)

(subrelation inhabits inhabits)

(subrelation initialList initialList)

(subrelation initialList subList)

(subrelation instance instance)

(subrelation instrument instrument)

(subrelation instrument patient)

(subrelation interiorPart interiorPart)

(subrelation interiorPart part)

(subrelation involvedInEvent involvedInEvent)

(subrelation knows inScopeOfInterest)

(subrelation knows knows)

(subrelation legalRelation legalRelation)

(subrelation length length)

(subrelation length measure)

(subrelation located located)

(subrelation located partlyLocated)

(subrelation manner manner)

(subrelation manner property)

(subrelation measure measure)

(subrelation meetsSpatially connected)

(subrelation meetsSpatially meetsSpatially)

(subrelation member member)

(subrelation member part)

(subrelation modalAttribute modalAttribute)

(subrelation modalAttribute property)

(subrelation monetaryValue measure)

(subrelation monetaryValue monetaryValue)

(subrelation mother ancestor)

(subrelation mother familyRelation)

(subrelation mother mother)

(subrelation mother parent)

(subrelation names names)

(subrelation names refers)

(subrelation needs inScopeOfInterest)

(subrelation needs needs)

(subrelation origin involvedInEvent)

(subrelation origin origin)

(subrelation overlapsPartially connected)

(subrelation overlapsPartially overlapsPartially)

(subrelation overlapsPartially overlapsSpatially)

(subrelation overlapsSpatially connected)

(subrelation overlapsSpatially overlapsSpatially)

(subrelation overlapsTemporally overlapsTemporally)

(subrelation parent ancestor)

(subrelation parent familyRelation)

(subrelation parent parent)

(subrelation part part)

(subrelation partiallyFills located)

(subrelation partiallyFills partiallyFills)

(subrelation partiallyFills partlyLocated)

(subrelation partlyLocated partlyLocated)

(subrelation patient patient)

(subrelation penetrates connected)

(subrelation penetrates meetsSpatially)

(subrelation penetrates penetrates)

(subrelation penetrates traverses)

(subrelation piece part)

(subrelation piece piece)

(subrelation pointOfFigure geometricPart)

(subrelation pointOfFigure pointOfFigure)

(subrelation properPart part)

(subrelation properPart properPart)

(subrelation properlyFills located)

(subrelation properlyFills partiallyFills)

(subrelation properlyFills partlyLocated)

(subrelation properlyFills properlyFills)

(subrelation property property)

(subrelation realization realization)

(subrelation realization refers)

(subrelation realization represents)

(subrelation refers refers)

(subrelation relatedExternalConcept relatedExternalConcept)

(subrelation represents refers)

(subrelation represents represents)

(subrelation resource patient)

(subrelation resource resource)

(subrelation result patient)

(subrelation result result)

(subrelation sibling familyRelation)

(subrelation sibling sibling)

(subrelation side part)

(subrelation side side)

(subrelation side superficialPart)

(subrelation sister familyRelation)

(subrelation sister sibling)

(subrelation sister sister)

(subrelation son ancestor)

(subrelation son familyRelation)

(subrelation son parent)

(subrelation son son)

(subrelation spouse legalRelation)

(subrelation spouse spouse)

(subrelation starts starts)

(subrelation starts temporalPart)

(subrelation stays inhabits)

(subrelation stays stays)

(subrelation subCollection subCollection)

(subrelation subList subList)

(subrelation subOrganization subCollection)

(subrelation subOrganization subOrganization)

(subrelation subPlan subPlan)

(subrelation subPlan subProposition)

(subrelation subProposition subProposition)

(subrelation subclass subclass)

(subrelation subset subclass)

(subrelation subset subset)

(subrelation subsumedExternalConcept relatedExternalConcept)

(subrelation subsumedExternalConcept subsumedExternalConcept)

(subrelation subsumesContentClass subsumesContentClass)

(subrelation subsumesContentInstance subsumesContentInstance)

(subrelation subsumingExternalConcept relatedExternalConcept)

(subrelation subsumingExternalConcept subsumingExternalConcept)

(subrelation superficialPart part)

(subrelation superficialPart superficialPart)

(subrelation surface part)

(subrelation surface superficialPart)

(subrelation surface surface)

(subrelation synonymousExternalConcept relatedExternalConcept)

(subrelation synonymousExternalConcept synonymousExternalConcept)

(subrelation temporalPart temporalPart)

(subrelation temporallyBetween temporallyBetween)

(subrelation temporallyBetween temporallyBetweenOrEqual)

(subrelation temporallyBetweenOrEqual temporallyBetweenOrEqual)

(subrelation time time)

(subrelation top part)

(subrelation top superficialPart)

(subrelation top top)

(subrelation traverses traverses)

(subrelation truth property)

(subrelation truth truth)

(subrelation uniqueIdentifier names)

(subrelation uniqueIdentifier refers)

(subrelation uniqueIdentifier uniqueIdentifier)

(subrelation wants inScopeOfInterest)

(subrelation wants wants)

(subrelation weight measure)

(subrelation weight weight)

(subrelation width length)

(subrelation width measure)

(subrelation width width)

(subrelation wife legalRelation)

(subrelation wife spouse)

(subrelation wife wife)

(successorAttribute NonFullyFormed FullyFormed)

(synonymousExternalConcept "average" average EnglishLanguage)

(termFormat en Abstract "abstract")

(termFormat en Address "address")

(termFormat en Adjective "adjective")

(termFormat en Adverb "adverb")

(termFormat en Advertising "advertising")

(termFormat en AgeGroup "age group")

(termFormat en Agent "agent")

(termFormat en AlethicAttribute "alethic attribute")

(termFormat en Alga "alga")

(termFormat en Amphibian "amphibian")

(termFormat en AnatomicalStructure "anatomical structure")

(termFormat en AngleMeasure "angle measure")

(termFormat en AnimacyAttribute "animacy attribute")

(termFormat en Animal "animal")

(termFormat en AnimalLanguage "animal language")

(termFormat en AntisymmetricRelation "antisymmetric relation")

(termFormat en Ape "ape")

(termFormat en April "April")

(termFormat en AquaticMammal "aquatic mammal")

(termFormat en Arachnid "arachnid")

(termFormat en AreaMeasure "area measure")

(termFormat en ArtWork "art work")

(termFormat en Arthropod "arthropod")

(termFormat en Article "article")

(termFormat en Artifact "artifact")

(termFormat en ArtificialLanguage "artificial language")

(termFormat en AsexualReproduction "asexual reproduction")

(termFormat en Asleep "asleep")

(termFormat en AssociativeFunction "associative function")

(termFormat en AstronomicalBody "astronomical body")

(termFormat en AsymmetricRelation "asymmetric relation")

(termFormat en Atom "atom")

(termFormat en AtomicNucleus "atomic nucleus")

(termFormat en Attaching "attaching")

(termFormat en Attribute "attribute")

(termFormat en August "August")

(termFormat en Awake "awake")

(termFormat en Bacterium "bacterium")

(termFormat en Battle "battle")

(termFormat en Betting "betting")

(termFormat en Beverage "beverage")

(termFormat en BinaryFunction "binary function")

(termFormat en BinaryNumber "binary number")

(termFormat en BinaryPredicate "binary predicate")

(termFormat en BinaryRelation "binary relation")

(termFormat en BiologicalAttribute "biological attribute")

(termFormat en BiologicalProcess "biological process")

(termFormat en BiologicallyActiveSubstance "biologically active substance")

(termFormat en Bird "bird")

(termFormat en Birth "birth")

(termFormat en Blood "blood")

(termFormat en BodyCovering "body covering")

(termFormat en BodyJunction "body junction")

(termFormat en BodyMotion "body motion")

(termFormat en BodyPart "body part")

(termFormat en BodySubstance "body substance")

(termFormat en BodyVessel "body vessel")

(termFormat en Boiling "boiling")

(termFormat en Bone "bone")

(termFormat en Book "book")

(termFormat en Borrowing "borrowing")

(termFormat en Breathing "breathing")

(termFormat en Building "building")

(termFormat en Buying "buying")

(termFormat en Calculating "calculating")

(termFormat en Canine "canine")

(termFormat en Carbohydrate "carbohydrate")

(termFormat en Carnivore "carnivore")

(termFormat en CaseRole "case role")

(termFormat en Cell "cell")

(termFormat en Certificate "certificate")

(termFormat en ChangeOfPossession "change of possession")

(termFormat en Character "character")

(termFormat en ChemicalDecomposition "chemical decomposition")

(termFormat en ChemicalProcess "chemical process")

(termFormat en ChemicalSynthesis "chemical synthesis")

(termFormat en City "city")

(termFormat en Class "class")

(termFormat en Classifying "classifying")

(termFormat en Clothing "clothing")

(termFormat en CognitiveAgent "cognitive agent")

(termFormat en ColdBloodedVertebrate "cold blooded vertebrate")

(termFormat en Collection "collection")

(termFormat en ColorAttribute "color attribute")

(termFormat en Coloring "coloring")

(termFormat en Combining "combining")

(termFormat en Combustion "combustion")

(termFormat en Committing "committing")

(termFormat en Communication "communication")

(termFormat en CommutativeFunction "commutative function")

(termFormat en Comparing "comparing")

(termFormat en ComplexNumber "complex number")

(termFormat en CompoundSubstance "compound substance")

(termFormat en ComputerLanguage "computer language")

(termFormat en ComputerProgram "computer program")

(termFormat en Condensing "condensing")

(termFormat en Confining "confining")

(termFormat en ConsciousnessAttribute "consciousness attribute")

(termFormat en ConstantQuantity "constant quantity")

(termFormat en ConstructedLanguage "constructed language")

(termFormat en Constructing "constructing")

(termFormat en ContentBearingObject "content bearing object")

(termFormat en ContentDevelopment "content development")

(termFormat en Contest "contest")

(termFormat en ContestAttribute "contest attribute")

(termFormat en Continent "continent")

(termFormat en ContinuousFunction "continuous function")

(termFormat en Cooking "cooking")

(termFormat en Cooling "cooling")

(termFormat en Cooperation "cooperation")

(termFormat en Corporation "corporation")

(termFormat en CorpuscularObject "corpuscular object")

(termFormat en Counting "counting")

(termFormat en Covering "covering")

(termFormat en Creation "creation")

(termFormat en Crustacean "crustacean")

(termFormat en CurrencyMeasure "currency measure")

(termFormat en Cutting "cutting")

(termFormat en Damaging "damaging")

(termFormat en Dancing "dancing")

(termFormat en Day "day")

(termFormat en Death "death")

(termFormat en December "December")

(termFormat en Declaring "declaring")

(termFormat en Decoding "decoding")

(termFormat en Decreasing "decreasing")

(termFormat en DeonticAttribute "deontic attribute")

(termFormat en Destruction "destruction")

(termFormat en Detaching "detaching")

(termFormat en DevelopmentalAttribute "developmental attribute")

(termFormat en Device "device")

(termFormat en DiagnosticProcess "diagnostic process")

(termFormat en DirectedGraph "directed graph")

(termFormat en Directing "directing")

(termFormat en DirectionChange "direction change")

(termFormat en DirectionalAttribute "directional attribute")

(termFormat en DiseaseOrSyndrome "disease or syndrome")

(termFormat en Disseminating "disseminating")

(termFormat en Drinking "drinking")

(termFormat en Driving "driving")

(termFormat en Drying "drying")

(termFormat en DualObjectProcess "dual object process")

(termFormat en Eating "eating")

(termFormat en EducationalOrganization "educational organization")

(termFormat en EducationalProcess "educational process")

(termFormat en Electron "electron")

(termFormat en ElementalSubstance "elemental substance")

(termFormat en EmotionalState "emotional state")

(termFormat en Encoding "encoding")

(termFormat en EngineeringComponent "engineering component")

(termFormat en EngineeringConnection "engineering connection")

(termFormat en Entity "entity")

(termFormat en Enzyme "enzyme")

(termFormat en EquivalenceRelation "equivalence relation")

(termFormat en EthnicGroup "ethnic group")

(termFormat en EvenInteger "even integer")

(termFormat en Expressing "expressing")

(termFormat en Fabric "fabric")

(termFormat en FamilyGroup "family group")

(termFormat en FatTissue "fat tissue")

(termFormat en February "February")

(termFormat en Feline "feline")

(termFormat en Fern "fern")

(termFormat en FieldOfStudy "field of study")

(termFormat en FinancialTransaction "financial transaction")

(termFormat en FiniteSet "finite set")

(termFormat en Fish "fish")

(termFormat en FloweringPlant "flowering plant")

(termFormat en Food "food")

(termFormat en Formula "formula")

(termFormat en Freezing "freezing")

(termFormat en FreshWaterArea "fresh water area")

(termFormat en Friday "Friday")

(termFormat en FruitOrVegetable "fruit or vegetable")

(termFormat en Function "function")

(termFormat en FunctionQuantity "function quantity")

(termFormat en Fungus "fungus")

(termFormat en Game "game")

(termFormat en GeographicArea "geographic area")

(termFormat en GeopoliticalArea "geopolitical area")

(termFormat en Getting "getting")

(termFormat en Giving "giving")

(termFormat en Gland "gland")

(termFormat en Government "government")

(termFormat en Graduation "graduation")

(termFormat en Graph "graph")

(termFormat en GraphArc "graph arc")

(termFormat en GraphCircuit "graph circuit")

(termFormat en GraphElement "graph element")

(termFormat en GraphLoop "graph loop")

(termFormat en GraphNode "graph node")

(termFormat en GraphPath "graph path")

(termFormat en Group "group")

(termFormat en Growth "growth")

(termFormat en Guiding "guiding")

(termFormat en Hearing "hearing")

(termFormat en Heating "heating")

(termFormat en Hiring "hiring")

(termFormat en Hole "hole")

(termFormat en Hominid "hominid")

(termFormat en HoofedMammal "hoofed mammal")

(termFormat en Hormone "hormone")

(termFormat en Hour "hour")

(termFormat en Human "human")

(termFormat en HumanLanguage "human language")

(termFormat en Icon "icon")

(termFormat en ImaginaryNumber "imaginary number")

(termFormat en Impacting "impacting")

(termFormat en Impelling "impelling")

(termFormat en Increasing "increasing")

(termFormat en InformationMeasure "information measure")

(termFormat en Ingesting "ingesting")

(termFormat en Injuring "injuring")

(termFormat en Insect "insect")

(termFormat en Integer "integer")

(termFormat en IntentionalProcess "intentional process")

(termFormat en IntentionalPsychologicalProcess "intentional psychological process")

(termFormat en InternalAttribute "internal attribute")

(termFormat en InternalChange "internal change")

(termFormat en IntransitiveRelation "intransitive relation")

(termFormat en Invertebrate "invertebrate")

(termFormat en Investigating "investigating")

(termFormat en IrrationalNumber "irrational number")

(termFormat en IrreflexiveRelation "irreflexive relation")

(termFormat en Island "island")

(termFormat en January "January")

(termFormat en JoiningAnOrganization "joining an organization")

(termFormat en July "July")

(termFormat en June "June")

(termFormat en Keeping "keeping")

(termFormat en Killing "killing")

(termFormat en LandArea "land area")

(termFormat en Language "language")

(termFormat en LeapYear "leap year")

(termFormat en Learning "learning")

(termFormat en LeavingAnOrganization "leaving an organization")

(termFormat en LegalAction "legal action")

(termFormat en Lending "lending")

(termFormat en LengthMeasure "length measure")

(termFormat en LinguisticExpression "linguistic expression")

(termFormat en List "list")

(termFormat en Machine "machine")

(termFormat en Maintaining "maintaining")

(termFormat en Making "making")

(termFormat en Mammal "mammal")

(termFormat en Managing "managing")

(termFormat en Maneuver "maneuver")

(termFormat en Manufacture "manufacture")

(termFormat en March "March")

(termFormat en Marsupial "marsupial")

(termFormat en MassMeasure "mass measure")

(termFormat en Matriculation "matriculation")

(termFormat en May "May")

(termFormat en Measuring "measuring")

(termFormat en Meat "meat")

(termFormat en Meeting "meeting")

(termFormat en Melting "melting")

(termFormat en Metal "metal")

(termFormat en Microorganism "microorganism")

(termFormat en MilitaryProcess "military process")

(termFormat en Mineral "mineral")

(termFormat en Minute "minute")

(termFormat en Mixture "mixture")

(termFormat en Molecule "molecule")

(termFormat en Mollusk "mollusk")

(termFormat en Monday "Monday")

(termFormat en Monkey "monkey")

(termFormat en Month "month")

(termFormat en Morpheme "morpheme")

(termFormat en Moss "moss")

(termFormat en Motion "motion")

(termFormat en MotionPicture "motion picture")

(termFormat en MultiGraph "multi graph")

(termFormat en Muscle "muscle")

(termFormat en Music "music")

(termFormat en MusicalInstrument "musical instrument")

(termFormat en MutuallyDisjointClass "mutually disjoint class")

(termFormat en Myriapod "myriapod")

(termFormat en Nation "nation")

(termFormat en NaturalLanguage "natural language")

(termFormat en NegativeInteger "negative integer")

(termFormat en NegativeRealNumber "negative real number")

(termFormat en Neutron "neutron")

(termFormat en NonFloweringPlant "non flowering plant")

(termFormat en NonnegativeInteger "nonnegative integer")

(termFormat en NonnegativeRealNumber "nonnegative real number")

(termFormat en NormativeAttribute "normative attribute")

(termFormat en Noun "noun")

(termFormat en NounPhrase "noun phrase")

(termFormat en November "November")

(termFormat en Number "number")

(termFormat en NumberE "number e")

(termFormat en Nutrient "nutrient")

(termFormat en Object "object")

(termFormat en ObjectAttitude "object attitude")

(termFormat en ObjectiveNorm "objective norm")

(termFormat en October "October")

(termFormat en OddInteger "odd integer")

(termFormat en OlfactoryAttribute "olfactory attribute")

(termFormat en OneToOneFunction "one to one function")

(termFormat en Ordering "ordering")

(termFormat en Organ "organ")

(termFormat en OrganOrTissueProcess "organ or tissueprocess")

(termFormat en OrganicObject "organic object")

(termFormat en Organism "organism")

(termFormat en OrganismProcess "organism process")

(termFormat en Organization "organization")

(termFormat en OrganizationalProcess "organizational process")

(termFormat en PairwiseDisjointClass "pairwise disjoint class")

(termFormat en PartialOrderingRelation "partial ordering relation")

(termFormat en PartialValuedRelation "partial valued relation")

(termFormat en Patent "patent")

(termFormat en PathologicProcess "pathologic process")

(termFormat en Perception "perception")

(termFormat en PerceptualAttribute "perceptual attribute")

(termFormat en Periodical "periodical")

(termFormat en Phrase "phrase")

(termFormat en Physical "physical")

(termFormat en PhysicalQuantity "physical quantity")

(termFormat en PhysicalState "physical state")

(termFormat en PhysiologicProcess "physiologic process")

(termFormat en Pi "pi")

(termFormat en Plan "plan")

(termFormat en PlaneAngleMeasure "plane angle measure")

(termFormat en Planning "planning")

(termFormat en Plant "plant")

(termFormat en Poisoning "poisoning")

(termFormat en Poking "poking")

(termFormat en PoliticalOrganization "political organization")

(termFormat en PoliticalProcess "political process")

(termFormat en Position "position")

(termFormat en PositionalAttribute "positional attribute")

(termFormat en PositiveInteger "positive integer")

(termFormat en PositiveRealNumber "positive real number")

(termFormat en Predicate "predicate")

(termFormat en Predicting "predicting")

(termFormat en PrepositionalPhrase "prepositional phrase")

(termFormat en Pretending "pretending")

(termFormat en PrimaryColor "primary color")

(termFormat en Primate "primate")

(termFormat en PrimeNumber "prime number")

(termFormat en ProbabilityRelation "probability relation")

(termFormat en Procedure "procedure")

(termFormat en Process "process")

(termFormat en Product "product")

(termFormat en Proposition "proposition")

(termFormat en PropositionalAttitude "propositional attitude")

(termFormat en Protein "protein")

(termFormat en Proton "proton")

(termFormat en PseudoGraph "pseudo graph")

(termFormat en PsychologicalAttribute "psychological attribute")

(termFormat en PsychologicalDysfunction "psychological dysfunction")

(termFormat en PsychologicalProcess "psychological process")

(termFormat en Publication "publication")

(termFormat en PureSubstance "pure substance")

(termFormat en Pursuing "pursuing")

(termFormat en Putting "putting")

(termFormat en Quantity "quantity")

(termFormat en QuantityChange "quantity change")

(termFormat en QuaternaryFunction "quaternary function")

(termFormat en QuaternaryPredicate "quaternary predicate")

(termFormat en QuaternaryRelation "quaternary relation")

(termFormat en Questioning "questioning")

(termFormat en QuintaryPredicate "quintary predicate")

(termFormat en QuintaryRelation "quintary relation")

(termFormat en Radiating "radiating")

(termFormat en RadiatingLight "radiating light")

(termFormat en RadiatingSound "radiating sound")

(termFormat en RationalNumber "rational number")

(termFormat en Reading "reading")

(termFormat en RealNumber "real number")

(termFormat en Reasoning "reasoning")

(termFormat en RecreationOrExercise "recreation or exercise")

(termFormat en ReflexiveRelation "reflexive relation")

(termFormat en Region "region")

(termFormat en RegulatoryProcess "regulatory process")

(termFormat en Relation "relation")

(termFormat en RelationExtendedToQuantities "relation extended to quantities")

(termFormat en RelationalAttribute "relational attribute")

(termFormat en ReligiousOrganization "religious organization")

(termFormat en ReligiousProcess "religious process")

(termFormat en Remembering "remembering")

(termFormat en Removing "removing")

(termFormat en Repairing "repairing")

(termFormat en Replication "replication")

(termFormat en ReproductiveBody "reproductive body")

(termFormat en Reptile "reptile")

(termFormat en Requesting "requesting")

(termFormat en Rodent "rodent")

(termFormat en Room "room")

(termFormat en SaltWaterArea "salt water area")

(termFormat en SaturationAttribute "saturation attribute")

(termFormat en Saturday "Saturday")

(termFormat en Second "second")

(termFormat en Seeing "seeing")

(termFormat en Selecting "selecting")

(termFormat en SelfConnectedObject "self connected object")

(termFormat en Selling "selling")

(termFormat en Sentence "sentence")

(termFormat en SentientAgent "sentient agent")

(termFormat en Separating "separating")

(termFormat en September "September")

(termFormat en SequenceFunction "sequence function")

(termFormat en Series "series")

(termFormat en Set "set")

(termFormat en SetOrClass "set or class")

(termFormat en SexAttribute "sex attribute")

(termFormat en SexualReproduction "sexual reproduction")

(termFormat en ShapeAttribute "shape attribute")

(termFormat en ShapeChange "shape change")

(termFormat en Shooting "shooting")

(termFormat en SingleValuedRelation "single valued relation")

(termFormat en Smelling "smelling")

(termFormat en SocialInteraction "social interaction")

(termFormat en SocialRole "social role")

(termFormat en SolidAngleMeasure "solid angle measure")

(termFormat en Solution "solution")

(termFormat en SoundAttribute "sound attribute")

(termFormat en SpatialRelation "spatial relation")

(termFormat en Sport "sport")

(termFormat en StateChange "state change")

(termFormat en StateOfMind "state of mind")

(termFormat en StateOrProvince "state or province")

(termFormat en StaticWaterArea "static water area")

(termFormat en Stating "stating")

(termFormat en StationaryArtifact "stationary artifact")

(termFormat en StreamWaterArea "stream water area")

(termFormat en SubatomicParticle "subatomic particle")

(termFormat en SubjectiveAssessmentAttribute "subjective assessment attribute")

(termFormat en Substance "substance")

(termFormat en Substituting "substituting")

(termFormat en Summary "summary")

(termFormat en Sunday "Sunday")

(termFormat en SurfaceChange "surface change")

(termFormat en Surgery "surgery")

(termFormat en Swimming "swimming")

(termFormat en SymbolicString "symbolic string")

(termFormat en SymmetricRelation "symmetric relation")

(termFormat en SystemeInternationalUnit "systeme international unit")

(termFormat en TactilePerception "tactile perception")

(termFormat en TasteAttribute "taste attribute")

(termFormat en Tasting "tasting")

(termFormat en TemperatureMeasure "temperature measure")

(termFormat en TemporalRelation "temporal relation")

(termFormat en TerminatingEmployment "terminating employment")

(termFormat en TernaryFunction "ternary function")

(termFormat en TernaryPredicate "ternary predicate")

(termFormat en TernaryRelation "ternary relation")

(termFormat en Text "text")

(termFormat en TherapeuticProcess "therapeutic process")

(termFormat en Thursday "Thursday")

(termFormat en TimeDependentQuantity "time dependent quantity")

(termFormat en TimeDuration "time duration")

(termFormat en TimeInterval "time interval")

(termFormat en TimeMeasure "time measure")

(termFormat en TimePoint "time point")

(termFormat en TimePosition "time position")

(termFormat en TimeZone "time zone")

(termFormat en Tissue "tissue")

(termFormat en TotalOrderingRelation "total ordering relation")

(termFormat en TotalValuedRelation "total valued relation")

(termFormat en Touching "touching")

(termFormat en TraitAttribute "trait attribute")

(termFormat en Transaction "transaction")

(termFormat en Transfer "transfer")

(termFormat en TransitiveRelation "transitive relation")

(termFormat en Transportation "transportation")

(termFormat en TransportationDevice "transportation device")

(termFormat en Tree "tree")

(termFormat en TrichotomizingRelation "trichotomizing relation")

(termFormat en TruthValue "truth value")

(termFormat en Tuesday "Tuesday")

(termFormat en UnaryConstantFunctionQuantity "unary constant functionquantity")

(termFormat en UnaryFunction "unary function")

(termFormat en Unconscious "unconscious")

(termFormat en Uncovering "uncovering")

(termFormat en UnilateralGetting "unilateral getting")

(termFormat en UnilateralGiving "unilateral giving")

(termFormat en UniqueList "unique list")

(termFormat en UnitOfMeasure "unit of measure")

(termFormat en VariableArityRelation "variable arity relation")

(termFormat en Verb "verb")

(termFormat en VerbPhrase "verb phrase")

(termFormat en Vertebrate "vertebrate")

(termFormat en ViolentContest "violent contest")

(termFormat en Virus "virus")

(termFormat en VisualAttribute "visual attribute")

(termFormat en Vitamin "vitamin")

(termFormat en VolumeMeasure "volume measure")

(termFormat en Walking "walking")

(termFormat en War "war")

(termFormat en WarmBloodedVertebrate "warm blooded vertebrate")

(termFormat en Water "water")

(termFormat en WaterArea "water area")

(termFormat en Weapon "weapon")

(termFormat en Wednesday "Wednesday")

(termFormat en Week "week")

(termFormat en Wetting "wetting")

(termFormat en Word "word")

(termFormat en Worm "worm")

(termFormat en Writing "writing")

(termFormat en Year "year")

(trichotomizingOn greaterThan RealNumber)

(trichotomizingOn greaterThanOrEqualTo RealNumber)

(trichotomizingOn lessThan RealNumber)

(trichotomizingOn lessThanOrEqualTo RealNumber)

