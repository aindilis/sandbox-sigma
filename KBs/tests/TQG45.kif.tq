(note TQG45)  ;; boolean version

;; Division by 0: The underlying code that implements DivisionFn
;; should be defensive enough to prevent anything bad from happening.

(instance testPred45-1 TernaryPredicate)
(domain testPred45-1 1 Number)
(domain testPred45-1 2 Number)
(domain testPred45-1 3 Number)

(instance testPred45-2 QuaternaryPredicate)
(domain testPred45-2 1 Number)
(domain testPred45-2 2 Number)
(domain testPred45-2 3 Number)
(domain testPred45-2 4 Number)

(=>
  (and
    (testPred45-1 ?X ?Y ?Z)
    (equal ?ANS (DivisionFn (AdditionFn ?X ?Y) ?Z)))
  (testPred45-2 ?X ?Y ?Z ?ANS))

(instance 5 Number)
(instance 6 Number)
(instance 0 Number)

(testPred45-1 5 6 0)

(query (exists (?NUM1 ?NUM2 ?NUM3 ?NUM4) (testPred45-2 ?NUM1 ?NUM2 ?NUM3 ?NUM4)))

(answer yes)


;; This test currently fails, but exists for its possible
;; side-effects, not for the query answer.  It's not clear what the
;; answer should be.
