(note TQG14)  ;; boolean version

(instance Atom14-1 Atom)

(instance Nucleus14-1 AtomicNucleus)

(component Nucleus14-1 Atom14-1)

(query (not (exists (?NUCLEUS) 
              (and 
                (instance ?NUCLEUS AtomicNucleus) 
                (component ?NUCLEUS Atom14-1) 
                (not (equal ?NUCLEUS Nucleus14-1))))))

(answer yes)

;; This test cannot succeed, because the rule below can never be
;; satisfied.  Atom is not a subclass of CorpuscularObject, and
;; there is no way to prove that ?ATOM is both an Atom and a
;; CorpuscularObject.  Either the argument types of component
;; should be broadened, or part should be used instead of
;; component in the rule below.

;; (=> 
;;   (instance ?ATOM CorpuscularObject) 
;;   (=> 
;;     (instance ?ATOM Atom) 
;;     (forall (?NUCLEUS1 ?NUCLEUS2) 
;;       (=> 
;;         (and 
;;           (component ?NUCLEUS1 ?ATOM) 
;;           (component ?NUCLEUS2 ?ATOM) 
;;           (instance ?NUCLEUS1 AtomicNucleus) 
;;           (instance ?NUCLEUS2 AtomicNucleus)) 
;;         (equal ?NUCLEUS1 ?NUCLEUS2)))))

